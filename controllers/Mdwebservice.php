<?php if (!defined('_VALID_PHP')) exit('Direct access to this location is not allowed.');

/**
 * Mdwebservice Class 
 * 
 * @package     IA PHPframework
 * @subpackage	Middleware
 * @category	Webservice
 * @author	B.Och-Erdene <ocherdene@veritech.mn>
 * @link	http://www.interactive.mn/PHPframework/Middleware/Mdwebservice
 */

class Mdwebservice extends Controller {

    public static $processMetaDataId = null;
    public static $paramRealPath = null;
    private static $uploadedFiles = array();
    public static $uploadedPath = 'process/';
    private static $viewPath = 'middleware/views/webservice/';
    public static $defaultWindowWidth = 850;
    public static $defaultWindowHeight = 'auto';
    public static $defaultColumnCount = 2;
    public static $defaultRowColumnCount = 1;
    public static $defaultLabelWidth = 23;
    public static $gfServiceAddress = GF_SERVICE_ADDRESS;
    public static $expressionCacheTime = 144000000;
    public static $tableWidth = 0;
    public static $tablePercentWidth = 0;
    public static $isGroupRender = 0;
    public static $processCode = null;
    public static $selectedRowId = null;
    public static $cacheExpressionMessage = array();
    public static $pfTranslationValArr = array(1);
    public static $fillParamData = array();
    public static $layoutDisplayOrder = array();
    public static $layoutSectionOrder = array();
    public static $isHistoryControl = false;
    public static $isLogViewMode = false;
    public static $bpActionType = null;
    public static $isLayoutRender = false;
    public static $renderLayoutSectionParamFnc = null;
    public static $renderParamControlFnc = null;
    public static $renderLayoutSectionRowFnc = null;
    public static $fieldCssStyle = null;
    public static $refStructureId = null;
    public static $sections = array();
    public static $layoutExistsParam = array();

    public function __construct() {
        parent::__construct();
        Auth::handleLogin();
    }
    
    public function findRowKeyValFillData($fillParamData, $key) {

        if ($fillParamData && isset($fillParamData[$key])) {
            return $fillParamData[$key];
        }

        return null;
    }
    
    public function setLookupValFillData($fillParamData, $key) {

        if ($fillParamData && isset($fillParamData[$key])) {
            return self::setLookupRowVal($fillParamData[$key]);
        }

        return null;
    }
    
    public function setLookupRowVal($row) {
        if (is_array($row)) {
            if (isset($row['id'])) {
                return array(
                    'META_VALUE_ID' => $row['id'], 
                    'META_VALUE_CODE' => isset($row['code']) ? $row['code'] : '', 
                    'META_VALUE_NAME' => isset($row['name']) ? $row['name'] : '', 
                    'rowData' => isset($row['rowdata']) ? htmlentities(str_replace('&quot;', '\\&quot;', json_encode($row['rowdata'], JSON_UNESCAPED_UNICODE)), ENT_QUOTES, 'UTF-8') : ''
                );
            }
            return null;
        } else {
            return $row;
        }
    } 
    
    public function renderRadioControl($processMetaDataId, $param, $controlName, $paramName, $fillParamData, $isCriteriaOption = false) {
        
        $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];
            
        $cache = phpFastCache();
        $dataRows = $cache->get('bpStarLookup_'.$processMetaDataId.'_'.$lookupMetaDataId);

        if ($dataRows == null) {
            
            $paramRealPath = $param['PARAM_REAL_PATH'];
            
            $lookUpParam = array(
                'systemMetaGroupId' => $lookupMetaDataId,
                'showQuery' => 0, 
                'ignorePermission' => 1 
            );
            
            $this->load->model('mdobject', 'middleware/models/');
        
            $attributes = $this->model->getDataViewMetaValueAttributes($processMetaDataId, $paramRealPath, $lookupMetaDataId);

            if (isset($attributes['isDefaultValues'])) {
                $defaultData = Mdwebservice::getParamDefaultValues($processMetaDataId, $paramRealPath, $lookupMetaDataId);
                $idField = issetDefaultVal($attributes['id'], 'id');

                foreach ($defaultData as $dVal) {
                    $lookUpParam['criteria'][$idField][] = array(
                        'operator' => '=',
                        'operand' => $dVal['VALUE_ID']
                    );
                }
            }

            $result = Webservice::runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

            if (isset($result['result']) && count($result['result']) > 0) {
                
                unset($result['result']['aggregatecolumns']);
                unset($result['result']['paging']); 

                $dataRows = $result['result'];
                $cache->set('bpStarLookup_'.$processMetaDataId.'_'.$lookupMetaDataId, $dataRows, Mdwebservice::$expressionCacheTime);
            }
        }
        
        $displayField = strtolower($param['DISPLAY_FIELD']);
        $valueField = strtolower($param['VALUE_FIELD']);
            
        $radio = $radioHidden = '';
        $indexMax = 5;

        if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
            
            $radio = '<div class="radio-list" data-in-param="'.$param['GROUP_CONFIG_PARAM_PATH'].'">';
            $radioHidden = '<div class="hidden hidden-seemore-'. $processMetaDataId.'_'.$lookupMetaDataId .'"><div class="radio-list" style="padding: 15px; position: relative; top: -10px;">';
            
            $checkedValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']); 
            
            if ($fillParamValue = Mdwebservice::setLookupValFillData($fillParamData, $paramName)) {
                $checkedValue = $fillParamValue;
                if (isset($checkedValue['META_VALUE_ID'])) {
                    $checkedValue = $checkedValue['META_VALUE_ID'];
                }
            }
            
            if (count($dataRows) > 100) {
                $sizeHeight = 1;
                $radioHiddenClass = '3';
            } else {
                $sizeHeight = 0;
                $radioHiddenClass = '6';
            }
            
            $showMaxRowsLength = issetParam($param['SHOW_MAX_ROWS_LENGTH']);
                        
            foreach ($dataRows as $key => $dataRow) {
                
                $checked = '';
                
                if ($isCriteriaOption) {
                    
                    if ($key < $indexMax) {
                        
                        if ($dataRow[$valueField] == $checkedValue) {
                            $checked = ' checked="checked"';
                        } 

                        $radio .= '<label class="radio-inline">';
                        $radio .= '<input type="radio" name="'.$controlName.'" data-path="'.$param['PARAM_REAL_PATH'].'" value="'.$dataRow[$valueField].'"'.$checked.'/> '.$dataRow[$displayField];
                        $radio .= '</label>';

                    } else {
                        
                        $radioHidden .= '<div class="col-md-'. $radioHiddenClass .'">';
                        if ($dataRow[$valueField] == $checkedValue) {
                            $checked = ' checked="checked"';
                        } 

                        $radioHidden .= '<label class="radio-inline" style="padding-left:0">';
                        $radioHidden .= '<input type="radio" class="notuniform" onclick="seeMoreDvSelection(this, \''. $dataRow[$displayField] .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\')" name="'.$controlName.'" data-path="'.$param['PARAM_REAL_PATH'].'" value="'.$dataRow[$valueField].'"'.$checked.'> <span style="position: relative; top: -3px;">'.$dataRow[$displayField].'</span></label>';
                        $radioHidden .= '</div>';
                    }
                    
                } else {
                    
                    $required = $rowHideClass = '';
                    
                    if ($dataRow[$valueField] == $checkedValue) {
                        $checked = ' checked="checked"';
                    } 
                    
                    if ($param['IS_REQUIRED'] == '1') {
                        $required = ' required="required"';
                    }
                    
                    if ($showMaxRowsLength && ($key + 1) > $showMaxRowsLength) {
                        $rowHideClass = ' d-none';
                    }

                    $radio .= '<label class="radio-inline'.$rowHideClass.'">';
                    $radio .= '<input type="radio" name="'.$controlName.'" data-path="'.$param['PARAM_REAL_PATH'].'" class="radioInit" data-row-data="'.htmlentities(json_encode($dataRow), ENT_QUOTES, 'UTF-8').'" value="'.$dataRow[$valueField].'"'.$checked.$required.'/> '.$dataRow[$displayField];
                    $radio .= '</label>';
                }

            }
            
            if (isset($rowHideClass) && $rowHideClass) {
                $radio .= '<a href="javascript:;" onclick="bpRadioAllRowsByPopup(this, \''. Lang::line($param['META_DATA_NAME']) .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\');" class="float-right bp-layout-anchor-label-color">Бүгдийг харах...</a>';
                $radio .= '<div class="clearfix"></div>';
            }
            
            $radioHidden .= '</div></div>';
        }
        
        if ($isCriteriaOption) {
            
            if (is_countable($dataRows) && count($dataRows) > $indexMax && $isCriteriaOption) {
                $radio .= '<label class="radio-inline append-more-selected-'. $processMetaDataId.'_'.$lookupMetaDataId .'"></label>';
                $radio .= '<a href="javascript:;" onclick="seeMoreDvCriteria(this, \''. Lang::line($param['META_DATA_NAME']) .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\', \''. $sizeHeight .'\')" class="float-right">'. Lang::line('setting_other') .'...</a>';
            }
            
            if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
                $radio .= '</div>';
            }
            return '<div class="group-metacriteria-'. $processMetaDataId.'_'.$lookupMetaDataId .'">'.$radio . $radioHidden . '</div>';
            
        } else {            
            if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
                $radio .= '</div>';
            }
            return $radio;
        }
    }
    
    public function renderCheckboxControl($processMetaDataId = '', $param = '', $controlName = '', $paramName = '', $fillParamData = '', $isCriteriaOption = false) {
            
        $dataRows = array();

        if (Input::postCheck('linkedCombo')) {
            $param = Input::post('params');
            $controlName = Input::post('controlName');
            $paramName = Input::post('paramName');
            $processMetaDataId = Input::numeric('processMetaDataId');
            $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];

            $lookUpParam = array(
                'systemMetaGroupId' => $lookupMetaDataId,
                'showQuery' => 0, 
                'ignorePermission' => 1 
            );

            $this->load->model('mdobject', 'middleware/models/');

            $data = $this->model->getGroupParamConfigByDataView(Input::numeric('groupMetaDataId'), Input::post('selfParam'));

            if ($data) {
                $inputParamArr = Str::simple_parse_str(Input::post('inputParams'));
                if (isset($inputParamArr[$data[0]['PARAM_PATH']])) {
                    $criteriaValue = $inputParamArr[$data[0]['PARAM_PATH']];
                }                
                $isCriteriaOption = true;

                if (!empty($criteriaValue)) {
                    $lookUpParam['criteria'] = array(
                        $data[0]['FIELD_NAME'] => array(
                            array(
                                'operator' => 'IN',
                                'operand' => rtrim($criteriaValue, ',')
                            )
                        )
                    );
                }
            }
        } else {
            $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];
            $lookUpParam = array(
                'systemMetaGroupId' => $lookupMetaDataId,
                'showQuery' => 0, 
                'ignorePermission' => 1 
            );                
        }

        $result = Webservice::runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {

            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRows = $result['result'];
        }
        
        $displayField = strtolower($param['DISPLAY_FIELD']);
        $valueField = strtolower($param['VALUE_FIELD']);
            
        $radio = $radioHidden = '';
        $indexMax = 5;
        $dataRowsCount = is_countable($dataRows) ? count($dataRows) : 0;

        if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
            
            $radio = '<div class="radio-list">';
            
            if ($dataRowsCount < 100) {
                $radioHidden = '<div class="radio-list radio-list-hidden" style="display:none;">';
            } else {
                $radioHidden = '<div class="hidden hidden-seemore-'. $processMetaDataId.'_'.$lookupMetaDataId .'"><div class="radio-list " style="padding: 15px; position: relative; top: -10px;">';
            }
            
            $checkedValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']); 
            
            if ($fillParamValue = Mdwebservice::findRowKeyValFillData($fillParamData, $paramName)) {
                $checkedValue = $fillParamValue;
            }
            
            if ($dataRowsCount > 100) {
                $sizeHeight = 1;
                $radioHiddenClass = '3';
            } else {
                $sizeHeight = 0;
                $radioHiddenClass = '6';
            }
            
            $data_in_param = '';
            $data_in_lookup_param = '';
            $linked_class = '';
            $data_out_param = '';    
            
            if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                $linked_class = 'linked-combo-checkbox';
                $data_out_param = $param['GROUP_CONFIG_FIELD_PATH'];
            }            
            if ($param['GROUP_CONFIG_PARAM_PATH'] != '') {
                $data_in_param = $param['GROUP_CONFIG_PARAM_PATH'];
                $data_in_lookup_param = $param['GROUP_CONFIG_LOOKUP_PATH'];
            }
            
            $checkedValue = explode(',', $checkedValue);
                        
            foreach ($dataRows as $key => $dataRow) {
                if ($isCriteriaOption) {
                    if ($key < $indexMax) {
                        if (in_array($dataRow[$valueField], $checkedValue)) {
                            $checked = ' checked="checked"';
                        } else {
                            $checked = '';
                        }

                        $radio .= '<label class="radio-inline">';
                        $radio .= '<input type="checkbox" data-in-param="'.$data_in_param.'" data-in-lookup-param="'.$data_in_lookup_param.'" data-out-param="'.$data_out_param.'" class="'.$linked_class.'" name="'.$controlName.'[]" data-path="'.$param['PARAM_REAL_PATH'].'" value="'.$dataRow[$valueField].'"'.$checked.'> '.$dataRow[$displayField].'</label>';

                    } else {
                        if ($dataRowsCount < 100) {
                            $radioHidden .= '';
                            $attrCheck = '';
                            $checkboxDisplayField = $dataRow[$displayField];
                        } else {
                            $radioHidden .= '<div class="col-md-'. $radioHiddenClass .'">';
                            $checkboxDisplayField = $dataRow[$displayField];
                            $attrCheck = 'class="notuniform" onclick="seeMoreDvSelection(this, \''. $dataRow[$displayField] .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\')"';
                        }
                        
                        if (in_array($dataRow[$valueField], $checkedValue)) {
                            $checked = ' checked="checked"';
                        } else {
                            $checked = '';
                        }

                        $radioHidden .= '<label class="radio-inline" style="padding-left:0">';
                        $radioHidden .= '<input type="checkbox" data-in-param="'.$data_in_param.'" data-in-lookup-param="'.$data_in_lookup_param.'" data-out-param="'.$data_out_param.'" class="'.$linked_class.'" '. $attrCheck .' name="'.$controlName.'[]" data-path="'.$param['PARAM_REAL_PATH'].'" value="'.$dataRow[$valueField].'"'.$checked.'> '. $checkboxDisplayField .'</label>';
                        
                        if ($dataRowsCount > 100) {
                            $radioHidden .= '</div>';
                        } 
                    }
                    
                } else {
                    
                    if (in_array($dataRow[$valueField], $checkedValue)) {
                        $checked = ' checked="checked"';
                    } else {
                        $checked = '';
                    }

                    $radio .= '<label class="radio-inline">';
                    $radio .= '<input type="checkbox" name="'.$controlName.'[]" data-path="'.$param['PARAM_REAL_PATH'].'" value="'.$dataRow[$valueField].'" data-row-data="'.htmlentities(str_replace('&quot;', '\\&quot;', json_encode($dataRow, JSON_UNESCAPED_UNICODE)), ENT_QUOTES, 'UTF-8').'"'.$checked.'> '.$dataRow[$displayField].'</label>';
                }
            }
            if ($dataRowsCount < 100) {
                $radioHidden .= '</div>';
            } else {
                $radioHidden .= '</div></div>';
            }
        }
        
        if ($isCriteriaOption) {
            if ($dataRowsCount > $indexMax && $isCriteriaOption) {
                $radio .= '<div class="append-more-selected-'. $processMetaDataId.'_'.$lookupMetaDataId .'"></div>';
                if ($dataRowsCount > 100) {
                    $radio .= '<div class="clearfix w100"><a href="javascript:;" onclick="seeMoreDvCriteria(this, \''. Lang::line($param['META_DATA_NAME']) .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\', \'0\')" class="float-right">'. Lang::line('setting_other') .'...</a></div>';
                }
            }
            
            if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
                $radio .= '</div>';
            }
            
            $returnControl = '';
            
            if (5 < $dataRowsCount && $dataRowsCount < 100) {
                $returnControl .= '<div data-processmetadataid="'.$processMetaDataId.'" data-param=\''.json_encode($param).'\' data-controlname="'.$controlName.'" data-paramname="'.$paramName.'" class="radio-list-main toggle-group-criteria group-metacriteria-'. $processMetaDataId.'_'.$lookupMetaDataId .'">'.$radio . $radioHidden 
                                        . '<div class="clearfix w100"><a href="javascript:;" see-more-status="0" see-more-text-1="'. Lang::line('collapsible') .'..." see-more-text-0="'. Lang::line('setting_other') .'..." onclick="seeMoreDvCriteria(this, \''. Lang::line($param['META_DATA_NAME']) .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\', \'0\', \'0\')" class="float-right">'. Lang::line('setting_other') .'...</a></div>'
                                . '</div>';
            } else {
                $returnControl .= '<div data-processmetadataid="'.$processMetaDataId.'" data-param=\''.json_encode($param).'\' data-controlname="'.$controlName.'" data-paramname="'.$paramName.'" class="radio-list-main group-metacriteria-'. $processMetaDataId.'_'.$lookupMetaDataId .'">'.$radio . $radioHidden . '</div>';
            }
            
            if (!Input::postCheck('linkedCombo')) {
                return $returnControl;
            } else {
                echo json_encode(array('Html' => $returnControl)); exit;                
            }
        } else {
            if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
                $radio .= '</div>';
            }
            return $radio;
        }        
    }
    
    public function renderButtonControl($processMetaDataId, $param, $controlName, $paramName, $fillParamData) {
        
        $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];
        $dataRows = array();

        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );

        $result = Webservice::runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {

            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRows = $result['result'];
        }
        
        $displayField = strtolower($param['DISPLAY_FIELD']);
        $valueField = strtolower($param['VALUE_FIELD']);
            
        $button = '';
        
        if ($dataRows && isset($dataRows[0][$displayField]) && isset($dataRows[0][$valueField])) {
            
            $checkedValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']); 
            $rowData = '';
            
            $fillParamValue = self::setLookupValFillData($fillParamData, $paramName);
                        
            if ($fillParamValue != '') {
                $checkedValue = $fillParamValue;
            }

            if ($checkedValue != '') {

                if (is_array($checkedValue)) {
                    $valueRow = $checkedValue;
                    $checkedValue = $valueRow['META_VALUE_ID'];
                    $rowData = $valueRow['rowData'];
                } else {
                    $valueRow = (new Mddatamodel())->getIdCodeName($param['LOOKUP_META_DATA_ID'], $checkedValue);
                    $rowData = $valueRow['rowData'];
                }
            }
            
            $button = '<div class="button-list mt5 mb5">';
            $button .= '<input type="hidden" name="'.$controlName.'" data-path="'. $param['PARAM_REAL_PATH'] .'" value="'.$checkedValue.'" data-row-data="'.$rowData.'">';
            
            foreach ($dataRows as $dataRow) {
                
                $activeClass = $inlineStyles = '';
                
                if ($dataRow[$valueField] == $checkedValue) {
                    $activeClass = ' dv-button-inline-active';
                } 
                
                if (issetParam($dataRow['color'])) {
                    $inlineStyles = 'background-color: ' . $dataRow['color'];
                }
                
                $button .= '<a href="javascript:;" class="btn btn-sm bg-primary-600 dv-button-inline mr4 mb4'.$activeClass.'" data-criteria="'.$dataRow[$valueField].'" style="'.$inlineStyles.'" data-style="'.$inlineStyles.'" data-row-data="'.htmlentities(json_encode($dataRow, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8').'">'.$dataRow[$displayField].'</a>';
            }
            
            $button .= '</div>';
        }
            
        return $button;
    }
    
    public function renderStarControl($processMetaDataId, array $param, $controlName, $paramName, $fillParamData = null) {
            
        $paramRealPath = $param['PARAM_REAL_PATH'];

        $attrArray = array(
            'name' => $controlName,
            'class' => 'form-control form-control-sm',
            'data-path' => $paramRealPath,
            'data-field-name' => $param['META_DATA_CODE'],
            'data-isclear' => $param['IS_REFRESH']
        );   

        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
        $selectedValue = $defaultValue;
        $selectedCode = $selectedName = '';

        if ($fillParamValue = self::setLookupValFillData($fillParamData, $paramName)) {
            $selectedValue = $fillParamValue;                
        }

        if (is_array($selectedValue)) {
            $valueRow = $selectedValue;
            $selectedValue = $valueRow['META_VALUE_ID'];        
        }
        $attrArray['value'] = $selectedValue;

        $formControl = Form::hidden($attrArray);
        $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];

        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );

        $this->load->model('mdobject', 'middleware/models/');

        $attributes = $this->model->getDataViewMetaValueAttributes($processMetaDataId, $paramRealPath, $lookupMetaDataId);

        if (isset($attributes['isDefaultValues'])) {
            $defaultData = Mdwebservice::getParamDefaultValues($processMetaDataId, $paramRealPath, $lookupMetaDataId);
            $idField = issetDefaultVal($attributes['id'], 'id');

            foreach ($defaultData as $dVal) {
                $lookUpParam['criteria'][$idField][] = array(
                    'operator' => '=',
                    'operand' => $dVal['VALUE_ID']
                );
            }
        }

        $result = Webservice::runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {

            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRow = $result['result'];
        }

        $selectedValueIndex = 0;

        if ($dataRow) {

            $sizeOfStar = count($dataRow);
            
            $dm = &getInstance();
            $dm->load->model('mddatamodel', 'middleware/models/');

            $getCodeNameFieldName = $dm->model->getCodeNameFieldNameModel($lookupMetaDataId);

            $metaValueIdColumnName = $getCodeNameFieldName['id'];
            $metaValueNameColumnName = $getCodeNameFieldName['name'];

            if ($selectedValue) {
                $metaValueColumnName = $getCodeNameFieldName['value'];
                if ($metaValueColumnName) {
                    $selectedValueFullData = Arr::multidimensional_search($dataRow, array($metaValueIdColumnName => $selectedValue));
                    $selectedValueIndex = (int) $selectedValueFullData[$metaValueColumnName];
                } elseif ($metaValueIdColumnName) {
                    $selectedValueFullData = Arr::multidimensional_search($dataRow, array($metaValueIdColumnName => $selectedValue));
                    $selectedValueIndex = (int) $selectedValueFullData[$metaValueIdColumnName];
                }
            }

            for ($in = 0; $in < $sizeOfStar; $in++) {
                if ($in < $selectedValueIndex) {
                    $formControl .= '<li data-id="'. $dataRow[$in][$metaValueIdColumnName].'" title="'. $dataRow[$in][$metaValueNameColumnName] .'"><i class="icon-star-full2" style="color: orange; cursor: pointer;"></i></li>';
                } else {
                    $formControl .= '<li data-id="'. $dataRow[$in][$metaValueIdColumnName].'" title="'. $dataRow[$in][$metaValueNameColumnName] .'"><i class="icon-star-empty3" style="color: #ccc; cursor: pointer;"></i></li>';
                }
            }
        }

        return '<ul class="nav navbar-nav star-rating'.(issetParam($param['isViewMode']) ? ' not-click' : '').'">'. $formControl .'</ul>';
    }
    
    public function renderFingerControl($processMetaDataId, array $param, $controlName, $paramName, $fillParamData = null, $isCriteriaOption = false) {
            
        $paramRealPath = $param['PARAM_REAL_PATH'];

        $attrArray = array(
            'name' => $controlName,
            'class' => 'form-control form-control-sm',
            'data-path' => $paramRealPath,
            'data-field-name' => $param['META_DATA_CODE'],
            'data-isclear' => $param['IS_REFRESH'],
            'placeholder' => Lang::line($param['META_DATA_NAME'])
        );

        $attrArray2 = array(
            'name' => 'param['.$paramRealPath.'XypRegisterNum]',
            'class' => 'form-control form-control-sm',
            'data-path' => $paramRealPath.'XypRegisterNum',
            'data-field-name' => $param['META_DATA_CODE'].'XypRegisterNum',
            'data-isclear' => $param['IS_REFRESH']
        );   

        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
        $selectedValue = $defaultValue;

        if ($fillParamValue = self::setLookupValFillData($fillParamData, $paramName)) {
            $selectedValue = $fillParamValue;                
        }

        $attrArray['value'] = $selectedValue;
        $formControl = Form::text($attrArray);

        if ($isCriteriaOption) {        
            return '<div class="input-group input-group-criteria xyp-finger-input" style="width: '. $param['COLUMN_WIDTH'] .';">
                        '. $formControl .'
                        <span class="input-group-btn ">
                            <button type="button" class="btn dropdown-toggle criteria-condition-btn  dropdown-none-arrow" data-toggle="dropdown" aria-expanded="true" tabindex="-1" onclick="bpFingerImageDataDataView(this, \''. $paramRealPath .'\', \''. $processMetaDataId .'\')">Хурууны хээ уншуулах</button>
                        </span> 
                    </div>';
        } else {
            return '<div class="input-group input-group-criteria" style="width: '. $param['COLUMN_WIDTH'] .';">
                '. $formControl .'
                <span class="input-group-btn ">
                    <button type="button" class="btn dropdown-toggle criteria-condition-btn  dropdown-none-arrow" data-toggle="dropdown" aria-expanded="true" tabindex="-1" onclick="bpFingerImageData(this, \''. $paramRealPath .'\', \''. $processMetaDataId .'\')">Хурууны хээ уншуулах</button>
                </span> 
            </div>';            
        }
    }
    
    public function renderPassportReaderControl($processMetaDataId, array $param, $controlName, $paramName, $fillParamData = null, $isCriteriaOption = false) {
            
        $paramRealPath = $param['PARAM_REAL_PATH'];

        $attrArray = array(
            'name' => $controlName,
            'class' => 'form-control form-control-sm',
            'data-path' => $paramRealPath,
            'readonly' => 'readonly',
            'data-field-name' => $param['META_DATA_CODE'],
            'data-isclear' => $param['IS_REFRESH'],
            'placeholder' => Lang::line($param['META_DATA_NAME'])
        );

        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
        $selectedValue = $defaultValue;

        if ($fillParamValue = self::setLookupValFillData($fillParamData, $paramName)) {
            $selectedValue = $fillParamValue;                
        }

        $attrArray['value'] = $selectedValue;
        $formControl = Form::text($attrArray);

        return '<div class="input-group input-group-criteria passport_reader" style="width: '. $param['COLUMN_WIDTH'] .';">
                    '. $formControl .'
                    <span class="input-group-btn ">
                        <button type="button" class="btn dropdown-toggle criteria-condition-btn  dropdown-none-arrow" data-toggle="dropdown" aria-expanded="true" tabindex="-1" onclick="bpPassportReader(this, \''. $paramRealPath .'\', \''. $processMetaDataId .'\')">'. Lang::line('trigger_passportreader') .'</button>
                    </span> 
                </div>';
                    
    }
    
    public function renderVoiceRecordControl($processMetaDataId, array $param, $controlName, $lowerParamName, $fillParamData = null) {
        
        $render = array();
        
        $render[] = '<div class="pf-voice-record d-flex align-items-center" data-controlname="'.$controlName.'" data-realpath="'.$param['PARAM_REAL_PATH'].'">';
            $render[] = '<div class="pf-voice-record-controls mr-3">
                <div class="btn-group">
                    <button type="button" class="btn btn-light pf-voice-record-record" title="Record"><i class="icon-mic2"></i></button>
                    <button type="button" class="btn btn-light pf-voice-record-pause" title="Pause" disabled><i class="icon-pause2"></i></button>
                    <button type="button" class="btn btn-light pf-voice-record-stop" title="Stop" disabled><i class="icon-stop2"></i></button>
                </div>
            </div>';
            $render[] = '<div class="pf-voice-record-list">';
            
            $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
            
            if ($fileName) {
                $render[] = '<audio controls>
                    <source src="'.$fileName.'" type="audio/wav">
                    Your browser does not support the audio element.
                </audio>';
                $render[] = Form::hidden(array('name' => 'editfile_' . $controlName, 'value' => $fileName));
            }
                        
            $render[] = '</div>';
        $render[] = '</div>';
        
        return implode('', $render);
    }
    
    public function renderFilePreviewControl($processMetaDataId, array $param, $controlName, $lowerParamName, $fillParamData = null) {
        
        $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
        
        if ($fileName && file_exists($fileName)) {
            
            if (!isset($this->view)) {
                $this->view = new View();
            }

            $this->view->fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
            $this->view->fullPath = URL.$fileName;
            $this->view->rowId = getUID();
            
            $hidden = Form::hidden(array('name' => 'editfile_' . $controlName, 'value' => $fileName));

            return $hidden . $this->view->renderPrint('filePreview', 'middleware/views/preview/');
            
        } else {
            return Form::hidden(array('name' => 'editfile_' . $controlName, 'value' => $fileName));
        }
    }
    
    public function renderCodeWithPhotoControl($processMetaDataId, array $param, $controlName, $lowerParamName, $fillParamData = null) {
        
        $render = array();
        
        $labelAttr = array(
            'class'           => 'col-form-label line-height-normal font-weight-normal', 
            'data-label-path' => $param['PARAM_REAL_PATH'], 
            'for' => $param['META_DATA_CODE'] . '_valueField', 
            'text' => Lang::line($param['META_DATA_NAME'])
        );
        
        $paramRealPath = $param['PARAM_REAL_PATH'];
        $lookupTypeLower = $param['LOOKUP_TYPE'];
        
        $defaultValue = Mdwebservice::setLookupDefaultValue($param['DEFAULT_VALUE'], $param['LOOKUP_META_DATA_ID'], $lookupTypeLower, $param['VALUE_FIELD']);
        $selectedValue = $defaultValue . '';
        $selectedCode = $selectedName = $lookupRowData = $moreButton = '';
        
        $fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName);
        
        if ($fillParamValue != '') {
            $selectedValue = $fillParamValue;
        }

        if ($selectedValue != '') {

            if (is_array($selectedValue)) {
                $valueRow = $selectedValue;
                $selectedValue = $valueRow['META_VALUE_ID'];
                $lookupRowData = $valueRow['rowData'];
            } else {
                $valueRow = (new Mddatamodel())->getIdCodeName($param['LOOKUP_META_DATA_ID'], $selectedValue);
                $valueRow['META_VALUE_CODE'] = $valueRow['code'];
                $valueRow['META_VALUE_NAME'] = $valueRow['name'];
                $lookupRowData = $valueRow['rowData'];
            }

            if ($valueRow) {                                
                $selectedCode = htmlentities(($valueRow['META_VALUE_CODE'] != '' ? $valueRow['META_VALUE_CODE'] : $valueRow['META_VALUE_NAME']), ENT_QUOTES, 'UTF-8');
                $selectedName = htmlentities($valueRow['META_VALUE_NAME'], ENT_QUOTES, 'UTF-8');
            }
        }
        
        $inputAttr = array(
            'name' => $controlName,
            'id' => $param['META_DATA_CODE'] . '_valueField',
            'data-path' => $paramRealPath,
            'value' => $selectedValue,
            'class' => 'form-control popupInit pf-codewithphoto-input meta-autocomplete lookup-code-autocomplete',
            'data-row-data' => $lookupRowData, 
            'data-isclear' => $param['IS_REFRESH'], 
            'data-processid' => $processMetaDataId, 
            'data-lookupid' => $param['LOOKUP_META_DATA_ID'], 
            'title' => $selectedValue
        );
        
        if ($param['IS_REQUIRED'] == '1') {
            $inputAttr['required'] = 'required';
        }
        
        $render[] = '<div class="media pf-codewithphoto-parent">
            <div class="mr-2">
                <img src="" class="rounded-circle pf-codewithphoto-img" width="55" height="55" onerror="onUserImgError(this);" title="'.$selectedName.'">
            </div>
            <div class="media-body">
                '.Form::label($labelAttr).'
                <div class="input-group">
                    '.Form::text($inputAttr).'
                    <span class="input-group-append">
                        <button type="button" class="btn btn-light pf-codewithphoto-popup" onclick="dataViewSelectableGrid(\'' . $param['META_DATA_CODE'] . '\', \'' . $processMetaDataId . '\', \'' . $param['LOOKUP_META_DATA_ID'] . '\', \'' . $param['CHOOSE_TYPE'] . '\', \'' . $param['PARAM_REAL_PATH'] . '\', this);" tabindex="-1"><i class="far fa-search"></i></button>
                    </span>
                </div>
            </div>
        </div>';
        
        return implode('', $render);
    }
    
    public function dvTreeIconCriteria($dataRow, $idField, $nameField, $parentField, $depth = 0, $parent = 0) {
        
        $list = '';
        
        if ($depth > 0) {
            $list .= '<ul class="nav nav-group-sub">';
        }
        
        foreach ($dataRow as $k => $row) {
            
            if (!array_find_val($dataRow, $idField, $row[$parentField])) {
                $row[$parentField] = 0;
            }
            
            if ($row[$parentField] == $parent) { 
                
                $isChild = array_find_val($dataRow, $parentField, $row[$idField]);
                
                $count = isset($row['count']) ? '<span class="badge">'.$row['count'].'</span>' : '';
                $icon = isset($row['icon']) ? '<span><i class="'.$row['icon'].'"></i></span>' : '';
                $isSelected = '';
                
                if (issetParam($row['isselected']) == '1') {
                    $isSelected = ' selected';
                    Mdwebservice::$selectedRowId = $row[$idField];
                }
                
                if (!$isChild) {
                    
                    $list .= '<li class="nav-item d-flex align-items-center" data-id="'.$row[$idField].'">
                        <a href="javascript:void(0);" class="nav-link'.$isSelected.'">
                            '.$icon.'
                            <span class="mr-2">'.$row[$nameField].'</span>
                            '.$count.'
                        </a>
                    </li>';
                    
                } else {
                    
                    $list .= '<li class="nav-item nav-item-submenu" data-id="'.$row[$idField].'">
                        <a href="javascript:void(0);" class="nav-link'.$isSelected.'">
                            '.$icon.'
                            <span class="mr-2">'.$row[$nameField].'</span>
                            '.$count.'    
                        </a>
                        ' . $this->dvTreeIconCriteria($dataRow, $idField, $nameField, $parentField, $depth + 1, $row[$idField]) . '
                    </li>';
                }
            } 
        }
        
        if ($depth > 0) {
            $list .= '</ul>';
        } 
        
        return $list;
    }
    
    public function renderIconControl($processMetaDataId, array $param, $controlName, $paramName, $fillParamData = null, $isCriteriaOption = false) {
        
        $paramRealPath = $param['PARAM_REAL_PATH'];

        $attrArray = array(
            'name' => $controlName,
            'class' => 'form-control input-sm iconInit',
            'data-path' => $paramRealPath,
            'data-field-name' => $param['META_DATA_CODE'],
            'data-isclear' => $param['IS_REFRESH']
        );   

        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
        $selectedValue = $defaultValue;

        if ($fillParamValue = self::setLookupValFillData($fillParamData, $paramName)) {
            $selectedValue = $fillParamValue;                
        }
        
        $formControl = $hiddenformControl = '';
        $attrArray['value'] = isset($selectedValue['META_VALUE_ID']) ? $selectedValue['META_VALUE_ID'] : $selectedValue;
        
        if ($param['CHOOSE_TYPE'] === 'single') {
            
            if ($param['GROUP_CONFIG_PARAM_PATH']) {
                $attrArray['data-in-param'] = $param['GROUP_CONFIG_PARAM_PATH'];
                $attrArray['data-in-lookup-param'] = $param['GROUP_CONFIG_LOOKUP_PATH'];
            }

            if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                $attrArray['class'] = $attrArray['class'] . ' linked-combo';
                $attrArray['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
            }
        
            $hiddenformControl = Form::hidden($attrArray);
        }
            
        $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];
        $dataRow = null;

        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );
        
        /* Талбар хоорондын хамаарал */
        if (issetParam($param['GROUP_CONFIG_PARAM_PATH']) && issetParam($param['GROUP_CONFIG_LOOKUP_PATH'])) {
            
            $configParamPathVal = issetParam($fillParamData[strtolower($param['GROUP_CONFIG_PARAM_PATH'])]);
            
            if ($configParamPathVal) {
                $lookUpParam['criteria'][$param['GROUP_CONFIG_LOOKUP_PATH']][] = array(
                    'operator' => '=',
                    'operand' => $configParamPathVal
                );
            }
        }
        
        $this->load->model('mdobject', 'middleware/models/');
        
        $attributes = $this->model->getDataViewMetaValueAttributes($processMetaDataId, $paramRealPath, $lookupMetaDataId);
        
        if (isset($attributes['isDefaultValues'])) {
            $defaultData = Mdwebservice::getParamDefaultValues($processMetaDataId, $paramRealPath, $lookupMetaDataId);
            $idField = issetDefaultVal($attributes['id'], 'id');
            
            foreach ($defaultData as $dVal) {
                $lookUpParam['criteria'][$idField][] = array(
                    'operator' => '=',
                    'operand' => $dVal['VALUE_ID']
                );
            }
        }

        if ($getCriteria = $this->model->dataViewHeaderDataModel($processMetaDataId)) {
            foreach($getCriteria as $loop) {
                if (!empty($loop['DEFAULT_VALUE']) && $loop['META_DATA_CODE'] != $paramRealPath) {
                    $lookUpParam['criteria'][$loop['META_DATA_CODE']][] = array(
                        'operator' => '=',
                        'operand' => Mdmetadata::setDefaultValue($loop['DEFAULT_VALUE'])
                    );
                }
            }
        }
        
        if ($isCriteriaOption) {
            
            $this->load->model('mddatamodel', 'middleware/models/');
            $getCodeNameFieldName = $this->model->getCodeNameFieldNameModel($lookupMetaDataId);
            $idColumnName = $getCodeNameFieldName['id'];
            
            $lookupSuggestedValues = (new Mddatamodel())->dvFilterLookupSuggestedValues($processMetaDataId, $param);
            
            if ($lookupSuggestedValues) {
                $lookUpParam['criteria'][$idColumnName][] = array(
                    'operator' => 'IN',
                    'operand' => Arr::implode_key(',', $lookupSuggestedValues, 'VALUE_ID', true)
                );
            }
            
            $lookUpParam['criteria']['filterStartDate'] = array(
                array(
                    'operator' => '=',
                    'operand' =>  Ue::sessionFiscalPeriodStartDate()
                )                     
            );
            $lookUpParam['criteria']['filterEndDate'] = array(
                array(
                    'operator' => '=',
                    'operand' =>  Ue::sessionFiscalPeriodEndDate()
                )                     
            );   
        }

        $result = $this->ws->runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {

            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRow = $result['result'];
        }

        if ($dataRow) {
            
            $this->load->model('mddatamodel', 'middleware/models/');
            
            if (!isset($getCodeNameFieldName)) {
                $getCodeNameFieldName = $this->model->getCodeNameFieldNameModel($lookupMetaDataId);
            }
            
            $idColumnName = $getCodeNameFieldName['id'] ? $getCodeNameFieldName['id'] : 'id';
            $nameColumnName = $getCodeNameFieldName['name'];
            $parentColumnName = $getCodeNameFieldName['parent'];
            
            if ($isCriteriaOption && $idColumnName && $nameColumnName && $parentColumnName) {
                
                $dvTreeIconCriteria = $this->dvTreeIconCriteria($dataRow, $idColumnName, $nameColumnName, $parentColumnName);
                
                $list = '<div class="dv-treefilter-dropdown">';
                    $list .= '<ul class="nav nav-sidebar bp-icon-selection" data-nav-type="accordion" data-choose-type="single">';
                        $list .= $dvTreeIconCriteria;
                        
                        if (Mdwebservice::$selectedRowId) {
                            $attrArray['value'] = Mdwebservice::$selectedRowId;
                        }
                        
                        $list .= Form::hidden($attrArray);
                        
                        if (isset($lookupSuggestedValues) && $lookupSuggestedValues) {
                            $list .= '<input type="hidden" name="lookupSuggestedValues['.$param['META_DATA_CODE'].']" value="'.Arr::implode_key(',', $lookupSuggestedValues, 'VALUE_ID', true).'">';
                        }
                        
                    $list .= '</ul>';
                $list .= '</div>';
                
                return $list;
            }
            
            $dataRowCount = count($dataRow);
            $dataRowFirst = $dataRow[0];
            $isCount = array_key_exists('count', $dataRowFirst);
            $hiddenformControl .= '<div class="radio-list radio-list-hidden" style="display:none;">';
            $count = '';
            
            for ($in = 0; $in < $dataRowCount; $in++) {
                
                $iconName = null;
                
                if (!$isCriteriaOption) {
                    
                    $formControl .= '<li class="'. (($dataRow[$in][$idColumnName] == $attrArray['value']) ? 'active' : '') .'" data-id="'. $dataRow[$in][$idColumnName].'" title="'. $dataRow[$in][$nameColumnName] .'">
                                        <div class="item-icon-selection" style="'.issetParam($dataRow[$in]['iconitemstyle']).'">';
                    
                    if ($param['CHOOSE_TYPE'] !== 'single') {
                        $attrArray['name'] = $controlName . '[]';
                        $formControl .= Form::hidden($attrArray);       
                    }
                    
                    if (isset($dataRow[$in]['icon']) && file_exists($dataRow[$in]['icon'])) {
                        $icon = $dataRow[$in]['icon'];
                    } elseif (isset($dataRow[$in]['iconname']) && $dataRow[$in]['iconname']) {
                        $iconName = $dataRow[$in]['iconname'];
                    } else {
                        $icon = 'assets/core/global/img/appmenu.png';
                    }

                    if ($iconName) {
                        if (strpos($iconName, '<i class="') !== false) {
                            $iconImg = $iconName;
                        } else {
                            $iconImg = '<i class="'.$iconName.' mr-1"></i>';
                        }
                    } else {
                        $iconClass = (issetParam($dataRow[$in]['iconcircle']) == '1') ? 'rounded-circle' : '';
                        $iconImg = '<img src="'.$icon.'" onerror="onBankImgError(this);" class="'.$iconClass.'" style="'.issetParam($dataRow[$in]['iconstyle']).'">';
                    }                    
                    
                    $formControl .= '<div style="'.(isset($dataRow[$in]['iconiconstyle']) ? $dataRow[$in]['iconiconstyle'] : '').'">' . $iconImg . '</div>
                                            <p style="'.(isset($dataRow[$in]['icontextstyle']) ? $dataRow[$in]['icontextstyle'] : '').'">'. $dataRow[$in][$nameColumnName] .'</p>
                                        </div>
                                    </li>';                

                } else {
                    
                    $liClass = (isset($dataRow[$in]['colorclass']) && $dataRow[$in]['colorclass']) ? ' bp-icon-color-'.$dataRow[$in]['colorclass'] : '';
                    
                    if ($isCount) {
                        $count = '<span class="m-menu__link-badge">
                            <span class="badge badge-pill" title="' . $dataRow[$in]['count'] . '">' . $dataRow[$in]['count'] . '</span>
                        </span>';
                    }
                        
                    if ($in < 10 && $isCriteriaOption) {
                        $formControl .= '<li class="'. (($dataRow[$in][$idColumnName] == $attrArray['value']) ? 'active' : '') .$liClass.'" data-id="'. $dataRow[$in][$idColumnName].'" title="'. $dataRow[$in][$nameColumnName] .'">
                                            <div class="item-icon-selection">';

                        if ($param['CHOOSE_TYPE'] !== 'single') {
                            $attrArray['name'] = $controlName . '[]';
                            $formControl .= Form::hidden($attrArray);       
                        }

                        if (isset($dataRow[$in]['icon']) && file_exists($dataRow[$in]['icon'])) {
                            $icon = $dataRow[$in]['icon'];
                        } elseif (isset($dataRow[$in]['iconname']) && $dataRow[$in]['iconname']) {
                            $iconName = $dataRow[$in]['iconname'];
                        } else {
                            $icon = 'assets/core/global/img/appmenu.png';
                        }
                        
                        if ($iconName) {
                            if (strpos($iconName, '<i class="') !== false) {
                                $iconImg = $iconName;
                            } else {
                                $iconImg = '<i class="'.$iconName.' mr-1"></i>';
                            }
                        } else {
                            $iconImg = '<img src="'.$icon.'" onerror="onBankImgError(this);">';
                        }
                        
                        $formControl .= '<div>'.$iconImg.'</div>
                                                <p>'. $dataRow[$in][$nameColumnName] .'</p>
                                                '.$count.'
                                            </div>
                                        </li>';
                    } else {
                        
                        $hiddenformControl .= '<li class="'. (($dataRow[$in][$idColumnName] == $attrArray['value']) ? 'active' : '') .$liClass.'" data-id="'. $dataRow[$in][$idColumnName].'" title="'. $dataRow[$in][$nameColumnName] .'">
                                            <div class="item-icon-selection">';

                        if ($param['CHOOSE_TYPE'] !== 'single') {
                            $attrArray['name'] = $controlName . '[]';
                            $hiddenformControl .= Form::hidden($attrArray);       
                        }

                        if (isset($dataRow[$in]['icon']) && file_exists($dataRow[$in]['icon'])) {
                            $icon = $dataRow[$in]['icon'];
                        } elseif (isset($dataRow[$in]['iconname']) && $dataRow[$in]['iconname']) {
                            $iconName = $dataRow[$in]['iconname'];
                        } else {
                            $icon = 'assets/core/global/img/appmenu.png';
                        }

                        if ($iconName) {
                            if (strpos($iconName, '<i class="') !== false) {
                                $iconImg = $iconName;
                            } else {
                                $iconImg = '<i class="'.$iconName.' mr-1"></i>';
                            }
                        } else {
                            $iconImg = '<img src="'.$icon.'" onerror="onBankImgError(this);">';
                        }

                        $hiddenformControl .= '<div>' . $iconImg . '</div>
                                                <p>' . $dataRow[$in][$nameColumnName] . '</p>
                                                '.$count.'
                                            </div>
                                        </li>';
                    }
                }
            }
                    
            $hiddenformControl .= '</div>';
            
            if (10 < $dataRowCount && $isCriteriaOption) {
                $hiddenformControl .= '<label class="radio-inline mb0 append-more-selected-'. $processMetaDataId.'_'.$lookupMetaDataId .'"></label>';
                $hiddenformControl .= '<a href="javascript:;" see-more-status="0" see-more-text-1="'. Lang::line('collapsible') .'..." see-more-text-0="'. Lang::line('setting_other') .'..." onclick="seeMoreDvCriteria(this, \''. Lang::line($param['META_DATA_NAME']) .'\', \''. $lookupMetaDataId .'\', \''. $processMetaDataId .'\', \'0\', \'0\')" class="d-block" style="text-align: right">'. Lang::line('setting_other') .'...</a>';
                $hiddenformControl .= '<div class="group-metacriteria-'. $processMetaDataId.'_'.$lookupMetaDataId .'"></div>';
            }
        }
        
        if (isset($lookupSuggestedValues) && $lookupSuggestedValues) {
            $hiddenformControl .= '<input type="hidden" name="lookupSuggestedValues['.$param['META_DATA_CODE'].']" value="'.Arr::implode_key(',', $lookupSuggestedValues, 'VALUE_ID', true).'">';
        }

        return '<div class="toggle-group-criteria">'.
                    '<ul class="bp-icon-selection" data-metagroupid="'.$lookupMetaDataId.'" data-choose-type="'. (($param['CHOOSE_TYPE'] !== 'single') ? 'multi' : 'single') .'">'. $formControl . $hiddenformControl .'</ul>
                </div>';
    }
    
    public function renderComboTabControl($processMetaDataId, array $param, $controlName, $paramName, $fillParamData = null, $isCriteriaOption = false) {

        $formControl = '';
            
        $paramRealPath = $param['PARAM_REAL_PATH'];

        $attrArray = array(
            'name' => $controlName,
            'class' => 'form-control form-control-sm',
            'data-path' => $paramRealPath,
            'data-field-name' => $param['META_DATA_CODE'],
            'data-isclear' => $param['IS_REFRESH']
        );   

        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
        $selectedValue = $defaultValue;

        if ($fillParamValue = self::setLookupValFillData($fillParamData, $paramName)) {
            $selectedValue = $fillParamValue;                
        }
                    
        $attrArray['value'] = isset($selectedValue['META_VALUE_ID']) ? $selectedValue['META_VALUE_ID'] : $selectedValue;
        
        $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];

        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );

        $result = $this->ws->runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {
            
            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRow = $result['result'];
        }

        if (isset($dataRow) && $dataRow) {

            $this->load->model('mddatamodel', 'middleware/models/');

            $getCodeNameFieldName = $this->model->getCodeNameFieldNameModel($lookupMetaDataId);

            $metaValueIdColumnName = $getCodeNameFieldName['id'];
            $metaValueNameColumnName = $getCodeNameFieldName['name'];
            
            if (empty($metaValueIdColumnName) && empty($metaValueNameColumnName)) {
                return 'Стандарт талбараа тохируулна уу!';
            }

            $count = '';

            for ($in = 0; $in < count($dataRow); $in++) {        
                
                if (isset($dataRow[$in]['count'])) {
                    $count = $dataRow[$in]['count'];
                }
                
                $formControl .= '<a href="javascript:;" class="'. (($dataRow[$in][$metaValueIdColumnName] === $attrArray['value']) ? 'active' : '') .' btn btn-circle btn-lg tab-criteria-value" data-id="'. $dataRow[$in][$metaValueIdColumnName].'" data-path="'. $paramRealPath . '" title="'. $dataRow[$in][$metaValueNameColumnName] .'">';
                $formControl .= '<div class="greenbtntext">'. $dataRow[$in][$metaValueNameColumnName] .'</div><span class="badge badge-success" title="' . $count . '">' . $count . '</span></a>';
                
            }
        }

        return $formControl;
    }
    
    public function renderCardTabControl() {

        $formControl = '';
        $this->load->model('mdobject', 'middleware/models/');
        $this->view->metaDataId = Input::numeric('metaDataId');
        $this->view->fieldPath = strtolower(Input::post('fieldPath'));
        $this->view->getCountCardData = $this->model->getCountCardDataModel($this->view->metaDataId, $this->view->fieldPath);      

        $count = '';

        if ($this->view->getCountCardData) {
            foreach ($this->view->getCountCardData as $row) {
                
                $title = '';    
                if (isset($row[$this->view->fieldPath])) {
                    $title = $row[$this->view->fieldPath];
                }    
                
                $value = $title;
                
                if ($title == '') {
                    $title = Lang::line('META_00098');
                }            
                
                $count = $row['count'];
                
                $formControl .= '<a href="javascript:;" onclick="dataViewFilterCardFieldPath_'.$this->view->metaDataId.'(\''.$this->view->fieldPath.'\', \''.$value.'\', this);" class="btn btn-circle btn-lg tab-criteria-value" data-path="'. $this->view->fieldPath . '" title="'. $title .'">';
                $formControl .= '<div class="greenbtntext"><span><i class="far fa-search"></i></span><span class="line-height-normal">'. $title .'</span></div><span class="badge badge-success">' . $count . '</span></a>';
            }
        }

        return $formControl;
    }
    
    public function renderAutocompleteTextControl($processMetaDataId, $param, $controlName, $lowerParamName, $attrArray, $fillParamData, $type = 'text') {
                
        $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);

        if ($fillParamValue != '') {
            $attrArray['value'] = $fillParamValue;
        }
        
        $attrArray['class'] = $attrArray['class'] . ' lookup-text-autocomplete';
        $attrArray['data-isclear'] = $param['IS_REFRESH'];
        $attrArray['placeholder'] = Lang::line($param['META_DATA_NAME']);
        $attrArray['data-processid'] = $processMetaDataId;
        $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
        $attrArray['data-displayfield'] = $param['DISPLAY_FIELD'];
        
        if ($param['PATTERN_TEXT'] != '') {
                    
            $attrArray['data-regex'] = $param['PATTERN_TEXT'];
            $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);

            if ($param['IS_MASK'] === '1') {
                $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
            }
        }
        
        return Form::text($attrArray);
    }
    
    public function renderComboWithButtonPopupControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData) {
        
        $paramRealPath = $param['PARAM_REAL_PATH'];
        
        $attrArray = array(
            'id'              => $controlName, 
            'name'            => ($param['CHOOSE_TYPE'] == 'single' ? $controlName : $controlName . '[]'), 
            'data-path'       => $paramRealPath,
            'data-field-name' => $param['META_DATA_CODE'], 
            'data-isclear'    => $param['IS_REFRESH'],
            'multiple'        => 'multiple', 
            'op_value'        => 'META_VALUE_ID', 
            'op_text'         => 'META_VALUE_NAME',      
            'class'           => 'form-control form-control-sm dropdownInput select2 bp-field-with-popup-combo', 
            'nonulloption'    => true, 
            'value'           => ''
        ); 
        
        $arr = array(
            'META_DATA_ID'          => $param['LOOKUP_META_DATA_ID'],
            'ATTRIBUTE_ID_COLUMN'   => $param['ATTRIBUTE_ID_COLUMN'],
            'ATTRIBUTE_CODE_COLUMN' => $param['ATTRIBUTE_CODE_COLUMN'],
            'ATTRIBUTE_NAME_COLUMN' => $param['ATTRIBUTE_NAME_COLUMN'],
            'PARAM_REAL_PATH'       => $paramRealPath,
            'PROCESS_META_DATA_ID'  => $processMetaDataId,
            'CHOOSE_TYPE'           => $param['CHOOSE_TYPE']
        );
        
        if ($param['VALUE_FIELD'] != '') {
            $arr['ATTRIBUTE_ID_COLUMN'] = $param['VALUE_FIELD'];
        }
        if ($param['DISPLAY_FIELD'] != '') {
            $arr['ATTRIBUTE_NAME_COLUMN'] = $param['DISPLAY_FIELD'];
        }
        
        $lookupId  = $param['LOOKUP_META_DATA_ID'];
        $idField   = $arr['ATTRIBUTE_ID_COLUMN'];
        $nameField = $arr['ATTRIBUTE_NAME_COLUMN'];
        $buttonDisabled = '';
        
        if ($param['LOOKUP_KEY_META_DATA_ID']) {
            
            $lookupId = $param['LOOKUP_KEY_META_DATA_ID'];
            
            if ($lookupId != $param['LOOKUP_META_DATA_ID']) {
                $dm = &getInstance();
                $dm->load->model('mddatamodel', 'middleware/models/');

                $getCodeNameFieldName = $dm->model->getCodeNameFieldNameModel($lookupId);

                $idField   = $getCodeNameFieldName['id'];
                $nameField = $getCodeNameFieldName['name'];
            }  
        } 
        
        if ($param['IS_REQUIRED'] == '1') {
            $attrArray['required'] = 'required';
        }
        
        if ($param['GROUP_CONFIG_PARAM_PATH']) {
            $attrArray['disabled'] = 'disabled';
            $attrArray['data-in-param'] = $param['GROUP_CONFIG_PARAM_PATH'];
            $attrArray['data-in-lookup-param'] = $param['GROUP_CONFIG_LOOKUP_PATH'];
            $buttonDisabled = ' disabled="disabled"';
        }
        
        if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
            $attrArray['class'] = $attrArray['class'] . ' linked-combo';
            $attrArray['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
        }
        
        if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
            $attrArray['class'] = $attrArray['class'] . ' group-dtl-linked';
            $attrArray['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
        }
        
        $comboData = null;
        $fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName);
        $lookupTypeLower = $param['LOOKUP_TYPE'];
        $attrArray['value'] = Mdwebservice::setLookupDefaultValue($param['DEFAULT_VALUE'], $param['LOOKUP_META_DATA_ID'], $lookupTypeLower, $param['VALUE_FIELD']);
        
        if ($fillParamValue) {

            if (is_array($fillParamValue)) {

                $attrArray['value'] = $fillParamValue['META_VALUE_ID'];
                $attrArray['data-edit-value'] = $fillParamValue['META_VALUE_ID'];
                $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));
                
                if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma') {
                                    
                    $comboData = self::setMultiComboData($arr, $fillParamValue['rowData']);

                } else {
                    $comboData = array(array(
                        'META_VALUE_ID' => $fillParamValue['META_VALUE_ID'], 
                        'META_VALUE_NAME' => $fillParamValue['META_VALUE_NAME'], 
                        'rowData' => $fillParamValue['rowData']
                    ));
                }

            } else {

                $attrArray['value'] = $fillParamValue;
                $attrArray['data-edit-value'] = $fillParamValue;
                $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));

                $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $fillParamValue);
            }
            
            unset($attrArray['disabled']);
            $buttonDisabled = '';

        } elseif ($attrArray['value'] != '') {

            $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $attrArray['value']);
            
            $attrArray['data-edit-value'] = $attrArray['value'];
            $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));
        } 
        
        $attrArray['data-row-data'] = htmlentities(json_encode($arr), ENT_QUOTES, 'UTF-8');
        $attrArray['data'] = $comboData; 
        
        if (Config::getFromCache('isBpFieldComboWithPopupGlobe')) {
            $buttonTxt = Lang::line('choose_btn');
        } else {
            $buttonTxt = '..';
        }
        
        return '<div class="input-group">
            '.Form::multiselect($attrArray).' 
            <span class="input-group-append"> 
                <button class="btn btn-primary mr0" type="button" 
                data-lookupid="'.$lookupId.'" 
                data-paramcode="'.$param['META_DATA_CODE'].'" 
                data-processid="'.$processMetaDataId.'" 
                data-def="'.$attrArray['value'].'" 
                data-choosetype="'.$param['CHOOSE_TYPE'].'" 
                data-idfield="'.$idField.'" 
                data-namefield="'.$nameField.'" 
                data-buttontext="'.$buttonTxt.'"  
                onclick="bpBasketDvWithPopupCombo(this);"'.$buttonDisabled.'>'.$buttonTxt.'</button>
                <button class="btn btn-danger mr0 removebtn" type="button" data-lookupid="'. $lookupId .'" onclick="bpRemoveAllBasketWithPopupCombo(this);" style="display: none;"><i class="fa fa-trash"></i></button>
            </span>
        </div>';
    }
    
    public function renderRangeSliderControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData) {
        $paramRealPath = $param['PARAM_REAL_PATH'];

        $attrArray = array(
            'name' => $controlName,
            'class' => 'form-control input-sm rangeSliderInit',
            'data-path' => $paramRealPath,
            'data-field-name' => $param['META_DATA_CODE'],
            'data-isclear' => $param['IS_REFRESH']
        );   

        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
        $selectedValue = $defaultValue;

        if ($fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName)) {
            $selectedValue = $fillParamValue;                
        }
        
        $attrArray['value'] = isset($selectedValue['META_VALUE_ID']) ? $selectedValue['META_VALUE_ID'] : $selectedValue;
            
        $lookupMetaDataId = $param['LOOKUP_META_DATA_ID'];
        $dataRow = null;

        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );
        
        /* Талбар хоорондын хамаарал */
        if (issetParam($param['GROUP_CONFIG_PARAM_PATH']) && issetParam($param['GROUP_CONFIG_LOOKUP_PATH'])) {
            
            $configParamPathVal = issetParam($fillParamData[strtolower($param['GROUP_CONFIG_PARAM_PATH'])]);
            
            if ($configParamPathVal) {
                $lookUpParam['criteria'][$param['GROUP_CONFIG_LOOKUP_PATH']][] = array(
                    'operator' => '=',
                    'operand' => $configParamPathVal
                );
            }
        }
        
        $this->load->model('mdobject', 'middleware/models/');
        
        $attributes = $this->model->getDataViewMetaValueAttributes($processMetaDataId, $paramRealPath, $lookupMetaDataId);
        
        if (isset($attributes['isDefaultValues'])) {
            $defaultData = Mdwebservice::getParamDefaultValues($processMetaDataId, $paramRealPath, $lookupMetaDataId);
            $idField = issetDefaultVal($attributes['id'], 'id');
            
            foreach ($defaultData as $dVal) {
                $lookUpParam['criteria'][$idField][] = array(
                    'operator' => '=',
                    'operand' => $dVal['VALUE_ID']
                );
            }
        }

        if ($getCriteria = $this->model->dataViewHeaderDataModel($processMetaDataId)) {
            foreach($getCriteria as $loop) {
                if (!empty($loop['DEFAULT_VALUE']) && $loop['META_DATA_CODE'] != $paramRealPath) {
                    $lookUpParam['criteria'][$loop['META_DATA_CODE']][] = array(
                        'operator' => '=',
                        'operand' => Mdmetadata::setDefaultValue($loop['DEFAULT_VALUE'])
                    );
                }
            }
        }

        $result = $this->ws->runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {

            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRow = $result['result'];
        }
        
        if ($dataRow) {
            
            $this->load->model('mddatamodel', 'middleware/models/');
            
            $getCodeNameFieldName = $this->model->getCodeNameFieldNameModel($lookupMetaDataId);
            
            $idColumnName = $getCodeNameFieldName['id'];
            $nameColumnName = $getCodeNameFieldName['name'];
            $firstRow = $dataRow[0];
            
            if (isset($firstRow[$idColumnName]) && isset($firstRow[$nameColumnName])) {
                
                $attrArray['data-idfield'] = $idColumnName;
                $attrArray['data-rs-ids'] = '-0|$|' . Arr::implode_key('|$|', $dataRow, $idColumnName, true);
                $attrArray['data-rs-names'] = '&nbsp;|$|' . Arr::implode_key('|$|', $dataRow, $nameColumnName, true);
                $dataRow = array_merge_recursive(array(array($idColumnName => null)), $dataRow);
                $attrArray['data-row-data'] = htmlentities(str_replace('&quot;', '\\&quot;', json_encode($dataRow, JSON_UNESCAPED_UNICODE)), ENT_QUOTES, 'UTF-8');
                
                if ($param['IS_REQUIRED'] == '1') {
                    $attrArray['required'] = 'required';
                }
            
                return Form::text($attrArray);
            }
        }
        
        return null;
    }
    
    public function paramVoiceRecordControl($processMetaDataId, $param, $lowerParamName, $fillParamData) {
        
        $arr = array();
        $paramRealPath = $param['PARAM_REAL_PATH'].'_pfVoiceRecord';
        
        if ($hdrId = issetParam($fillParamData['id'])) {
            
            $this->load->model('mdwebservice', 'middleware/models/');
            
            $getContent = $this->model->getFieldEcmContentModel(Mdwebservice::$refStructureId, $hdrId, $param['PARAM_REAL_PATH']);
            
            if ($getContent) {
                $lowerParamName = strtolower($paramRealPath);
                $arr[$lowerParamName] = $getContent['PHYSICAL_PATH'];
            }
        }
        
        return self::renderVoiceRecordControl($processMetaDataId, $param, 'param['.$paramRealPath.']', $lowerParamName, $arr);
    }
    
    public function renderParamControl($processMetaDataId, array $param, $controlName, $paramPath = '', $fillParamData = false, $sidebar = '', $isCriteriaOption = false) {
            
        $typeCode = $param['META_TYPE_CODE'];
        $paramRealPath = $param['PARAM_REAL_PATH'];
        $paramName = $param['META_DATA_CODE'];
        $lowerParamName = $param['LOWER_PARAM_NAME'];
        
        $attrArray = array(
            'name' => $controlName,
            'tabindex' => issetParam($param['TAB_INDEX']),
            'class' => 'form-control form-control-sm '.$typeCode.'Init',
            'data-path' => $paramRealPath,
            'data-field-name' => $paramName
        );
        
        if ($param['IS_SHOW'] != '1') {
            
            unset($attrArray['class']);
            
            if ($typeCode == 'pftranslationvalue') {
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = str_replace('&quot;', '\"', $fillParamValue);
                }
                
                $attrArray['style'] = 'display: none';
                $attrArray['spellcheck'] = 'false';
                $attrArray['aria-hidden'] = 'true';
                
                return Form::textArea($attrArray);
                
            } elseif ($typeCode == 'boolean') {
                $attrArray['value'] = $param['DEFAULT_VALUE'] == '1' ? 1 : 0;
            } else {
                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
            }   

            if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                $attrArray['value'] = $fillParamValue;
            }
            
            $attrArray['data-isclear'] = $param['IS_REFRESH'];
            
            return Form::hidden($attrArray);

        } else {

            if ($param['IS_REQUIRED'] == '1') {
                $attrArray['required'] = 'required';
                $attrArray['title'] = Lang::line('tm_required_field');
            }
            
            if ($param['LOOKUP_TYPE'] == 'label') {
                $attrArray['disabled'] = 'disabled';
            }

            if ($typeCode == 'boolean') {

                $defaultValue = $param['DEFAULT_VALUE'];
                $attrArray['id'] = $controlName;
                $attrArray['value'] = 1;
                $attrArray['class'] = $typeCode.'Init';
                $attrArray['data-isclear'] = $param['IS_REFRESH'];

                if ($defaultValue != '') {
                    $attrArray['saved_val'] = $defaultValue;
                }

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['saved_val'] = Info::convertLetterToNumberBoolean($fillParamValue);
                }
                
                return Form::checkbox($attrArray);

            } elseif ($typeCode == 'description') {

                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']); 
                $attrArray['spellcheck'] = 'false'; 
                $attrArray['data-isclear'] = $param['IS_REFRESH'];

                if ($param['PARENT_ID'] == '') {
                    $attrArray['style'] = 'height: 39px;';
                } elseif (!empty($sidebar)) {
                    $attrArray['style'] = 'height: 20px;';
                } else {
                    $attrArray['style'] = 'height: 28px;'; 
                    $attrArray['onfocus'] = 'initfocusTextarea(this)';
                    $attrArray['onblur'] = 'initblurTextarea(this)';
                }

                if (isset($param['MIN_VALUE'])) {
                    $attrArray['minlength'] = Number::numberFormat($param['MIN_VALUE'], 0);
                }
                if (isset($param['MAX_VALUE'])) {
                    $attrArray['maxlength'] = Number::numberFormat($param['MAX_VALUE'], 0);
                    $attrArray['data-maxlength'] = 'true';
                }
                
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                
                if ($param['PATTERN_TEXT'] != '') {
                    
                    $attrArray['data-regex'] = $param['PATTERN_TEXT'];
                    $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);
                    
                    if ($param['IS_MASK'] === '1') {
                        $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
                    }
                }
                if ($focusTooltip = issetParam($param['JSON_CONFIG']['focus_tooltip'])) {
                    $attrArray['data-qtip-focus'] = $focusTooltip;
                }
                
                $voiceRecord = '';
                
                if ($param['PARENT_ID'] == '' && issetParam($param['JSON_CONFIG']['isVoiceRecord']) && Mdwebservice::$refStructureId) {
                    $voiceRecord = (new self())->paramVoiceRecordControl($processMetaDataId, $param, $lowerParamName, $fillParamData);
                }
                
                if (Lang::isUseMultiLang() && issetParam($param['IS_TRANSLATE'])) {
                    
                    $attrArray['data-c-name'] = $param['COLUMN_NAME'];
                    
                    $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                        
                    if (Lang::getCode() == Lang::getDefaultLangCode()) {
                        
                        if ($fillParamValue != '') {
                            $attrArray['value'] = $fillParamValue;
                        }
                        
                    } else {
                        
                        if ($fillParamData) {
                            
                            $attrArray['data-dl-value'] = $fillParamValue;
                            
                            if (self::$pfTranslationValArr != self::$fillParamData) {
                                
                                $fillParamValue = self::findRowKeyValFillData($fillParamData, 'pftranslationvalue');
                                
                                if ($fillParamValue) {
                                    $pfTranslationValArr = json_decode($fillParamValue, true);
                                    self::$pfTranslationValArr = $pfTranslationValArr['value'];
                                }
                                
                                self::$fillParamData = $fillParamData;
                            }
                            
                            if (isset(self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()])) {
                                $attrArray['value'] = self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()];
                            }
                        }
                    }
                    
                    return '<div class="input-group">
                            '.Form::textArea($attrArray).'
                            <span class="input-group-append"><button class="btn btn-primary" type="button" onclick="bpFieldTranslate(this);" title="Орчуулга"><i class="far fa-language"></i></button></span> 
                        </div>' . $voiceRecord;
                }
                
                $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                
                if ($fillParamValue != '') {
                    $attrArray['value'] = $fillParamValue;
                }
                
                if ($param['LOOKUP_TYPE'] == 'autocomplete_text') {
                    
                    $attrArray['class'] = $attrArray['class'] . ' lookup-text-autocomplete';
                    $attrArray['placeholder'] = Lang::line($param['META_DATA_NAME']);
                    $attrArray['data-processid'] = $processMetaDataId;
                    $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                    $attrArray['data-displayfield'] = $param['DISPLAY_FIELD'];
                    
                } elseif ($param['LOOKUP_TYPE'] == 'autocomplete_mention') {

                    $attrArray['class'] = $attrArray['class'] . ' lookup-mention-autocomplete';
                    $attrArray['placeholder'] = Lang::line($param['META_DATA_NAME']);
                    $attrArray['data-processid'] = $processMetaDataId;
                    $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                    $attrArray['data-displayfield'] = $param['DISPLAY_FIELD'];
                }
                
                return Form::textArea($attrArray) . $voiceRecord;

            } elseif ($typeCode == 'description_auto') {

                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                $attrArray['spellcheck'] = 'false'; 
                $attrArray['data-isclear'] = $param['IS_REFRESH'];

                if ($param['PARENT_ID'] == '' || $sidebar != '') { 
                    $attrArray['style'] = 'height: 43px;overflow: hidden;';
                } else {
                    $attrArray['style'] = 'overflow: hidden;'; 
                }
                
                if (isset($param['MIN_VALUE'])) {
                    $attrArray['minlength'] = Number::numberFormat($param['MIN_VALUE'], 0);
                }
                
                if (isset($param['MAX_VALUE'])) {
                    $attrArray['maxlength'] = Number::numberFormat($param['MAX_VALUE'], 0);
                    $attrArray['data-maxlength'] = 'true';
                }
                
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                
                if ($param['PATTERN_TEXT'] != '') {
                    $attrArray['data-regex'] = $param['PATTERN_TEXT'];
                    $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);
                    if ($param['IS_MASK'] === '1') {
                        $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
                    }
                }
                if ($focusTooltip = issetParam($param['JSON_CONFIG']['focus_tooltip'])) {
                    $attrArray['data-qtip-focus'] = $focusTooltip;
                }
                
                $voiceRecord = '';
                
                if ($param['PARENT_ID'] == '' && issetParam($param['JSON_CONFIG']['isVoiceRecord']) && Mdwebservice::$refStructureId) {
                    $voiceRecord = (new self())->paramVoiceRecordControl($processMetaDataId, $param, $lowerParamName, $fillParamData);
                }
                
                if (Lang::isUseMultiLang() && issetParam($param['IS_TRANSLATE'])) {
                    
                    $attrArray['data-c-name'] = $param['COLUMN_NAME'];
                    
                    $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                        
                    if (Lang::getCode() == Lang::getDefaultLangCode()) {
                        
                        if ($fillParamValue != '') {
                            $attrArray['value'] = $fillParamValue;
                        }
                        
                    } else {
                        
                        if ($fillParamData) {
                            
                            $attrArray['data-dl-value'] = $fillParamValue;
                            
                            if (self::$pfTranslationValArr != self::$fillParamData) {
                                
                                $fillParamValue = self::findRowKeyValFillData($fillParamData, 'pftranslationvalue');
                                
                                if ($fillParamValue) {
                                    $pfTranslationValArr = json_decode($fillParamValue, true);
                                    self::$pfTranslationValArr = $pfTranslationValArr['value'];
                                }
                                
                                self::$fillParamData = $fillParamData;
                            }
                            
                            if (isset(self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()])) {
                                $attrArray['value'] = self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()];
                            }
                        }
                    }
                    
                    return '<div class="input-group">
                            '.Form::textArea($attrArray).'
                            <span class="input-group-append"><button class="btn btn-primary" type="button" onclick="bpFieldTranslate(this);" title="Орчуулга"><i class="far fa-language"></i></button></span> 
                        </div>' . $voiceRecord;
                }
                
                $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                
                if (!is_null($fillParamValue)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                if ($param['LOOKUP_TYPE'] == 'autocomplete_text') {
                    
                    $attrArray['class'] = $attrArray['class'] . ' lookup-text-autocomplete';
                    $attrArray['placeholder'] = Lang::line($param['META_DATA_NAME']);
                    $attrArray['data-processid'] = $processMetaDataId;
                    $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                    $attrArray['data-displayfield'] = $param['DISPLAY_FIELD'];
                    
                } elseif ($param['LOOKUP_TYPE'] == 'autocomplete_mention') {

                    $attrArray['class'] = $attrArray['class'] . ' lookup-mention-autocomplete';
                    $attrArray['placeholder'] = Lang::line($param['META_DATA_NAME']);
                    $attrArray['data-processid'] = $processMetaDataId;
                    $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                    $attrArray['data-displayfield'] = $param['DISPLAY_FIELD'];
                }

                return Form::textArea($attrArray) . $voiceRecord;

            } elseif ($typeCode == 'register_number') {
                
                $letters = Mdcommon::registerCyrillicLetters();
                $firstAlphaSelected = $secondAlphaSelected = '';
                
                $attrHidden = array(
                    'name' => $controlName, 
                    'data-path' => $paramRealPath, 
                    'data-field-name' => $attrArray['data-field-name'], 
                    'data-isclear' => $param['IS_REFRESH']
                );
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    
                    $attrHidden['value'] = $fillParamValue;
                    $fillParamValue = Str::upper($fillParamValue);
                    
                    $firstAlphaSelected = Str::utf8_substr($fillParamValue, 0, 1);
                    $secondAlphaSelected = Str::utf8_substr($fillParamValue, 1, 1);
                    $attrArray['value'] = Str::utf8_substr($fillParamValue, 2, 8);
                }
                
                $firstAlphaComboAttr = array(
                    'name' => $paramRealPath . '_firstletter', 
                    'class' => 'register-number-combo form-control right-radius-0', 
                    'data' => $letters,
                    'op_value' => 'code',
                    'op_text' => 'code',
                    'value' => $firstAlphaSelected,
                    'data-isclear' => $param['IS_REFRESH'], 
                    'text' => '--'
                );
                
                $secondAlphaComboAttr = array(
                    'name' => $paramRealPath . '_secondletter', 
                    'class' => 'register-number-combo form-control rounded-0 ml-n1', 
                    'data' => $letters,
                    'op_value' => 'code',
                    'op_text' => 'code',
                    'value' => $secondAlphaSelected, 
                    'data-isclear' => $param['IS_REFRESH'], 
                    'text' => '--'
                );
                
                $attrArray['name'] = $paramRealPath . '_numbers';
                $attrArray['style'] = 'min-width: 100px; max-width: 100px';
                $attrArray['data-regex'] = '^[0-9]{8}$';
                $attrArray['data-inputmask-regex'] = '^[0-9]{8}$';
                $attrArray['data-regex-message'] = Lang::line('8 оронтой тоо оруулна уу');
                $attrArray['class'] = $attrArray['class'] . ' rounded-right';
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                unset($attrArray['data-path']);
                
                if ($param['IS_REQUIRED'] == '1') {
                    $firstAlphaComboAttr['required'] = 'required';
                    $secondAlphaComboAttr['required'] = 'required';
                }
                
                $firstCombo = Form::select($firstAlphaComboAttr);
                $secondCombo = Form::select($secondAlphaComboAttr);
                
                return '<div class="input-group">
                    <span class="input-group-prepend">
                        '.$firstCombo.$secondCombo.'
                    </span>
                    '.Form::text($attrArray).Form::hidden($attrHidden).'
                </div>';
                
            } elseif ($typeCode == 'text_editor') {
                
                $renderType = issetParam($param['RENDER_TYPE']);
                $attrArray['value'] = '';
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                if ($renderType == 'wordeditor') {
                    
                    $value = str_replace('storage/', '', $attrArray['value']);
                    
                    return '<div class="wordeditor-iframe-parent">
                        <button type="button" class="wordeditor-iframe-fullscreen-btn" title="Fullscreen">
                            <i class="far fa-expand"></i>
                        </button>
                        <iframe class="wordeditorInit" data-view-path="'.$paramRealPath.'" data-root-url="'.CONFIG_FILE_VIEWER_ADDRESS.'" src="'.CONFIG_FILE_VIEWER_ADDRESS.'DocEdit.aspx?file='.$value.'&folder='.Config::getFromCacheDefault('WORD_EDITOR_FOLDER_MODE', null, 'storagedev').'" frameborder="0" data-default-height="1000px" style="width: 100%;height: 1000px;border: 1px #ddd solid;"></iframe>
                    </div>';
                    
                } elseif ($renderType == 'clicktoedit') {
                    
                    $attrArray['data-isclear'] = $param['IS_REFRESH'];
                    $attrArray['style'] = 'display:none;';
                    $attrArray['class'] = '';

                    if ($attrArray['value']) {
                        $attrArray['value'] = Str::cleanOut($attrArray['value']);
                    }
                
                    return '<div class="input-group">
                                <div class="form-control-plaintext texteditor_clicktoeditInit" contenteditable="true" spellcheck="false" style="text-align: initial">
                                    '.$attrArray['value'].'
                                </div>
                                '.Form::textArea($attrArray).'
                                <span class="input-group-append">
                                    <button class="btn grey-cascade" type="button" onclick="bpFieldTextEditorClickToEdit(this);">
                                        <i class="icon-design"></i>
                                    </button>
                                </span> 
                            </div>';
                    
                } elseif ($renderType == 'clicktoedit_tinymce') {
                    
                    $attrArray['data-isclear'] = $param['IS_REFRESH'];
                    $attrArray['style'] = 'display:none;';
                    $attrArray['class'] = '';

                    if ($attrArray['value']) {
                        $attrArray['value'] = Str::cleanOut($attrArray['value']);
                    }
                
                    return '<div class="input-group">
                                <div class="form-control-plaintext texteditor_clicktoedit_tinymceInit" contenteditable="true" spellcheck="false" style="text-align: initial">
                                    '.$attrArray['value'].'
                                </div>
                                '.Form::textArea($attrArray).'
                                <span class="input-group-append">
                                    <button class="btn grey-cascade" type="button" onclick="bpFieldTextEditorTinymceClickToEdit(this);">
                                        <i class="icon-design"></i>
                                    </button>
                                </span> 
                            </div>';
                }
                
                $attrArray['spellcheck'] = 'false'; 
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($renderType == 'ckeditor') {
                    $attrArray['class'] = 'text_editor_ckedtorInit';
                }

                if (Lang::isUseMultiLang() && issetParam($param['IS_TRANSLATE'])) {
                    
                    $attrArray['data-c-name'] = $param['COLUMN_NAME'];
                    
                    $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                        
                    if (Lang::getCode() == Lang::getDefaultLangCode()) {
                        
                        if ($fillParamValue != '') {
                            $attrArray['value'] = $fillParamValue;
                        }
                        
                    } else {
                        
                        if ($fillParamData) {
                            
                            $attrArray['data-dl-value'] = $fillParamValue;
                            
                            if (self::$pfTranslationValArr != self::$fillParamData) {
                                
                                $fillParamValue = self::findRowKeyValFillData($fillParamData, 'pftranslationvalue');
                                
                                if ($fillParamValue) {
                                    $pfTranslationValArr = json_decode($fillParamValue, true);
                                    self::$pfTranslationValArr = $pfTranslationValArr['value'];
                                }
                                
                                self::$fillParamData = $fillParamData;
                            }
                            
                            if (isset(self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()])) {
                                $attrArray['value'] = self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()];
                            }
                        }
                    }
                    
                    return '<div class="input-group-html-editor">
                            '.Form::textArea($attrArray).'
                            <button class="btn btn-primary bp-editor-translation-btn" type="button" onclick="bpFieldTranslate(this);" title="Орчуулга"><i class="far fa-language"></i></button> 
                        </div>';
                }                

                return Form::textArea($attrArray);

            } elseif ($typeCode == 'icon_picker') {
                
                $btnAttr['class'] = 'icon_pickerInit btn btn-sm btn-secondary';
                $btnAttr['data-isclear'] = $param['IS_REFRESH'];
                $btnAttr['data-search-text'] = Lang::line('META_00109');
                $btnAttr['data-placement'] = 'top';
                $btnAttr['data-iconset'] = 'icomoon';
                $btnAttr['data-cols'] = '5';

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                    $btnAttr['data-icon'] = $fillParamValue;
                }

                return Form::hidden($attrArray).Form::button($btnAttr);

            } elseif ($typeCode == 'clob') {
                
                if (issetParam($param['RENDER_TYPE']) == 'propertygrid') {
                    
                    $attrArray['data-isclear'] = $param['IS_REFRESH'];
                    $attrArray['style'] = 'height: 28px; overflow: hidden; resize: none;';
                    $attrArray['draggable'] = 'false';
                    $attrArray['rows'] = '1';
                    $attrArray['data-type'] = $param['MIN_VALUE'];

                    if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                        $attrArray['value'] = $fillParamValue;
                    }
                
                    return '<div class="input-group">
                                '.Form::textArea($attrArray).'
                                <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="bpFieldPropertyGrid(this);"><i class="icon-design"></i></button></span> 
                            </div>';
                }

                $attrArray['spellcheck'] = 'false'; 
                $attrArray['style'] = 'height: 39px;overflow: hidden;';
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);

                return Form::textArea($attrArray);

            } elseif ($typeCode == 'payroll_expression') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::text($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="payrollExpression(this);" title="Томъёо тохируулах"><i class="fa fa-laptop"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'expense_expression') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::text($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="expenseExpression(this);" title="Томъёо тохируулах"><i class="fa fa-laptop"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'expression_editor') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['style'] = 'height: 28px; overflow: hidden; resize: none;';
                $attrArray['draggable'] = 'false';
                $attrArray['rows'] = '1';
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    
                    $fillParamValue = Mdmetadata::objectDeCompress($fillParamValue);
                    
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::textArea($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="bpExpressionEditor(this);"><i class="far fa-code"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'vexpression_editor') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['style'] = 'height: 28px; overflow: hidden; resize: none;';
                $attrArray['draggable'] = 'false';
                $attrArray['rows'] = '1';
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    
                    if ($lowerParamName == 'tablename') {
                        $fillParamValue = Mdmetadata::objectDeCompress($fillParamValue);
                    }
                    
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::textArea($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="bpVExpressionEditor(this);"><i class="far fa-code"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'account_segment') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::text($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="bpAccountSegmentConfig(this);" title="Segment тохируулах"><i class="fa fa-list-ul"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'button') {
                
                $iconName = (isset($param['ICON_NAME']) && $param['ICON_NAME'] != '') ? '<i class="fa '.$param['ICON_NAME'].'"></i> ' : '';

                return '<button type="button" class="btn blue btn-sm" data-path="'.$paramRealPath.'">'.$iconName.Lang::line($param['PLACEHOLDER_NAME']).'</button>';

            } elseif ($typeCode == 'web_camera') {
                
                $fileName = $webCamPhoto = '';
                
                if ($fillParamData) {
                    $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);

                    if (!empty($fileName)) {
                        $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
                        
                        if (in_array($fileExtension, array('jpg', 'jpeg', 'png', 'gif')) === true) {
                            $webCamPhoto = ' <a href="' . URL . $fileName . '" class="fancybox-button main ml5" data-rel="fancybox-button" title="Зураг үзэх"><img src="' . URL . $fileName . '" width="32" style="1px solid #6e6e6e"></a>';
                        }
                    }
                }                

                $hiddenForm = Form::hidden(array(
                    'name' => $controlName,
                    'class' => 'form-control form-control-sm '.$typeCode.'Init',
                    'data-path' => $paramRealPath,
                    'data-field-name' => $paramName,
                    'data-isclear' => $param['IS_REFRESH'],
                    'value' => $fileName
                ));                
                return '<button type="button" onClick="bpWebCamera(this)" class="btn blue btn-sm" data-path="'.$paramRealPath.'" title="Вэб камер"><i class="fa fa-camera"></i></button>' . $webCamPhoto . $hiddenForm;

            } elseif ($typeCode == 'qrcode') {
                
                $fileName = '';       
                
                if ($fillParamData) {
                    $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                }        

                $hiddenForm = Form::hidden(array(
                    'name' => $controlName,
                    'class' => 'form-control form-control-sm '.$typeCode.'Init',
                    'data-path' => $paramRealPath,
                    'data-field-name' => $paramName,
                    'data-isclear' => $param['IS_REFRESH'],
                    'value' => $fileName
                ));                
                return '<button type="button" onClick="bpViewQRcode(this)" class="btn blue btn-sm" data-path="'.$paramRealPath.'" title="QRcode харах"><i class="fa fa-qrcode"></i></button>' . $hiddenForm;

            } elseif ($typeCode == 'nfc_card') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::text($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="bpNfcCardReader(this);" title="NFC карт унших"><i class="fa fa-credit-card"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'mifare_card') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                return '<div class="input-group">
                            '.Form::text($attrArray).'
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="bpMifareCardReader(this);" title="NFC карт унших"><i class="fa fa-credit-card"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'check_fingerprint') {

                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['readonly'] = 'readonly';
                
                $FingerPrint_URL = Config::getFromCache('FingerPrint_URL');
                
                $fingerIp = $FingerPrint_URL ? $FingerPrint_URL : '192.168.100.101';
                
                return '<div class="input-group">
                    '.Form::text($attrArray).'
                    <span class="input-group-append">
                        <button class="btn grey-cascade" type="button" onclick="bpCheckFingerPrint(this, \''.$fingerIp.'\');" title="Хурууны хээ шалгах"><i class="fa fa-hand-o-up"></i></button>
                    </span> 
                </div>';

            } elseif ($typeCode == 'citizen_card') {
                
                return '<div class="input-group">
                            <span class="input-group-append"><button class="btn grey-cascade" type="button" onclick="getInfoCitizenCard(this);" title="Иргэний үнэмлэх унших"><i class="fa fa-credit-card"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'finger_search') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['readonly'] = 'readonly';
                
                return '<div class="input-group w-100">
                            '.Form::hidden($attrArray).'
                            <span class="input-group-append pull-left w-100">
                                <button class="btn grey-cascade w-100" type="button" onclick="dvSearchFingerPrint(this);" style="border-radius: 5px; padding: 0px;" title="Хурууны хээ дуудах"><i class="fa fa-hand-o-up"></i></button>
                            </span> 
                        </div>';

            } elseif ($typeCode == 'bpmn_tool') {
                
                $fileName = '';       
                
                if ($fillParamData) {
                    $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                }        

                $hiddenForm = Form::hidden(array(
                    'name' => $controlName,
                    'class' => 'form-control form-control-sm '.$typeCode.'Init',
                    'data-path' => $paramRealPath,
                    'data-field-name' => $paramName,
                    'data-isclear' => $param['IS_REFRESH'],
                    'value' => $fileName
                ));                
                return '<button type="button" onClick="bpBpmnTool(this)" class="btn blue btn-xs" data-path="'.$paramRealPath.'" title="">BPMN</button>' . $hiddenForm;                

            } elseif ($typeCode == 'label') {
                
                return '<span data-path="'.$paramRealPath.'">'.html_entity_decode(self::findRowKeyValFillData($fillParamData, $lowerParamName), ENT_QUOTES, 'UTF-8').'</span>';

            } elseif ($typeCode == 'url') {
                
                $selectValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                
                return '<span data-path="'.$paramRealPath.'"><a href="'.$selectValue.'" target="_blank">'.$selectValue.'</a></span>';

            } elseif ($typeCode == 'date') {
                
                $dateInputClass = $attrArray['class'];
                $lowerDefaultValue = strtolower($param['DEFAULT_VALUE']);
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }

                if ($paramMinValue = issetParam($param['MIN_VALUE'])) {
                    if (strtolower($paramMinValue) == 'fiscalperiodstartdate') {
                        $attrArray['data-mindate'] = Ue::sessionFiscalPeriodStartDate();
                    } elseif (strpos($paramMinValue, 'range[') !== false) {
                        $attrArray['data-pf-rangemin'] = $paramMinValue;
                    } else {
                        $attrArray['data-mindate'] = $paramMinValue;
                    }
                }
                
                if ($paramMaxValue = issetParam($param['MAX_VALUE'])) {
                    if (strtolower($paramMaxValue) == 'fiscalperiodenddate') {
                        $attrArray['data-maxdate'] = Ue::sessionFiscalPeriodEndDate();
                    } elseif (strpos($paramMaxValue, 'range[') !== false) {
                        $attrArray['data-pf-rangemax'] = $paramMaxValue;
                    } else {
                        $attrArray['data-maxdate'] = $paramMaxValue;
                    }
                }
                
                if ($lowerDefaultValue == 'fiscalperiodstartdate') {
                    $attrArray['class'] = $dateInputClass.' fin-fiscalperiod-startdate';
                } elseif ($lowerDefaultValue == 'fiscalperiodenddate') {
                    $attrArray['class'] = $dateInputClass.' fin-fiscalperiod-enddate';
                }

                if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
                    $attrArray['class'] = $attrArray['class'] . ' group-dtl-linked';
                    $attrArray['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
                }
                
                if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                    $attrArray['class'] = $attrArray['class'] . ' linked-combo';
                    $attrArray['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
                }
                
                if (issetParam($param['RENDER_TYPE']) == 'calendar') {
                    
                    $divInline = array(
                        'class' => 'pf-inline-datepicker', 
                        'data-section-path' => $paramRealPath, 
                        'data-date' => $attrArray['value']
                    );
                    
                    $attrArray['class'] = str_replace('dateInit', 'inlineDateInit', $attrArray['class']);
                    
                    return html_tag('div', $divInline, Form::hidden($attrArray), true);
                            
                } else {

                    $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                    if ($focusTooltip = issetParam($param['JSON_CONFIG']['focus_tooltip'])) {
                        $attrArray['data-qtip-focus'] = $focusTooltip;
                    }

                    return html_tag('div', array(
                            'class' => 'dateElement input-group',
                            'data-section-path' => $paramRealPath
                        ), Form::text($attrArray) . '<span class="input-group-btn"><button tabindex="-1" onclick="return false;" class="btn"><i class="fal fa-calendar"></i></button></span>', true
                    );
                }

            } elseif ($typeCode == 'time') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);

                if ($savedTime = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = Date::formatter($savedTime, 'H:i');
                }

                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);

                return Form::text($attrArray);

            } elseif ($typeCode == 'timer') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                if ($savedTime = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $savedTime;
                } 

                $timerBtn = '<div class="mt5">'.
                                '<button type="button" class="btn btn-primary btn-sm timer-start" data-processid="' . $processMetaDataId . '" onClick="timerAction(this)" data-type="start">Эхлүүлэх</button>'.
                                '<button type="button" class="btn btn-primary btn-sm timer-play" data-processid="' . $processMetaDataId . '" onClick="timerAction(this)" data-type="play">Эхлүүлэх</button>'.
                                '<button type="button" class="btn btn-primary btn-sm timer-pause" data-processid="' . $processMetaDataId . '" onClick="timerAction(this)" data-type="pause" title="Зогсоох"><i class="fa fa-pause"></i></button>'.
                                '<button type="button" class="btn btn-primary btn-sm timer-stop" data-processid="' . $processMetaDataId . '" onClick="timerAction(this)" data-type="stop" title="Зогсоох">Дуусгах</button>'.
                            '</div>';

                unset($attrArray['class']);        
                return Form::hidden($attrArray) . '<div class="'.$typeCode.'Init"></div>' . $timerBtn;

            } elseif ($typeCode == 'password') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }

                if (!empty($param['PATTERN_TEXT'])) { 
                    $attrArray['data-regex'] = $param['PATTERN_TEXT'];
                    $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);
                    if ($param['IS_MASK'] == '1') {
                        $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
                    }
                }
                if ($focusTooltip = issetParam($param['JSON_CONFIG']['focus_tooltip'])) {
                    $attrArray['data-qtip-focus'] = $focusTooltip;
                }
                
                $attrArray['autocomplete'] = 'false';
                $attrArray['readonly'] = 'readonly';
                $attrArray['class'] = $attrArray['class'].' readonly-white-bg';
                $attrArray['onfocus'] = "this.removeAttribute('readonly');";
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                
                return '<div class="input-group">
                            '.Form::password($attrArray).'
                            <span class="input-group-append"><button type="button" class="btn default btn-sm mr0" onclick="pinPasswordShow(this);"><i class="far fa-eye"></i></button></span> 
                        </div>';

            } elseif ($typeCode == 'encrypt') {

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                
                $attrArray['autocomplete'] = 'false';
                $attrArray['onfocus'] = "this.removeAttribute('readonly');";
                $attrArray['data-isclear'] = $param['IS_REFRESH'];

                return Form::password($attrArray);

            } elseif ($typeCode == 'file' || $typeCode == 'file_withcrop' || $typeCode == 'file_style') {
                
                $renderType = issetParam($param['RENDER_TYPE']);
                
                if ($renderType == 'voicerecord') {
                    
                    return self::renderVoiceRecordControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                    
                } elseif ($renderType == 'preview') {
                    
                    return (new self())->renderFilePreviewControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                }
                
                $fileHidden = $fileView = '';
                
                if (issetParam($param['FEATURE_NUM'])) { 

                    if (isset($param['FILE_EXTENSION'])) {
                        $attrArray['data-valid-extension'] = $param['FILE_EXTENSION'];
                    }

                    if (isset($param['MAX_VALUE'])) {
                        $attrArray['data-max-file-size'] = $param['MAX_VALUE'];
                    }

                    if ($fillParamData) {

                        $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                        $fileHidden = Form::hidden(array('name' => 'editfile_' . $controlName, 'value' => $fileName));

                        if (!empty($fileName)) {

                            if (isset($attrArray['required'])) {
                                unset($attrArray['required']);
                            }

                            $href = 'mdobject/downloadFile?fDownload=1&file=' . $fileName;
                            $realFileName = issetParam($fillParamData[$lowerParamName.'_filename']);

                            if ($realFileName) {
                                $href .= '&fileName=' . $realFileName;
                            }

                            $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
                            $fileView = html_tag('a', array('href'=>$href, 'title'=>'Татах', 'class'=>'float-right', 'style'=>'width:22px;margin-top:-23px; margin-right:4px;'), '<i class="icon-download4"></i>');
                            $fileView .= html_tag('a', array('href'=>'javascript:;', 'data-url'=>$fileName, 'data-extension'=>$fileExtension, 'title'=>'Харах', 'onclick'=>'bpFilePreview(this);', 'class'=>'float-right', 'style'=>'width:26px;margin-top:-23px; margin-right:22px;'), '<i class="icon-file-picture"></i>');
                        }
                    }

                    $attrArray['data-isclear'] = $param['IS_REFRESH'];

                    if ($typeCode == 'file_withcrop') {
                        $attrArray['onchange'] = 'imageCrop(this)';
                    }

                    return Form::file($attrArray) . $fileHidden . $fileView;
                    
                } else {

                    $noFileSelected = 'No file selected';
                    $fileNameTag = $noFileSelected;

                    if (isset($param['FILE_EXTENSION'])) {
                        $attrArray['data-valid-extension'] = $param['FILE_EXTENSION'];
                    }

                    if (isset($param['MAX_VALUE'])) {
                        $attrArray['data-max-file-size'] = $param['MAX_VALUE'];
                    }

                    if ($fillParamData) {

                        $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                        $fileHidden = Form::hidden(array('name' => 'editfile_' . $controlName, 'value' => $fileName));

                        if (!empty($fileName) && strpos($fileName, '.') !== false) {

                            if (isset($attrArray['required'])) {
                                unset($attrArray['required']);
                            }

                            $href = 'mdobject/downloadFile?fDownload=1&file=' . $fileName;
                            $realFileName = issetParam($fillParamData[$lowerParamName.'_filename']);

                            if ($realFileName) {
                                $href .= '&fileName=' . $realFileName;
                                $fileNameTag = $realFileName;
                            } else {
                                $fileNameTag = basename($fileName);
                            }

                            if (issetParamArray($fillParamData[$lowerParamName . '_multifile'])) {
                                $fileNames = issetParamArray($fillParamData[$lowerParamName . '_multifile']);
                                $fileNameTag = issetParam($fileNames['0']['filename']);
                            }

                            $attrArray['title'] = $fileNameTag;

                            $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));

                            if ($fileExtension == 'pdf') {
                                $fileIcon = 'icon-file-pdf';
                            } elseif ($fileExtension == 'doc' || $fileExtension == 'docx') {
                                $fileIcon = 'icon-file-word';
                            } elseif ($fileExtension == 'xls' || $fileExtension == 'xlsx') {
                                $fileIcon = 'icon-file-excel';
                            } elseif ($fileExtension == 'png' || $fileExtension == 'jpg' || $fileExtension == 'jpeg' 
                                || $fileExtension == 'gif' || $fileExtension == 'bmp' || $fileExtension == 'webp') {
                                $fileIcon = 'icon-file-picture';
                            } elseif ($fileExtension == 'zip' || $fileExtension == 'rar') {
                                $fileIcon = 'icon-file-zip';
                            } else {
                                $fileIcon = 'icon-file-text2';
                            }

                            if ($typeCode != 'file_style') {
                                $fileView = html_tag('a', array('href'=>$href,'title'=>Lang::line('download_btn'),'class'=>'btn btn-sm btn-light rounded-0'), '<i class="icon-download"></i>');
                                $fileView .= html_tag('a', array('href'=>'javascript:;','title'=>Lang::line('see_btn'),'data-url'=>$fileName, 'data-extension'=>$fileExtension, 'onclick'=>'bpFilePreview(this);', 'class'=>'btn btn-sm btn-light rounded-0'), '<i class="'.$fileIcon.'"></i>');
                                $fileView .= html_tag('a', array('href'=>'javascript:;','title'=>Lang::line('delete_btn'),'onclick'=>'bpFileChoosedRemove(this);', 'class'=>'btn btn-sm btn-light rounded-0'), '<i class="icon-trash-alt"></i>');
                            } else {
                                $btnClass = 'btn-outline-primary';
                                $deleteBtn = Lang::line('delete_btn');
                                
                                if ($fileExtension == 'xls' || $fileExtension == 'xlsx') {
                                    $btnClass = 'btn-outline-success';
                                } elseif ($fileExtension == 'pdf') {
                                    $btnClass = 'btn-outline-danger';
                                } 
                                
                                $fileView .= '<div class="btn-group mt3 mb3">
                                    <button type="button" class="btn '.$btnClass.' btn-sm text-one-line mr0" onclick="bpFilePreview(this);" data-fileurl="'.$fileName.'" data-filename="'.$fileName['filename'].'" data-extension="'.$fileExtension.'" title="'.$fileNameTag.'" style="height: 24px;padding: 1px 5px;">'.$fileNameTag.'</button>
                                    <button type="button" class="btn '.$btnClass.' btn-icon btn-sm" title="'.$deleteBtn.'" onclick="bpDtlMultiFileRemove(this);" data-id="'.$fileName['id'].'" data-r-path="'.$paramRealPath.'" style="height: 24px;padding: 1px 5px; width: 20px;padding: 2px 2px 2px 1px;line-height: 18px;"><i class="icon-cross"></i></button>
                                </div>';
                            }
                        }
                    }

                    $attrArray['data-isclear'] = $param['IS_REFRESH'];
                    $attrArray['class'] = $attrArray['class'] . ' form-control-uniform';

                    if ($typeCode == 'file_withcrop') {
                        $attrArray['onchange'] = 'imageCrop(this)';
                    }

                    return '<div class="uniform-uploader" data-section-path="' . $param['PARAM_REAL_PATH'] . '">
                        '.Form::file($attrArray).$fileHidden.'
                        <span class="filename" data-text="'.$noFileSelected.'" title="'.$fileNameTag.'">'.$fileNameTag.'</span>
                        '.$fileView.'
                        <button type="button" class="action btn btn-sm btn-light bp-file-choose-btn" onclick="bpFileChoose(this);">'.Lang::line('select_file_btn').'</button>
                    </div>';
                }

            } elseif ($typeCode == 'multi_file' || $typeCode == 'multi_file_style' || $typeCode == 'multi_file_thumb') {
                
                $fileView = '';
                
                if (isset($param['FILE_EXTENSION'])) {
                    $attrArray['data-valid-extension'] = $param['FILE_EXTENSION'];
                }
                
                if (isset($param['MAX_VALUE'])) {
                    $attrArray['data-max-file-size'] = $param['MAX_VALUE'];
                }
                
                $attrArray['multiple'] = 'multiple';
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if ($param['PARENT_ID'] == '') {
                    $attrArray['name'] = $attrArray['name'].'[]';
                }
                
                if ($fillParamData && isset($fillParamData[$lowerParamName . '_multifile']) && is_array($fillParamData[$lowerParamName . '_multifile'])) {
                    
                    $fileNames = $fillParamData[$lowerParamName . '_multifile'];
                    $deleteBtn = Lang::line('delete_btn');
                    
                    foreach ($fileNames as $k => $fileName) {
                        
                        $btnClass = 'btn-outline-primary';
                        
                        if ($fileName['fileextension'] == 'xls' || $fileName['fileextension'] == 'xlsx') {
                            $btnClass = 'btn-outline-success';
                        } elseif ($fileName['fileextension'] == 'pdf') {
                            $btnClass = 'btn-outline-danger';
                        } 
                        
                        $fileView .= '<div class="btn-group mt3 mb3">
                            <button type="button" class="btn '.$btnClass.' btn-sm text-one-line mr0" onclick="bpFilePreview(this);" data-fileurl="'.$fileName['physicalpath'].'" data-filename="'.$fileName['filename'].'" data-extension="'.$fileName['fileextension'].'" title="'.$fileName['filename'].'" style="height: 24px;padding: 1px 5px;">'.$fileName['filename'].'</button>
                            <button type="button" class="btn '.$btnClass.' btn-icon btn-sm" title="'.$deleteBtn.'" onclick="bpDtlMultiFileRemove(this);" data-id="'.$fileName['id'].'" data-r-path="'.$paramRealPath.'" style="height: 24px;padding: 1px 5px; width: 20px;padding: 2px 2px 2px 1px;line-height: 18px;"><i class="icon-cross"></i></button>
                        </div>';
                    }
                }
                
                if ($typeCode == 'multi_file_style') {
                    $attrArray['onchange'] = 'onChangeBpAttachMultiFileAddMode(this)';
                    
                    return '<div class="w-100">'
                                . '<a href="javascript:;" class="btn btn-outline bg-primary border-primary text-primary-800 fileinput-button" title="Файл нэмэх" style="padding: 1px 10px; text-align: left;">'
                                    . '<i class="icon-attachment mr-1"></i> Файл нэмэх'
                                    . Form::file($attrArray)
                                . '</a>'
                            . '</div>' . $fileView; 
                } else {
                    return Form::file($attrArray) . $fileView;
                }
                
            } elseif ($typeCode == 'base64') {

                $fileHidden = $fileView = '';

                if (isset($param['FILE_EXTENSION'])) {
                    $attrArray['data-valid-extension'] = $param['FILE_EXTENSION'];
                }
                
                if ($fillParamData) {
                    $fileName = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                    $fileHidden = Form::hidden(array('name' => 'editfile_' . $controlName, 'value' => $fileName));

                    if (!empty($fileName)) {
                        if (isset($attrArray['required'])) {
                            unset($attrArray['required']);
                        }

                        $fileView = html_tag('a', array('href' => 'mdobject/downloadFile?fDownload=1&file=' . $fileName, 'title' => 'Файл татах', 'class' => 'float-right', 'style' => 'margin-top:-20px; margin-right:4px;'), '<i class="fa fa-file text-success"></i>');
                        $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
                        
                        if (in_array($fileExtension, array("jpg", "jpeg", "png", "gif")) === true) {
                            $fileView .= html_tag('a', array('href' => URL . $fileName, 'class' => 'float-right fancybox-button', 'style' => 'margin-top: -20px; margin-right: 18px; background: transparent;  width: 28px; height: 28px;'), '<i class="fa fa-image text-success"></i>');
                        }
                    }
                }
                $attrArray['class'] = $attrArray['class'];
                $attrArray['data-isclear'] = $param['IS_REFRESH'];

                return Form::file($attrArray) . $fileHidden . $fileView;

            } elseif ($typeCode == 'base64_to_file') {

                $attrArray['spellcheck'] = 'false'; 
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['rows'] = 5;
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                $attrArray['value'] = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                
                /*if ($fileName) {
                    
                    $fileView = html_tag('a', array('href' => 'mdobject/downloadFile?fDownload=1&file=' . $fileName, 'title' => 'Файл татах', 'class' => 'float-right'), '<i class="fa fa-file text-success"></i>');
                    $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));

                    if (in_array($fileExtension, array('jpg', 'jpeg', 'png', 'gif')) === true) {
                        $fileView .= html_tag('a', array('href' => URL . $fileName, 'class' => 'float-right fancybox-button', 'style' => 'margin-top: -10px; margin-right: 0; background: transparent; width: 28px; height: 28px;'), '<i class="fa fa-image text-success"></i>');
                    }
                }*/
                
                $fileView = html_tag('a', array(
                    'href' => 'javascript:;', 
                    'title' => 'Файл харах', 
                    'class' => 'float-right', 
                    'onclick' => 'bpViewBase64Field(this);'
                ), '<i class="fa fa-file text-success"></i>');

                return Form::textArea($attrArray) . $fileView;

            } elseif ($typeCode == 'coordinate' || $typeCode == 'route') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                $attrArray['readonly'] = true;

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                return html_tag('div', array('class' => 'input-group gmap-set-coordinate-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="setGMapCoordinate(this); return false;" class="btn btn-primary  mr0" style="position: absolute; right: 0;"><i class="fa fa-map-marker"></i></button></span>', true);

            } elseif ($typeCode == 'region') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                
                if (strtolower($paramRealPath) == 'region1') {

                    $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                    $attrArray['readonly'] = true;

                    if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                        $attrArray['value'] = $fillParamValue;
                    }
                    return html_tag('div', array('class' => 'input-group gmap-set-region-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="customImageMarker(\''.$param['ID'].'\', this); return false;" class="btn mr0"><i class="fa fa-map-marker"></i></button></span>', true);                
                    
                } elseif (strtolower($paramRealPath) == 'wh_location_device_dv.region1') {

                    $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                    $attrArray['readonly'] = true;

                    if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                        $attrArray['value'] = $fillParamValue;
                    }
                    return html_tag('div', array('class' => 'input-group gmap-set-region-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="customImageMarker2(\''.$param['ID'].'\', this); return false;" class="btn mr0"><i class="fa fa-map-marker"></i></button></span>', true);                
                    
                } elseif (strtolower($paramRealPath) == 'whsensorattachimage.region1') {

                    $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                    $attrArray['readonly'] = true;

                    if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                        $attrArray['value'] = $fillParamValue;
                    }
                    return html_tag('div', array('class' => 'input-group gmap-set-region-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="customImageMarker3(\''.$param['ID'].'\', this); return false;" class="btn mr0"><i class="fa fa-map-marker"></i></button></span>', true);
                    
                } elseif (strtolower($paramRealPath) == 'mob_location_dv.region1') {

                    $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                    $attrArray['readonly'] = true;

                    if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                        $attrArray['value'] = $fillParamValue;
                    }
                    return html_tag('div', array('class' => 'input-group gmap-set-region-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="customImageMarker4(\''.$param['ID'].'\', this); return false;" class="btn mr0"><i class="fa fa-map-marker"></i></button></span>', true);
                }

                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                $attrArray['readonly'] = true;

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }

                return html_tag('div', array('class' => 'input-group gmap-set-region-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="setGoogleMapRegion(\''.$paramRealPath.'\', this); return false;" class="btn defualt nrounded mr0"><i class="fa fa-map-marker"></i></button></span>', true);

            } elseif ($typeCode == 'location_region') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['readonly'] = true;

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                }
                return html_tag('div', array('class' => 'input-group gmap-set-region-control'), Form::text($attrArray) . '<span class="input-group-btn"><button onclick="customImageMarker4(\''.$param['ID'].'\', this); return false;" class="btn mr0"><i class="fa fa-map-marker"></i></button></span>', true);
                
            } elseif ($typeCode == 'signature') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $signatureImage = '';

                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $fillParamValue;
                    $signatureImage = ' style="background-image: url(data:image/jpeg;base64,'.$fillParamValue.');"';
                }

                return '<div class="bp-signature">
                            <button type="button" class="btn btn-sm purple-plum" onclick="bpSignatureWrite(this);"><i class="fa fa-pencil"></i> Гарын үсэг зурах</button>
                            <button type="button" class="btn btn-sm red-sunglo" onclick="bpSignatureRemove(this);" title="Гарын үсэг устгах"><i class="fa fa-trash"></i></button>
                            <div class="bp-signature-image"'.$signatureImage.'></div>
                            '.Form::hidden($attrArray).'
                        </div>';

            } elseif ($typeCode == 'colorpicker') {
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);

                if ($savedColor = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $attrArray['value'] = $savedColor;
                }

                $attrArray['placeholder'] = Lang::line($param['META_DATA_NAME']);
                $attrArray['readonly'] = 'readonly';

                return html_tag('div', array(
                        'class' => 'input-group color bp-color-picker',
                        'data-section-path' => $paramRealPath,
                        'data-color' => $attrArray['value'],
                    ), Form::text($attrArray) . '<span class="input-group-btn"><button tabindex="-1" onclick="initBpColorPicker(this); return false;" class="btn default border-left-0 mr-0 colorpicker-input-addon px-1" style="height: 25px;border-radius: 0 3px 3px 0;"><i style="position:relative; rigth: 0; background-color: ' . $attrArray['value'] . '"></i></button></span>', true
                );

            } elseif ($typeCode == 'codeview') {
                
                $value = '';
                if ($savedCode = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                    $value = $savedCode;
                }
                
                return html_tag('div', array(
                        'class' => 'bp-codeview-path',
                        'data-section-path' => $paramRealPath,
                    ), $value, true
                );
                
            } elseif ($typeCode == 'fingerprint_imageurl') {
                
                return self::renderFingerControl($processMetaDataId, $param, $controlName, $paramName, $fillParamData, $isCriteriaOption);
                
            }  elseif ($typeCode == 'passport_reader') {
                
                return self::renderPassportReaderControl($processMetaDataId, $param, $controlName, $paramName, $fillParamData, $isCriteriaOption);
                
            } else {

                if ($param['LOOKUP_TYPE'] != '' && $param['LOOKUP_META_DATA_ID'] != '') {
                    
                    $lookupTypeLower = $param['LOOKUP_TYPE'];

                    if ($lookupTypeLower == 'combo') {
                        
                        $select2 = ($sidebar == '') ? ' select2' : '';
                        
                        if ($param['CHOOSE_TYPE'] === 'combolist') {
                            $select2 = ' multiSelectOpen';
                        }
                        
                        $attrArray['data-isclear'] = $param['IS_REFRESH'];
                        $attrArray['value'] = Mdwebservice::setLookupDefaultValue($param['DEFAULT_VALUE'], $param['LOOKUP_META_DATA_ID'], $lookupTypeLower, $param['VALUE_FIELD']);

                        $arr = array(
                            'META_DATA_ID' => $param['LOOKUP_META_DATA_ID'],
                            'ATTRIBUTE_ID_COLUMN' => $param['ATTRIBUTE_ID_COLUMN'],
                            'ATTRIBUTE_NAME_COLUMN' => $param['ATTRIBUTE_NAME_COLUMN'],
                            'ATTRIBUTE_CODE_COLUMN' => $param['ATTRIBUTE_CODE_COLUMN'],
                            'PARAM_REAL_PATH' => $paramRealPath,
                            'PROCESS_META_DATA_ID' => $processMetaDataId,
                            'CHOOSE_TYPE' => $param['CHOOSE_TYPE']
                        );
                        
                        if ($param['VALUE_FIELD'] != '') {
                            $arr['ATTRIBUTE_ID_COLUMN'] = $param['VALUE_FIELD'];
                        }
                        if ($param['DISPLAY_FIELD'] != '') {
                            $arr['ATTRIBUTE_NAME_COLUMN'] = $param['DISPLAY_FIELD'];
                        }

                        if ($param['GROUP_CONFIG_PARAM_PATH'] != '') {
                            
                            $attrArray['class'] = 'form-control form-control-sm dropdownInput' . $select2;
                            $attrArray['disabled'] = 'disabled';
                            $attrArray['data-row-data'] = htmlentities(json_encode($arr), ENT_QUOTES, 'UTF-8');
                            $attrArray['data-in-param'] = $param['GROUP_CONFIG_PARAM_PATH'];
                            $attrArray['data-in-lookup-param'] = $param['GROUP_CONFIG_LOOKUP_PATH'];

                            if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                                $attrArray['class'] = 'form-control form-control-sm dropdownInput linked-combo' . $select2;
                                $attrArray['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
                            }

                            if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
                                $attrArray['class'] = $attrArray['class'] . ' group-dtl-linked';
                                $attrArray['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
                            }
                            
                            $fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName);

                            if ($fillParamValue != '') {

                                if (is_array($fillParamValue)) {
                                    
                                    $attrArray['value'] = $fillParamValue['META_VALUE_ID'];
                                    $attrArray['data-edit-value'] = $fillParamValue['META_VALUE_ID'];
                                    $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));
                                    
                                    if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma') {
                                    
                                        $comboData = self::setMultiComboData($arr, $fillParamValue['rowData']);

                                    } else {
                                        $comboData = array(array(
                                            'META_VALUE_ID' => $fillParamValue['META_VALUE_ID'], 
                                            'META_VALUE_NAME' => $fillParamValue['META_VALUE_NAME'], 
                                            'rowData' => $fillParamValue['rowData']
                                        ));
                                    }

                                } else {
                                    
                                    $attrArray['value'] = $fillParamValue;
                                    $attrArray['data-edit-value'] = $fillParamValue;
                                    $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));

                                    $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $fillParamValue);
                                }

                                $attrArray['data'] = $comboData;
                                $attrArray['op_value'] = 'META_VALUE_ID';
                                $attrArray['op_text'] = 'META_VALUE_NAME';
                                
                                unset($attrArray['disabled']);
                            }

                            if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma' || $param['CHOOSE_TYPE'] == 'combolist') {

                                $attrArray['multiple'] = 'multiple';
                                $attrArray['name'] = $controlName . '[]';
                                
                                if ($param['CHOOSE_TYPE'] == 'combolist') {
                                    $attrArray['style'] = 'min-height: 250px !important';
                                    $attrArray['class'] = $attrArray['class'] . ' data-combo-set';
                                    $attrArray['nonulloption'] = '';
                                }                                

                                return Form::multiselect($attrArray);
                            }                                
                            
                            return Form::select($attrArray);
                        }

                        $comboData = $comboClass = '';
                        
                        $fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName);
                            
                        if ($fillParamValue != '') {
                        
                            if (is_array($fillParamValue)) {

                                $attrArray['value'] = $fillParamValue['META_VALUE_ID'];
                                $attrArray['data-edit-value'] = $fillParamValue['META_VALUE_ID'];
                                $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));
                                
                                if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma') {
                                    
                                    $comboData = self::setMultiComboData($arr, $fillParamValue['rowData']);
                                    
                                } else {
                                    $comboData = array(array(
                                        'META_VALUE_ID' => $fillParamValue['META_VALUE_ID'], 
                                        'META_VALUE_NAME' => $fillParamValue['META_VALUE_NAME'], 
                                        'rowData' => $fillParamValue['rowData']
                                    ));
                                }

                            } else {
                                
                                $attrArray['value'] = $fillParamValue;
                                $attrArray['data-edit-value'] = $fillParamValue;
                                $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));
                        
                                $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $fillParamValue);
                            }

                        } elseif ($attrArray['value'] != '') {
                            
                            $attrArray['data-edit-value'] = $attrArray['value'];
                            $attrArray['op_custom_attr'] = array(array('key' => 'rowData', 'attr' => 'data-row-data'));
                            
                            $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $attrArray['value']);

                        } else {
                            if ($param['GROUP_PARAM_CONFIG_TOTAL'] > 0 || $param['CHOOSE_TYPE'] == 'combolist') {
                                $comboClass = 'data-combo-set ';
                                $comboData = (new Mdmetadata())->getMetaDataValuesByDataView($arr);
                            }
                        }
                        
                        $attrArray['id'] = $controlName; 
                        $attrArray['class'] = 'form-control form-control-sm ' . $comboClass . 'dropdownInput' . $select2;
                        $attrArray['data-row-data'] = htmlentities(json_encode($arr), ENT_QUOTES, 'UTF-8');
                        $attrArray['data'] = $comboData;
                        $attrArray['op_value'] = 'META_VALUE_ID';
                        $attrArray['op_text'] = 'META_VALUE_NAME';        

                        if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                            $attrArray['class'] = 'form-control form-control-sm dropdownInput linked-combo' . $select2;
                            $attrArray['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
                        }

                        if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
                            $attrArray['class'] = $attrArray['class'] . ' group-dtl-linked';
                            $attrArray['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
                        }

                        if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma' || $param['CHOOSE_TYPE'] == 'combolist') {

                            $attrArray['multiple'] = 'multiple';
                            
                            if ($param['CHOOSE_TYPE'] == 'combolist') {
                                $attrArray['style'] = 'min-height: 250px !important';
                                $attrArray['class'] = $attrArray['class'] . ' data-combo-set';
                                $attrArray['nonulloption'] = '';
                            }
                            
                            $attrArray['name'] = $controlName . '[]';

                            return Form::multiselect($attrArray);
                        } else {
                            return Form::select($attrArray);
                        }

                    } elseif ($lookupTypeLower == 'popup') {
                        
                        if (issetParam($param['RENDER_TYPE']) == 'codewithphoto') {
                            return self::renderCodeWithPhotoControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                        }
                        
                        $defaultValue = Mdwebservice::setLookupDefaultValue($param['DEFAULT_VALUE'], $param['LOOKUP_META_DATA_ID'], $lookupTypeLower, $param['VALUE_FIELD']);
                        $selectedValue = $defaultValue . '';
                        $selectedCode = $selectedName = $lookupRowData = $moreButton = '';
                       
                        $icon = 'search';
                        
                        $fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName);
                        
                        if ($fillParamValue != '') {
                            $selectedValue = $fillParamValue;
                        }

                        if ($selectedValue != '') {

                            if (is_array($selectedValue)) {
                                $valueRow = $selectedValue;
                                $selectedValue = $valueRow['META_VALUE_ID'];
                                $lookupRowData = $valueRow['rowData'];
                            } else {
                                $valueRow = (new Mddatamodel())->getIdCodeName($param['LOOKUP_META_DATA_ID'], $selectedValue);
                                $valueRow['META_VALUE_CODE'] = $valueRow['code'];
                                $valueRow['META_VALUE_NAME'] = $valueRow['name'];
                                $lookupRowData = $valueRow['rowData'];
                            }

                            if ($valueRow) {                                
                                $selectedCode = htmlentities(($valueRow['META_VALUE_CODE'] != '' ? $valueRow['META_VALUE_CODE'] : $valueRow['META_VALUE_NAME']), ENT_QUOTES, 'UTF-8');
                                $selectedName = htmlentities($valueRow['META_VALUE_NAME'], ENT_QUOTES, 'UTF-8');
                            }
                        }

                        $hiddenAttr = array(
                            'name' => $controlName,
                            'id' => $param['META_DATA_CODE'] . '_valueField',
                            'data-path' => $paramRealPath,
                            'value' => $selectedValue,
                            'class' => 'popupInit',
                            'data-row-data' => $lookupRowData, 
                            'placeholder' => Lang::line($param['META_DATA_NAME']), 
                            'data-isclear' => $param['IS_REFRESH'] 
                        );
                        
                        if ($param['IS_REQUIRED'] == '1') {
                            $hiddenAttr['required'] = 'required';
                        }

                        if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma') {
                            $icon = 'list-ul';
                            $hiddenAttr['name'] = $controlName . '[]';
                        }

                        $attrArrayButton = array(
                            'class' => 'btn default btn-bordered btn-xs mr-0',
                            'value' => '<i class="far fa-'.$icon.'"></i>', 
                            'onclick' => 'dataViewSelectableGrid(\'' . $param['META_DATA_CODE'] . '\', \'' . $processMetaDataId . '\', \'' . $param['LOOKUP_META_DATA_ID'] . '\', \'' . $param['CHOOSE_TYPE'] . '\', \'' . $param['PARAM_REAL_PATH'] . '\', this);', 
                            'tabindex' => '-1'
                        );

                        if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                            $hiddenAttr['class'] = 'popupInit linked-combo';
                            $hiddenAttr['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
                        }
                        if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
                            $hiddenAttr['class'] = $hiddenAttr['class'] . ' group-dtl-linked';
                            $hiddenAttr['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
                        }
                        if ($param['GROUP_CONFIG_PARAM_PATH'] != '') {
                            $hiddenAttr['data-in-param'] = $param['GROUP_CONFIG_PARAM_PATH'];
                            $hiddenAttr['data-in-lookup-param'] = $param['GROUP_CONFIG_LOOKUP_PATH'];

                            if (substr_count($attrArray['data-path'], '.') < 2) {
                                $attrArray['readonly'] = 'readonly';
                            }
                        }                     
                        $controlHidden = Form::hidden($hiddenAttr);

                        unset($attrArray['data-path']);

                        $attrArray['name'] = $param['META_DATA_CODE'] . '_displayField';
                        $attrArray['id'] = $param['META_DATA_CODE'] . '_displayField';
                        $attrArray['class'] = 'form-control form-control-sm meta-autocomplete lookup-code-autocomplete';
                        $attrArray['data-processid'] = $processMetaDataId;
                        $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                        $attrArray['placeholder'] = Lang::line('code_search');
                        $attrArray['value'] = $selectedCode;
                        $attrArray['title'] = $selectedCode;

                        if ($param['PATTERN_TEXT'] != '') {
                            if (strtolower($param['PATTERN_NAME']) == 'account') {
                                $attrArray['class'] = $attrArray['class'].' accountCodeMask';
                            } else {
                                $attrArray['data-regex'] = $param['PATTERN_TEXT'];
                                $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);
                                if ($param['IS_MASK'] === '1') {
                                    $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
                                }
                            }
                        }
                        $controlCodeInput = Form::text($attrArray);

                        $attrArray['name'] = $param['META_DATA_CODE'] . '_nameField';
                        $attrArray['id'] = $param['META_DATA_CODE'] . '_nameField';
                        $attrArray['class'] = 'form-control form-control-sm meta-name-autocomplete lookup-name-autocomplete';
                        $attrArray['data-processid'] = $processMetaDataId;
                        $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                        $attrArray['placeholder'] = Lang::line('name_search');
                        $attrArray['value'] = $selectedName;
                        $attrArray['title'] = $selectedName;

                        $controlNameInput = Form::text($attrArray);
                        $controlButton = Form::button($attrArrayButton);
                        
                        if (issetParam($param['MORE_META_DATA_ID'])) {
                            
                            $moreButton = html_tag('span', array('class' => 'input-group-btn'), 
                                Form::button(
                                    array(
                                        'class' => 'btn default btn-bordered btn-xs mr-0',
                                        'value' => '..', 
                                        'onclick' => 'bpRecordIdMoreViewByMetaId(this);', 
                                        'data-more-metaid' => $param['MORE_META_DATA_ID'], 
                                        'tabindex' => '-1'
                                    )
                                )
                            );
                        }

                        $controlHtml = '<div class="meta-autocomplete-wrap" data-section-path="' . $param['PARAM_REAL_PATH'] . '">
                            <div class="input-group double-between-input">
                                ' . $controlHidden . '
                                ' . html_entity_decode($controlCodeInput, ENT_QUOTES, 'UTF-8') . '
                                <span class="input-group-btn">
                                    ' . $controlButton . '
                                </span> 
                                <span class="input-group-btn">
                                    ' . html_entity_decode($controlNameInput, ENT_QUOTES, 'UTF-8') . '      
                                </span> 
                                ' . $moreButton . '
                            </div>
                        </div>';

                        return $controlHtml;

                    } elseif ($lookupTypeLower == 'combogrid') {
                        
                        if (issetParam($param['RENDER_TYPE']) == 'codewithphoto') {
                            return self::renderCodeWithPhotoControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                        }
                        
                        $defaultValue = Mdwebservice::setLookupDefaultValue($param['DEFAULT_VALUE'], $param['LOOKUP_META_DATA_ID'], $lookupTypeLower, $param['VALUE_FIELD']);
                        $selectedValue = $defaultValue . '';
                        $selectedCode = $selectedName = $lookupRowData = $moreButton = '';
                       
                        $icon = 'search';
                        
                        $fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName);
                        
                        if ($fillParamValue != '') {
                            $selectedValue = $fillParamValue;
                        }

                        if ($selectedValue != '') {

                            if (is_array($selectedValue)) {
                                $valueRow = $selectedValue;
                                $selectedValue = $valueRow['META_VALUE_ID'];
                                $lookupRowData = $valueRow['rowData'];
                            } else {
                                $valueRow = (new Mddatamodel())->getIdCodeName($param['LOOKUP_META_DATA_ID'], $selectedValue);
                                $valueRow['META_VALUE_CODE'] = $valueRow['code'];
                                $valueRow['META_VALUE_NAME'] = $valueRow['name'];
                                $lookupRowData = $valueRow['rowData'];
                            }

                            if ($valueRow) {                                
                                $selectedCode = htmlentities(($valueRow['META_VALUE_CODE'] != '' ? $valueRow['META_VALUE_CODE'] : $valueRow['META_VALUE_NAME']), ENT_QUOTES, 'UTF-8');
                                $selectedName = htmlentities($valueRow['META_VALUE_NAME'], ENT_QUOTES, 'UTF-8');
                            }
                        }

                        $hiddenAttr = array(
                            'name' => $controlName,
                            'id' => $param['META_DATA_CODE'] . '_valueField',
                            'data-path' => $paramRealPath,
                            'value' => $selectedValue,
                            'class' => 'combogridInit',
                            'data-row-data' => $lookupRowData, 
                            'placeholder' => Lang::line($param['META_DATA_NAME']), 
                            'data-isclear' => $param['IS_REFRESH'] 
                        );
                        
                        if ($param['IS_REQUIRED'] == '1') {
                            $hiddenAttr['required'] = 'required';
                        }

                        if ($param['CHOOSE_TYPE'] == 'multi' || $param['CHOOSE_TYPE'] == 'multicomma') {
                            $icon = 'list-ul';
                            $hiddenAttr['name'] = $controlName . '[]';
                        }

                        if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                            $hiddenAttr['class'] = 'combogridInit linked-combo';
                            $hiddenAttr['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
                        }
                        if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
                            $hiddenAttr['class'] = $hiddenAttr['class'] . ' group-dtl-linked';
                            $hiddenAttr['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
                        }
                        if ($param['GROUP_CONFIG_PARAM_PATH'] != '') {
                            $hiddenAttr['data-in-param'] = $param['GROUP_CONFIG_PARAM_PATH'];
                            $hiddenAttr['data-in-lookup-param'] = $param['GROUP_CONFIG_LOOKUP_PATH'];

                            if (substr_count($attrArray['data-path'], '.') < 2) {
                                $attrArray['readonly'] = 'readonly';
                            }
                        }                     
                        $controlHidden = Form::hidden($hiddenAttr);

                        unset($attrArray['data-path']);
                        
                        $dm_ = &getInstance();
                        $dm_->load->model('mddatamodel', 'middleware/models/');
                        $getCodeNameFieldName = $dm_->model->getCodeNameFieldNameModel($param['LOOKUP_META_DATA_ID']);

                        $attrArray['name'] = $param['META_DATA_CODE'] . '_displayField';
                        $attrArray['id'] = $param['META_DATA_CODE'] . '_displayField';
                        $attrArray['class'] = 'form-control form-control-sm combo-grid-autocomplete';
                        $attrArray['data-processid'] = $processMetaDataId;
                        $attrArray['data-code-fieldpath'] = $getCodeNameFieldName['code'];
                        $attrArray['data-name-fieldpath'] = $getCodeNameFieldName['name'];
                        $attrArray['data-lookupid'] = $param['LOOKUP_META_DATA_ID'];
                        $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']);
                        $attrArray['value'] = $selectedName;
                        $attrArray['autocomplete'] = 'off'; 
                        $attrArray['title'] = $selectedCode;
                        $attrArray['onclick'] = 'dataViewSelectableComboGrid(\'' . $param['META_DATA_CODE'] . '\', \'' . $processMetaDataId . '\', \'' . $param['LOOKUP_META_DATA_ID'] . '\', \'' . $param['CHOOSE_TYPE'] . '\', \'' . $param['PARAM_REAL_PATH'] . '\', this);';

                        if ($param['PATTERN_TEXT'] != '') {
                            if (strtolower($param['PATTERN_NAME']) == 'account') {
                                $attrArray['class'] = $attrArray['class'].' accountCodeMask';
                            } else {
                                $attrArray['data-regex'] = $param['PATTERN_TEXT'];
                                $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);
                                if ($param['IS_MASK'] === '1') {
                                    $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
                                }
                            }
                        }
                        $controlCodeInput = Form::text($attrArray);

                        $controlHtml = '<div class="meta-autocomplete-wrap" data-section-path="' . $param['PARAM_REAL_PATH'] . '">
                            <div class="input-group double-between-input combogrid-between-input">
                                ' . $controlHidden . '
                                ' . $controlCodeInput . '
                                <span onclick="removeSelectableComboGrid(this)"><i style="position: absolute;right: 21px;top: 9px;font-size: 10px;color: #8f8f8f;cursor: pointer;" class="fas fa-times"></i></span>
                            </div>
                        </div>';

                        return $controlHtml;
                        
                    } elseif ($lookupTypeLower == 'star') {
                        
                        return (new self())->renderStarControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                        
                    } elseif ($lookupTypeLower == 'icon') {
                        
                        return (new self())->renderIconControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData, $isCriteriaOption);
                        
                    } elseif ($lookupTypeLower == 'radio') {
                        
                        return (new self())->renderRadioControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData, $isCriteriaOption);
                        
                    } elseif ($lookupTypeLower == 'checkbox') {
                        
                        return self::renderCheckboxControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData, $isCriteriaOption);
                        
                    } elseif ($lookupTypeLower == 'button') {
                        
                        return self::renderButtonControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                        
                    } elseif ($lookupTypeLower == 'autocomplete_text') {
                        
                        return self::renderAutocompleteTextControl($processMetaDataId, $param, $controlName, $lowerParamName, $attrArray, $fillParamData);
                        
                    } elseif ($lookupTypeLower == 'combo_with_popup') {
                        
                        return self::renderComboWithButtonPopupControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                        
                    }  elseif ($lookupTypeLower == 'range_slider') {
                        
                        return (new self())->renderRangeSliderControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData, $isCriteriaOption);
                    }      
                }

                $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                
                $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
                
                if ($fillParamValue != '') {
                    $attrArray['value'] = $fillParamValue;
                }
                
                $attrArray['data-isclear'] = $param['IS_REFRESH'];
                $attrArray['placeholder'] = Lang::line($param['PLACEHOLDER_NAME']); 
                if ($focusTooltip = issetParam($param['JSON_CONFIG']['focus_tooltip'])) {
                    $attrArray['data-qtip-focus'] = $focusTooltip;
                }
                
                $bigDecimal = $voiceRecord = '';

                if ($typeCode == 'bigdecimal') {

                    $attrArray['inputmode'] = 'numeric';

                    if (isset($param['MIN_VALUE'])) {
                        $attrArray['data-v-min'] = Number::numberFormat($param['MIN_VALUE'], 0);
                    }
                    if (isset($param['MAX_VALUE'])) {
                        $attrArray['data-v-max'] = Number::numberFormat($param['MAX_VALUE'], 0);
                    }

                    $attrArrayBigDecimal['name'] = $controlName;
                    $attrArrayBigDecimal['value'] = $attrArray['value'];
                    $attrArrayBigDecimal['data-path'] = $paramRealPath . '_bigdecimal';
                    $attrArrayBigDecimal['data-field-name'] = $attrArray['data-field-name'];
                    $attrArrayBigDecimal['data-isclear'] = $attrArray['data-isclear'];

                    $bigDecimal = Form::hidden($attrArrayBigDecimal);

                    unset($attrArray['name']);
                    $attrArray['data-mdec'] = $param['FRACTION_RANGE'];

                } elseif ($typeCode == 'integer') {

                    if (isset($param['MIN_VALUE'])) {
                        $attrArray['data-v-min'] = Number::numberFormat($param['MIN_VALUE'], 0);
                    }
                    
                    if (isset($param['MAX_VALUE'])) {
                        $attrArray['data-v-max'] = Number::numberFormat($param['MAX_VALUE'], 0);
                    }

                } elseif ($typeCode == 'string') {
                    
                    $attrArray['autocomplete'] = 'off'; 
                    $attrArray['spellcheck'] = 'false';
                    
                    if (isset($param['MIN_VALUE']) && $param['MIN_VALUE']) {
                        $attrArray['minlength'] = Number::numberFormat($param['MIN_VALUE'], 0);
                    }
                    
                    if (isset($param['MAX_VALUE']) && $param['MAX_VALUE']) {
                        $attrArray['maxlength'] = Number::numberFormat($param['MAX_VALUE'], 0);
                        $attrArray['data-maxlength'] = 'true';
                    }
                
                    if ($param['PARENT_ID'] == '' && issetParam($param['JSON_CONFIG']['isVoiceRecord']) && Mdwebservice::$refStructureId) {
                        $voiceRecord = (new self())->paramVoiceRecordControl($processMetaDataId, $param, $lowerParamName, $fillParamData);
                    }
                    
                    if (Lang::isUseMultiLang() && issetParam($param['IS_TRANSLATE'])) {
                    
                        $attrArray['data-c-name'] = $param['COLUMN_NAME'];
                        
                        if (Lang::getCode() != Lang::getDefaultLangCode() && $fillParamData) {
                            
                            $attrArray['data-dl-value'] = $attrArray['value'];                            
                            
                            if (self::$pfTranslationValArr != self::$fillParamData) {

                                $fillParamValue = self::findRowKeyValFillData($fillParamData, 'pftranslationvalue');

                                if ($fillParamValue) {
                                    $pfTranslationValArr = json_decode($fillParamValue, true);
                                    self::$pfTranslationValArr = $pfTranslationValArr['value'];
                                }

                                self::$fillParamData = $fillParamData;
                            }

                            if (isset(self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()])) {
                                $attrArray['value'] = self::$pfTranslationValArr[$param['COLUMN_NAME']][Lang::getCode()];
                            }
                        }

                        return '<div class="input-group">
                                '.Form::text($attrArray).'
                                <span class="input-group-append"><button class="btn btn-primary" type="button" onclick="bpFieldTranslate(this);" title="Орчуулга"><i class="far fa-language"></i></button></span> 
                            </div>' . $voiceRecord;
                    }
                }

                if ($param['GROUP_CONFIG_GROUP_PATH'] != '') {
                    $attrArray['class'] = $attrArray['class'] . ' group-dtl-linked';
                    $attrArray['data-out-group'] = $param['GROUP_CONFIG_GROUP_PATH'];
                }
                
                if ($param['GROUP_CONFIG_FIELD_PATH'] != '') {
                    $attrArray['class'] = $attrArray['class'] . ' linked-combo';
                    $attrArray['data-out-param'] = $param['GROUP_CONFIG_FIELD_PATH'];
                }

                if ($param['PATTERN_TEXT'] != '') {
                    if ($param['PATTERN_NAME'] == 'ACCOUNT') {
                        $attrArray['class'] = $attrArray['class'].' accountCodeMask';
                    } else {
                        $attrArray['data-regex'] = $param['PATTERN_TEXT'];
                        $attrArray['data-regex-message'] = Lang::line($param['GLOBE_MESSAGE']);
                        if ($param['IS_MASK'] == '1') {
                            $attrArray['data-inputmask-regex'] = $param['PATTERN_TEXT'];
                        }
                    }
                }
                
                $inputControl = Form::text($attrArray) . $bigDecimal . $voiceRecord;
                
                if (issetParam($param['JSON_CONFIG']['isRightButton'])) {
                    $inputControl = self::paramRightButtonControl($processMetaDataId, array('paramRealPath' => $param['PARAM_REAL_PATH'], 'iconName' => issetParam($param['JSON_CONFIG']['rightButtonIconName'])), $inputControl);
                }

                return $inputControl;
            }
        }
    }
    
    public function paramRightButtonControl($processMetaDataId, $arr, $control) {
        
        return '<div class="input-group">
            '.$control.'
            <span class="input-group-append">
                <button type="button" class="btn btn-light btn-icon" data-rightbutton-path="'.$arr['paramRealPath'].'"><i class="far '.($arr['iconName'] ? $arr['iconName'] : 'fa-redo-alt').'"></i></button>
            </span>
        </div>';
    }
    
    public function setMultiComboData($arr, $rowData) {
        
        if (!$rowData) {
            return null;
        }
        
        $attrId = strtolower($arr['ATTRIBUTE_ID_COLUMN']);
        $attrName = strtolower($arr['ATTRIBUTE_NAME_COLUMN']);
        
        $rows = json_decode(str_replace('\&quot;', '\"', html_entity_decode($rowData, ENT_QUOTES)), true);
        $array = array();
        
        if (!isset($rows[0]) && !is_numeric(array_key_first($rows))) {
            $rows = array($rows);
        }
        
        foreach ($rows as $key => $value) {
            $array[$key]['META_VALUE_ID'] = htmlentities($value[$attrId], ENT_QUOTES, 'UTF-8');
            $array[$key]['META_VALUE_NAME'] = $value[$attrName];
            $array[$key]['rowData'] = htmlentities(str_replace('&quot;', '\\&quot;', json_encode($value, JSON_UNESCAPED_UNICODE)), ENT_QUOTES, 'UTF-8');
        }
        
        return $array;
    }
    
    public function renderViewParamControl($processMetaDataId, array $param, $controlName, $paramPath = '', $fillParamData = false, $sidebar = '') {
        
        if (Mdwebservice::$isLogViewMode) {
            return self::renderLogViewParamControl($processMetaDataId, $param, $controlName, $paramPath, $fillParamData, $sidebar);
        }
        
        $typeCode = $param['META_TYPE_CODE'];
        $paramRealPath = $param['PARAM_REAL_PATH'];
        $paramName = $param['META_DATA_CODE'];
        $lowerParamName = $param['LOWER_PARAM_NAME'];
        
        $value = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                                                
        if ($param['IS_SHOW'] == '1') {
            
            if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                $value = $fillParamValue;
            }
            
            if ($typeCode == 'boolean') {
                
                return '<span data-view-path="'.$paramRealPath.'">' . Info::showYesNoByNumber($value) . '</span>';
                
            } elseif ($typeCode == 'description' || $typeCode == 'description_auto' || $typeCode == 'label') {
                
                return '<span data-view-path="'.$paramRealPath.'">' . Str::nlTobr($value) . '</span>';
                
            } elseif($typeCode == 'url') {
                
                $link = '';
                
                if ($value) {
                    if (filter_var($value, FILTER_VALIDATE_URL)) {
                        $link = '<a href="'.$value.'" target="_blank">'.$value.'</a>';
                    } else {
                        $link = '<a href="javascript:;" data-path="'.$paramRealPath.'">'.$value.'</a>';
                    }
                }
                 
                return '<span data-view-path="'.$paramRealPath.'">'.$link.'</span>';
                
            } elseif ($typeCode == 'file') {
                
                $renderType = issetParam($param['RENDER_TYPE']);
                
                if ($renderType == 'preview') {
                    
                    return (new self())->renderFilePreviewControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                }
                
                $fileView = '';
                
                if ($value) {
                    
                    if (strpos($value, 'data:image/png;base64,') !== false 
                        || strpos($value, 'data:image/jpg;base64,') !== false 
                        || strpos($value, 'data:image/jpeg;base64,') !== false 
                        || strpos($value, 'data:image/gif;base64,') !== false) {
                        
                        $fileView = html_tag('a', array('href' => $value, 'class' => 'fancybox-img'), '<i class="far fa-image text-success font-size-18"></i>');
                        
                    } else {
                        
                        $fileExtension = strtolower(substr($value, strrpos($value, '.') + 1));
                        $fileView = html_tag('a', array('href' => 'mdobject/downloadFile?fDownload=1&file=' . $value, 'title' => Lang::line('download_btn'), 'class' => 'btn btn-sm btn-light rounded-0'), '<i class="far fa-download"></i>');
                        
                        if (in_array($fileExtension, array('jpg', 'jpeg', 'png', 'gif', 'webp')) === true) {
                            $fileView .= html_tag('a', array('href'=>'javascript:;','title'=>Lang::line('see_btn'),'data-url'=>$value, 'data-extension'=>$fileExtension, 'onclick'=>'bpFilePreview(this);', 'class'=>'btn btn-sm btn-light rounded-0'), '<i class="far fa-image text-success"></i>');
                        }
                    }
                }
                
                return '<span data-view-path="'.$paramRealPath.'">' . $fileView . '</span>';

            } elseif ($typeCode == 'multi_file' || $typeCode == 'multi_file_style' || $typeCode == 'multi_file_thumb') {
                
                $fileView = '';
                
                if ($fillParamData && isset($fillParamData[$lowerParamName . '_multifile'])) {
                    
                    $fileNames = $fillParamData[$lowerParamName . '_multifile'];
                    
                    foreach ($fileNames as $k => $fileName) {
                        
                        $btnClass = 'btn-outline-primary';
                        
                        if ($fileName['fileextension'] == 'xls' || $fileName['fileextension'] == 'xlsx') {
                            $btnClass = 'btn-outline-success';
                        } elseif ($fileName['fileextension'] == 'pdf') {
                            $btnClass = 'btn-outline-danger';
                        } 
                        
                        $fileView .= '<div class="btn-group mt3 mb3">
                            <button type="button" class="btn '.$btnClass.' btn-sm mr0" onclick="bpFilePreview(this);" data-fileurl="'.$fileName['physicalpath'].'" data-filename="'.$fileName['filename'].'" data-extension="'.$fileName['fileextension'].'" title="'.$fileName['filename'].'" style="height: 24px;padding: 1px 5px;line-height: 12px;">'.Str::utf8_substr($fileName['filename'], 0, 20).'..</button>
                        </div>';
                    }
                }
                
                return $fileView;
                
            } elseif ($typeCode == 'date') {
                
                return '<span data-view-path="'.$paramRealPath.'">' . Date::formatter($value, 'Y-m-d') . '</span>';
                
            } elseif ($typeCode == 'datetime') {
                
                return '<span data-view-path="'.$paramRealPath.'">' . Date::formatter($value, 'Y-m-d H:i:s') . '</span>';
                
            } elseif ($typeCode == 'time') {
                
                return '<span data-view-path="'.$paramRealPath.'">' . Date::formatter($value, 'H:i') . '</span>';
                
            } elseif ($typeCode == 'password') {
                
                return '******';
                
            } elseif ($typeCode == 'signature') {
                
                $signatureImage = '';
                
                if ($value) {
                    $signatureImage = ' style="background-image: url(data:image/jpeg;base64,'.$value.');"';
                }
                
                return '<div class="bp-signature">
                            <div class="bp-signature-image"'.$signatureImage.'></div>
                        </div>';
                
            } elseif ($typeCode == 'button') { 
                
                $iconName = (isset($param['ICON_NAME']) && $param['ICON_NAME'] != '') ? '<i class="fa '.$param['ICON_NAME'].'"></i> ' : '';
                return '<button type="button" class="btn blue btn-sm" data-path="'.$paramRealPath.'" data-view-path="'.$paramRealPath.'">'.$iconName.Lang::line($param['PLACEHOLDER_NAME']).'</button>';
                
            } elseif ($typeCode == 'clob') { 
                
                return '<pre class="pre-hljs"><code class="xml">'.htmlentities($value, ENT_QUOTES, 'UTF-8').'</code></pre>';

            } elseif ($typeCode == 'text_editor') { 
                
                if (issetParam($param['RENDER_TYPE']) == 'wordeditor') {
                    
                    $value = str_replace('storage/', '', $value);
                    
                    return '<div class="wordeditor-iframe-parent">
                        <button type="button" class="wordeditor-iframe-fullscreen-btn" title="Fullscreen">
                            <i class="far fa-expand"></i>
                        </button>
                        <iframe class="wordeditorInit" data-view-path="'.$paramRealPath.'" data-root-url="'.CONFIG_FILE_VIEWER_ADDRESS.'" src="'.CONFIG_FILE_VIEWER_ADDRESS.'DocEdit.aspx?file='.$value.'&folder='.Config::getFromCacheDefault('WORD_EDITOR_FOLDER_MODE', null, 'storagedev').'" frameborder="0" data-default-height="1000px" style="width: 100%;height: 1000px;border: 1px #ddd solid;"></iframe>
                    </div>';
                }

                return '<span data-view-path="'.$paramRealPath.'" class="text_editor_field_type">'.html_entity_decode($value, ENT_QUOTES, 'UTF-8').'</span>';
                
            } elseif ($typeCode == 'qrcode') { 
                
                $fileName = '';           

                $hiddenForm = Form::hidden(array(
                    'name' => $controlName,
                    'class' => 'form-control form-control-sm '.$typeCode.'Init',
                    'data-path' => $paramRealPath,
                    'data-field-name' => $paramName,
                    'value' => $value
                ));                
                return '<button type="button" onClick="bpViewQRcode(this)" class="btn blue btn-sm" data-path="'.$paramRealPath.'" title="QRcode харах"><i class="fa fa-qrcode"></i></button>' . $hiddenForm;
                
            } elseif ($typeCode == 'codeview') {
                
                return html_tag('div', array(
                        'class' => 'bp-codeview-path',
                        'data-section-path' => $paramRealPath,
                    ), $value, true
                );
                
            } else {
                
                if ($param['LOOKUP_TYPE'] != '' && $param['LOOKUP_META_DATA_ID'] != '') {
                    
                    $lookupType = strtolower($param['LOOKUP_TYPE']);
                    
                    if ($lookupType == 'combo' || $lookupType == 'radio' || $lookupType == 'combo_with_popup') {
                        
                        $attrArray['value'] = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                        
                        $arr = array(
                            'META_DATA_ID' => $param['LOOKUP_META_DATA_ID'],
                            'ATTRIBUTE_ID_COLUMN' => $param['ATTRIBUTE_ID_COLUMN'],
                            'ATTRIBUTE_NAME_COLUMN' => $param['ATTRIBUTE_NAME_COLUMN'],
                            'ATTRIBUTE_CODE_COLUMN' => $param['ATTRIBUTE_CODE_COLUMN'],
                            'PARAM_REAL_PATH' => $paramRealPath,
                            'PROCESS_META_DATA_ID' => $processMetaDataId 
                        );                        
                        if ($param['VALUE_FIELD'] != '') {
                            $arr['ATTRIBUTE_ID_COLUMN'] = $param['VALUE_FIELD'];
                        }
                        if ($param['DISPLAY_FIELD'] != '') {
                            $arr['ATTRIBUTE_NAME_COLUMN'] = $param['DISPLAY_FIELD'];
                        }

                        $comboData = '';
                        $dataRowData = htmlentities(json_encode($arr, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');
                        
                        if ($fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName)) {

                            if (is_array($fillParamValue)) {
                                
                                return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'" data-row-data="'.$dataRowData.'">' . $fillParamValue['META_VALUE_NAME'] . '</span>';
                                
                            } else {
                                
                                $attrArray['value'] = $fillParamValue;
                                $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $fillParamValue);
                                
                                return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'" data-row-data="'.$dataRowData.'">' . isset($comboData[0]['META_VALUE_NAME']) ? Arr::implode_key(', ', $comboData, 'META_VALUE_NAME', true) : '' . '</span>';
                            }
                            
                        } elseif (!empty($attrArray['value'])) {
                            
                            $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($arr, $attrArray['value']);

                            return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'" data-row-data="'.$dataRowData.'">' . isset($comboData[0]['META_VALUE_NAME']) ? Arr::implode_key(', ', $comboData, 'META_VALUE_NAME', true) : '' . '</span>';
                        }              
                        
                        return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'" data-row-data="'.$dataRowData.'"></span>';
                        
                    } elseif ($lookupType == 'popup') {
                        
                        $defaultValue = Mdmetadata::setDefaultValue($param['DEFAULT_VALUE']);
                        $selectedValue = $defaultValue;
                        $selectedCode = $selectedName = null;
                        
                        if ($fillParamValue = self::setLookupValFillData($fillParamData, $lowerParamName)) {
                            $selectedValue = $fillParamValue;
                        }
                        $arr = array(
                            'LOOKUP_ID' => $param['LOOKUP_META_DATA_ID'],
                            'ATTRIBUTE_ID_COLUMN' => $param['ATTRIBUTE_ID_COLUMN'],
                            'ATTRIBUTE_NAME_COLUMN' => $param['ATTRIBUTE_NAME_COLUMN'],
                            'ATTRIBUTE_CODE_COLUMN' => $param['ATTRIBUTE_CODE_COLUMN'],
                            'PARAM_REAL_PATH' => $paramRealPath,
                            'PROCESS_META_DATA_ID' => $processMetaDataId
                        );                        
                        $dataRowData = htmlentities(json_encode($arr), ENT_QUOTES, 'UTF-8');

                        if ($selectedValue) {
                            
                            if (is_array($selectedValue)) {
                                $valueRow = $selectedValue;
                                $selectedValue = $valueRow['META_VALUE_ID'];
                            } else {
                                $valueRow = (new Mddatamodel())->getIdCodeName($param['LOOKUP_META_DATA_ID'], $selectedValue);
                                $valueRow['META_VALUE_CODE'] = $valueRow['code'];
                                $valueRow['META_VALUE_NAME'] = $valueRow['name'];
                            }

                            if ($valueRow) {                                
                                $selectedCode = htmlentities(($valueRow['META_VALUE_CODE'] != '' ? $valueRow['META_VALUE_CODE'] : $valueRow['META_VALUE_NAME']), ENT_QUOTES, 'UTF-8');
                                $selectedName = htmlentities($valueRow['META_VALUE_NAME'], ENT_QUOTES, 'UTF-8');
                            }
                        }
                        
                        return '<span data-view-path="'.$paramRealPath.'" data-row-data="'.$dataRowData.'" data-row-view-data="'.issetParam($valueRow['rowData']).'" class="popupInput">' . (($selectedCode && $selectedName) ? $selectedCode.' | '.$selectedName : $selectedCode.$selectedName) . '</span>';
                        
                    } elseif ($lookupType == 'star') {
                        
                        $param['isViewMode'] = 1;
                        
                        return (new self())->renderStarControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                        
                    } elseif ($lookupType == 'icon') {
                        
                        return (new self())->renderIconControl($processMetaDataId, $param, $controlName, $lowerParamName, $fillParamData);
                    }
                }   
                
                if ($typeCode == 'bigdecimal' || $typeCode == 'decimal') {
                    $value = 0 + Number::numeric($value);
                    return '<span data-view-path="'.$paramRealPath.'">' . number_format($value, 2, '.', ',') . '</span>';
                } else {        
                    return '<span data-view-path="'.$paramRealPath.'">' . (is_array($value) ? '' : $value) . '</span>';
                }
            }
            
        } else {
            
            $fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName);
            
            if ($fillParamValue != '') {
                $value = is_array($fillParamValue) ? null : $fillParamValue;
            }
        }
        
        return '<span class="d-none" data-view-path="'.$paramRealPath.'">' . $value . '</span>';
    }
    
    public function renderParamLabel(array $param, $secondLangCode = null) {
        
        if (is_null($secondLangCode)) {
            $labeltext = Lang::line($param['META_DATA_NAME']);
        } else {
            $labeltext = Lang::line($param['META_DATA_NAME']) . '<span class="secondLangText">/' . Lang::lineCode($param['META_DATA_NAME'], $secondLangCode) . '/</span>';
        }

        $labelAttr = array(
            'text' => $labeltext,
            'for' => 'param[' . $param['PARAM_REAL_PATH'] . ']',
            'data-label-path' => $param['PARAM_REAL_PATH']
        );

        if ($param['IS_REQUIRED'] == '1') {
            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
        }

        if (!is_null($secondLangCode)) {
            $labelAttr = array_merge($labelAttr, array('no_colon' => 'true'));
        }

        return Form::label($labelAttr);
    }
    
    public function renderLogViewParamControl($processMetaDataId, array $param, $controlName, $paramPath = '', $fillParamData = false, $sidebar = '') {
        
        $typeCode = $param['META_TYPE_CODE'];
        $paramRealPath = $param['PARAM_REAL_PATH'];
        $paramName = $param['META_DATA_CODE'];
        $lowerParamName = $param['LOWER_PARAM_NAME'];
                                                
        if ($param['IS_SHOW'] == '1') {
            
            $value = null;
                                        
            if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $lowerParamName)) {
                $value = $fillParamValue;
            }
            
            if ($typeCode == 'boolean') {
                
                if (strpos($value, Mdcommon::$separator) !== false) {
                        
                    $valueArr = explode(Mdcommon::$separator, $value);

                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.Info::showYesNoByNumber($valueArr[0]).'</span>';
                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.Info::showYesNoByNumber($valueArr[1]).'</span>';

                    $value = $oldVal . $newVal;
                    
                } else {
                    $value = Info::showYesNoByNumber($value);
                }
                    
                return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                
            } elseif ($typeCode == 'description' || $typeCode == 'description_auto' || $typeCode == 'label') {
                
                if (strpos($value, Mdcommon::$separator) !== false) {
                        
                    $valueArr = explode(Mdcommon::$separator, $value);

                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.$valueArr[0].'</span>';
                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.$valueArr[1].'</span>';

                    $value = $oldVal . $newVal;
                } 
                
                return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                
            } elseif($typeCode == 'url') {
                
                if (strpos($value, Mdcommon::$separator) !== false) {
                        
                    $valueArr = explode(Mdcommon::$separator, $value);

                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old"><a href="'.$valueArr[0].'" target="_blank">'.$valueArr[0].'</a></span>';
                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new"><a href="'.$valueArr[1].'" target="_blank">'.$valueArr[1].'</a></span>';

                    $value = $oldVal . $newVal;
                } 
                
                return '<span data-path="'.$paramRealPath.'"><a href="'.$value.'" target="_blank">'.$value.'</a></span>';
                
            } elseif ($typeCode == 'file') {
                
                $fileView = '';
                
                if ($value) {
                    
                    $fileView = html_tag('a', array('href' => 'mdobject/downloadFile?fDownload=1&file=' . $value, 'title' => 'Файл татах', 'class' => 'float-left', 'style' => 'margin-right:6px; margin-left:6px;'), '<i class="fa fa-file text-success"></i>');
                    $fileExtension = strtolower(substr($value, strrpos($value, '.') + 1));
                    if (in_array($fileExtension, array('jpg', 'jpeg', 'png', 'gif', 'webp')) === true) {
                        $fileView .= html_tag('a', array('href' => URL . $value, 'class' => 'float-left fancybox-button'), '<i class="fa fa-image text-success"></i>');
                    }
                }
                
                return $fileView;

            } elseif ($typeCode == 'multi_file' || $typeCode == 'multi_file_style' || $typeCode == 'multi_file_thumb') {
                
                $fileView = '';
                
                if ($fillParamData && isset($fillParamData[$lowerParamName . '_multifile'])) {
                    
                    $fileNames = $fillParamData[$lowerParamName . '_multifile'];
                    
                    foreach ($fileNames as $k => $fileName) {
                        
                        $btnClass = 'btn-outline-primary';
                        
                        if ($fileName['fileextension'] == 'xls' || $fileName['fileextension'] == 'xlsx') {
                            $btnClass = 'btn-outline-success';
                        } elseif ($fileName['fileextension'] == 'pdf') {
                            $btnClass = 'btn-outline-danger';
                        } 
                        
                        $fileView .= '<div class="btn-group mt3 mb3">
                            <button type="button" class="btn '.$btnClass.' btn-sm mr0" onclick="bpFilePreview(this);" data-fileurl="'.$fileName['physicalpath'].'" data-filename="'.$fileName['filename'].'" data-extension="'.$fileName['fileextension'].'" title="'.$fileName['filename'].'" style="height: 24px;padding: 1px 5px;line-height: 12px;">'.Str::utf8_substr($fileName['filename'], 0, 20).'..</button>
                        </div>';
                    }
                }
                
                return $fileView;
                
            } elseif ($typeCode == 'date') {
                
                if (strpos($value, Mdcommon::$separator) !== false) {
                        
                    $valueArr = explode(Mdcommon::$separator, $value);

                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.Date::formatter($valueArr[0], 'Y-m-d').'</span>';
                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.Date::formatter($valueArr[1], 'Y-m-d').'</span>';

                    $value = $oldVal . $newVal;
                } else {
                    $value = Date::formatter($value, 'Y-m-d');
                }
                
                return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                
            } elseif ($typeCode == 'datetime') {
                
                if (strpos($value, Mdcommon::$separator) !== false) {
                        
                    $valueArr = explode(Mdcommon::$separator, $value);

                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.Date::formatter($valueArr[0], 'Y-m-d H:i:s').'</span>';
                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.Date::formatter($valueArr[1], 'Y-m-d H:i:s').'</span>';

                    $value = $oldVal . $newVal;
                } else {
                    $value = Date::formatter($value, 'Y-m-d H:i:s');
                }
                
                return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                
            } elseif ($typeCode == 'time') {
                
                if (strpos($value, Mdcommon::$separator) !== false) {
                        
                    $valueArr = explode(Mdcommon::$separator, $value);

                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.Date::formatter($valueArr[0], 'H:i').'</span>';
                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.Date::formatter($valueArr[1], 'H:i').'</span>';

                    $value = $oldVal . $newVal;
                } else {
                    $value = Date::formatter($value, 'H:i');
                }
                
                return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                
            } elseif ($typeCode == 'password') {
                
                return '******';
                
            } elseif ($typeCode == 'signature') {
                
                $signatureImage = '';
                
                if ($value) {
                    $signatureImage = ' style="background-image: url(data:image/jpeg;base64,'.$value.');"';
                }
                
                return '<div class="bp-signature">
                            <div class="bp-signature-image"'.$signatureImage.'></div>
                        </div>';
                
            } elseif ($typeCode == 'button') {

                return '<button type="button" class="btn blue btn-sm" data-path="'.$paramRealPath.'" data-view-path="'.$paramRealPath.'">'.Lang::line($param['PLACEHOLDER_NAME']).'</button>';
                
            } elseif ($typeCode == 'clob') {
                
                return '<pre class="pre-hljs"><code class="xml">'.htmlentities($value, ENT_QUOTES, 'UTF-8').'</code></pre>';

            } elseif ($typeCode == 'text_editor') {                

                return '<span data-view-path="'.$paramRealPath.'">'.html_entity_decode($value, ENT_QUOTES, 'UTF-8').'</span>';
                
            } elseif ($typeCode == 'codeview') {
                
                return html_tag('div', array(
                        'class' => 'bp-codeview-path',
                        'data-section-path' => $paramRealPath,
                    ), $value, true
                );
                
            } else {
                
                if ($param['LOOKUP_TYPE'] != '' && $param['LOOKUP_META_DATA_ID'] != '') {
                    
                    $lookupType = strtolower($param['LOOKUP_TYPE']);
                    
                    if ($lookupType == 'combo' || $lookupType == 'radio' 
                        || $lookupType == 'combo_with_popup' || $lookupType == 'icon') {
                        
                        if ($fillParamData && isset($fillParamData[$lowerParamName])) {
                            
                            $fillParamValue = $fillParamData[$lowerParamName];
                            
                            if (is_array($fillParamValue)) {
                                
                                if (array_key_exists('oldrowdata', $fillParamValue)) {
                                    
                                    if ($fillParamValue['oldrowdata']) {
                                        
                                        $oldVal = '<span class="badge badge-warning d-none" data-valmode="old">'.$fillParamValue['oldrowdata']['name'].'</span>';
                                        $newVal = '<span class="badge badge-info" data-valmode="new">'.$fillParamValue['name'].'</span>';
                                    
                                    } else {
                                        $oldVal = '';
                                        $newVal = '<span class="badge badge-info" data-valmode="new">'.$fillParamValue['name'].'</span>';
                                    }

                                    $value = $oldVal . $newVal;
                                } else {
                                    $value = $fillParamValue['name'];
                                }
                                
                                return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                                
                            } else {
                    
                                if (strpos($fillParamValue, Mdcommon::$separator) !== false) {

                                    $valueArr = explode(Mdcommon::$separator, $fillParamValue);

                                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.$valueArr[0].'</span>';
                                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.$valueArr[1].'</span>';

                                    $fillParamValue = $oldVal . $newVal;
                                }
                                
                                return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'">' . $fillParamValue . '</span>';
                            }  
                        }         
                        
                        return '<span class="dropdownInput" data-view-path="'.$paramRealPath.'"></span>';
                        
                    } elseif ($lookupType == 'popup') {
                        
                        if ($fillParamData && isset($fillParamData[$lowerParamName])) {
                            
                            $fillParamValue = $fillParamData[$lowerParamName];
                            
                            if (is_array($fillParamValue)) {
                                
                                if (array_key_exists('oldrowdata', $fillParamValue)) {
                                    
                                    if ($fillParamValue['oldrowdata']) {
                                        
                                        $oldVal = '<span class="badge badge-warning d-none" data-valmode="old">'.$fillParamValue['oldrowdata']['code'].' | '.$fillParamValue['oldrowdata']['name'].'</span>';
                                        $newVal = '<span class="badge badge-info" data-valmode="new">'.$fillParamValue['code'].' | '.$fillParamValue['name'].'</span>';
                                    
                                    } else {
                                        $oldVal = '';
                                        $newVal = '<span class="badge badge-info" data-valmode="new">'.$fillParamValue['code'].' | '.$fillParamValue['name'].'</span>';
                                    }

                                    $value = $oldVal . $newVal;
                                } else {
                                    $value = issetParam($fillParamValue['code']).' | '.$fillParamValue['name'];
                                }
                                
                                return '<span class="popupInput" data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                                
                            } else {
                    
                                if (strpos($fillParamValue, Mdcommon::$separator) !== false) {

                                    $valueArr = explode(Mdcommon::$separator, $fillParamValue);

                                    $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.$valueArr[0].'</span>';
                                    $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.$valueArr[1].'</span>';

                                    $fillParamValue = $oldVal . $newVal;
                                }
                                
                                return '<span class="popupInput" data-view-path="'.$paramRealPath.'">' . $fillParamValue . '</span>';
                            }  
                        }         
                        
                        return '<span class="popupInput" data-view-path="'.$paramRealPath.'"></span>';
                    }
                }   
                
                if ($typeCode == 'bigdecimal' || $typeCode == 'decimal') {
                    
                    if ($value != '') {
                        
                        if (strpos($value, Mdcommon::$separator) !== false) {
                            
                            $valueArr = explode(Mdcommon::$separator, $value);
                            
                            $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.number_format($valueArr[0], 2, '.', ',').'</span>';
                            $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.number_format($valueArr[1], 2, '.', ',').'</span>';

                            $value = $oldVal . $newVal;
                        
                        } else {
                            $value = 0 + Number::numeric($value);
                            $value = number_format($value, 2, '.', ',');
                        }
                    }
                    
                    return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                    
                } else {      
                    
                    $value = (is_array($value) ? '' : $value);
                    
                    if (strpos($value, Mdcommon::$separator) !== false) {
                        
                        $valueArr = explode(Mdcommon::$separator, $value);

                        $oldVal = $valueArr[0] == 'null' ? '' : '<span class="badge badge-warning d-none" data-valmode="old">'.$valueArr[0].'</span>';
                        $newVal = $valueArr[1] == 'null' ? '' : '<span class="badge badge-info" data-valmode="new">'.$valueArr[1].'</span>';
                        
                        $value = $oldVal . $newVal;
                    }
                    
                    return '<span data-view-path="'.$paramRealPath.'">' . $value . '</span>';
                }
            }
        }
        
        return null;
    }
    
    public function renderParamLabelForTheme(array $param) {
        if ($this->view->themeData['IS_MULTI_LANG'] !== '1') {
            return Mdwebservice::renderParamLabel($param);
        } else {
            return Mdwebservice::renderParamLabel($param, 'en');
        }
    }

    public function groupParamsData($inputMetaGroupId, $parentId = null) {
        $dm = &getInstance();
        $dm->load->model('mdwebservice', 'middleware/models/');
        
        if ($parentId) {
            $data = $dm->model->groupParamsDataModel($inputMetaGroupId, $parentId);
        } else {
            $data = $dm->model->groupParamsDataModel($inputMetaGroupId, null, ' AND PAL.PARENT_ID IS NULL');
        }
        
        return $data;
    }

    public function callMethodByMeta($metaDataId = null, $mainMetaDataId = null, $isJson = null) { 
        
        $this->view->renderType = '0';
        $this->view->mainBpTab = array('tabStart' => '', 'tabEnd' => '', 'ticket' => '0');
        $this->view->processToolbarCommand = '';

        if (Input::isEmpty('renderType') == false) {
            $this->view->renderType = '1';
        }
        
        if ($metaDataId === null && $isJson === null && $mainMetaDataId === null) {
            
            $this->view->methodId = Input::numeric('metaDataId');
            
        } else {
            
            if (Input::postCheck('postData')) {
                
                parse_str($_POST['postData'], $postdata);
                $_POST['oneSelectedRow'] = $postdata;
            }

            $_POST['dmMetaDataId'] = Input::paramNum($mainMetaDataId);
            $_POST['metaDataId'] = Input::paramNum($metaDataId);
            
            $this->view->methodId = $metaDataId;
        }
        
        $this->load->model('mdwebservice', 'middleware/models/');
        $this->view->methodRow = $this->model->getMethodIdByMetaDataModel($this->view->methodId);
        
        $response = array();
        
        if ($this->view->methodRow) {
            
            $this->view->selectedRowData = array();
            $this->view->isBpOpenParam = Input::post('isBpOpen');
            $this->view->uniqId = Input::numeric('prevUniqId', getUID());
            $this->view->processSubType = $this->view->methodRow['SUB_TYPE'];
            $this->view->processActionType = self::$bpActionType = $this->view->methodRow['ACTION_TYPE'];
            
            self::$processCode = $this->view->methodRow['META_DATA_CODE'];
            
            $saveAddModeWithGet = $this->view->methodRow['RUN_MODE'] == 'saveadd' && $this->view->processActionType == 'insert' ? 'saveadd' : '';
            $this->view->runMode = $this->view->methodRow['RUN_MODE'] == 'saveadd' ? $this->lang->line('save_btn_add') : '';
            
            $this->view->isKnowledge = issetParam($this->view->methodRow['IS_KNOWLEDGE']);
            $this->view->isShowPrevNext = $this->view->methodRow['IS_SHOW_PREVNEXT'];

            if (Input::post('isSystemMeta') == 'true') {
                $this->view->isDialog = false;
                $this->view->isHeaderName = true;
                $this->view->isSystemProcess = 'true';
            } else {
                $this->view->isHeaderName = (Input::post('isHeaderName') == 'true') ? true : false;

                if ($this->view->methodRow['WINDOW_TYPE'] == 'main' || Input::post('isMain') == 'true') {
                    $this->view->isDialog = false;
                    $this->view->isHeaderName = false;
                } else {
                    $this->view->isDialog = (Input::post('isDialog') == 'true') ? true : false;
                }
                
                $this->view->isSystemProcess = 'false';
            }

            $processActionBtn = $this->view->methodRow['ACTION_BTN'];
            $runBtn = ($processActionBtn != '') ? $this->lang->line($processActionBtn) : $this->lang->line('save_btn');
            
            $this->view->processActionBtn = $runBtn;

            $this->view->responseType = Input::post('responseType');
            $this->view->openParams = Input::post('openParams');
            $this->view->callerType = Input::post('callerType');
            
            $this->view->fillParamData = null;
            $this->view->sourceId = null;
            $this->view->realSourceIdAutoMap = null;
            
            $this->view->isProcess = true;
            $this->view->isEditMode = false;
            $this->view->isPrintView = false;
            $this->view->isSavePrint = false;
            $this->view->isPrint = false;
            $this->view->batchNumber = Input::post('batchNumber'); // Next Prev харуулах товчин дээр хэрэг болов. Батболд

            $this->view->columnCount = (empty($this->view->methodRow['COLUMN_COUNT']) ? self::$defaultColumnCount : $this->view->methodRow['COLUMN_COUNT']);
            $this->view->labelWidth = (empty($this->view->methodRow['LABEL_WIDTH']) ? ($this->view->columnCount == 1 ? 45 : self::$defaultLabelWidth) : intval($this->view->methodRow['LABEL_WIDTH']));
            $this->view->isBanner = ($this->view->methodRow['COUNT_BANNER'] != '0') ? true : false;
            
            if ($this->view->methodRow['COUNT_PROCESS_TEMPLATE'] != '0') {
                $this->view->isPrint = true;
                if ($this->view->methodRow['GETDATA_PROCESS_ID'] != '') {
                    $this->view->getProcessId = $this->view->methodRow['GETDATA_PROCESS_ID'];
                } else {
                    $this->view->getProcessId = '';
                }
            }
            
            if (Input::isEmpty('fillJsonParam') == false) {
                $this->view->fillParamData = self::fillParamByJson($_POST['fillJsonParam']);
                $this->view->isEditMode = true;
                self::$isHistoryControl = true;
            }           
            
            $this->view->dmMetaDataId = Input::numeric('dmMetaDataId');

            if (isset($this->view->dmMetaDataId) && !empty($this->view->dmMetaDataId)) {
                $mainWfmProcess = $this->model->getMainWfmProcessModel($this->view->dmMetaDataId, $this->view->methodId);
                
                if ($mainWfmProcess['isMain'] == 1 && Input::numeric('isIgnoreMainProcess') != 1) {
                    $this->view->mainProcessId = $this->view->methodId; 
                    $this->view->hasMainProcess = true;
                    $isWorkflow = true;
                }
                if ($mainWfmProcess['isWorkflow'] == 1) {
                    $isWorkflow = true;
                }

                if (Config::getFromCacheDefault('is_testing', null, '0')) {
                    $obj = &getInstance();
                    $obj->load->model('mdobject', 'middleware/models/');
                    $this->view->processToolbarCommand = $obj->model->bpToolbarCommandModel($this->view->dmMetaDataId, $this->view->methodId, Input::post('oneSelectedRow'));
                    $this->load->model('mdwebservice', 'middleware/models/');
                }
            }
            
            if (Input::post('oneSelectedRow')) {
                
                $selectedRowData = $_POST['oneSelectedRow'];
                $this->view->selectedRowData = $selectedRowData;
                
                if (Input::post('isGetConsolidate') == 'true' && isset($this->view->selectedRowData[0])) {
                    
                    $this->view->fillParamData = $this->model->getConsolidateDataProcessModel($this->view->dmMetaDataId, $this->view->methodId, $selectedRowData);
                    $this->view->isGetConsolidate = true;
                    
                    $this->view->selectedRowData[0]['isGetConsolidate'] = 1;
                    
                } else {
                    $this->view->fillParamData = $this->model->getRunDataProcessModel($this->view->dmMetaDataId, $this->view->methodId, $selectedRowData, Input::numeric('workSpaceId'), Input::post('workSpaceParams'));
                    
                    if (isset($this->view->fillParamData['id'])) {
                        
                        $this->view->sourceId = is_array($this->view->fillParamData['id']) ? $this->view->fillParamData['id']['id'] : $this->view->fillParamData['id'];
                        $_POST['recordId'] = $this->view->sourceId;
                        
                    } elseif (isset($selectedRowData['id'])) {
                        
                        $this->view->sourceId = $selectedRowData['id'];
                        $_POST['recordId'] = $this->view->sourceId;   
                    }
                }
                
                if (isset($selectedRowData['id']) || (isset($selectedRowData[0]) && $selectedRowData !== 'false' && isset($selectedRowData[0]['id']))) {

                    $getdmTransferProcessDtl = $this->model->getDmProcessDtlModel($this->view->dmMetaDataId, $this->view->methodId);
                    
                    if (isset($getdmTransferProcessDtl['IS_AUTO_MAP']) && $getdmTransferProcessDtl['IS_AUTO_MAP'] === '1') {
                        
                        $autoSourcePath = 'id';
                        
                        if (isset($selectedRowData[0]) && is_array($selectedRowData[0])) {
                            if (isset($selectedRowData[0][$getdmTransferProcessDtl['AUTO_MAP_SRC_PATH']])) {
                                $autoSourcePath = $getdmTransferProcessDtl['AUTO_MAP_SRC_PATH'];
                            }
                        } else {
                            if (isset($selectedRowData[$getdmTransferProcessDtl['AUTO_MAP_SRC_PATH']])) {
                                $autoSourcePath = $getdmTransferProcessDtl['AUTO_MAP_SRC_PATH'];
                            }
                        }

                        if (isset($selectedRowData[0]) && is_array($selectedRowData[0])) {

                            $this->view->realSourceIdAutoMap = '';

                            foreach ($selectedRowData as $rowId) {
                                $this->view->realSourceIdAutoMap .= $rowId[$autoSourcePath] . ',';
                            }
                            
                            $allRows = $selectedRowData;
                            
                        } else {
                            $this->view->realSourceIdAutoMap = $selectedRowData[$autoSourcePath];
                            $allRows = array($selectedRowData);
                        }
                        
                        if (isset($getdmTransferProcessDtl['AUTO_MAP_NAME_PATTERN']) && $autoMapPatternConf = $getdmTransferProcessDtl['AUTO_MAP_NAME_PATTERN']) {
                            
                            $autoMapPatternConf = strtolower($autoMapPatternConf);
                            
                            if (array_key_exists($autoMapPatternConf, $allRows[0])) {
                                
                                $this->view->srcAutoMapPattern = '';
                            
                                foreach ($allRows as $allRow) {
                                    $this->view->srcAutoMapPattern .= issetParam($allRow[$autoMapPatternConf]) . ', ';
                                }

                                $this->view->srcAutoMapPattern = rtrim($this->view->srcAutoMapPattern, ', ');
                            }
                        }
                    }

                    $this->load->model('mdobject', 'middleware/models/');

                    $this->view->row = $this->model->getDataViewConfigRowModel($this->view->dmMetaDataId);
                    $this->view->metaDataCode = $this->view->row['META_DATA_CODE'];
                    $this->view->refStructureId = $this->view->row['REF_STRUCTURE_ID'];

                    $this->load->model('mdwebservice', 'middleware/models/');
                } 
                
                if ($this->view->fillParamData) {
                    $this->view->isEditMode = true;
                }
            }
            
            if (Input::isEmpty('isBasketWindow') === false) {
                $this->load->model('mdmeta', 'middleware/models/');
                $this->view->basketPath = $this->model->getDMTransferProcessModel($this->view->dmMetaDataId, $this->view->methodId, true, true);
                $this->view->basketPathJson = json_encode($this->view->basketPath);
                $this->view->rowDataJson = json_encode($this->view->selectedRowData);
            }
                       
            $this->view->newStatusParams = Input::post('wfmStatusParams');
            
            if (isset($isWorkflow) && $this->view->selectedRowData && $this->view->selectedRowData !== 'false') {
                $this->load->model('mdobject', 'middleware/models/');
                
                $this->view->wfmStatusParams = $this->view->wfmStatusBtns = $this->model->getWorkflowNextStatusModel($this->view->dmMetaDataId, $this->view->selectedRowData, '0');                
            }

            $this->load->model('mdwebservice', 'middleware/models/');
            $this->view->row = '';
            $this->view->metaDataCode = '';
            
            $this->view->cyphertext = null;
            $this->view->plainText = null;
                    
            $this->view->addonJsonParam = '{}';
            
            if (Input::isEmpty('addonJsonParam') == false) {
                
                $addonJsonParam = json_decode($_POST['addonJsonParam'], true);
                if (!$addonJsonParam) {
                    parse_str($_POST['addonJsonParam'], $addonJsonParam);
                }
                
                if (is_array($this->view->fillParamData)) {
                    $this->view->fillParamData = array_merge($this->view->fillParamData, Arr::changeKeyLower($addonJsonParam));
                } else {
                    $this->view->fillParamData = Arr::changeKeyLower($addonJsonParam);
                }
                
                $this->view->addonJsonParam = Json::encode($this->view->fillParamData);
            }
            
            if (Input::isEmpty('fillDataParams') == false) {
                if (is_array($_POST['fillDataParams'])) {
                    $addonParseParam = $_POST['fillDataParams'];
                } else {
                    parse_str($_POST['fillDataParams'], $addonParseParam);
                }
                
                if (is_array($this->view->fillParamData)) {
                    $this->view->fillParamData = array_merge($this->view->fillParamData, Arr::changeKeyLower($addonParseParam));
                } else {
                    $this->view->fillParamData = Arr::changeKeyLower($addonParseParam);
                }
                
                if (Input::post('isEditMode')) {
                    $this->view->isEditMode = true;
                }
            }
            
            if (Input::postCheck('signerParams') && is_array($_POST['signerParams'])) {
                $this->view->cyphertext = Input::param($_POST['signerParams']['cyphertext']);
                $this->view->plainText = Input::param($_POST['signerParams']['plainText']);
            }
            
            if ($this->view->isEditMode == false && $this->view->methodRow['GETDATA_PROCESS_ID'] != '') {
                    
                if ((Input::isEmpty('workSpaceId') == true && Input::isEmpty('workSpaceParams') == true && Input::isEmpty('recordId') == false) || $this->view->methodRow['COUNT_CALENDAR_LINK'] != '0') {

                    $fillParamData = $this->model->getRunDefaultGetDataProcessModel($this->view->methodId, null, null, Input::post('recordId'));
                    $this->view->sourceId = isset($fillParamData['id']) ? $fillParamData['id'] : null;

                } elseif (Input::postCheck('runDefaultGet') && Input::post('runDefaultGet')) {
                    
                    $runDfGetData = array();
                    parse_str($_POST['runDefaultGetParam'], $runDfGetData);

                    $fillParamData = $this->model->getRunDefaultGetDataProcessModel($this->view->methodId, null, null, $runDfGetData['id']);
                    
                } else {
                    $workSpaceParamsType = Input::postCheck('workSpaceParamsType') ? Input::post('workSpaceParamsType') : '';
                    $fillParamData = $this->model->getRunDefaultGetDataProcessModel($this->view->methodId, Input::numeric('workSpaceId'), Input::post('workSpaceParams'), null, $workSpaceParamsType);
                    
                    if (is_null($fillParamData)) {
                        $fillParamData = $this->model->getRunDefaultGetDataProcessModel($this->view->methodId, null, null, Input::post('recordId'));
                    }
                    
                    $this->view->sourceId = isset($fillParamData['id']) ? $fillParamData['id'] : null;
                } 

                if (is_array($fillParamData)) {

                    if (is_array($this->view->fillParamData)) {
                        $this->view->fillParamData = array_merge($this->view->fillParamData, $fillParamData);
                    } else {
                        $this->view->fillParamData = $fillParamData;
                    }

                    $this->view->isEditMode = true;
                }
            }
                                    
            if (Input::isEmpty('runProcessResponse') == false) {
                
                parse_str($_POST['runProcessResponse'], $runProcessResponse);
                $runProcessResponse['responseType'] = 'returnRequestParams';
                $runProcessResponse['bpTemplateId'] = Input::post('bpTemplateId');
                $_POST = $runProcessResponse;
                
                $this->view->fillParamData = Arr::changeKeyLower(self::runProcess());                
            }
            
            $this->view->bpTab = array('tabStart' => '', 'tabEnd' => '');
            
            $this->view->checkListStartHtml = null;
            $this->view->checkListEndHtml = null;
            $checkList = null;
            $dialogWidth = ($this->view->methodRow['WINDOW_SIZE'] == 'custom' && $this->view->methodRow['WINDOW_WIDTH'] != '') ? $this->view->methodRow['WINDOW_WIDTH'] : self::$defaultWindowWidth;
            
            if (Input::postCheck('notCheckList') == false) {
                
                if (Input::isEmpty('rowDataEncode') === false) {
                    $_POST['oneSelectedRow'] = Arr::decode(Input::post('rowDataEncode'));
                }
                
                $checkList = self::renderProcessCheckList($this->view->methodRow, $this->view->isEditMode, $this->view->sourceId);

                if (isset($checkList['checkListSideBarContent'])) {
                    
                    $dialogWidth = $dialogWidth + 250;
                    
                    $this->view->checkListStartHtml = self::checkListStartHtml();
                    $this->view->checkListEndHtml = self::checkListEndHtml($checkList['checkListSideBarContent']);
                }
            } 
            
            if ($this->view->methodRow['IS_WIDGET'] == '1') {
                $dialogWidth = $dialogWidth + 250;
                
                $this->view->checkListStartHtml = self::checkListStartHtml();
                $this->view->checkListEndHtml = self::checkListEndHtml('');
            }
            
            $returnData = $this->model->getShowInputParams($this->view->methodId, $this->view->methodRow['IS_TREEVIEW']);
            
            $this->view->methodRow['isIgnorePhotoTab'] = issetParam($returnData['isIgnorePhotoTab']);
            $this->view->methodRow['isIgnoreFileTab'] = issetParam($returnData['isIgnoreFileTab']);
            $this->view->methodRow['isIgnoreCommentTab'] = issetParam($returnData['isIgnoreCommentTab']);
            
            if ($this->view->isEditMode == false) { 
                $this->view->bpTab = $this->model->renderAddModeBpTab($this->view->uniqId, $this->view->methodRow, $checkList, $this->view->selectedRowData, $this->view->dmMetaDataId);
            } else {
                if ($this->view->sourceId && isset($this->view->fillParamData['id'])) {
                    $this->view->bpTab = $this->model->renderEditModeBpTab($this->view->uniqId, $this->view->methodRow, $this->view->sourceId, $this->view->selectedRowData, $this->view->dmMetaDataId);
                    $this->load->model('mdwebservice', 'middleware/models/');
                } else {
                    
                    $this->view->bpTab = $this->model->renderAddModeBpTab($this->view->uniqId, $this->view->methodRow, null, $this->view->selectedRowData, $this->view->dmMetaDataId);
                }
            }
            
            $this->view->paramList = $returnData['renderData'];     
            
            if (Input::isEmpty('workSpaceId') == false && Input::isEmpty('workSpaceParams') == false) {
                
                if (Input::post('workSpaceParamsType') === 'array') {
                    $workSpaceParams = Arr::decode(Input::post('workSpaceParams'));
                } else {
                    parse_str(Input::post('workSpaceParams'), $workSpaceParams);
                }
                
                if (isset($workSpaceParams['workSpaceParam'])) {
                    
                    if (isset($isWorkflow) && !isset($this->view->wfmStatusBtns)) {
                        
                        $this->load->model('mdobject', 'middleware/models/');
                        
                        $this->view->row = $this->model->getDataViewConfigRowModel($this->view->dmMetaDataId);
                        $this->view->refStructureId = $this->view->row['REF_STRUCTURE_ID'];
                        $this->view->wfmStatusParams = $this->view->wfmStatusBtns = $this->model->getWorkflowNextStatusModel($this->view->dmMetaDataId, $workSpaceParams['workSpaceParam'], '0');
                        
                        $this->load->model('mdwebservice', 'middleware/models/');                    
                    }                

                    $workSpaceFillParamData = $this->model->getWorkSpaceParamMapModel($this->view->methodId, Input::numeric('workSpaceId'), $workSpaceParams['workSpaceParam'], $this->view->paramList);
                    
                    if ($workSpaceFillParamData) {
                        if (is_array($this->view->fillParamData)) {
                            $this->view->fillParamData = array_merge($this->view->fillParamData, $workSpaceFillParamData);
                        } else {
                            $this->view->fillParamData = $workSpaceFillParamData;
                        }
                    }
                }
            }    
            
            if (Input::isEmpty('dataTemplateId') == false) {
                $this->view->fillParamData = $this->model->getProcessTemplateModel($this->view->methodId);
            }
            
            $this->view->cache = phpFastCache();
            
            if (Mdwebservice::$isLogViewMode == false) {

                $this->view->bpFullScriptsEvent = $this->view->cache->get('processFullExpression_' . $this->view->methodId);
                $this->view->bpFullScriptsWithoutEvent = $this->view->cache->get('processFullExpressionWithoutEvent_' . $this->view->methodId);
                $this->view->bpFullScriptsVarFnc = $this->view->cache->get('processFullExpressionVarFnc_' . $this->view->methodId);
                $this->view->bpFullScriptsSave = $this->view->cache->get('processFullExpressionSave_' . $this->view->methodId);
                $this->view->bpFullScriptsAfterSave = $this->view->cache->get('processFullExpressionAfterSave_' . $this->view->methodId);

                if ($this->view->bpFullScriptsEvent == null) {

                    $rowExp = $this->model->getMethodExpressionModel($this->view->methodId);

                    $fullExp = new Mdexpression();

                    $this->view->bpFullScriptsVarFnc = $fullExp->fullExpressionConvertWithoutEvent($rowExp['VAR_FNC_EXPRESSION_STRING'], $this->view->methodId, $this->view->processActionType, true);
                    $this->view->cache->set('processFullExpressionVarFnc_' . $this->view->methodId, $this->view->bpFullScriptsVarFnc, self::$expressionCacheTime);

                    $this->view->bpFullScriptsEvent = $fullExp->fullExpressionConvertEvent($rowExp['EVENT_EXPRESSION_STRING'], $this->view->methodId, $this->view->processActionType);
                    $this->view->cache->set('processFullExpression_' . $this->view->methodId, $this->view->bpFullScriptsEvent, self::$expressionCacheTime);

                    $this->view->bpFullScriptsWithoutEvent = $fullExp->fullExpressionConvertWithoutEvent($rowExp['LOAD_EXPRESSION_STRING'], $this->view->methodId, $this->view->processActionType, false);
                    $this->view->cache->set('processFullExpressionWithoutEvent_' . $this->view->methodId, $this->view->bpFullScriptsWithoutEvent, self::$expressionCacheTime);

                    $this->view->bpFullScriptsSave = $fullExp->fullExpressionConvertWithoutEvent($rowExp['SAVE_EXPRESSION_STRING'], $this->view->methodId, $this->view->processActionType, false, 'before_save');

                    preg_match_all('/startAfterSave(.*?)endAfterSave/ms', $this->view->bpFullScriptsSave, $afterSaveExpression);

                    if (count($afterSaveExpression[0]) > 0) {
                        $this->view->bpFullScriptsSave = str_replace($afterSaveExpression[0][0], '', $this->view->bpFullScriptsSave);
                        $this->view->bpFullScriptsAfterSave = trim($afterSaveExpression[1][0]);
                    }

                    $this->view->cache->set('processFullExpressionSave_' . $this->view->methodId, $this->view->bpFullScriptsSave, self::$expressionCacheTime);
                    $this->view->cache->set('processFullExpressionAfterSave_' . $this->view->methodId, $this->view->bpFullScriptsAfterSave, self::$expressionCacheTime);
                }
                
                self::getTempFullExpression($this->view->cache, $this->view->methodId);
                
            } else {
                
                $this->view->bpFullScriptsEvent = null;
                $this->view->bpFullScriptsSave = null;
                $this->view->bpFullScriptsAfterSave = null;
                $this->view->bpFullScriptsWithoutEvent = $this->view->cache->get('processFullExpressionWithoutEvent_' . $this->view->methodId . '_log');
                $this->view->bpFullScriptsVarFnc = $this->view->cache->get('processFullExpressionVarFnc_' . $this->view->methodId . '_log');
                
                if ($this->view->bpFullScriptsVarFnc == null) {
                    
                    $rowExp = $this->model->getMethodExpressionModel($this->view->methodId);

                    $fullExp = new Mdexpression();

                    $this->view->bpFullScriptsVarFnc = $fullExp->fullExpressionConvertWithoutEvent($rowExp['VAR_FNC_EXPRESSION_STRING'], $this->view->methodId, 'view', true);
                    $this->view->cache->set('processFullExpressionVarFnc_' . $this->view->methodId . '_log', $this->view->bpFullScriptsVarFnc, self::$expressionCacheTime);

                    $this->view->bpFullScriptsWithoutEvent = $fullExp->fullExpressionConvertWithoutEvent($rowExp['LOAD_EXPRESSION_STRING'], $this->view->methodId, 'view', false);
                    $this->view->cache->set('processFullExpressionWithoutEvent_' . $this->view->methodId . '_log', $this->view->bpFullScriptsWithoutEvent, self::$expressionCacheTime);
                }
            }

            $isDialogSize = '';
            
            if (!$this->view->isDialog && ($this->view->callerType == 'generalledger' || $this->view->callerType == 'drilldown')) {
                $this->view->isDialog = true;
                $isDialogSize = 'auto';
            }
            
            if ($this->view->isPrint == true) {
                $response['get_process_id'] = $this->view->getProcessId;
                $response['save_and_print'] = $this->lang->lineDefault('saveandprint', 'Хадгалаад хэвлэх');
                
                if ($this->view->isEditMode) {
                    $response['print_btn'] = $this->lang->line('print_btn');
                    $response['oldRowId'] = $this->view->sourceId;
                }
                $this->view->isSavePrint = true;
            }
            
            $this->view->cacheId = null;
            $this->view->showCopyBtn = Input::post('showCopyBtn', '0');
            
            if (($this->view->methodRow['HTML_TEMPLATE_FILE'] != '' && file_exists($this->view->methodRow['HTML_TEMPLATE_FILE'])) || Input::postCheck('wordHtmlTemplate')) {
                $this->load->model('mdwebservice', 'middleware/models/');
                
                $this->view->editNtrMode = Input::postCheck('editNtr') ? true : false;
                $this->view->otherCriteriaArr = $this->view->mergedCriteriaArr = array();
                
                if (Input::postCheck('wordHtmlTemplate')) {
                    
                    $this->view->htmlContent = html_entity_decode(Input::post('wordHtmlTemplate'), ENT_QUOTES, 'UTF-8');
                    $this->view->htmlContent = self::replaceTaxonamy($this->view->htmlContent, $this->view->paramList);
                    $this->view->notFieldReplace = '';
                    $mduser = &getInstance();
                    $mduser->load->model('mduser', 'middleware/models/');
                    $this->view->operator = $mduser->model->gettokenDataByUserId();
                    $methodHtml = html_entity_decode($this->view->renderPrint('sub/renderMethodTemplate_v2', self::$viewPath), ENT_QUOTES, 'UTF-8');
                   
                } else {                    
                    
                    $this->view->bpTemplateId = Input::post('bpTemplateId');
                    $bpTemplateRow = $this->model->getBpTemplateDropDownListModel($this->view->methodId, $this->view->bpTemplateId);
                    
                    $this->view->bpTemplateId = $bpTemplateRow['id'];
                    $this->view->templateDropDownList = $bpTemplateRow['dropdown'];
                    
                    if (!$this->view->renderType) {
                        $bpController = $this->model->getBpTemplateMapDataModel($this->view->bpTemplateId, $this->view->uniqId, $this->view->methodId, $this->view->dmMetaDataId, $this->view->methodRow, $this->view->isEditMode);
                        
                        $this->view->mainBpTab = $bpController['mainTab'];
                        $this->view->otherCriteriaArr = $bpController['criteria'];
                        $this->view->mergedCriteriaArr = $bpController['mergedpath'];
                    } else {
                        $this->view->mainBpTab['ticket'] = '1';
                    }
                    
                    if (!empty($bpTemplateRow['contentId'])) {

                        $this->view->htmlContent = self::getTemplateWidgetContent($this->view->methodId, $this->view->bpTemplateId, $bpTemplateRow['htmlTemplate'], $this->view->showCopyBtn);
                        
                        $this->view->widgetConfigPath = array(
                            array('id' => 'widget_party_a', 'text' => 'А тал', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_party_b', 'text' => 'Б тал', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_party_c', 'text' => 'В тал', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_party_d', 'text' => 'Г тал', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_bank', 'text' => $this->lang->line('META_00116'), 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'mainWidget', 'text' => 'Үйлчүүлэгч (Unitel)', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_participant', 'text' => 'Оролцогч', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_customer', 'text' => 'Үйлчлүүлэгч', 'function' => 'renderPartyPanel_'.$this->view->methodId, 'ismain' => '1'), 
                            array('id' => 'widget_realestate', 'text' => 'Үл хөдлөх хөрөнгө', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_organization', 'text' => 'Хуулийн этгээд', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_auto', 'text' => 'Тээврийн хэрэгсэл', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_firearm', 'text' => 'Галт зэвсэг', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_share', 'text' => 'Хувьцаа', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_asset', 'text' => 'Хөдлөх, эд хөрөнгө', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_none', 'text' => 'None', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'ismain' => '0'), 
                            array('id' => 'widget_default', 'text' => 'Default', 'function' => 'appendTaxonamyBodyByTag_'.$this->view->methodId, 'isactive' => '0')
                        );
                        
                        $this->view->widgetConfig = $this->model->getBPTemplateWidgetsByIdModel($this->view->bpTemplateId, $this->view->methodId);
                        $this->view->widgetExpression = $this->model->getBPTemplateWidgetsExpByIdModel($this->view->bpTemplateId, $this->view->widgetConfig, $this->view->methodId);
                        $this->view->getTaxoConfigByTemplate = $this->model->getTaxonamyConfigByTemplateIdModel($this->view->bpTemplateId, $this->view->methodId);
                        
                        $this->view->taxonamyScriptsEvent = $this->view->taxonamyScriptsEventDtl = $this->view->taxonamyScriptsEventKeyDtl = '';
                        
                        $expressionTags = self::getWidgetAllConfig($this->view->methodId, $this->view->bpTemplateId, $this->view->widgetConfig, array(), $this->view->editNtrMode);
                        
                        $this->view->getTaxonamyTagExpression = $expressionTags;
                    } else {                        
                        $this->view->htmlContent = file_get_contents($bpTemplateRow['htmlTemplate']);

                        if (strpos($this->view->htmlContent, '{{tabsaddons}}') !== false) {
                            $this->view->bpTab = array('tabStart' => '', 'tabEnd' => '');
                            $this->view->bpTab = array_merge($this->view->bpTab, $this->model->renderAddModeBpTab($this->view->uniqId, $this->view->methodRow, $checkList, $this->view->selectedRowData, $this->view->dmMetaDataId, '1'));
                        }
                    }
                    
                    $this->view->bpTemplateRow = $bpTemplateRow;
                    
                    $methodHtml = self::renderTemplateViews($bpTemplateRow, $this->view->editNtrMode);
                }
                
            } else { 
                
                if (Session::get(SESSION_PREFIX . 'testCaseMode')) {
                    
                    $this->view->isDialog = true;
                    $this->view->bpFullScriptsEvent = null;
                    $this->view->bpFullScriptsSave = null;
                    $this->view->bpFullScriptsAfterSave = null;
                    $this->view->bpFullScriptsWithoutEvent = null;
                    $this->view->bpFullScriptsVarFnc = null;
                
                    $saveAddModeWithGet = 'testcase';
                }
                
                if ($this->view->methodRow['HAS_THEME']) {
                        
                    $methodHtml = $this->themeRenderData($this->view->methodId, $this->view->fillParamData, $this->view->paramList, $this->view->bpTab);

                } elseif ($this->view->methodRow['IS_TREEVIEW'] != '1') {
                    
                    if (issetParam($this->view->methodRow['LAYOUT_CODE']) && $returnData['isLayout']) {
                        self::$isLayoutRender = true;
                    } else {
                        self::$isLayoutRender = false;
                    }
                    
                    if ($this->view->processActionType == 'view') { 
                            
                        if (Input::postCheck('viewFilePathBp') && file_exists(Input::post('viewFilePathBp'))) {
                            
                            $this->view->sourceId = Input::post('sourceId');
                            $this->view->filePath = Input::post('viewFilePathBp');
                            $this->view->fileExtension = Input::post('fileExtension');
                            $methodHtml = $this->view->renderPrint('sub/renderMethodFileView', self::$viewPath);
                            
                        } else {
                            $methodHtml = self::renderViewProcess();
                        }

                    } else {

                        if (isset($returnData['pagerConfig']) && count($returnData['pagerConfig'])) {
                            $this->view->cacheId = $this->view->uniqId;
                            $this->view->pagerConfig = $returnData['pagerConfig'];
                            $this->view->fillParamData = (new Mdcache())->fillParamDataSplice($this->view->methodId, $this->view->cacheId, $returnData['pagerConfig'], $this->view->fillParamData, 'load_first');
                        }
                        
                        if (self::$isLayoutRender) {
                            $methodHtml = self::renderLayoutProcess();
                        } elseif (Config::getFromCache('CONFIG_USE_BP_DTL_THEME') && isset($returnData['isHasDtlTheme']) && $returnData['isHasDtlTheme'] && $returnData['isHasDtlTheme'] != '13') {
                            $methodHtml = $this->view->renderPrint('sub/renderMethodWithDtlTheme', self::$viewPath);
                        } else {
                            $methodHtml = $this->view->renderPrint('sub/renderMethod', self::$viewPath);   
                        }
                    }
                    
                } elseif ($this->view->processActionType == 'view') {
                    
                    $methodHtml = self::renderViewProcess();
                    
                } else {
                    
                    $folderList = $returnData['treeData'];
                    
                    $simpletree = new Tree();
                    $simpletree->treeId = 'commonSelectableFolderMetaGroupView';
                    $simpletree->rowId = 'GROUP_ID';
                    $simpletree->parentId = 'PARENT_ID';
                    $simpletree->rowName = 'GROUP_NAME';
                    $simpletree->customAttr = 'PARAM_PATH';
                    $simpletree->rowHtml = '<a href="javascript:;" onclick="metaGroupSelectableTreeFolderFilter(\'#GROUP_ID#\');">#GROUP_NAME#</a>';
                    $this->view->folderTreeView = $simpletree->treeView($folderList);
                    
                    $methodHtml = $this->view->renderPrint('sub/renderMethodTreeView', self::$viewPath);
                }
            }
            
            $methodHtml = str_replace('_'.$this->view->methodId, '_'.$this->view->uniqId, $methodHtml);
            $methodHtml = preg_replace('/(process\/file)(_\d+)(_'.$this->view->uniqId.')(_\d+)/', '${1}${2}_'.$this->view->methodId.'${4}', $methodHtml);
            
            if ($this->view->methodRow['THEME_CODE']) {
                $this->view->bpRenderHtml = $methodHtml;
                $methodHtml = $this->view->renderPrint('sub/template/' . $this->view->methodRow['THEME_CODE'], self::$viewPath);
            }
            
            if ($this->view->isDialog) {
                                
                $response = array_merge($response, array(
                    'Html' => $methodHtml,
                    'Title' => $this->lang->line($this->view->methodRow['META_DATA_NAME']),
                    'close_btn' => $this->lang->line('close_btn'),
                    'run_btn' => $runBtn,
                    'mode' => 'dialog',
                    'dialogClass' => $this->view->methodRow['WINDOW_TYPE'],
                    'dialogSize' => $this->view->methodRow['WINDOW_SIZE'],
                    'dialogWidth' => $dialogWidth,
                    'dialogHeight' => (($this->view->methodRow['WINDOW_SIZE'] == 'custom' && $this->view->methodRow['WINDOW_HEIGHT'] != '') ? $this->view->methodRow['WINDOW_HEIGHT'] : self::$defaultWindowHeight),
                    'isPrintView' => $this->view->isPrintView,
                    'run_mode' => $this->view->runMode, 
                    'saveAddMode' => $saveAddModeWithGet, 
                    'runBtnColor' => '', 
                    'isDialogSize' => $isDialogSize, 
                    'metaType' => 'businessProcess', 
                    'metaDataId' => $this->view->methodId, 
                    'uniqId' => $this->view->uniqId,
                    'helpContentId' => null,
                    'isKnowledge' => $this->view->isKnowledge,
                    'isShowPrevNext' => $this->view->isShowPrevNext,
                    'selectedRowData' => $this->view->selectedRowData, 
                    'isSystemProcess' => $this->view->isSystemProcess, 
                    'processCode' => self::$processCode, 
                    'processActionType' => $this->view->processActionType, 
                    'previewReportTemplateCode' => issetParam($this->view->methodRow['PREVIEW_REPORT_TEMPLATE_CODE'])
                ));
                
            } else {
                $methodHtmlAppend = '';
                
                if (!$this->view->renderType) {
                    $methodHtmlAppend .= '<div class="row">';
                }
                
                $methodHtmlAppend .= $methodHtml;
                
                if (!$this->view->renderType) {
                    $methodHtmlAppend .= '</div>';
                }
                
                $response = array(
                    'Html' => $methodHtmlAppend, 
                    'Title' => $this->lang->line($this->view->methodRow['META_DATA_NAME']), 
                    'mode' => 'main', 
                    'metaType' => 'businessProcess', 
                    'metaDataId' => $this->view->methodId,
                    'uniqId' => $this->view->uniqId, 
                    'isSystemProcess' => $this->view->isSystemProcess
                );
            }
            
        } else {
            $methodHtml = $this->view->renderPrint('sub/renderWarning', self::$viewPath);
            $response = array(
                'Html' => $methodHtml,
                'Title' => 'Тохиргоогүй процесс',
                'close_btn' => $this->lang->line('close_btn'),
                'run_btn' => $this->lang->line('save_btn'),
                'mode' => 'dialog',
                'dialogClass' => 'standart',
                'dialogSize' => 'standart',
                'dialogWidth' => self::$defaultWindowWidth,
                'dialogHeight' => self::$defaultWindowHeight,
                'isPrintView' => false, 
                'runBtnColor' => '', 
                'metaType' => 'businessProcess', 
                'metaDataId' => $this->view->methodId 
            );
        }
        
        if ($metaDataId === null && $isJson === null) {
            echo json_encode($response); 
        } else {
            return $methodHtml;
        }
    }
    
    public function getTempFullExpression($cache, $metaDataId) {
        
        $sessionId = Ue::appUserSessionId();
        $bpFullScriptsEvent = $cache->get('bp_'.$metaDataId.'_ExpEventRun_'.$sessionId);
        
        if ($bpFullScriptsEvent) {
            $this->view->bpFullScriptsEvent = $bpFullScriptsEvent;
            $this->view->bpFullScriptsWithoutEvent = $cache->get('bp_'.$metaDataId.'_ExpLoadRun_'.$sessionId);
            $this->view->bpFullScriptsVarFnc = $cache->get('bp_'.$metaDataId.'_ExpVarFncRun_'.$sessionId);
            $this->view->bpFullScriptsSave = $cache->get('bp_'.$metaDataId.'_ExpBeforeSaveRun_'.$sessionId);
            $this->view->bpFullScriptsAfterSave = $cache->get('bp_'.$metaDataId.'_ExpAfterSaveRun_'.$sessionId);
        }
        
        return true;
    }
    
    public function renderProcessCheckList($methodRow, $isEditMode, $sourceId) {
        
        if ($methodRow['REF_META_GROUP_ID'] != '') {
            
            $this->load->model('mdwebservice', 'middleware/models/');
            
            $checkListData = $this->model->getProcessActiveCheckListModel($methodRow['META_DATA_ID']);
            
            if ($checkListData) {
                
                $checkListRender = array(); 
                $isCheckListTab = $isCheckListSideBar = false; 
                $checkListTabContent = $checkListSideBarContent = ''; 
                        
                foreach ($checkListData as $row) {
                    
                    $attr = '';
                        
                    if ($row['PROCESS_META_DATA_ID'] != '') {
                        $attr .= ' data-process-id="'.$row['PROCESS_META_DATA_ID'].'"';
                    }
                        
                    if ($row['RENDER_TYPE'] == 'tab') {
                        
                        $checkListTabContent .= '<div class="bp-checklist-tbl-row"'.$attr.'>';
                            $checkListTabContent .= '<div class="bp-checklist-tbl-left-cell">';
                                $checkListTabContent .= '<div class="bp-checklist-check"></div>';
                                $checkListTabContent .= '<input type="hidden" name="bp_checklist['.$row['PROCESS_CHECKLIST_ID'].']" value="0">';
                                $checkListTabContent .= '<input type="hidden" name="bp_checklist_tempid['.$row['PROCESS_CHECKLIST_ID'].']" value="'.$row['MAP_ID'].'">';
                            $checkListTabContent .= '</div>';
                            $checkListTabContent .= '<div class="bp-checklist-tbl-right-cell">';
                                $checkListTabContent .= $row['NAME'];
                            $checkListTabContent .= '</div>';
                        $checkListTabContent .= '</div>';
                        
                        $isCheckListTab = true;
                        
                    } elseif ($row['RENDER_TYPE'] == 'sidebar') {
                        
                        $checkListSideBarContent .= '<div class="bp-checklist-tbl-row"'.$attr.'>';
                            $checkListSideBarContent .= '<div class="bp-checklist-tbl-left-cell">';
                                $checkListSideBarContent .= '<div class="bp-checklist-check"></div>';
                                $checkListSideBarContent .= '<input type="hidden" name="bp_checklist['.$row['PROCESS_CHECKLIST_ID'].']" value="0">';
                                $checkListSideBarContent .= '<input type="hidden" name="bp_checklist_tempid['.$row['PROCESS_CHECKLIST_ID'].']" value="'.$row['MAP_ID'].'">';
                            $checkListSideBarContent .= '</div>';
                            $checkListSideBarContent .= '<div class="bp-checklist-tbl-right-cell">';
                                $checkListSideBarContent .= $row['NAME'];
                            $checkListSideBarContent .= '</div>';
                        $checkListSideBarContent .= '</div>';
                        
                        $isCheckListSideBar = true;
                    }
                }
                
                if ($isCheckListTab) {
                    $checkListTabContent = '<div class="bp-checklist-tbl">'.$checkListTabContent.'</div>';
                            
                    $checkListRender = array(
                        'checkListTabName' => 'Check List', 
                        'checkListTabContent' => $checkListTabContent
                    );
                }
                
                if ($isCheckListSideBar) {
                    $checkListSideBarContent = '<div class="bp-checklist-tbl">'.$checkListSideBarContent.'</div>';
                    
                    $checkListRender['checkListSideBarContent'] = $checkListSideBarContent;
                }
                
                return $checkListRender;
            }
        }
        
        return null;
    }
    
    public function checkListStartHtml() {
        return '<div class="bp-template-wrap">
                <div class="bp-checklist-table">
                <div class="bp-checklist-table-row">
                <div class="bp-checklist-table-cell-left">';
    }
    
    public function checkListEndHtml($html) {
        return '</div>'
                . '<div class="bp-checklist-table-cell-right">'.$html.'</div>'
                . '</div></div></div><!-- template wrap -->';
    }
    
    public function buildTreeParam($uniqId, $bpMetaDataId, $metaDataName, $paramName, $recordType, $parentId, $fillParamData, $subTree = '', $arg = array(), $isButton = 1, $colCount, $rowIndex = 0) {
        $ws = &getInstance();
        $ws->load->model('mdwebservice', 'middleware/models/');
        $result = $ws->model->buildTreeParamModel($uniqId, $bpMetaDataId, $metaDataName, $paramName, $recordType, $parentId, $fillParamData, $subTree, $arg, $isButton, $colCount, $rowIndex);
        return $result;
    }
    
    public function buildTreeParamTwo($uniqId, $bpMetaDataId, $paramName, $recordType, $parentId, $fillParamData, $subTree, $colCount, $rowIndex, $arg) {
        $this->load->model('mdwebservice', 'middleware/models/');
        $result = $this->model->buildTreeParamTwoModel($uniqId, $bpMetaDataId, $paramName, $recordType, $parentId, $fillParamData, $subTree, $colCount, $rowIndex, $arg);
        return $result;
    }

    public function buildTreeParamView($bpMetaDataId, $metaDataName, $paramName, $recordType, $parentId, $fillParamData, $subTree = '', $arg = array(), $isButton = 1, $colCount, $rowIndex = 0) {
        $this->load->model('mdwebservice', 'middleware/models/');
        $result = $this->model->buildTreeParamViewModel($bpMetaDataId, $metaDataName, $paramName, $recordType, $parentId, $fillParamData, $subTree, $arg, $isButton, $colCount, $rowIndex);
        return $result;
    }

    public function renderAdditionalRowHeader($bpMetaDataId, $parentId) {
        $this->load->model('mdwebservice', 'middleware/models/');
        $result = $this->model->renderAdditionalRowHeaderModel($bpMetaDataId, $parentId);
        return $result;
    }
    
    public function appendSubRowInProcess($uniqId, &$gridClass, $bpMetaDataId, $val) {
        
        $additionalHeader = '';
        $additionalHeaderFilter = '';
        $additionalBody = '';
        $additionalFooter = '';
        $sideBarArr = array();
        $additionalRow = (new Mdwebservice())->renderAdditionalRowHeader($bpMetaDataId, $val['ID']);
        
        foreach ($additionalRow as $key => $rowVal) {
            
            $paramRealPath = str_replace('.', '', $rowVal['PARAM_REAL_PATH']);
            $gridClass .= Mdwebservice::fieldDetailStyleClass($rowVal, $paramRealPath, 'bp-window-' . $bpMetaDataId);

            $hideClassSub = '';
            if ($rowVal['IS_SHOW'] != '1') {
                $hideClassSub = ' hide';
            }
            
            if ($rowVal['RECORD_TYPE'] == 'row' && $rowVal['IS_SHOW'] == '1') {
                
                $childRow = (new Mdwebservice())->appendSubRowInProcess($uniqId, $gridClass, $bpMetaDataId, $rowVal);
                $additionalHeader .= $childRow['header'];
                $additionalHeaderFilter .= $childRow['headerFilter'];
                $additionalBody .= $childRow['body'];
                $additionalFooter .= $childRow['footer'];
                
            } elseif ($rowVal['RECORD_TYPE'] == 'rows' && $rowVal['IS_SHOW'] == '1') {
                
                $arg = array();
                $arg['isShowAdd'] = $rowVal['IS_SHOW_ADD'];
                $arg['isShowDelete'] = $rowVal['IS_SHOW_DELETE'];
                $arg['isShowMultiple'] = $rowVal['IS_SHOW_MULTIPLE'];
                $arg['isFirstRow'] = $rowVal['IS_FIRST_ROW'];
                                
                $additionalHeader .= '<th class="' . $hideClassSub . ' ' . $paramRealPath . '" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-aggregate="' . $val['COLUMN_AGGREGATE'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">' . Lang::line($rowVal['META_DATA_NAME']) . '</th>';
                $additionalHeaderFilter .= '<th class="'.$hideClassSub.'" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"></th>';
                $additionalBody .= '<td data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"  class="text-center stretchInput middle' . $aggregateClassSub . ' ' . $hideClassSub . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">';
                $additionalBody .= (new Mdwebservice())->buildTreeParam($uniqId, $bpMetaDataId, $rowVal['META_DATA_NAME'], $rowVal['PARAM_REAL_PATH'], $rowVal['RECORD_TYPE'], $rowVal['ID'], null, '', $arg, $rowVal['IS_BUTTON'], 0, 0);
                $additionalBody .= '</td>';
                $additionalFooter .= '<td class="text-right bigdecimalInit ' . $hideClassSub . '"  data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '"></td>';
            
            } else {
                
                if (is_null($rowVal['SIDEBAR_NAME'])) {
                    $foodAmountSub = $aggregateClassSub = '';

                    if ($rowVal['COLUMN_AGGREGATE'] != '') {
                        $foodAmountSub = '0.00';
                        $aggregateClassSub = 'aggregate-' . $rowVal['COLUMN_AGGREGATE'];
                    }

                    $additionalHeader .= '<th class="' . $hideClassSub . ' ' . $paramRealPath . ' bp-head-sort" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-aggregate="' . $rowVal['COLUMN_AGGREGATE'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">' . Lang::line($rowVal['META_DATA_NAME']) . '</th>';
                    
                    if ($rowVal['LOOKUP_TYPE'] == 'popup' && $rowVal['LOOKUP_META_DATA_ID'] != '') {
                        $additionalHeaderFilter .= '<th class="'.$hideClassSub.'" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '">';
                        $additionalHeaderFilter .= '<div class="dtl-col-popup-code-f"><input type="text" data-type-code="popup-code" data-path-code="' . $rowVal['PARAM_REAL_PATH'] . '"/></div>';
                        $additionalHeaderFilter .= '<div class="dtl-col-popup-name-f"><input type="text" data-type-code="popup-name" data-path-code="' . $rowVal['PARAM_REAL_PATH'] . '"/></div>';
                        $additionalHeaderFilter .= '</th>';
                    } else {
                        $additionalHeaderFilter .= '<th class="'.$hideClassSub.'" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"><input type="text"/></th>';
                    }
                    
                    $additionalBody .= '<td data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"  class="stretchInput ' . $aggregateClassSub . ' ' . $hideClassSub . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">';
                    $additionalBody .= Mdwebservice::renderParamControl($bpMetaDataId, $rowVal, "param[" . $rowVal['PARAM_REAL_PATH'] . "][0][]", $val['PARAM_REAL_PATH'], null);
                    $additionalBody .= '</td>';
                    $additionalFooter .= '<td class="text-right bigdecimalInit ' . $hideClassSub . '" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">' . $foodAmountSub . '</td>';
                    
                } else {
                    $sideBarArr[$key] = $rowVal;
                }
            }
        }
        
        return array(
            'header' => $additionalHeader,
            'headerFilter' => $additionalHeaderFilter, 
            'body' => $additionalBody,
            'footer' => $additionalFooter, 
            'sideBarArr' => $sideBarArr
        );
    }
    
    public function appendSubRowInProcessEditMode($uniqId, $methodId, $val, $rowData, $rk) {  
        
        $rData = array();
        $sideBarArr = array();

        $additionalRow = (new Mdwebservice())->renderAdditionalRowHeader($methodId, $val['ID']);
        
        if ($rowData) {
            $pathLower = strtolower($val['META_DATA_CODE']);
            if (isset($rowData[$pathLower])) {
                $rData = $rowData[$pathLower];
            }
        }
        
        $additionalBody = '';
        
        foreach ($additionalRow as $key => $rowVal) {
            
            $hideClassSub = '';
            if ($rowVal['IS_SHOW'] != '1') {
                $hideClassSub = ' hide';
            }
            
            if ($rowVal['RECORD_TYPE'] == 'row' && $rowVal['IS_SHOW'] == '1') {
                
                $childRow = (new Mdwebservice())->appendSubRowInProcessEditMode($uniqId, $methodId, $rowVal, $rData, $rk);
                
                $additionalBody .= $childRow['additionalBody'];
                
            } elseif ($rowVal['RECORD_TYPE'] == 'rows' && $rowVal['IS_SHOW'] == '1') {
                
                $arg = array();
                $arg['isShowAdd'] = $rowVal['IS_SHOW_ADD'];
                $arg['isShowDelete'] = $rowVal['IS_SHOW_DELETE'];
                $arg['isShowMultiple'] = $rowVal['IS_SHOW_MULTIPLE'];    
                $arg['isFirstRow'] = $rowVal['IS_FIRST_ROW'];
                $arg['parentRecordType'] = 'row';    
                
                $aggregateClassSub = '';
                if ($rowVal['COLUMN_AGGREGATE'] != '') {
                    $aggregateClassSub = 'aggregate-' . $rowVal['COLUMN_AGGREGATE'];
                }
                                
                $additionalBody .= '<td data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"  class="text-center stretchInput middle' . $aggregateClassSub . ' ' . $hideClassSub . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">';
                $additionalBody .= (new Mdwebservice())->buildTreeParam($uniqId, $methodId, $rowVal['META_DATA_NAME'], $rowVal['PARAM_REAL_PATH'], $rowVal['RECORD_TYPE'], $rowVal['ID'], $rData, '', $arg, $rowVal['IS_BUTTON'], 0, $rk);
                $additionalBody .= '</td>';
                
            } else {
                if (is_null($rowVal['SIDEBAR_NAME'])) {
                    $aggregateClassSub = '';
                    if ($rowVal['COLUMN_AGGREGATE'] != '') {
                        $aggregateClassSub = 'aggregate-' . $rowVal['COLUMN_AGGREGATE'];
                    }
                    $additionalBody .= '<td data-row-path="' . $val['PARAM_REAL_PATH'] . '" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" class="stretchInput text-center ' . $aggregateClassSub . ' ' . $hideClassSub . '">';
                    $additionalBody .= Mdwebservice::renderParamControl($methodId, $rowVal, "param[" . $rowVal['PARAM_REAL_PATH'] . "][$rk][]", '', $rData);
                    $additionalBody .= '</td>'; 
                } else {
                    $sideBarArr[$key]['row'] = $rowVal;
                    $sideBarArr[$key]['fillData'] = $rData;
                }
            }
        }
        
        return array(
            'additionalBody' => $additionalBody, 
            'sideBarArr' => $sideBarArr
        );
    }
    
    public function appendSubRowInProcessView($uniqId, &$gridClass, $bpMetaDataId, $val){
        $additionalHeader = '';
        $additionalHeaderFilter = '';
        $additionalBody = '';
        $additionalFooter = '';

        $additionalRow = (new Mdwebservice())->renderAdditionalRowHeader($bpMetaDataId, $val['ID']);
        
        foreach ($additionalRow as $key => $rowVal) {
            
            $paramRealPath = str_replace('.', '', $rowVal['PARAM_REAL_PATH']);
            $gridClass .= Mdwebservice::fieldDetailStyleClass($rowVal, $paramRealPath, 'bp-window-' . $bpMetaDataId);

            $hideClassSub = '';
            if ($rowVal['IS_SHOW'] != '1') {
                $hideClassSub = ' hide';
            }
            
            if ($rowVal['RECORD_TYPE'] == 'row' && $rowVal['IS_SHOW'] == '1') {
                
                $childRow = (new Mdwebservice())->appendSubRowInProcessView($uniqId, $gridClass, $bpMetaDataId, $rowVal);
                $additionalHeader .= $childRow['header'];
                $additionalHeaderFilter .= $childRow['headerFilter'];
                $additionalBody .= $childRow['body'];
                $additionalFooter .= $childRow['footer'];
                
            } elseif ($rowVal['RECORD_TYPE'] == 'rows' && $rowVal['IS_SHOW'] == '1') {
                
                $arg = array();
                $arg['isShowAdd'] = $rowVal['IS_SHOW_ADD'];
                $arg['isShowDelete'] = $rowVal['IS_SHOW_DELETE'];
                $arg['isShowMultiple'] = $rowVal['IS_SHOW_MULTIPLE'];   
                $arg['isFirstRow'] = $rowVal['IS_FIRST_ROW'];
                                
                $additionalHeader .= '<th class="' . $hideClassSub . ' ' . $paramRealPath . ' bp-head-sort" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-aggregate="' . $val['COLUMN_AGGREGATE'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">' . Lang::line($rowVal['META_DATA_NAME']) . '</th>';
                $additionalHeaderFilter .= '<th class="'.$hideClassSub.'" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"><input type="text"/></th>';
                $additionalBody .= '<td data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"  class="text-center stretchInput middle' . $aggregateClassSub . ' ' . $hideClassSub . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">';
                $additionalBody .= (new Mdwebservice())->buildTreeParamView($uniqId, $bpMetaDataId, $rowVal['META_DATA_NAME'], $rowVal['PARAM_REAL_PATH'], $rowVal['RECORD_TYPE'], $rowVal['ID'], null, '', $arg, $rowVal['IS_BUTTON'], 0, 0);
                $additionalBody .= '</td>';
                $additionalFooter .= '<td class="text-right bigdecimalInit ' . $hideClassSub . '"  data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '"></td>';
                
            } else {
                
                $foodAmountSub = '';
                $aggregateClassSub = '';
                if ($rowVal['COLUMN_AGGREGATE'] != '') {
                    $foodAmountSub = '0.00';
                    $aggregateClassSub = 'aggregate-' . $rowVal['COLUMN_AGGREGATE'];
                }
                $additionalHeader .= '<th class="' . $hideClassSub . ' ' . $paramRealPath . ' bp-head-sort" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-aggregate="' . $val['COLUMN_AGGREGATE'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">' . Lang::line($rowVal['META_DATA_NAME']) . '</th>';
                $additionalHeaderFilter .= '<th class="'.$hideClassSub.'" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"><input type="text"/></th>';
                $additionalBody .= '<td data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"  class="stretchInput ' . $aggregateClassSub . ' ' . $hideClassSub . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">';
                $additionalBody .= Mdwebservice::renderViewParamControl($bpMetaDataId, $rowVal, "param[" . $rowVal['PARAM_REAL_PATH'] . "][0][]", $val['PARAM_REAL_PATH'], null);
                $additionalBody .= '</td>';
                $additionalFooter .= '<td class="text-right bigdecimalInit ' . $hideClassSub . '" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">' . $foodAmountSub . '</td>';
            }
        }
        
        return array(
            'header' => $additionalHeader,
            'headerFilter' => $additionalHeaderFilter, 
            'body' => $additionalBody,
            'footer' => $additionalFooter
        );
    }
    
    public function appendSubRowInProcessEditViewMode($uniqId, $methodId, $val, $rowData, $rk){        
        $rData = array();

        $additionalRow = (new Mdwebservice())->renderAdditionalRowHeader($methodId, $val['ID']);
        
        if ($rowData) {
            foreach ($rowData as $rkey => $subRowData) {
                if (is_array($subRowData) && $rkey === strtolower($val['META_DATA_CODE'])) {
                    $rData = $subRowData;
                }
            }
        }
        $additionalBody = '';
        
        foreach ($additionalRow as $rowVal) {
            
            $hideClassSub = '';
            $paramData = null;
            $metaDataCodeLower = strtolower($rowVal['META_DATA_CODE']);
            
            if (array_key_exists($metaDataCodeLower, $rData)) {
                $paramData = array($metaDataCodeLower => $rData[$metaDataCodeLower]);
            }
            if ($rowVal['IS_SHOW'] != '1') {
                $hideClassSub = ' hide';
            }
            if ($rowVal['RECORD_TYPE'] == 'row' && $rowVal['IS_SHOW'] == '1'){
                $childRow = (new Mdwebservice())->appendSubRowInProcessEditViewMode($uniqId, $methodId, $rowVal, $rowData, $rk);
                $additionalBody .= $childRow;
            } elseif ($rowVal['RECORD_TYPE'] == 'rows' && $rowVal['IS_SHOW'] == '1'){
                $arg = array();
                $arg['isShowAdd'] = $rowVal['IS_SHOW_ADD'];
                $arg['isShowDelete'] = $rowVal['IS_SHOW_DELETE'];
                $arg['isShowMultiple'] = $rowVal['IS_SHOW_MULTIPLE'];  
                $arg['isFirstRow'] = $rowVal['IS_FIRST_ROW'];
                $arg['parentRecordType'] = 'row';    
                                
                $additionalBody .= '<td data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '"  class="text-center stretchInput middle' . $aggregateClassSub . ' ' . $hideClassSub . '" data-row-path="' . $val['PARAM_REAL_PATH'] . '">';
                $additionalBody .= (new Mdwebservice())->buildTreeParamView($uniqId, $methodId, $rowVal['META_DATA_NAME'], $rowVal['PARAM_REAL_PATH'], $rowVal['RECORD_TYPE'], $rowVal['ID'], $paramData, '', $arg, $rowVal['IS_BUTTON'], 0, $rk);
                $additionalBody .= '</td>';
            } else {
                $aggregateClassSub = '';
                if ($rowVal['COLUMN_AGGREGATE'] != '') {
                    $aggregateClassSub = 'aggregate-' . $rowVal['COLUMN_AGGREGATE'];
                }
                $additionalBody .= '<td data-row-path="' . $val['PARAM_REAL_PATH'] . '.' . $val['META_DATA_CODE'] . '" data-cell-path="' . $rowVal['PARAM_REAL_PATH'] . '" class="stretchInput ' . $aggregateClassSub . ' ' . $hideClassSub . '">';
                $additionalBody .= Mdwebservice::renderViewParamControl($methodId, $rowVal, "param[" . $rowVal['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH']. "." . $rowVal['META_DATA_CODE'], $paramData);
                $additionalBody .= '</td>'; 
            }
        }
        return $additionalBody;
    }

    public function outputProcess($wsResult) {
        if ($wsResult['status'] == 'success') {

            $this->view->wsResult = $wsResult['data'];

            if (isset($this->view->wsResult['result'])) {
                $this->view->resultMsg = $this->view->wsResult['result'];
            }
            
            if ($this->view->wsResult['status'] == 'error') {
                $this->view->errorMsg = $this->view->wsResult['text'];
                return $this->view->renderPrint('wsError', self::$viewPath);
            }

            return $this->view->renderPrint('wsResultExpression', self::$viewPath);
            
        } else {
            $this->view->errorMsg = $wsResult['message'];

            if (isset($this->view->wsResult['result'])) {
                $this->view->resultMsg = $this->view->wsResult['result'];
            }

            return $this->view->renderPrint('wsError', self::$viewPath);
        }
    }
    
    public function translateFieldSetValue($input, $isSetTranslate, $translation, $isSetParamData, $paramData, $pfTranslationValue, &$translationValue) {
        
        if (Lang::isUseMultiLang() && issetParam($input['IS_TRANSLATE']) == '1') {
                                
            $defaultLangCode = Lang::getDefaultLangCode(); 
            $currentLangCode = Lang::getCode(); 
            
            $isSet = false; 
            $value = null;

            if ($isSetTranslate) {

                $translationJson = json_decode($translation, true);

                if (isset($translationJson[$defaultLangCode])) {

                    $value = Input::param($translationJson[$defaultLangCode]);
                    $translationJson[$currentLangCode] = Input::param($paramData);

                    unset($translationJson[$defaultLangCode]);

                } else {
                    $value = Input::param($paramData);
                }
                
                $isSet = true;
                
                if ($translationJson) {
                    $translationValue[$input['COLUMN_NAME']] = $translationJson;
                }
                
            } elseif ($isSetParamData) {

                $pfTranslationValueJson = $pfTranslationValue ? json_decode($pfTranslationValue, true) : array();
                
                if ($currentLangCode != $defaultLangCode) {
                    
                    $jsonValue = issetParamArray($pfTranslationValueJson['value'][$input['COLUMN_NAME']]);
                    
                    $translationValue[$input['COLUMN_NAME']] = $jsonValue;
                    $translationValue[$input['COLUMN_NAME']][$currentLangCode] = Input::param($paramData);
                    
                    if (!$jsonValue) {
                        $value = $translationValue[$input['COLUMN_NAME']][$currentLangCode];
                        $isSet = true;
                    }
                    
                    if ($translationValue[$input['COLUMN_NAME']][$currentLangCode] == '') {
                        
                        unset($translationValue[$input['COLUMN_NAME']][$currentLangCode]);
                        
                        if (!$jsonValue) {
                            unset($translationValue[$input['COLUMN_NAME']]);
                        }
                    }

                } else {
                    $value = Input::param($paramData);
                    $isSet = true;
                }
                
            }

        } elseif ($isSetParamData) { 
            
            $value = Input::param($paramData);
            
            if ($input['CHOOSE_TYPE'] == 'multicomma') {
                $value = is_array($value) ? Arr::implode_r(',', $value, true) : $value;
            }
            
            $isSet = true;
            
        } else {
            $value = Mdmetadata::setDefaultValue($input['DEFAULT_VALUE']);
            $isSet = true;
        }
        
        return array('isSet' => $isSet, 'value' => $value);
    }
    
    public function setPfTranslationValue($paramData, $translationValue) {
        
        $pfTranslationValueJson = $paramData ? json_decode($paramData, true) : array();

        if (isset($pfTranslationValueJson['value'])) {
            $pfTranslationValueJson['value'] = array_merge($pfTranslationValueJson['value'], $translationValue);
        } else {
            $pfTranslationValueJson['value'] = $translationValue;
        }
        
        $json = json_encode($pfTranslationValueJson, JSON_UNESCAPED_UNICODE);
        $json = str_replace(array('\"', '<', '>', '\/'), array('&quot;', '&lt;', '&gt;', '/'), $json);
        
        return $json;
    }
    
    public function getPfTrnsltValPath($paramRealPath) {
        return substr($paramRealPath, 0, strrpos($paramRealPath, '.')).'pfTranslationValue';
    }

    public function fromPostGenerateArray($bpMetaDataId, $parentId, $metaDataCode, $recordType, $paramData, $fileParamData, $depth = 0, $rowId = 0, $postData = '', $parentRecordType = '', $parentRowId = 0, $mainRowIndex = 0, $debugVarDev = false) {
        $this->load->model('mdwebservice', 'middleware/models/');
        
        $paramList = $this->model->groupParamsDataModel($bpMetaDataId, $parentId);
        $param = array();
        
        if (isset($paramData[$metaDataCode . '.ignoreGroup']) || isset($paramData[$metaDataCode . '.pdfColumnName'][0][0])) {
            return $param;
        } 
        
        if ($recordType == 'rows') {
            if ($depth == 0) {
                
                if (isset($paramData[$metaDataCode . '.mainRowCount'])) {
                    
                    if (issetParam($paramList[0]['META_TYPE_CODE']) == 'group') {
                        $isFirstOrderGroup = true;
                    }
                    
                    foreach ($paramData[$metaDataCode . '.mainRowCount'] as $k => $v) {
                        
                        $isEmptyParamValue = true;
                        $translationValue = array();
                        
                        foreach ($paramList as $row) {
                            
                            $typeCode = strtolower($row['META_TYPE_CODE']);
                            
                            if ($typeCode == 'group') {

                                if (isset($isFirstOrderGroup) || (isset($param[$k]) && is_array($param[$k]) && !array_key_exists($row['META_DATA_CODE'], $param[$k]))) {
                                    
                                    $param[$k][$row['META_DATA_CODE']] = self::fromPostGenerateArray(
                                        $bpMetaDataId, $row['ID'], $metaDataCode . '.' . $row['META_DATA_CODE'], $row['RECORD_TYPE'], $paramData, $fileParamData, $depth + 1, $k, $postData, 'rows', $rowId, $k
                                    );

                                    if ($param[$k][$row['META_DATA_CODE']]) {
                                        $isEmptyParamValue = false;
                                    }
                                }
                                
                            } else {
                                
                                if ($typeCode == 'boolean') {
                                    
                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']]) && isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                        $param[$k][$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                    } else {
                                        if ($row['IS_SHOW'] != '1' && $row['DEFAULT_VALUE'] != '') {
                                            $param[$k][$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '0'; 
                                        }
                                    }
                                    
                                } elseif ($typeCode == 'file') {
                                    
                                    if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                        
                                        $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                        $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                        $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                        $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];

                                        $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                        if ($uploadResult) {

                                            $param[$k]['fileExtension'] = $uploadResult['extension'];
                                            $param[$k]['fileSize'] = $fileAttr['size'];
                                            $param[$k]['fileName'] = $fileAttr['name'];
                                            
                                            $param[$k][$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                            $param[$k][$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                            $param[$k][$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                            $param[$k][$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];
                                            
                                            if (isset($uploadResult['smallThumb'])) {
                                                $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                            }
                                            
                                            if (isset($uploadResult['middleThumb'])) {
                                                $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                            }
                                            
                                            if (isset($uploadResult['length'])) {
                                                $param[$k][$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                            }
                                            
                                            array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                            $isEmptyParamValue = false;
                                            
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                        }

                                    } else {
                                        
                                        $param[$k][$row['META_DATA_CODE']] = '';
                                        
                                        if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            
                                            $param[$k][$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                            
                                            if (issetParam($row['IS_THUMBNAIL']) == '1' && $param[$k][$row['META_DATA_CODE']] && file_exists($param[$k][$row['META_DATA_CODE']])) {
                                            
                                                includeLib('Image/image-magician/php_image_magician');

                                                $smallThumbName  = str_replace('.', '_sm.', $param[$k][$row['META_DATA_CODE']]);
                                                $smallThumbName  = str_replace('process/', 'process/thumb/', $smallThumbName);
                                                $middleThumbName = str_replace('_sm.', '_mid.', $smallThumbName);

                                                if (!file_exists($smallThumbName)) {

                                                    $image = new imageLib($param[$k][$row['META_DATA_CODE']]);

                                                    $image->resizeImage(100, 200, 'landscape', true);
                                                    $image->saveImage($smallThumbName, 95);
                                                }

                                                if (!file_exists($middleThumbName)) {

                                                    $image = new imageLib($param[$k][$row['META_DATA_CODE']]);

                                                    $image->resizeImage(400, 500, 'landscape', true);
                                                    $image->saveImage($middleThumbName, 95);
                                                }
                                                
                                                $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $smallThumbName;
                                                $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $middleThumbName;
                                            }
                                            
                                        } elseif (isset($paramData[$row['PARAM_REAL_PATH'] . '_tempFilePath'][$k][0])) {
                                            
                                            $tempFilePath = Input::param($paramData[$row['PARAM_REAL_PATH'] . '_tempFilePath'][$k][0]);
                                            
                                            if (file_exists($tempFilePath)) {
                                                
                                                $tempFileParts = pathinfo($tempFilePath);
                                                $filePath = self::bpUploadGetPath();
                                                $newPath = $filePath . $tempFileParts['basename'];
                                                
                                                rename($tempFilePath, $newPath);
                                                
                                                $param[$k][$row['META_DATA_CODE']] = $newPath;
                                                
                                                if (issetParam($row['IS_THUMBNAIL']) == '1') {
                                                    
                                                    includeLib('Image/image-magician/php_image_magician');
                                                    
                                                    $path = $filePath . 'thumb';
                                                    $fileExtension = $tempFileParts['extension'];

                                                    if (!is_dir($path)) {
                                                        mkdir($path, 0777);
                                                    }

                                                    $image = new imageLib($newPath);

                                                    $smallThumb = $path . '/' . str_replace('.'.$fileExtension, '_sm.'.$fileExtension, $tempFileParts['basename']);
                                                    $middleThumb = $path . '/' . str_replace('.'.$fileExtension, '_mid.'.$fileExtension, $tempFileParts['basename']);

                                                    $image->resizeImage(100, 200, 'landscape', true);
                                                    $image->saveImage($smallThumb, 95);

                                                    $image->resizeImage(400, 500, 'landscape', true);
                                                    $image->saveImage($middleThumb, 95);
                                                    
                                                    $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $smallThumb;
                                                    $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $middleThumb;

                                                    array_push(FileUpload::$uploadedFiles, $smallThumb);
                                                    array_push(FileUpload::$uploadedFiles, $middleThumb);
                                                }
                                                
                                                $isEmptyParamValue = false;
                                            }
                                            
                                        } elseif (isset($paramData[$row['PARAM_REAL_PATH']][$k][0])) {
                                        
                                            $val = Input::param($paramData[$row['PARAM_REAL_PATH']][$k]);
                                            
                                            if (is_array($val)) {
                                                $param[$k][$row['META_DATA_CODE']] = Arr::implode_r(',', $val, true);
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $val;
                                            }
                                        }
                                    }
                                    
                                } elseif ($typeCode == 'multi_file' || $typeCode == 'multi_file_style' || $typeCode == 'multi_file_thumb') {
                                    
                                    $mk = 0;
                                    
                                    if (isset($fileParamData['name'][$row['PARAM_REAL_PATH']][$k][0])) {
                                        
                                        $param[$k][$row['META_DATA_CODE'].'_multiFile'] = array();
                                        
                                        $multiFiles = $fileParamData['name'][$row['PARAM_REAL_PATH']][$k];
                                        
                                        foreach ($multiFiles as $mk => $multiFileName) {
                                            
                                            $fileAttr['name'] = $multiFileName;
                                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$row['PARAM_REAL_PATH']][$k][$mk];
                                            $fileAttr['size'] = $fileParamData['size'][$row['PARAM_REAL_PATH']][$k][$mk];
                                            $fileAttr['type'] = $fileParamData['type'][$row['PARAM_REAL_PATH']][$k][$mk];

                                            $uploadResult = self::bpFileUpload($row, $fileAttr, $k);
                                            
                                            if ($uploadResult) {
                                                
                                                $physicalPath = $uploadResult['path'] . $uploadResult['newname'];
                                                
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['id'] = '';
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['fileName'] = $fileAttr['name'];
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['fileSize'] = $fileAttr['size'];
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['fileExtension'] = $uploadResult['extension'];
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['physicalPath'] = $physicalPath;
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['ecmContentMap'] = array(
                                                    'orderNum'       => $mk, 
                                                    'refStructureId' => isset($paramData[$row['PARAM_REAL_PATH'].'_multiFileRefStructureId'][$k][0]) ? $paramData[$row['PARAM_REAL_PATH'].'_multiFileRefStructureId'][$k][0] : issetParam($paramData[$row['META_DATA_CODE'].'_multiFileRefStructureId']), 
                                                    'tagCode'        => $row['META_DATA_CODE']
                                                );
                                                
                                                if (isset($uploadResult['thumbPath'])) {
                                                    $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['thumbPhysicalPath'] = $uploadResult['thumbPath'];
                                                }
                                                
                                                if (isset($uploadResult['length'])) {
                                                    $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['fileLength'] = $uploadResult['length'];
                                                }
                                                
                                                if (isset($paramData[$row['PARAM_REAL_PATH'].'_multiFileTypeId'])) {
                                                    $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['typeId'] = $paramData[$row['PARAM_REAL_PATH'].'_multiFileTypeId'];
                                                }

                                                array_push(FileUpload::$uploadedFiles, $physicalPath);
                                                $isEmptyParamValue = false;
                                                
                                            } else {
                                                $param[$k][$row['META_DATA_CODE'].'_multiFile'] = array();
                                            }
                                        }
                                        
                                    } elseif (isset($paramData[$row['PARAM_REAL_PATH']][$k][0])) {
                                        
                                        $val = issetParam($paramData[$row['PARAM_REAL_PATH']][$k][0]);
                                        
                                        if ($val) {
                                            if (is_array($val)) {
                                                $param[$k][$row['META_DATA_CODE']] = Arr::implode_r(',', $val, true);
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $val;
                                            }
                                        }
                                    }
                                    
                                    if (isset($paramData[$row['PARAM_REAL_PATH']][$k]['removeFiles'])) {
                                        
                                        $removeFiles = $paramData[$row['PARAM_REAL_PATH']][$k]['removeFiles'];
                                        
                                        foreach ($removeFiles as $removeFileId) {
                                            $mk++;
                                            $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['id'] = $removeFileId;
                                            $param[$k][$row['META_DATA_CODE'].'_multiFile'][$mk]['rowState'] = 'removed';
                                        }
                                    }
                                    
                                } elseif ($typeCode == 'web_camera') {    

                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                        $param[$k][$row['META_DATA_CODE']] = self::bpWebcamUpload($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);                                    
                                    }
                                 
                                } elseif ($typeCode == 'base64') {

                                    if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                        if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                            $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                            $fileContent = base64_encode($base64Content);
                                            $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], '.') + 1));

                                            $param[$k][$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                        }
                                       
                                    } else {
                                        
                                       $param[$k][$row['META_DATA_CODE']] = '';
                                       
                                       if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            $bpath = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                            $base64Content = '';
                                           
                                            if (file_exists($bpath)) {
                                                $base64Content = file_get_contents($bpath);
                                                $fileContent = base64_encode($base64Content);
                                                $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                                $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                            }
                                            $param[$k][$row['META_DATA_CODE']] = $base64Content;
                                        }
                                    }
                                    
                                } elseif ($typeCode == 'base64_to_file') {
                            
                                    if (isset($paramData[$row['PARAM_REAL_PATH']][$k][0]) && $paramData[$row['PARAM_REAL_PATH']][$k][0]) {

                                        $fileContent = $paramData[$row['PARAM_REAL_PATH']][$k][0];
                                        $fileData    = base64_decode($fileContent);

                                        if ($fileData) {
                                            
                                            $f = finfo_open();
                                            $mimeType = finfo_buffer($f, $fileData, FILEINFO_MIME_TYPE);

                                            if ($mimeType == 'text/plain') {
                                                Message::add('e', 'Wrong content type!', 'back'); exit;
                                            } else {
                                                
                                                $fileExtension = mimeToExt($mimeType);
                                                $filePath = self::bpUploadGetPath();
                                                $fileUrl = $filePath.getUID().'.'.$fileExtension;

                                                file_put_contents($fileUrl, $fileData);

                                                $param[$k][$row['META_DATA_CODE']] = $fileUrl;
                                            }

                                        } else {
                                            Message::add('e', 'Wrong base64 string!', 'back'); exit;
                                        }
                                    }

                                } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto') {
                                    
                                    if (isset($param[$k][$row['META_DATA_CODE']])) {
                                        continue;
                                    }
                                    
                                    if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                        
                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][1])) {
                                            
                                            $prevPaths = issetParam($paramData[$row['PARAM_REAL_PATH']][$k][0]);
                                            $concatPaths = array();
                                            $multiFiles = $fileParamData['name'][$row['PARAM_REAL_PATH']][$k];

                                            foreach ($multiFiles as $mk => $multiFileName) {

                                                $fileAttr['name'] = $multiFileName;
                                                $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$row['PARAM_REAL_PATH']][$k][$mk];
                                                $fileAttr['size'] = $fileParamData['size'][$row['PARAM_REAL_PATH']][$k][$mk];
                                                $fileAttr['type'] = $fileParamData['type'][$row['PARAM_REAL_PATH']][$k][$mk];

                                                $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                                if ($uploadResult) {

                                                    $physicalPath = $uploadResult['path'] . $uploadResult['newname'];
                                                    $concatPaths[] = $physicalPath;
                                                    
                                                    array_push(FileUpload::$uploadedFiles, $physicalPath);
                                                    $isEmptyParamValue = false;
                                                } 
                                            }
                                            
                                            if ($prevPaths) {
                                                $param[$k][$row['META_DATA_CODE']] = $prevPaths.','.implode(',', $concatPaths);
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = implode(',', $concatPaths);
                                            }
                                            
                                        } else {
                                            
                                            $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];

                                            $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                            if ($uploadResult) {

                                                $param[$k]['fileExtension'] = $uploadResult['extension'];
                                                $param[$k]['fileSize'] = $fileAttr['size'];
                                                $param[$k]['fileName'] = $fileAttr['name'];

                                                $param[$k][$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                                $param[$k][$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                                if (isset($uploadResult['smallThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                                }

                                                if (isset($uploadResult['middleThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                                }

                                                if (isset($uploadResult['length'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                                }

                                                array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                                $isEmptyParamValue = false;

                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                        }

                                    } elseif (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            
                                        $param[$k][$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);

                                        if (issetParam($row['IS_THUMBNAIL']) == '1' && $param[$k][$row['META_DATA_CODE']] && file_exists($param[$k][$row['META_DATA_CODE']])) {

                                            includeLib('Image/image-magician/php_image_magician');

                                            $smallThumbName  = str_replace('.', '_sm.', $param[$k][$row['META_DATA_CODE']]);
                                            $smallThumbName  = str_replace('process/', 'process/thumb/', $smallThumbName);
                                            $middleThumbName = str_replace('_sm.', '_mid.', $smallThumbName);

                                            if (!file_exists($smallThumbName)) {

                                                $image = new imageLib($param[$k][$row['META_DATA_CODE']]);

                                                $image->resizeImage(100, 200, 'landscape', true);
                                                $image->saveImage($smallThumbName, 95);
                                            }

                                            if (!file_exists($middleThumbName)) {

                                                $image = new imageLib($param[$k][$row['META_DATA_CODE']]);

                                                $image->resizeImage(400, 500, 'landscape', true);
                                                $image->saveImage($middleThumbName, 95);
                                            }

                                            $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $smallThumbName;
                                            $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $middleThumbName;
                                        }
                                        
                                    } else {
                                        
                                        if ($row['CHOOSE_TYPE'] == 'multicomma') {
                                        
                                            $translatedVal = array('isSet' => true, 'value' => $this->ws->convertDeParamType(issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k]), 'multicomma'));

                                        } else {
                                            $translatedVal = self::translateFieldSetValue(
                                                $row, 
                                                isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$k][0]),     
                                                issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$k][0]), 
                                                isset($paramData[$row['PARAM_REAL_PATH']][$k][0]),     
                                                issetParam($paramData[$row['PARAM_REAL_PATH']][$k][0]), 
                                                issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$k][0]), 
                                                $translationValue 
                                            );
                                        }

                                        if ($translatedVal['isSet']) {
                                            $param[$k][$row['META_DATA_CODE']] = $translatedVal['value'];
                                            if ($translatedVal['value'] != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        }
                                    }
                                    
                                } elseif ($typeCode == 'pftranslationvalue') {
                            
                                    if (isset($translationValue) && $translationValue) {
                                        
                                        $param[$k][$row['META_DATA_CODE']] = self::setPfTranslationValue(
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][$k][0]), 
                                            $translationValue 
                                        );
                                    }

                                } else {         
                                    
                                    if (isset($param[$k][$row['META_DATA_CODE']])) {
                                        continue;
                                    }

                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            
                                            if ($row['CHOOSE_TYPE'] == 'multicomma') {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k], 'multicomma');
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, $typeCode);
                                            
                                                if ($row['CHOOSE_TYPE'] == 'multi') {
                                                    $paramMulti = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k];
                                                    $array_multi = array();

                                                    foreach ($paramMulti as $mParam) {
                                                        if (is_array($mParam) && issetParam($mParam[0]) && is_array($mParam[0]) && !in_array($mParam[0], $array_multi)) {
                                                            array_push($array_multi, $mParam[0]);
                                                        }
                                                    }
                                                    
                                                    $param[$k][$row['META_DATA_CODE']] = $array_multi;
                                                }
                                            }

                                            if ($paramValue != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        }
                                    } else {
                                        $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']), $typeCode);
                                    }
                                }
                            }
                        }    
                        
                        if (isset($paramData[$metaDataCode . '.rowState'][$k][0])) {
                            $param[$k]['rowState'] = $paramData[$metaDataCode . '.rowState'][$k][0];
                        }
                        
                        if ($isEmptyParamValue) {
                            unset($param[$k]);
                        }
                    }
                }
                
            } else {
                
                $isParentTypeRow = false;
                
                if ($depth == 1 && $parentRecordType == 'row') {
                    
                    if (isset($paramData[$metaDataCode . '.rowCount'])) {
                        
                        foreach ($paramData[$metaDataCode . '.rowCount'] as $k => $v) {
                            
                            $isEmptyParamValue = true;
                            $translationValue = array();
                            
                            foreach ($paramList as $row) {
                                
                                $typeCode = strtolower($row['META_TYPE_CODE']);
                                
                                if ($typeCode == 'group') {
                                    if ($row['IS_SHOW'] == '1') {                                        
                                        $param[$k][$row['META_DATA_CODE']] = self::fromPostGenerateArray(
                                            $bpMetaDataId, $row['ID'], $metaDataCode . '.' . $row['META_DATA_CODE'], $row['RECORD_TYPE'], $paramData, $fileParamData, $depth + 1, $k, $postData, 'rows', $rowId, $rowId, $mainRowIndex
                                        );
                                        
                                        if ($param[$k][$row['META_DATA_CODE']]) {
                                            $isEmptyParamValue = false;
                                        }
                                    }                                         
                                } else {
                                    if ($typeCode == 'boolean') {
                                        
                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']]) && isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            $param[$k][$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                        } else {
                                            if ($row['IS_SHOW'] != '1' && !is_null($row['DEFAULT_VALUE'])) {
                                                $param[$k][$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '0';
                                            }
                                        }
                                        
                                    } elseif ($typeCode == 'file') {
                                        
                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            
                                            $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];

                                            $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                            if ($uploadResult) {

                                                $param[$k]['fileExtension'] = $uploadResult['extension'];
                                                $param[$k]['fileSize'] = $fileAttr['size'];
                                                $param[$k]['fileName'] = $fileAttr['name'];

                                                $param[$k][$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                                $param[$k][$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                                if (isset($uploadResult['smallThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                                }

                                                if (isset($uploadResult['middleThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                                }

                                                if (isset($uploadResult['length'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                                }

                                                array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                                $isEmptyParamValue = false;
                                                
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                            
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                                $param[$k][$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                            }
                                        }
                                        
                                    } elseif ($typeCode === 'web_camera') {    

                                        $param[$k][$row['META_DATA_CODE']] = self::bpWebcamUpload(issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]));                                             
                                        
                                    } elseif ($typeCode === 'base64') {

                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                            if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                                $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                                $fileContent = base64_encode($base64Content);
                                                $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], '.') + 1));

                                                $param[$k][$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                                $bpath = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                                $base64Content = '';

                                                if (file_exists($bpath)) {
                                                    $base64Content = file_get_contents($bpath);
                                                    $fileContent = base64_encode($base64Content);
                                                    $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                                    $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                                }
                                                $param[$k][$row['META_DATA_CODE']] = $base64Content;
                                            }
                                        }
                                    } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto') {
                                        
                                        if (isset($param[$k][$row['META_DATA_CODE']])) {
                                            continue;
                                        }
                                    
                                        $translatedVal = self::translateFieldSetValue(
                                            $row, 
                                            isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$k][0]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$k][0]), 
                                            isset($paramData[$row['PARAM_REAL_PATH']][$k][0]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][$k][0]), 
                                            issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$k][0]), 
                                            $translationValue 
                                        );

                                        if ($translatedVal['isSet']) {
                                            $param[$k][$row['META_DATA_CODE']] = $translatedVal['value'];
                                            
                                            if ($translatedVal['value'] != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        }

                                    } elseif ($typeCode == 'pftranslationvalue') {

                                        if (isset($translationValue)) {

                                            $param[$k][$row['META_DATA_CODE']] = self::setPfTranslationValue(
                                                issetParam($paramData[$row['PARAM_REAL_PATH']][$k][0]), 
                                                $translationValue 
                                            );
                                        }

                                    } else {
                                        
                                        if (isset($param[$k][$row['META_DATA_CODE']])) {
                                            continue;
                                        }
                                        
                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                                            $paramValue = issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                            
                                            if ($row['CHOOSE_TYPE'] == 'multicomma') {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, 'multicomma');
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, $typeCode);
                                            }
                            
                                            if ($paramValue != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']), $typeCode);
                                        }
                                    }
                                }
                            }
                            
                            if (isset($paramData[$metaDataCode . '.rowState'][$k][0])) {
                                $param[$k]['rowState'] = $paramData[$metaDataCode . '.rowState'][$k][0];
                            }
                            
                            if ($isEmptyParamValue) {
                                unset($param[$k]);
                            } else {
                                $isParentTypeRow = true;
                            }
                        }
                    }
                }
                
                if ($isParentTypeRow) {
                    return $param;
                }
                
                if ($rowId == 0 && $parentRecordType == 'row') {
                    
                    if (isset($paramData[$metaDataCode . '.rowCount'][$rowId])) {
                        
                        foreach ($paramData[$metaDataCode . '.rowCount'][$rowId] as $k => $v) {
                            
                            $isEmptyParamValue = true;
                            $translationValue = array();
                            
                            foreach ($paramList as $row) {
                                
                                $typeCode = strtolower($row['META_TYPE_CODE']);
                                        
                                if ($typeCode == 'group') {
                                    if ($row['IS_SHOW'] == '1') {
                                        
                                        $prevParamData = issetParam($param[$k][$row['META_DATA_CODE']]);
                                        
                                        $param[$k][$row['META_DATA_CODE']] = self::fromPostGenerateArray(
                                            $bpMetaDataId, $row['ID'], $metaDataCode . '.' . $row['META_DATA_CODE'], $row['RECORD_TYPE'], $paramData, $fileParamData, $depth + 1, $k, $postData, 'rows', $rowId, $rowId, $mainRowIndex
                                        );
                                        
                                        /**
                                         * @description Нэг transaction-ны үед нэг файлыг олон upload хийхийг дуудсан тохиолдолд анхны нэрийг буцааж оноолоо
                                         * @author      Ulaankhuu Ts
                                         * @date        2018-08-04 13:32
                                         */      
                                        if (isset($param[$k][$row['META_DATA_CODE']]['fileSize']) && $prevParamData) {
                                            $param[$k][$row['META_DATA_CODE']] = array_merge($param[$k][$row['META_DATA_CODE']], $prevParamData);
                                        }
                                    }                             
                                } else {
                                    if ($typeCode === 'boolean') {
                                        
                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']]) && isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            $param[$k][$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                        } else {
                                            if ($row['IS_SHOW'] != '1' && !is_null($row['DEFAULT_VALUE'])) {
                                                $param[$k][$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '0';
                                            }
                                        }
                                        
                                    } elseif ($typeCode == 'file') {
                                        
                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                            
                                            $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];
                                            $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0];

                                            $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                            if ($uploadResult) {

                                                $param[$k]['fileExtension'] = $uploadResult['extension'];
                                                $param[$k]['fileSize'] = $fileAttr['size'];
                                                $param[$k]['fileName'] = $fileAttr['name'];

                                                $param[$k][$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                                $param[$k][$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                                if (isset($uploadResult['smallThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                                }

                                                if (isset($uploadResult['middleThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                                }

                                                if (isset($uploadResult['length'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                                }

                                                array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                                $isEmptyParamValue = false;
                                                
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                            
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                                $param[$k][$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                            }
                                        }
                                        
                                    } elseif ($typeCode === 'web_camera') {    

                                        $param[$k][$row['META_DATA_CODE']] = self::bpWebcamUpload(issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][$k]));                                             
                                        
                                     } elseif ($typeCode === 'base64') {

                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                            if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                                $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                                $fileContent = base64_encode($base64Content);
                                                $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], '.') + 1));

                                                $param[$k][$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                                $bpath = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                                $base64Content = '';

                                                if (file_exists($bpath)) {
                                                    $base64Content = file_get_contents($bpath);
                                                    $fileContent = base64_encode($base64Content);
                                                    $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                                    $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                                }
                                                $param[$k][$row['META_DATA_CODE']] = $base64Content;
                                            }                                          
                                        }
                                        
                                    } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto') {
                                        
                                        if (isset($param[$k][$row['META_DATA_CODE']])) {
                                            continue;
                                        }
                                        
                                        $translatedVal = self::translateFieldSetValue(
                                            $row, 
                                            isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$rowId][$k]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$rowId][$k]), 
                                            isset($paramData[$row['PARAM_REAL_PATH']][$rowId][$k]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][$rowId][$k]), 
                                            issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$rowId][$k]), 
                                            $translationValue 
                                        );

                                        if ($translatedVal['isSet']) {
                                            $param[$k][$row['META_DATA_CODE']] = $translatedVal['value'];
                                            if ($translatedVal['value'] != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        }

                                    } elseif ($typeCode == 'pftranslationvalue') {

                                        if (isset($translationValue)) {

                                            $param[$k][$row['META_DATA_CODE']] = self::setPfTranslationValue(
                                                issetParam($paramData[$row['PARAM_REAL_PATH']][$rowId][$k]), 
                                                $translationValue 
                                            );
                                        }

                                    } else {
                                        
                                        if (isset($param[$k][$row['META_DATA_CODE']])) {
                                            continue;
                                        }
                                        
                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                                            $paramValue = issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][$k]);
                                            
                                            if ($row['CHOOSE_TYPE'] == 'multicomma' && $row['LOOKUP_TYPE'] != '' && $row['LOOKUP_META_DATA_ID'] != '') {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, 'multicomma');
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, $typeCode);
                                            }
                            
                                            if ($paramValue != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']), $typeCode);
                                        }
                                    }
                                }
                            }
                            if (isset($paramData[$metaDataCode . '.rowState'][$rowId][$k])) {
                                $param[$k]['rowState'] = $paramData[$metaDataCode . '.rowState'][$rowId][$k];
                            }
                            if ($isEmptyParamValue) {
                                unset($param[$k]);
                            }
                        }
                    }
                    
                } else {
                    
                    /**
                     * @description rows->rows->rows
                     * @author      Ulaankhuu Ts
                     * @date        2017-02-13 11:26:35
                     */
                    if (isset($paramData[$metaDataCode . '.rowCount'][$mainRowIndex]) 
                        && isset($paramData[$metaDataCode . '.rowCount'][$mainRowIndex][$rowId]) 
                        && is_array($paramData[$metaDataCode . '.rowCount'][$mainRowIndex][$rowId])) {
                        
                        foreach ($paramData[$metaDataCode . '.rowCount'][$mainRowIndex][$rowId] as $k => $v) {
                                            
                            $isEmptyParamValue = true;
                            $translationValue = array();
                            
                            foreach ($paramList as $row) {
                                
                                $typeCode = strtolower($row['META_TYPE_CODE']);                                              
                                
                                if ($typeCode == 'group') {
                                    if ($row['IS_SHOW'] == '1') {
                                        $param[$k][$row['META_DATA_CODE']] = self::fromPostGenerateArray(
                                            $bpMetaDataId, $row['ID'], $metaDataCode . '.' . $row['META_DATA_CODE'], $row['RECORD_TYPE'], $paramData, $fileParamData, $depth + 1, $k, $postData, 'rows', $rowId, $mainRowIndex
                                        );         
                                        
                                        if ($param[$k][$row['META_DATA_CODE']]) {
                                            $isEmptyParamValue = false;
                                        }
                                    }
                                } else {
                                    if ($typeCode == 'boolean') {
                                        
                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']]) && isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][$k])) {
                                            $param[$k][$row['META_DATA_CODE']] = issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k]);                                            
                                        } else {
                                            if ($row['IS_SHOW'] != '1' && !is_null($row['DEFAULT_VALUE'])) {
                                                $param[$k][$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '0';
                                            }
                                        }
                                        
                                    } elseif ($typeCode == 'file') {
                                        
                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k])) {
                                            
                                            $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k];
                                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k];
                                            $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k];
                                            $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k];

                                            $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                            if ($uploadResult) {

                                                $param[$k]['fileExtension'] = $uploadResult['extension'];
                                                $param[$k]['fileSize'] = $fileAttr['size'];
                                                $param[$k]['fileName'] = $fileAttr['name'];

                                                $param[$k][$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                                $param[$k][$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                                $param[$k][$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                                if (isset($uploadResult['smallThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                                }

                                                if (isset($uploadResult['middleThumb'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                                }

                                                if (isset($uploadResult['length'])) {
                                                    $param[$k][$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                                }

                                                array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                                $isEmptyParamValue = false;
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                            
                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k])) {
                                                $param[$k][$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k]);
                                            }
                                        }
                                        
                                    } elseif ($typeCode == 'web_camera') {    

                                        $param[$k][$row['META_DATA_CODE']] = self::bpWebcamUpload(issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k]));                                             
                                        
                                    } elseif ($typeCode == 'base64') {

                                        if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                            if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {

                                                $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                                $fileContent = base64_encode($base64Content);
                                                $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0], '.') + 1));

                                                $param[$k][$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                            }
                                            
                                        } else {
                                            
                                            $param[$k][$row['META_DATA_CODE']] = '';
                                            
                                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0])) {
                                                $bpath = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$k][0]);
                                                $base64Content = '';

                                                if (file_exists($bpath)) {
                                                    $base64Content = file_get_contents($bpath);
                                                    $fileContent = base64_encode($base64Content);
                                                    $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                                    $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                                }
                                                $param[$k][$row['META_DATA_CODE']] = $base64Content;
                                            }                                          
                                        }
                                    } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto') {
                                        
                                        if (isset($param[$k][$row['META_DATA_CODE']])) {
                                            continue;
                                        }
                                        
                                        $translatedVal = self::translateFieldSetValue(
                                            $row, 
                                            isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$rowId][$k]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$rowId][$k]), 
                                            isset($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId][$k]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId][$k]), 
                                            issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$mainRowIndex][$rowId][$k]), 
                                            $translationValue 
                                        );

                                        if ($translatedVal['isSet']) {
                                            $param[$k][$row['META_DATA_CODE']] = $translatedVal['value'];
                                            if ($translatedVal['value'] != '') {
                                                $isEmptyParamValue = false;
                                            }
                                        }

                                    } elseif ($typeCode == 'pftranslationvalue') {

                                        if (isset($translationValue)) {

                                            $param[$k][$row['META_DATA_CODE']] = self::setPfTranslationValue(
                                                issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId][$k]), 
                                                $translationValue 
                                            );
                                        }

                                    } else {
                                        
                                        if (isset($param[$k][$row['META_DATA_CODE']])) {
                                            continue;
                                        }

                                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                                            
                                            $paramValue = '';

                                            if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId]) 
                                                && isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k])) {
                                                
                                                $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId][$k];
                                            }
                                            
                                            if ($row['CHOOSE_TYPE'] == 'multicomma' && $row['LOOKUP_TYPE'] != '' && $row['LOOKUP_META_DATA_ID'] != '') {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, 'multicomma');
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, $typeCode);
                                            }
                                            
                                            if ($paramValue != '') {
                                                $isEmptyParamValue = false;
                                            }

                                        } else {
                                            $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']), $typeCode);
                                        }
                                    }
                                }
                            }
                            if (isset($paramData[$metaDataCode . '.rowState'][$mainRowIndex][$rowId][$k])) {
                                $param[$k]['rowState'] = $paramData[$metaDataCode . '.rowState'][$mainRowIndex][$rowId][$k];
                            }
                            if ($isEmptyParamValue) {
                                unset($param[$k]);
                            }                            
                        }   

                    } else {
                        
                        $postRowsRowsData = isset($paramData[$metaDataCode . '.rowCount'][$mainRowIndex]) ? $paramData[$metaDataCode . '.rowCount'][$mainRowIndex] : (isset($paramData[$metaDataCode . '.rowCount'][$rowId]) ? $paramData[$metaDataCode . '.rowCount'][$rowId] : '');
                        
                        if (!empty($postRowsRowsData)) {
                            
                            foreach ($postRowsRowsData as $k => $v) {
                                                
                                $isEmptyParamValue = true;
                                $translationValue = array();
                                
                                foreach ($paramList as $row) {
                                    
                                    $typeCode = strtolower($row['META_TYPE_CODE']);                                              
                                    
                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k]) && is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k])) {
                                        continue;                                    
                                    }
                                    
                                    if ($typeCode == 'group') {
                                        
                                        if ($row['IS_SHOW'] == '1') {
                                            $param[$k][$row['META_DATA_CODE']] = self::fromPostGenerateArray(
                                                $bpMetaDataId, $row['ID'], $metaDataCode . '.' . $row['META_DATA_CODE'], $row['RECORD_TYPE'], $paramData, $fileParamData, $depth + 1, $k, $postData, 'rows', $rowId, $mainRowIndex
                                            );       
                                            
                                            if ($param[$k][$row['META_DATA_CODE']]) {
                                                $isEmptyParamValue = false;
                                            }
                                        }
                                    } else {
                                        if ($typeCode == 'boolean') {
                                            
                                            if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']]) && isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][$k])) {
                                                $param[$k][$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][$k];                                            
                                            } else {
                                                if ($row['IS_SHOW'] != '1' && !is_null($row['DEFAULT_VALUE'])) {
                                                    $param[$k][$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                                } else {
                                                    $param[$k][$row['META_DATA_CODE']] = '0';
                                                }
                                            }
                                            
                                        } elseif ($typeCode == 'file') {
                                            
                                            if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k])) {
                                                
                                                $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k];
                                                $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k];
                                                $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k];
                                                $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k];

                                                $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                                if ($uploadResult) {

                                                    $param[$k]['fileExtension'] = $uploadResult['extension'];
                                                    $param[$k]['fileSize'] = $fileAttr['size'];
                                                    $param[$k]['fileName'] = $fileAttr['name'];

                                                    $param[$k][$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                                    $param[$k][$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                                    $param[$k][$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                                    $param[$k][$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                                    if (isset($uploadResult['smallThumb'])) {
                                                        $param[$k][$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                                    }

                                                    if (isset($uploadResult['middleThumb'])) {
                                                        $param[$k][$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                                    }

                                                    if (isset($uploadResult['length'])) {
                                                        $param[$k][$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                                    }

                                                    array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                                    $isEmptyParamValue = false;
                                                } else {
                                                    $param[$k][$row['META_DATA_CODE']] = '';
                                                }

                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                                if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k])) {
                                                    $param[$k][$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k]);
                                                }
                                            }
                                            
                                        } elseif ($typeCode == 'web_camera') {    

                                            $param[$k][$row['META_DATA_CODE']] = self::bpWebcamUpload(issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k]));                                             

                                        } elseif ($typeCode == 'base64') {

                                            if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k])) {

                                                if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k])) {

                                                    $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k]);
                                                    $fileContent = base64_encode($base64Content);
                                                    $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k], '.') + 1));

                                                    $param[$k][$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                                                } else {
                                                    $param[$k][$row['META_DATA_CODE']] = '';
                                                }
                                               
                                            } else {
                                                
                                                $param[$k][$row['META_DATA_CODE']] = '';
                                                
                                                if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k])) {
                                                    $bpath = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k]);
                                                    $base64Content = '';

                                                    if (file_exists($bpath)) {
                                                        $base64Content = file_get_contents($bpath);
                                                        $fileContent = base64_encode($base64Content);
                                                        $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                                        $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                                    }
                                                    $param[$k][$row['META_DATA_CODE']] = $base64Content;
                                                }                                             
                                            }
                                            
                                        } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto') {
                                            
                                            if (isset($param[$k][$row['META_DATA_CODE']])) {
                                                continue;
                                            }
                                        
                                            $translatedVal = self::translateFieldSetValue(
                                                $row, 
                                                isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$k]),     
                                                issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$k]), 
                                                isset($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$k]),     
                                                issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$k]), 
                                                issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$mainRowIndex][$k]), 
                                                $translationValue 
                                            );

                                            if ($translatedVal['isSet']) {
                                                $param[$k][$row['META_DATA_CODE']] = $translatedVal['value'];
                                                if ($translatedVal['value'] != '') {
                                                    $isEmptyParamValue = false;
                                                }
                                            }

                                        } elseif ($typeCode == 'pftranslationvalue') {

                                            if (isset($translationValue)) {

                                                $param[$k][$row['META_DATA_CODE']] = self::setPfTranslationValue(
                                                    issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$k]), 
                                                    $translationValue 
                                                );
                                            }

                                        } else {
                                            
                                            if (isset($param[$k][$row['META_DATA_CODE']])) {
                                                continue;
                                            }
                                            
                                            if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                                                $paramValue = issetParam($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$k]);
                                                
                                                if ($row['CHOOSE_TYPE'] == 'multicomma' && $row['LOOKUP_TYPE'] != '' && $row['LOOKUP_META_DATA_ID'] != '') {
                                                    $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, 'multicomma');
                                                } else {
                                                    $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, $typeCode);
                                                }
                                                
                                                if ($paramValue != '') {
                                                    $isEmptyParamValue = false;
                                                }
                                            } else {
                                                $param[$k][$row['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']), $typeCode);
                                            }
                                        }
                                    }
                                }
                                
                                if (isset($paramData[$metaDataCode . '.rowState'][$mainRowIndex][$k])) {
                                    $param[$k]['rowState'] = $paramData[$metaDataCode . '.rowState'][$mainRowIndex][$k];
                                }
                                
                                if ($isEmptyParamValue) {
                                    unset($param[$k]);
                                }       
                            }      
                        }
                    }                    
                }
            }          
            
        } else {
            
            $isEmptyParamValue = true;
            $translationValue = array();
            
            foreach ($paramList as $k => $row) {
                
                $typeCode = strtolower($row['META_TYPE_CODE']);
                
                if ($typeCode == 'group') {
                    if ($row['IS_SHOW'] == '1') {
                        
                        $param[$row['META_DATA_CODE']] = self::fromPostGenerateArray(
                            $bpMetaDataId, $row['ID'], $metaDataCode . '.' . $row['META_DATA_CODE'], $row['RECORD_TYPE'], $paramData, $fileParamData, $depth + 1, $rowId, $postData, 'row', $rowId, $mainRowIndex
                        );
                        
                        if (isset($param[$row['META_DATA_CODE']]) && count($param[$row['META_DATA_CODE']]) > 0) {
                            $isEmptyParamValue = false;
                        } 
                    }
                } else {                    
                            
                    if ($typeCode === 'boolean') {
                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                            if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {
                                if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {
                                    $param[$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId];
                                } else {
                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][0])) {
                                        $param[$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][0];
                                    } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                        if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                            $param[$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0];
                                        }
                                    } else {
                                        if ($row['DEFAULT_VALUE'] != '') {
                                            $param[$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                        } else {
                                            $param[$row['META_DATA_CODE']] = '0';
                                        }
                                    }
                                }
                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                    $param[$row['META_DATA_CODE']] = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0];
                                } else {
                                    if ($row['DEFAULT_VALUE'] != '') {
                                        $param[$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                    } else {
                                        $param[$row['META_DATA_CODE']] = '0';
                                    }
                                }
                            } else {
                                if ($row['DEFAULT_VALUE'] != '') {
                                    $param[$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                                } else {
                                    $param[$row['META_DATA_CODE']] = '0';
                                }
                            }
                        } else {
                            if ($row['DEFAULT_VALUE'] != '') {
                                $param[$row['META_DATA_CODE']] = $row['DEFAULT_VALUE'];
                            } else {
                                $param[$row['META_DATA_CODE']] = '0';
                            }
                        }
                        
                        /*if ($param[$row['META_DATA_CODE']] == '1') {
                            $isEmptyParamValue = false;
                        }*/
                        $isEmptyParamValue = false;
                        
                    } elseif ($typeCode == 'file') {
                        
                        if ($depth == 1) {
                            
                            if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0])) {
                                
                                $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0];
                                $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0];
                                $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0];
                                $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0];

                                $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                                if ($uploadResult) {

                                    $param['fileExtension'] = $uploadResult['extension'];
                                    $param['fileSize'] = $fileAttr['size'];
                                    $param['fileName'] = $fileAttr['name'];

                                    $param[$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                    $param[$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                    $param[$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                    $param[$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                    if (isset($uploadResult['smallThumb'])) {
                                        $param[$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                    }

                                    if (isset($uploadResult['middleThumb'])) {
                                        $param[$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                    }

                                    if (isset($uploadResult['length'])) {
                                        $param[$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                    }

                                    array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                    $isEmptyParamValue = false;
                                } else {
                                    $param[$row['META_DATA_CODE']] = '';
                                }
                            
                            } else {
                                $param[$row['META_DATA_CODE']] = '';
                                if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0])) {
                                    $param[$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0]);
                                }
                            }
                            
                        } elseif (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {
                            
                            $fileAttr['name'] = $fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId];
                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId];
                            $fileAttr['size'] = $fileParamData['size'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId];
                            $fileAttr['type'] = $fileParamData['type'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId];

                            $uploadResult = self::bpFileUpload($row, $fileAttr, $k);

                            if ($uploadResult) {

                                $param['fileExtension'] = $uploadResult['extension'];
                                $param['fileSize'] = $fileAttr['size'];
                                $param['fileName'] = $fileAttr['name'];

                                $param[$row['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                $param[$row['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                $param[$row['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                $param[$row['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                if (isset($uploadResult['smallThumb'])) {
                                    $param[$row['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                }

                                if (isset($uploadResult['middleThumb'])) {
                                    $param[$row['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                }

                                if (isset($uploadResult['length'])) {
                                    $param[$row['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                }

                                array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                $isEmptyParamValue = false;
                            } else {
                                $param[$row['META_DATA_CODE']] = '';
                            }

                        } else {
                            $param[$row['META_DATA_CODE']] = '';
                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {
                                $param[$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId]);
                            }
                        }
                        
                    } elseif ($typeCode === 'base64') {

                        if ($depth == 1) {

                            if (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0])) {

                                if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0])) {

                                    $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0]);
                                    $fileContent = base64_encode($base64Content);
                                    $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0], '.') + 1));

                                    $param[$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                                 } else {
                                    $param[$row['META_DATA_CODE']] = '';
                                 }
                               
                            } else {
                               $param[$row['META_DATA_CODE']] = '';
                               
                                if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0])) {
                                    $bpath = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][0]);
                                    $base64Content = '';

                                    if (file_exists($bpath)) {
                                        $base64Content = file_get_contents($bpath);
                                        $fileContent = base64_encode($base64Content);
                                        $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                        $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                    }
                                    $param[$row['META_DATA_CODE']] = $base64Content;
                                }                               
                            }
                            
                        } elseif (isset($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {

                            if (is_uploaded_file($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {

                                $base64Content = file_get_contents($fileParamData['tmp_name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId]);
                                $fileContent = base64_encode($base64Content);
                                $fileExtension = strtolower(substr($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId], strrpos($fileParamData['name'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId], '.') + 1));

                                $param[$row['META_DATA_CODE']] = $fileExtension . Mdcommon::$separator . $fileContent;
                            } else {
                                $param[$row['META_DATA_CODE']] = '';
                            }
                        } else {
                            $param[$row['META_DATA_CODE']] = '';
                            if (isset($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {
                                $param[$row['META_DATA_CODE']] = Input::param($postData['editfile_param'][$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId]);
                            }
                        }
                        
                    } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto') {
                        
                        if (isset($param[$row['META_DATA_CODE']])) {
                            continue;
                        }
                                            
                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {

                            $translatedVal = self::translateFieldSetValue(
                                $row, 
                                isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$rowId]),     
                                issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$rowId]), 
                                isset($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId]),     
                                issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId]), 
                                issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$mainRowIndex][$rowId]), 
                                $translationValue 
                            ); 

                        } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {

                            if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {

                                $translatedVal = self::translateFieldSetValue(
                                    $row, 
                                    isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$rowId]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$rowId]), 
                                    isset($paramData[$row['PARAM_REAL_PATH']][$rowId]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH']][$rowId]), 
                                    issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$rowId]), 
                                    $translationValue 
                                ); 

                            } else {
                                if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId])) {

                                    $translatedVal = self::translateFieldSetValue(
                                        $row, 
                                        isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$parentRowId][$rowId]),     
                                        issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$parentRowId][$rowId]), 
                                        isset($paramData[$row['PARAM_REAL_PATH']][$parentRowId][$rowId]),     
                                        issetParam($paramData[$row['PARAM_REAL_PATH']][$parentRowId][$rowId]), 
                                        issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$parentRowId][$rowId]), 
                                        $translationValue 
                                    ); 

                                } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][0])) {

                                    $translatedVal = self::translateFieldSetValue(
                                        $row, 
                                        isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$rowId][0]),     
                                        issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$rowId][0]), 
                                        isset($paramData[$row['PARAM_REAL_PATH']][$rowId][0]),     
                                        issetParam($paramData[$row['PARAM_REAL_PATH']][$rowId][0]), 
                                        issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$rowId][0]), 
                                        $translationValue 
                                    ); 

                                } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                    if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {

                                        $translatedVal = self::translateFieldSetValue(
                                            $row, 
                                            isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][0]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][0]), 
                                            isset($paramData[$row['PARAM_REAL_PATH']][0]),     
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][0]), 
                                            issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][0]), 
                                            $translationValue 
                                        ); 
                                    }
                                }
                            }

                        } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                            if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {

                                $translatedVal = self::translateFieldSetValue(
                                    $row, 
                                    isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][0]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][0]), 
                                    isset($paramData[$row['PARAM_REAL_PATH']][0]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH']][0]), 
                                    issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][0]), 
                                    $translationValue 
                                ); 

                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId])) {

                                $translatedVal = self::translateFieldSetValue(
                                    $row, 
                                    isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$parentRowId][$rowId]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$parentRowId][$rowId]), 
                                    isset($paramData[$row['PARAM_REAL_PATH']][$parentRowId][$rowId]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH']][$parentRowId][$rowId]), 
                                    issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$parentRowId][$rowId]), 
                                    $translationValue 
                                ); 

                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {

                                $translatedVal = self::translateFieldSetValue(
                                    $row, 
                                    isset($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$rowId]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH'].'_translation'][$mainRowIndex][$rowId]), 
                                    isset($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId]),     
                                    issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId]), 
                                    issetParam($paramData[self::getPfTrnsltValPath($row['PARAM_REAL_PATH'])][$mainRowIndex][$rowId]), 
                                    $translationValue 
                                ); 
                            }
                        }

                        if (isset($translatedVal) && $translatedVal['isSet']) {
                            $param[$row['META_DATA_CODE']] = $translatedVal['value'];
                            if ($translatedVal['value'] != '') {
                                $isEmptyParamValue = false;
                            }
                        }

                    } elseif ($typeCode == 'pftranslationvalue') {

                        if (isset($translationValue)) {

                            if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {

                                $paramValue = self::setPfTranslationValue(
                                    issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId]), 
                                    $translationValue 
                                );

                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {

                                if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {

                                    $paramValue = self::setPfTranslationValue(
                                        issetParam($paramData[$row['PARAM_REAL_PATH']][$rowId]), 
                                        $translationValue 
                                    );

                                } else {
                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId])) {

                                        $paramValue = self::setPfTranslationValue(
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][$parentRowId][$rowId]), 
                                            $translationValue 
                                        );

                                    } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][0])) {

                                        $paramValue = self::setPfTranslationValue(
                                            issetParam($paramData[$row['PARAM_REAL_PATH']][$rowId][0]), 
                                            $translationValue 
                                        );

                                    } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                        if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {

                                            $paramValue = self::setPfTranslationValue(
                                                issetParam($paramData[$row['PARAM_REAL_PATH']][0]), 
                                                $translationValue 
                                            );
                                        }
                                    }
                                }

                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {

                                    $paramValue = self::setPfTranslationValue(
                                        issetParam($paramData[$row['PARAM_REAL_PATH']][0]), 
                                        $translationValue 
                                    );

                                } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId])) {

                                    $paramValue = self::setPfTranslationValue(
                                        issetParam($paramData[$row['PARAM_REAL_PATH']][$parentRowId][$rowId]), 
                                        $translationValue 
                                    );

                                } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {

                                    $paramValue = self::setPfTranslationValue(
                                        issetParam($paramData[$row['PARAM_REAL_PATH']][$mainRowIndex][$rowId]), 
                                        $translationValue 
                                    );
                                }
                            }

                            if (isset($paramValue)) {
                                $param[$row['META_DATA_CODE']] = $paramValue;
                                if ($paramValue != '') {
                                    $isEmptyParamValue = false;
                                }
                            }
                        }

                    } else {
                            
                        if (isset($param[$row['META_DATA_CODE']])) {
                            continue;
                        }
                        
                        if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']])) {
                            $paramValue = '';
                            
                            /**
                             * @description rows->rows->row->row
                             * @author      Ulaankhuu Ts
                             * @date        2017-05-19 14:38:20
                             */
                            if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {
                                $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId];                                
                            
                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {
                                if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId])) {
                                    $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId];
                            
                                } else {
                                    /**
                                     * @description rows->row->rows->row
                                     * @author      Ulaankhuu Ts
                                     * @date        2016-12-12 00:10:06
                                     */
                                    if (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId])) {
                                        $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId];                                        
                                    } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][0])) {
                                        $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$rowId][0];
                                    } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                        if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                            $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0];
                                        }
                                    }
                                }
                                
                            } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                if (!is_array($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0])) {
                                    $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][0];
                                } 
                                /**
                                 * @description rows->rows->row
                                 * @author      Ulaankhuu Ts
                                 * @date        2017-01-09 17:49
                                 */                                
                                elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId])) {
                                    $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$parentRowId][$rowId];
                                } elseif (isset($paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId])) {
                                    $paramValue = $paramData[$metaDataCode . '.' . $row['META_DATA_CODE']][$mainRowIndex][$rowId];
                                }
                            }
                            
                            if ($typeCode === 'web_camera') { 
                                $param[$row['META_DATA_CODE']] = self::bpWebcamUpload($paramValue);                                             
                            } else {
                                $param[$row['META_DATA_CODE']] = $this->ws->convertDeParamType($paramValue, $typeCode);
                            }
                            
                            if ($paramValue != '') {
                                $isEmptyParamValue = false;
                            }
                            
                            /*if (
                                (
                                    $paramValue != '' && 
                                    ($row['LOWER_PARAM_NAME'] != 'createduserid' 
                                    && $row['LOWER_PARAM_NAME'] != 'createddate' 
                                    && $row['LOWER_PARAM_NAME'] != 'modifieduserid' 
                                    && $row['LOWER_PARAM_NAME'] != 'modifieddate')
                                )
                                || issetParam($row['EXPRESSION_STRING'])) {
                                
                                $isEmptyParamValue = false;
                            }*/
                            
                        } else {
                            $param[$row['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']), $typeCode);
                        }
                    }
                }
            }     
            
            if ($isEmptyParamValue) {
                $param = array();
            }
        }     
        
        return $param;
    }

    public function runProcess() {
        
        $this->load->model('mdwebservice', 'middleware/models/');
        if (!isset($this->view)) {
            $this->view = new View();
        }
        
        $postData = Input::postData();
        
        $metaDataId = Input::param($postData['methodId']);
        $row = $this->model->getMethodIdByMetaDataModel($metaDataId);

        if ($row['ACTION_TYPE'] == 'view') {
            echo json_encode(
                array(
                    'status' => 'success',
                    'message' => '',
                    'responseMethod' => '',
                    'isSystemResponse' => $postData['isSystemProcess'],
                    'hasMainProcess' => false,
                    'processId' => $metaDataId, 
                    'rowId' => '', 
                    'resultData' => ''
                )
            ); exit;
        }
        
        if (isset($row['IS_UNLIMITED']) && $row['IS_UNLIMITED'] == '1') {
            ini_set('default_socket_timeout', 170000);  //1 hour = 3600 seconds
            set_time_limit(0);
        }
        
        self::$uploadedFiles = $fileParamData = $param = $fieldEcmContent = array();
        $fileData = Input::fileData();
        
        $rowId = $responseMethod = '';
        $isTaskFlowInfo = false;
        
        if (isset($postData['param']) || isset($fileData['param'])) {
            
            $processCode = $row['META_DATA_CODE'];
            
            if (isset($postData['param'])) {
                $paramData = $postData['param'];
            }
            
            if (isset($fileData['param'])) {
                $fileParamData = $fileData['param'];
            }
            
            if ($processCode == 'FA_BUFFER_BOOK_001') {
                
                $this->load->model('mdprocess', 'middleware/models/');
                $processResult = $this->model->textFileToProcessModel($paramData, $fileParamData);

                if ($processResult['status'] == 'success') {
                    $param = $processResult['params'];
                    $this->load->model('mdwebservice', 'middleware/models/');
                } else {
                    $responseArray = array(
                        'status' => 'error',
                        'message' => $processResult['message'],
                        'responseMethod' => $responseMethod,
                        'isSystemResponse' => $postData['isSystemProcess'],
                        'hasMainProcess' => false,
                        'processId' => $metaDataId,
                        'rowId' => $rowId, 
                        'uniqId' => getUID(), 
                        'resultData' => ''
                    );
                    echo json_encode($responseArray); exit;
                }
                
            } else {
                
                $translationValue = array();
                $paramList = $this->model->groupParamsDataModel($metaDataId, null, ' AND PAL.PARENT_ID IS NULL');
                
                if (isset($postData['cacheId']) && $postData['cacheId'] != '') {
                    
                    $cacheId = Input::param($postData['cacheId']);

                    if ($cacheArray = (new Mdcache())->getDetailFromCache($cacheId, $metaDataId, $paramData)) {

                        $expression = (new Mdexpression())->getCacheExpression($metaDataId);

                        if ($groupExpression = issetParam($expression['before_save'])) {
                            eval($groupExpression);
                        }

                        if (isset($expression['before_save_rows'])) {
                            
                            $headerData = Arr::changeKeyLower($paramData);

                            foreach ($expression['before_save_rows'] as $beforeSaveGroup => $beforeSaveExpression) {

                                if (isset($cacheArray[$beforeSaveGroup])) {

                                    $rowDatas = $cacheArray[$beforeSaveGroup];

                                    $beforeSaveExpression = str_replace(
                                        array(Mdexpression::$cachePrefix, Mdexpression::$cachePrefixHeader), 
                                        array('$rowDatas[$rk]',           '$headerData'), 
                                    $beforeSaveExpression);

                                    foreach ($rowDatas as $rk => $rv) {
                                        eval($beforeSaveExpression);
                                    }

                                    $cacheArray[$beforeSaveGroup] = $rowDatas;
                                }
                            }
                        }

                        if (count(Mdwebservice::$cacheExpressionMessage)) {

                            $cacheStatus = Mdwebservice::$cacheExpressionMessage['status'];
                            $cacheMessage = Mdwebservice::$cacheExpressionMessage['message'];

                            $result = array('status' => $cacheStatus, 'message' => $cacheMessage);

                            if ($postData['isSystemProcess'] == 'true') {
                                $this->view->mergeOutputTemplate = self::outputProcess($result);
                                $responseMethod = $this->view->renderPrint('responseMethod', self::$viewPath);
                            }

                            echo json_encode(
                                array(
                                    'status' => $cacheStatus,
                                    'message' => $cacheMessage,
                                    'responseMethod' => $responseMethod,
                                    'isSystemResponse' => $postData['isSystemProcess'],
                                    'hasMainProcess' => false,
                                    'processId' => $metaDataId,
                                    'rowId' => '', 
                                    'resultData' => ''
                                )
                            ); exit;
                        }

                        $isCache = true;
                        $this->load->model('mdwebservice', 'middleware/models/');
                    }
                }

                foreach ($paramList as $input) {

                    $typeCode = $input['META_TYPE_CODE'];

                    if ($typeCode != 'group') {

                        if ($typeCode == 'boolean') {

                            if (isset($paramData[$input['META_DATA_CODE']])) {
                                $param[$input['META_DATA_CODE']] = $paramData[$input['META_DATA_CODE']];
                            } else {
                                if ($input['IS_SHOW'] != '1' && $input['DEFAULT_VALUE'] != '') {
                                    $param[$input['META_DATA_CODE']] = $input['DEFAULT_VALUE'];
                                } else {
                                    $param[$input['META_DATA_CODE']] = '0';
                                }
                            }

                        } elseif ($typeCode == 'file') {

                            if (isset($fileParamData['name'][$input['META_DATA_CODE']])) {

                                if (is_uploaded_file($fileParamData['tmp_name'][$input['META_DATA_CODE']])) {

                                    $fileAttr['name'] = $fileParamData['name'][$input['META_DATA_CODE']];
                                    $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$input['META_DATA_CODE']];
                                    $fileAttr['size'] = $fileParamData['size'][$input['META_DATA_CODE']];
                                    $fileAttr['type'] = $fileParamData['type'][$input['META_DATA_CODE']];

                                    if (array_key_exists($input['META_DATA_CODE'] . '_thumb', $paramData)) {
                                        $input['META_TYPE_CODE'] = 'multi_file_thumb';
                                    }

                                    $uploadResult = self::bpFileUpload($input, $fileAttr);

                                    if ($uploadResult) {
                                        
                                        $param['fileExtension'] = $uploadResult['extension'];
                                        $param['fileSize'] = $fileAttr['size'];
                                        $param['fileName'] = $fileAttr['name'];
                                        
                                        $param[$input['META_DATA_CODE'] . '_fileExtension'] = $uploadResult['extension'];
                                        $param[$input['META_DATA_CODE'] . '_fileSize'] = $uploadResult['size'];
                                        $param[$input['META_DATA_CODE'] . '_fileName'] = $uploadResult['name'];

                                        $param[$input['META_DATA_CODE']] = $uploadResult['path'] . $uploadResult['newname'];

                                        if (isset($uploadResult['thumbPath'])) {
                                            $param[$input['META_DATA_CODE'] . '_Thumb'] = $uploadResult['thumbPath'];
                                        }

                                        if (isset($uploadResult['smallThumb'])) {
                                            $param[$input['META_DATA_CODE'] . '_smallThumb'] = $uploadResult['smallThumb'];
                                        }

                                        if (isset($uploadResult['middleThumb'])) {
                                            $param[$input['META_DATA_CODE'] . '_middleThumb'] = $uploadResult['middleThumb'];
                                        }
                                        
                                        if (isset($uploadResult['length'])) {
                                            $param[$input['META_DATA_CODE'] . '_fileLength'] = $uploadResult['length'];
                                        }

                                        array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);

                                    } else {
                                        $param[$input['META_DATA_CODE']] = '';
                                    }

                                } else {
                                    $param[$input['META_DATA_CODE']] = isset($postData['updateFileData']) ? $postData['updateFileData'] : '';
                                    if (isset($postData['editfile_param'][$input['META_DATA_CODE']])) {
                                        $param[$input['META_DATA_CODE']] = $postData['editfile_param'][$input['META_DATA_CODE']];
                                    }
                                }

                            } else {

                                $param[$input['META_DATA_CODE']] = isset($postData['updateFileData']) ? $postData['updateFileData'] : '';

                                if (isset($postData['editfile_param'][$input['META_DATA_CODE']])) {

                                    $param[$input['META_DATA_CODE']] = $postData['editfile_param'][$input['META_DATA_CODE']];

                                    if (issetParam($input['IS_THUMBNAIL']) == '1' && $param[$input['META_DATA_CODE']] && file_exists($param[$input['META_DATA_CODE']])) {

                                        includeLib('Image/image-magician/php_image_magician');

                                        $smallThumbName = str_replace('.', '_sm.', $param[$input['META_DATA_CODE']]);
                                        $smallThumbName = str_replace('process/', 'process/thumb/', $smallThumbName);
                                        $middleThumbName = str_replace('_sm.', '_mid.', $smallThumbName);

                                        if (!file_exists($smallThumbName)) {

                                            $image = new imageLib($param[$input['META_DATA_CODE']]);

                                            $image->resizeImage(100, 200, 'landscape', true);
                                            $image->saveImage($smallThumbName, 95);
                                        }

                                        if (!file_exists($middleThumbName)) {

                                            $image = new imageLib($param[$input['META_DATA_CODE']]);

                                            $image->resizeImage(400, 500, 'landscape', true);
                                            $image->saveImage($middleThumbName, 95);
                                        }

                                        $param[$input['META_DATA_CODE'] . '_smallThumb'] = $smallThumbName;
                                        $param[$input['META_DATA_CODE'] . '_middleThumb'] = $middleThumbName;
                                    }
                                    
                                } elseif (isset($paramData[$input['META_DATA_CODE'] . '_tempFilePath'])) {

                                    $tempFilePath = Input::param($paramData[$input['META_DATA_CODE'] . '_tempFilePath']);

                                    if (file_exists($tempFilePath)) {

                                        $tempFileParts = pathinfo($tempFilePath);
                                        $filePath = self::bpUploadGetPath();
                                        $newPath = $filePath . $tempFileParts['basename'];

                                        rename($tempFilePath, $newPath);

                                        $param[$input['META_DATA_CODE']] = $newPath;

                                        if (issetParam($input['IS_THUMBNAIL']) == '1') {

                                            includeLib('Image/image-magician/php_image_magician');

                                            $path = $filePath . 'thumb';
                                            $fileExtension = $tempFileParts['extension'];

                                            if (!is_dir($path)) {
                                                mkdir($path, 0777);
                                            }

                                            $image = new imageLib($newPath);

                                            $smallThumb = $path . '/' . str_replace('.'.$fileExtension, '_sm.'.$fileExtension, $tempFileParts['basename']);
                                            $middleThumb = $path . '/' . str_replace('.'.$fileExtension, '_mid.'.$fileExtension, $tempFileParts['basename']);

                                            $image->resizeImage(100, 200, 'landscape', true);
                                            $image->saveImage($smallThumb, 95);

                                            $image->resizeImage(400, 500, 'landscape', true);
                                            $image->saveImage($middleThumb, 95);

                                            $param[$input['META_DATA_CODE'] . '_smallThumb'] = $smallThumb;
                                            $param[$input['META_DATA_CODE'] . '_middleThumb'] = $middleThumb;

                                            array_push(FileUpload::$uploadedFiles, $smallThumb);
                                            array_push(FileUpload::$uploadedFiles, $middleThumb);
                                        }
                                    }
                                }
                            }

                        } elseif ($typeCode == 'web_camera') {

                            $param[$input['META_DATA_CODE']] = self::bpWebcamUpload(Input::param($paramData[$input['META_DATA_CODE']]));

                        } elseif ($typeCode == 'multi_file' || $typeCode == 'multi_file_style' || $typeCode == 'multi_file_thumb') {
                            
                            $multiFilePhysicalPath = '';
                            $mk = 0;
                            
                            if (isset($fileParamData['name'][$input['META_DATA_CODE']][0])) {
                                        
                                $param[$input['META_DATA_CODE'].'_multiFile'] = array();
                                
                                $multiFiles = $fileParamData['name'][$input['META_DATA_CODE']];
                                
                                foreach ($multiFiles as $mk => $multiFileName) {
                                    
                                    $fileAttr['name'] = $multiFileName;
                                    $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$input['PARAM_REAL_PATH']][$mk];
                                    $fileAttr['size'] = $fileParamData['size'][$input['PARAM_REAL_PATH']][$mk];
                                    $fileAttr['type'] = $fileParamData['type'][$input['PARAM_REAL_PATH']][$mk];

                                    $uploadResult = self::bpFileUpload($input, $fileAttr, $mk);
                                    
                                    if ($uploadResult) {
                                        
                                        $physicalPath = $uploadResult['path'] . $uploadResult['newname'];
                                        
                                        $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['id'] = '';
                                        $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['fileName'] = $fileAttr['name'];
                                        $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['fileSize'] = $fileAttr['size'];
                                        $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['fileExtension'] = $uploadResult['extension'];
                                        $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['physicalPath'] = $physicalPath;
                                        $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['ecmContentMap'] = array(
                                            'orderNum' => $mk, 
                                            'refStructureId' => issetParam($paramData[$input['META_DATA_CODE'].'_multiFileRefStructureId'])
                                        );
                                        
                                        if (isset($uploadResult['smallThumb'])) {
                                            $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['thumbPhysicalPath'] = $uploadResult['smallThumb'];
                                        }
                                        
                                        if (isset($uploadResult['middleThumb'])) {
                                            $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['middlePhysicalPath'] = $uploadResult['middleThumb'];
                                        }
                                        
                                        if (isset($uploadResult['length'])) {
                                            $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['fileLength'] = $uploadResult['length'];
                                        }
                                        
                                        if (isset($paramData[$input['META_DATA_CODE'].'_multiFileTypeId'])) {
                                            $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['typeId'] = $paramData[$input['META_DATA_CODE'].'_multiFileTypeId'];
                                        }

                                        array_push(FileUpload::$uploadedFiles, $physicalPath);
                                        
                                        $multiFilePhysicalPath .= $physicalPath . ',';
                                        
                                    } else {
                                        $param[$input['META_DATA_CODE'].'_multiFile'] = array();
                                    }
                                }
                            }    
                            
                            if (isset($paramData[$input['META_DATA_CODE']]['removeFiles'])) {    
                                    
                                $removeFiles = $paramData[$input['META_DATA_CODE']]['removeFiles'];

                                foreach ($removeFiles as $removeFileId) {
                                    $mk++;
                                    $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['id'] = $removeFileId;
                                    $param[$input['META_DATA_CODE'].'_multiFile'][$mk]['rowState'] = 'removed';
                                }
                            }
                            
                            $param[$input['META_DATA_CODE']] = rtrim($multiFilePhysicalPath, ',');

                        } elseif ($typeCode == 'base64') {

                            if ($fileParamData) {

                                if (isset($fileParamData['name'][$input['META_DATA_CODE']])) {

                                    if (is_uploaded_file($fileParamData['tmp_name'][$input['META_DATA_CODE']])) {

                                        $base64Content = file_get_contents($fileParamData['tmp_name'][$input['META_DATA_CODE']]);
                                        $fileContent   = base64_encode($base64Content);
                                        $fileExtension = strtolower(substr($fileParamData['name'][$input['META_DATA_CODE']], strrpos($fileParamData['name'][$input['META_DATA_CODE']], '.') + 1));

                                        $param[$input['META_DATA_CODE']] = $fileExtension.Mdcommon::$separator.$fileContent;
                                        
                                        $uploadPath = issetParam($paramData[$input['META_DATA_CODE'] . '_uploadPath']);
                                        
                                        if ($uploadPath) { 
                                            
                                            $fileAttr['name'] = $fileParamData['name'][$input['META_DATA_CODE']];
                                            $fileAttr['tmp_name'] = $fileParamData['tmp_name'][$input['META_DATA_CODE']];
                                            $fileAttr['size'] = $fileParamData['size'][$input['META_DATA_CODE']];
                                            $fileAttr['type'] = $fileParamData['type'][$input['META_DATA_CODE']];
                                            
                                            $input['newFileName'] = getUID();
                                            $input['uploadPath'] = $uploadPath;
                                            $param['id'] = $input['newFileName'];
                                            
                                            $uploadResult = self::bpFileUpload($input, $fileAttr);

                                            if ($uploadResult) {

                                                $param['fileExtension'] = $uploadResult['extension'];
                                                $param['fileSize'] = $fileAttr['size'];
                                                $param['fileName'] = $fileAttr['name'];

                                                array_push(FileUpload::$uploadedFiles, $uploadResult['path'] . $uploadResult['newname']);
                                            } 
                                        }

                                    } else {
                                        $param[$input['META_DATA_CODE']] = isset($postData['updateFileData']) ? $postData['updateFileData'] : '';
                                        if (isset($postData['editfile_param'][$input['META_DATA_CODE']])) {
                                            $param[$input['META_DATA_CODE']] = $postData['editfile_param'][$input['META_DATA_CODE']];
                                        }
                                    }
                                } else {
                                    $param[$input['META_DATA_CODE']] = isset($postData['updateFileData']) ? $postData['updateFileData'] : '';

                                    if (isset($postData['editfile_param'][$input['META_DATA_CODE']])) {
                                        $param[$input['META_DATA_CODE']] = $postData['editfile_param'][$input['META_DATA_CODE']];
                                    }
                                }
                                
                            } else {
                                
                                $param[$input['META_DATA_CODE']] = isset($postData['updateFileData']) ? $postData['updateFileData'] : '';
                                
                                if (isset($postData['editfile_param'][$input['META_DATA_CODE']])) {
                                    
                                    $bpath = Input::param($postData['editfile_param'][$input['META_DATA_CODE']]);
                                    $base64Content = '';

                                    if (file_exists($bpath)) {
                                        $base64Content = file_get_contents($bpath);
                                        $fileContent = base64_encode($base64Content);
                                        $fileExtension = strtolower(substr($bpath, strrpos($bpath, '.') + 1));
                                        $base64Content = $fileExtension . Mdcommon::$separator . $fileContent;
                                    }
                                    
                                    $param[$input['META_DATA_CODE']] = $base64Content;
                                }                                
                            }

                        } elseif ($typeCode == 'base64_to_file') {
                            
                            if (isset($paramData[$input['META_DATA_CODE']]) && $paramData[$input['META_DATA_CODE']]) {
                                
                                $fileContent = $paramData[$input['META_DATA_CODE']];
                                $fileData    = base64_decode($fileContent);
                                
                                if ($fileData) {
                                    $f = finfo_open();
                                    $mimeType = finfo_buffer($f, $fileData, FILEINFO_MIME_TYPE);
                                    
                                    if ($mimeType == 'text/plain') {
                                        Message::add('e', 'Wrong content type!', 'back'); exit;
                                    } else {
                                        $fileExtension = mimeToExt($mimeType);
                                        //$param[$input['META_DATA_CODE']] = $fileExtension.Mdcommon::$separator.$fileContent;
                                        
                                        $filePath = self::bpUploadGetPath();
                                        $fileUrl = $filePath.getUID().'.'.$fileExtension;
                                        
                                        file_put_contents($fileUrl, $fileData);
                                        
                                        $param[$input['META_DATA_CODE']] = $fileUrl;
                                    }
                                    
                                } else {
                                    Message::add('e', 'Wrong base64 string!', 'back'); exit;
                                }
                            }
                            
                        } elseif ($typeCode == 'string' || $typeCode == 'description' || $typeCode == 'description_auto' || $typeCode == 'text_editor') {
                            
                            if (isset($param[$input['PARAM_REAL_PATH']])) {
                                continue;
                            }
                            
                            $translatedVal = self::translateFieldSetValue(
                                $input, 
                                isset($paramData[$input['PARAM_REAL_PATH'].'_translation']), 
                                issetParam($paramData[$input['PARAM_REAL_PATH'].'_translation']), 
                                isset($paramData[$input['PARAM_REAL_PATH']]), 
                                issetParam($paramData[$input['PARAM_REAL_PATH']]), 
                                issetParam($paramData['pfTranslationValue']), 
                                $translationValue 
                            );
                            
                            if ($translatedVal['isSet']) {
                                $param[$input['PARAM_REAL_PATH']] = $translatedVal['value'];
                            }
                            
                        } elseif ($typeCode == 'pftranslationvalue') {
                            
                            if (isset($translationValue) && $translationValue) {
                                        
                                $param[$input['PARAM_REAL_PATH']] = self::setPfTranslationValue(
                                    issetParam($paramData[$input['PARAM_REAL_PATH']]), 
                                    $translationValue 
                                );
                            }
                            
                        } else {
                            
                            if (isset($param[$input['PARAM_REAL_PATH']])) {
                                continue;
                            }

                            if (isset($paramData[$input['META_DATA_CODE']])) {

                                if ($input['CHOOSE_TYPE'] == 'multicomma' && $input['LOOKUP_TYPE'] != '' && $input['LOOKUP_META_DATA_ID'] != '') {
                                    $param[$input['META_DATA_CODE']] = $this->ws->convertDeParamType($paramData[$input['META_DATA_CODE']], 'multicomma');
                                } elseif ($input['CHOOSE_TYPE'] == 'multi' && $input['LOOKUP_TYPE'] != '' && $input['LOOKUP_META_DATA_ID'] != '') {
                                    $param[$input['META_DATA_CODE']] = $this->ws->convertDeParamType($paramData[$input['META_DATA_CODE']], 'multi');
                                } elseif ($input['LOOKUP_META_DATA_ID'] != '' && ($input['LOOKUP_TYPE'] == 'combo_with_popup' || $input['LOOKUP_TYPE'] == 'range_slider')) {
                                    $param[$input['META_DATA_CODE']] = $this->ws->convertDeParamType($paramData[$input['META_DATA_CODE']], 'combo_with_popup');
                                } else {
                                    $param[$input['META_DATA_CODE']] = $this->ws->convertDeParamType($paramData[$input['META_DATA_CODE']], $typeCode);
                                }                       
                                
                            } else {
                                $param[$input['META_DATA_CODE']] = $this->ws->convertDeParamType(Mdmetadata::setDefaultValue($input['DEFAULT_VALUE']), $typeCode);
                            }
                        }
                        
                        if (isset($paramData[$input['META_DATA_CODE'] . '_pfVoiceRecord'])) {
                            
                            $fieldEcmContent[$input['META_DATA_CODE']] = Input::param($paramData[$input['META_DATA_CODE'] . '_pfVoiceRecord']);
                        }

                    } else {
                        
                        $groupLowerPath = $input['LOWER_PARAM_NAME'];
                        
                        if ($groupLowerPath == 'pfmetaverserecordmaps' && Input::postCheck('mvDmRecordMaps')) {
                            
                            $param[$input['META_DATA_CODE']] = self::fillBpRowsMetaVerseRecordMaps($row['REF_META_GROUP_ID']);
                            
                        } elseif ($input['IS_SHOW'] == '1') {

                            if (isset($isCache) && isset($cacheArray[$groupLowerPath])) {

                                $cacheArrayRows = $cacheArray[$groupLowerPath];

                                if (isset($cacheArray[$groupLowerPath.'_deletedrows'])) {
                                    $cacheArrayRows = array_merge_recursive($cacheArrayRows, $cacheArray[$groupLowerPath.'_deletedrows']);
                                }
                                
                                $param[$input['META_DATA_CODE']] = $cacheArrayRows;

                            } else {
                                
                                $param[$input['META_DATA_CODE']] = self::fromPostGenerateArray(
                                    $metaDataId, $input['ID'], $input['META_DATA_CODE'], $input['RECORD_TYPE'], $paramData, $fileParamData, 0, 0, $postData
                                );
                                
                                if ($groupLowerPath == 'pfmetaversesubrecordmaps' && Input::postCheck('mvDmRecordMaps') && count($param[$input['META_DATA_CODE']]) > 0) {
                            
                                    $param[$input['META_DATA_CODE']] = self::fillBpRowsMetaVerseSubRecordMaps($row['REF_META_GROUP_ID'], $param[$input['META_DATA_CODE']]);
                                } 
                            }
                        }

                        if ($input['META_DATA_CODE'] == 'generalLedgerBookParams') {
                            $isGlConnect = true;
                        }
                    }
                }
            }
            
            if (Input::isEmpty('realSourceIdAutoMap') == false) {
                
                $getSplitIds = explode('_', Input::post('realSourceIdAutoMap')); 
                $getdmTransferProcessDtl = $this->model->getDmProcessDtlModel($getSplitIds[1], $metaDataId);                                
                
                if (isset($getdmTransferProcessDtl['IS_AUTO_MAP']) && $getdmTransferProcessDtl['IS_AUTO_MAP'] == '1') {
                    
                    $recordIds = array_filter(explode(',', $getSplitIds[0]));
                    
                    $param['autoMapParams'][0] = array(
                        'dataViewId' => $getSplitIds[1], 
                        'isSource' => $getdmTransferProcessDtl['AUTO_MAP_SRC'], 
                        'srcTableName' => $getdmTransferProcessDtl['AUTO_MAP_SRC_TABLE_NAME'], 
                        'onDeleteCondition' => $getdmTransferProcessDtl['AUTO_MAP_ON_DELETE'], 
                        'onUpdateCondition' => $getdmTransferProcessDtl['AUTO_MAP_ON_UPDATE'], 
                        'deleteProcessId' => $getdmTransferProcessDtl['AUTO_MAP_DELETE_PROCESS_ID'], 
                        'trgDataViewId' => issetParam($getdmTransferProcessDtl['AUTO_MAP_DATAVIEW_ID']), 
                        'srcName' => Input::param(issetParam($postData['srcAutoMapPattern'])), 
                        'trgName' => issetParam($getdmTransferProcessDtl['AUTO_MAP_TRG_NAME_PATTERN']) 
                    );
                    
                    if (count($recordIds) >= 2) {
                        $param['autoMapParams'][0]['recordIds'] = array_map(function($val) { return array('id' => $val); }, $recordIds);
                    } else {
                        $param['autoMapParams'][0]['recordId'] = $recordIds[0];
                    }
                }
            }
            
            if (isset($param['isUsedGl']) && $param['isUsedGl'] == '1' && isset($isGlConnect)) {
                
                $generalLedgers = array();

                if (Input::postCheck('gl_accountId')) {

                    $generalLedgersData = Input::post('gl_accountId');
                    $isCheckInvoice = false;
                    
                    if (Config::getFromCache('IS_CHECK_GL_EMPTY_BOOK') == '1' && 
                        (!isset($param['ignoreCheckGLInvoice']) || (isset($param['ignoreCheckGLInvoice']) && $param['ignoreCheckGLInvoice'] != '1'))) {
                        $isCheckInvoice = true;
                    }
                    
                    $isCheckCustomer = Config::getFromCache('IS_CHECK_GL_CUSTOMER_REQUIRED') == '1' ? true : false;
                    $emptyInvoiceAccount = $emptyCustomerAccount = null;
                    
                    foreach ($generalLedgersData as $k => $accountId) {
                        
                        $accountCode = $_POST['gl_accountCode'][$k];
                        $rowObjectId = Input::param($_POST['gl_objectId'][$k]);
                        $currencyCode = strtolower(Input::param($_POST['gl_rate_currency'][$k]));
                        $customerId = Input::param($_POST['gl_customerId'][$k]);
                        
                        if ($currencyCode == 'mnt') {
                            $rate = 1;
                            $creditAmount = Number::decimal(Input::param($_POST['gl_creditAmount'][$k]));
                            $creditAmountBase = $creditAmount;
                            $debitAmount = Number::decimal(Input::param($_POST['gl_debitAmount'][$k]));
                            $debitAmountBase = $debitAmount;
                        } else {
                            $rate = Number::decimal(Input::param($_POST['gl_rate'][$k]));
                            $creditAmount = Number::decimal(Input::param($_POST['gl_creditAmount'][$k]));
                            $creditAmountBase = Number::decimal(Input::param($_POST['gl_creditAmountBase'][$k]));
                            $debitAmount = Number::decimal(Input::param($_POST['gl_debitAmount'][$k]));
                            $debitAmountBase = Number::decimal(Input::param($_POST['gl_debitAmountBase'][$k]));
                        }
                        
                        $generalLedgers[$k] = array(
                            'id' => Input::param($_POST['gl_dtlId'][$k]),
                            'subid' => Input::param($_POST['gl_subid'][$k]),
                            'accountId' => $accountId,
                            'description' => Input::param($_POST['gl_rowdescription'][$k]),
                            'rate' => $rate,
                            'creditAmount' => $creditAmount, 
                            'creditAmountBase' => $creditAmountBase, 
                            'debitAmount' => $debitAmount, 
                            'debitAmountBase' => $debitAmountBase, 
                            'customerId' => $customerId, 
                            'islockamount' => Input::param($_POST['gl_amountLock'][$k]), 
                            'islock' => Input::param($_POST['gl_rowislock'][$k])
                        );
                        
                        $isWithBook = false;

                        if (isset($_POST['defaultInvoiceBook'][$k]) && $_POST['defaultInvoiceBook'][$k] != '') {

                            $defaultInvoices = json_decode($_POST['defaultInvoiceBook'][$k], true);
                            $generalLedgers[$k]['invoicebook'] = array_key_exists(0, $defaultInvoices) ? $defaultInvoices : array($defaultInvoices);
                            $isWithBook = true;
                            
                            if (($rowObjectId == '20003' || $rowObjectId == '20004') 
                                && Input::param($_POST['gl_isEdited'][$k]) == '0' 
                                && isset($generalLedgers[$k]['invoicebook'][0]['id']) 
                                && !empty($generalLedgers[$k]['invoicebook'][0]['id'])) {

                                $generalLedgers[$k]['generalLedgerMaps'] = array(
                                    array(
                                        'invoiceId' => $generalLedgers[$k]['invoicebook'][0]['id'],
                                        'objectId' => $rowObjectId
                                    )
                                );

                                /*unset($generalLedgers[$k]['invoicebook']);*/
                            } 
                        }
                        
                        if (isset($_POST['gl_invoiceBookId'][$k]) && $isWithBook == false) {

                            $accbooks = Input::param($_POST['gl_invoiceBookId'][$k]);

                            if ($accbooks != '') {
                                
                                $accountBook = array();
                                $books = explode(',', $accbooks);
                                
                                foreach ($books as $key => $value) {
                                    $value = trim($value);
                                    
                                    if (!empty($value)) {
                                        $accountBook[$key] = array(
                                            'invoiceId' => $value,
                                            'objectId' => $rowObjectId
                                        );
                                    }
                                }
                                $generalLedgers[$k]['generalLedgerMaps'] = $accountBook;
                            }
                        }
                        
                        if ($isCheckInvoice) {
                        
                            if ($_POST['gl_useDetailBook'][$k] == '1' && empty($_POST['defaultInvoiceBook'][$k])) {
                                $emptyInvoiceAccount .= $accountCode.', ';
                            }
                        }
                        
                        if ($isCheckCustomer && $customerId == '') {
                            $emptyCustomerAccount .= $accountCode.', ';
                        }

                        if (isset($_POST['gl_metas'][$k]) && $_POST['gl_metas'][$k] != '') { 
                            $glMetas = json_decode(html_entity_decode($_POST['gl_metas'][$k], ENT_QUOTES, 'UTF-8'), true);
                            if (is_array($glMetas)) {
                                $generalLedgers[$k] = array_merge($generalLedgers[$k], $glMetas);
                            }
                        }

                        if (isset($_POST['accountMeta'][$k][$accountId])) {
                            $accountMetaDatas = Input::param($_POST['accountMeta'][$k][$accountId]);
                            $accountSegmentShortCode = $accountSegmentName = '';
                        
                            foreach ($accountMetaDatas as $metaKey => $metaValue) {
                                if (strpos($metaKey, '_segmentCode') === false && strpos($metaKey, '_segmentSeparator') === false && strpos($metaKey, '_segmentReplaceValue') === false) {

                                    $generalLedgers[$k][$metaKey] = $metaValue;

                                    if (array_key_exists($metaKey.'_segmentCode', $accountMetaDatas)) {

                                        $segCode = $accountMetaDatas[$metaKey.'_segmentCode'];
                                        $segSeparator = $accountMetaDatas[$metaKey.'_segmentSeparator'];

                                        if ($segCode) {
                                            $metaValueExp = explode('|', $accountMetaDatas[$metaKey.'_segmentCode']);
                                            $segmentCode = $metaValueExp[0];
                                            $segmentName = $metaValueExp[1];
                                            $generalLedgers[$k][$metaKey.'_segmentCode'] = $segmentCode;
                                            $generalLedgers[$k][$metaKey.'_segmentName'] = $segmentName;
                                            $accountSegmentName .= $segSeparator.$segmentName;
                                        } else {
                                            $segmentCode = $accountMetaDatas[$metaKey.'_segmentReplaceValue'];
                                            $segmentName = $segmentCode;
                                            $generalLedgers[$k][$metaKey.'_segmentCode'] = '';
                                            $generalLedgers[$k][$metaKey.'_segmentName'] = '';
                                        }

                                        $accountSegmentShortCode .= $segSeparator.$segmentCode;
                                    }
                                }
                            }
                            
                            if ($accountSegmentShortCode) {
                                $generalLedgers[$k]['accountsegmentshortcode'] = $accountSegmentShortCode;
                            }
                            
                            if ($accountSegmentName) {
                                $generalLedgers[$k]['accountsegmentname'] = $accountSegmentName;
                            }
                        }
                    }
                    
                    if ($emptyInvoiceAccount) {
                        echo json_encode(
                            array(
                                'status' => 'error',
                                'message' => 'Журнал бичилтийн ('.rtrim($emptyInvoiceAccount, ', ').') дансан дээр баримт үүсгэх товчийг дарж үүсгэнэ үү'
                            )
                        ); exit;
                    }
                    if ($emptyCustomerAccount) {
                        echo json_encode(
                            array(
                                'status' => 'error',
                                'message' => 'Журнал бичилтийн ('.rtrim($emptyCustomerAccount, ', ').') дансан дээр харилцагч сонгоно уу'
                            )
                        ); exit;
                    }
                }

                $bookParams = array();
                
                if (isset($param['objectId']) && ($param['objectId'] == '20004' || $param['objectId'] == '20003')) {
                    $bookParams = $param;
                } else {
                    foreach ($param as $keyHeader => $headerParamVal){
                        if (!is_array($headerParamVal)) {
                            $bookParams[$keyHeader] = $headerParamVal;
                        }
                    }
                }
                    
                $generalLedgerParams = array(
                    'id' => Input::post('glbookId'),
                    'bookTypeId' => Input::postCheck('glBookTypeId') ? Input::post('glBookTypeId') : '2',
                    'bookDate' => Input::postCheck('glbookDate') ? Input::post('glbookDate') : Input::post('hidden_glbookDate'),
                    'bookNumber' => Input::postCheck('glbookNumber') ? Input::post('glbookNumber') : Input::post('hidden_glbookNumber'), 
                    'description' => Input::postCheck('gldescription') ? Input::post('gldescription') : Input::post('hidden_gldescription'),
                    'description2' => Input::post('gldescription2'),
                    'objectId' => issetParam($param['objectId']), 
                    'importid' => Input::post('glimportId'),
                    'relatedBookId' => Input::post('glrelatedBookId'),
                    'templateId' => Input::post('glTemplateId'), 
                    'createdProcessId' => $metaDataId,
                    'bookParams' => $bookParams,
                    'generalLedgerBookDtls' => $generalLedgers
                );
                
                if (Input::postCheck('gl_additionalValues')) {
                    $generalLedgerParams['additionalValues'] = json_decode(Input::postNonTags('gl_additionalValues'), true);
                }
                
                $param['generalLedgerBookParams'] = $generalLedgerParams;
            }
        }
        
        if (isset($postData['wfmStatusParams']) && $postData['wfmStatusParams'] != '') {
            
            parse_str($postData['wfmStatusParams'], $wfmStatusParams);          
            
            if (isset($wfmStatusParams['statusId'])) {
                $wfmStringRowParams = (isset($postData['wfmStringRowParams']) ? Arr::decode($postData['wfmStringRowParams']) : array());
            
                $wfmStatusParam = array(
                    'systemMetaGroupId' => $wfmStatusParams['dataViewId'], 
                    'id'                => $wfmStatusParams['rowId'], 
                    'newWfmStatusId'    => $wfmStatusParams['statusId'],
                    'newWfmDescription' => ''
                );
                
                if (issetParam($wfmStatusParams['wfmStatusId'])) {
                    $wfmStatusParam['wfmStatusId'] = $wfmStatusParams['wfmStatusId'];
                }
                
                if (isset($paramData['newWfmDescriptionProcess'])) {
                    
                    $wfmStatusParam['newWfmDescription'] = $paramData['newWfmDescriptionProcess'];
                    
                } elseif (isset($wfmStatusParams['newWfmDescriptionQuick'])) {
                    
                    $wfmStatusParam['newWfmDescription'] = $wfmStatusParams['newWfmDescriptionQuick'];
                    
                } elseif (isset($param['wfmLogDescription'])) {
                    
                    $wfmStatusParam['newWfmDescription'] = $param['wfmLogDescription'];
                }

                if (isset($postData['plainText'])) {
                    $wfmStatusParam['contentHash'] = Input::param($postData['plainText']);
                    $wfmStatusParam['cipherText']  = Input::param($postData['cyphertext']); 
                }

                if (isset($wfmStringRowParams)) {
                    
                    if (false && isset($wfmStringRowParams[0]['isGetConsolidate'])) {
                        
                        unset($wfmStatusParam['id']);
                        
                        $wfmStatusParam['selectedRows'] = $wfmStringRowParams;
                        $param['setRowWfmStatus'] = $wfmStatusParam;
                        
                    } else {
                        
                        $setRowsWfmValue = array();
                    
                        foreach ($wfmStringRowParams as $keyWfm => $rowValWfm) {
                            $setRowsWfmValue[$keyWfm] = array_merge($wfmStatusParam, $rowValWfm);
                        }

                        $param['setRowWfmStatus'] = $setRowsWfmValue;
                    }
                    
                    if (issetCount($param['autoAssignedUsers'])) {
                        $param['setRowWfmStatus']['autoAssignedUsers'] = $param['autoAssignedUsers'];
                    }
                }
            }
        }

        if (isset($postData['relationParams'])) {
            $relationParams = array();
            
            foreach ($postData['relationParams'] as $rkey => $rVal) {
                $relationVal = isset($postData['relationValue'][$rkey]) ? $postData['relationValue'][$rkey] : array();
                
                $recordId = array_map(function($val, $value) {
                    return array('id' => $val, 'semanticValue' => $value);
                }, $rVal, $relationVal);
                
                $relationParams[] = array(
                    'tableName' => $rkey,
                    'isSource' => 1,
                    'onDeleteCondition' => 'noaction',
                    'onUpdateCondition' => 'noaction',
                    'recordIds' => $recordId,
                    'semanticTypeId' => 1 
                );
            }

            if (isset($param['autoMapParams'])) {
                $param['autoMapParams'] = array_merge($param['autoMapParams'], $relationParams);
            } else {
                $param['autoMapParams'] = $relationParams;
            }
        }
        
        if (isset($postData['bpValueTemplateName']) && $postData['bpValueTemplateName'] != '') {
            
            $param['metaProcessTemplateParatemer']['name'] = Input::param($postData['bpValueTemplateName']);
            
            if (Input::postCheck('isOwnBpValueTemplate')) {
                $param['metaProcessTemplateParatemer']['userId'] = Ue::sessionUserId();
            }
            
            if (Input::numeric('isOnlyTemplate') == 1) {
                $param['metaProcessTemplateParatemer']['isOnlyTemplate'] = 1;
            }
            
            Mdcommon::clearUserBpDataTmpl($metaDataId);
        }
        
        if (isset($postData['taskFlowInfo']) && $postData['taskFlowInfo']) {
            $param['_taskFlowInfo'] = Arr::decode($postData['taskFlowInfo']);
            $isTaskFlowInfo = true;
        }
        
        if (isset($postData['isTestCase']) && $postData['isTestCase'] == 1) {
            
            $param['_testCaseInfo'] = array(
                'id' => issetVar($postData['testCaseId']), 
                'systemId' => issetVar($postData['testCaseSystemId']), 
                'name' => issetVar($postData['testCaseName']), 
                'scenarioId' => issetVar($postData['testCaseScenarioId']), 
                'orderNumber' => issetVar($postData['testOrderNumber']), 
                'modeId' => issetVar($postData['testCaseModeId']), 
                'isOnlyTemplate' => issetVar($postData['isOnlyTemplate'])  
            );
            
            if ($param['_testCaseInfo']['id']) {
                
                $this->load->model('mdprocess', 'middleware/models/');
                $testCaseRow = $this->model->getTestCaseAndProcessRowModel($param['_testCaseInfo']['id']);
                
                $param['_testCaseInfo']['systemId'] = $testCaseRow['SYSTEM_ID'];
                $param['_testCaseInfo']['name'] = $testCaseRow['TEST_CASE_NAME'];
                $param['_testCaseInfo']['scenarioId'] = $testCaseRow['SCENARIO_ID'];
                $param['_testCaseInfo']['orderNumber'] = $testCaseRow['ORDER_NUMBER'];
                $param['_testCaseInfo']['modeId'] = $testCaseRow['TEST_MODE'];
                
                $this->load->model('mdwebservice', 'middleware/models/');
            }
        }

        if ($postData['responseType'] == 'json') {
            
            echo json_encode(
                array(
                    'status' => 'success',
                    'message' => 'Success',
                    'processId' => $metaDataId, 
                    'responseMethod' => '',
                    'paramData' => $param
                ), JSON_UNESCAPED_UNICODE
            ); exit;
            
        } elseif ($postData['responseType'] == 'returnRequestParams') {
            
            $param['bpHeaderInfo'] = array(
                'SERVICE_LANGUAGE_CODE' => $row['SERVICE_LANGUAGE_CODE'], 
                'WS_URL' => $row['WS_URL'], 
                'META_DATA_CODE' => $row['META_DATA_CODE']
            );
            
            return $param;
            
        } else {
            
            $resultData = null;
            
            if (isset($postData['windowSessionId'])) {
                WebService::$addonHeaderParam['windowSessionId'] = Input::param($postData['windowSessionId']);
            }
            
            if (issetParam($row['WORKIN_TYPE']) !== '' && issetParam($row['WORKIN_TYPE']) !== 'flm') {
                
                switch ($row['WORKIN_TYPE']) {
                    case 'bank':
                        
                        $this->load->model('Mdintegration', 'middleware/models/');
                        $result = $this->model->callBankService($row, $param);

                        $response = $result;
                        $resultData = $result['data'];

                        $this->load->model('mdwebservice', 'middleware/models/');

                    break;
                    case 'xyp':
                        $this->load->model('Mdintegration', 'middleware/models/');
                        $result = $this->model->callXypService($row, $param);

                        $response = $result;
                        $resultData = $result['data'];

                        $this->load->model('mdwebservice', 'middleware/models/');
                        
                    break;
                    case 'zms':
                        $this->load->model('Mdintegration', 'middleware/models/');

                        $result = $this->model->callZmsService($row, $param);

                        $response = $result;
                        $resultData = $result['data'];

                        $this->load->model('mdwebservice', 'middleware/models/');

                    break;
                }
                
            } else {
                           
                $result = Mdwebservice::call($row, $param);
                
                if ($this->ws->isException()) {

                    self::deleteUploadedFiles(FileUpload::$uploadedFiles);

                    $result = array('status' => 'error', 'message' => $this->ws->getErrorMessage());
                    $response = $result;

                } else {

                    if ($result['status'] == 'success') {
                        
                        if ($isTaskFlowInfo && isset($result['result']['_taskflowinfo']) && $result['result']['_taskflowinfo']) {
                            (new Mdprocessflow())->callTaskFlow($result); exit;
                        }

                        $response = array('status' => 'success', 'message' => Lang::line('msg_save_success'));

                        if (isset($result['result']['id'])) {

                            $resultData = $result['result'];
                            $rowId = $resultData['id'];

                            self::saveBpAddOn($row['REF_META_GROUP_ID'], $rowId);
                            self::saveBpAttachWidget($row['REF_META_GROUP_ID'], $rowId);
                            self::saveBpCheckList($metaDataId, $row['REF_META_GROUP_ID'], $rowId);
                            self::saveBpMetaVerseRecordMap($metaDataId, $row['REF_META_GROUP_ID'], $rowId);
                            self::saveBpFieldEcmContent($row['REF_META_GROUP_ID'], $rowId, $fieldEcmContent);
                            
                            if (isset($postData['isProcessMultiFile'])) {
                                self::renderBpTabMovePhoto($row['REF_META_GROUP_ID'], $rowId);
                            }

                            self::saveKpiDmMart($rowId, $paramData, $fileParamData, $param, $postData);
                            self::saveKpiIndicator($rowId);
                        }
                        
                        if (!isset($resultData)) {
                            $resultData = issetParam($result['result']);
                        }

                        if (isset($postData['dmMetaDataId']) && $postData['dmMetaDataId'] != '') {
                            
                            $dvMetaDataId = Input::param($postData['dmMetaDataId']);
                            $mainProcess  = $this->model->getMainProcessByCreateModel($dvMetaDataId);

                            if ($mainProcess) {
                                $mainProcessId = $mainProcess['PROCESS_META_DATA_ID']; 
                            } 
                        }

                        self::runAdditionalProcess($row['META_DATA_CODE'], $param);
                        
                    } else {
                        self::deleteUploadedFiles(FileUpload::$uploadedFiles);
                        $response = array('status' => 'error', 'message' => $this->ws->getResponseMessage($result));
                    }
                    
                    $response['message'] = $response['message'] . self::resultAddonMessage($result);

                    $result = array('status' => 'success', 'data' => $result);
                }
            }
            
            if ($postData['isSystemProcess'] == 'true') {
                $this->view->mergeOutputTemplate = self::outputProcess($result);
                $responseMethod = $this->view->renderPrint('responseMethod', self::$viewPath);
            }
            
            $responseArray = array(
                'status' => $response['status'],
                'message' => $response['message'],
                'responseMethod' => $responseMethod,
                'isSystemResponse' => $postData['isSystemProcess'],
                'hasMainProcess' => isset($mainProcessId) ? true : false,
                'processId' => isset($mainProcessId) ? $mainProcessId : $metaDataId,
                'rowId' => $rowId, 
                'uniqId' => getUID(), 
                'resultData' => $resultData
            );
            
            if (issetParam($row['WORKIN_TYPE']) === 'flm') {
                
                includeLib('Utils/Functions');
                if ($row['META_DATA_CODE'] !== 'FLM_REQUEST_CUSTOM_LIST_004') {
                    $flmresult = Functions::runProcess('FLM_REQUEST_CUSTOM_LIST_004', array('id' => $rowId ));    
                } else {
                    (Array) $flmresult = array();
                    $flmresult['result'] = $resultData;
                }

                if (isset($flmresult['result'])) {
                    $paramArray = array(
                        'status' => $response['status'],
                        'message' => $response['message'],
                        'hasMainProcess' => isset($mainProcessId) ? true : false,
                        'processId' => isset($mainProcessId) ? $mainProcessId : $metaDataId,
                        'rowId' => $rowId, 
                        'resultData' => $flmresult['result']
                    );

                    $mdint = &getInstance();
                    $mdint->load->model('Mdintegration', 'middleware/models/');
                    $result2 = $mdint->model->callFlmService($responseArray);
                    if ($result2) {
                        $responseArray['flm_result'] = $result2;    
                    }
                }
            }
            
            if ($postData['responseType'] == 'outputArray') {
                return $responseArray;
            } else {
                header('Content-Type: application/json');
                echo json_encode($responseArray); exit;
            }
        }
    }
    
    public function saveKpiIndicator($rowId) {
        
        if (Input::postCheck('kpiTbl')) {
            
            if (isset($_POST['kpiTbl']['bpAddonInfo'])) {
                
                $bpAddonInfos = $_POST['kpiTbl']['bpAddonInfo'];
                $mvSysPath = $_POST['mvSysPath'];
                
                foreach ($bpAddonInfos as $indicatorId => $indicatorDatas) {
                    
                    $indicatorId = Input::paramNum($indicatorId);
                    
                    $mvSysPaths = $mvSysPath[$indicatorId];
                    $postParam = array();
                    
                    foreach ($mvSysPaths as $mvPath => $mvPathVal) {
                        if (strpos($mvPath, 'sf[') !== false) {
                            $postParam['sf'][str_replace('sf[', '', $mvPath)] = Input::param($mvPathVal);
                        } else {
                            $postParam[$mvPath] = Input::param($mvPathVal);
                        }
                    }
                    
                    $postParam['kpiTbl'] = $indicatorDatas;
                    $_POST = $postParam;
                    
                    (new Mdform())->saveKpiDynamicData($rowId);
                }
                
            } else {
                (new Mdform())->saveKpiDynamicData($rowId);
            }
            
            $this->load->model('mdwebservice', 'middleware/models/');
        }
        
        return true;
    }
    
    public function call($row, $param) {
        
        if (isset($row['WS_SERVER_NAME'])) {
            
            $wsServerName = $row['WS_SERVER_NAME'];
            $configWsUrl  = Config::getFromCache($wsServerName);
            
            if ($configWsUrl && @file_get_contents($configWsUrl)) {
                $result = $this->ws->runSerializeResponse($configWsUrl, $row['META_DATA_CODE'], $param);
                return $result;
            }
        } 
        
        WebService::$isProcess = true;
        $result = $this->ws->caller($row['SERVICE_LANGUAGE_CODE'], $row['WS_URL'], $row['META_DATA_CODE'], 'return', $param, 'serialize');
        
        if ($row['META_DATA_CODE'] == 'RELOAD_COMMAND') {
            
            $configWsUrl = Config::getFromCache('heavyServiceAddress');
            
            if ($configWsUrl && @file_get_contents($configWsUrl)) {
                WebService::$addonHeaderParam['windowSessionId'] = getUID();
                $this->ws->runSerializeResponse($configWsUrl, 'RELOAD_COMMAND', $param);
            } 
        }
        
        return $result;
    }
    
    public function resultAddonMessage($result) {
        
        $message = null;
        
        if (isset($result['result']['_notification']) && is_countable($result['result']['_notification']) && count($result['result']['_notification'])) {
            $arr[] = '<ul class="list list-unstyled mt-2 mb-0">';
            foreach ($result['result']['_notification'] as $msg) {
                $arr[] = '<li><i class="icon-arrow-right5 mr-1"></i> '.$msg.'</li>';
            }
            $arr[] = '</ul>';
            $message = implode('', $arr);
        }
        
        return $message;
    }
    
    public function saveKpiDmMart($rowId, $paramData, $fileParamData, $inputParam, $postData) {
        
        try {
            
            if (isset($paramData['kpiDmDtl.pdfColumnName']) && isset($paramData['kpiDmDtl.fact1']) && isset($paramData['kpiDmDtl.kpiTemplateId'])) {
            
                $data = $dataObject = $eaRelation = $defaultTplData = $translationValue = array();

                $kpiData        = $paramData['kpiDmDtl.pdfColumnName'];
                $kpiFact        = $paramData['kpiDmDtl.fact1']; 
                $scenarioId     = Ue::sessionScenarioId();      

                if (issetParam($paramData['departmentId'])) {
                    $data['DEPARTMENT_ID'] = $paramData['departmentId'];
                }

                if (issetParam($paramData['code'])) {
                    $data['CODE'] = $paramData['code'];
                }

                if (issetParam($inputParam['name'])) {
                    
                    $data['NAME'] = $inputParam['name'];
                    
                    if (Lang::isUseMultiLang() && isset($inputParam['pfTranslationValue'])) {
                        $pfTranslationValue = json_decode($inputParam['pfTranslationValue'], true);
                        
                        if (isset($pfTranslationValue['value']['NAME'])) {
                            $isTranslationValueSave = true;
                            $translationValue['NAME'] = $pfTranslationValue['value']['NAME'];
                        }
                    }
                }
                
                if (issetParam($inputParam['description'])) {
                    
                    $data['DESCRIPTION'] = $inputParam['description'];
                    
                    if (Lang::isUseMultiLang() && isset($inputParam['pfTranslationValue'])) {
                        $pfTranslationValue = json_decode($inputParam['pfTranslationValue'], true);
                        
                        if (isset($pfTranslationValue['value']['DESCRIPTION'])) {
                            $isTranslationValueSave = true;
                            $translationValue['DESCRIPTION'] = $pfTranslationValue['value']['DESCRIPTION'];
                        }
                    }
                }
                
                if (issetParam($paramData['parentId'])) {
                    $data['PARENT_ID'] = $paramData['parentId'];
                }
                
                if (issetParam($paramData['name2'])) {
                    $data['NAME2'] = $paramData['name2'];
                }
                
                if (issetParam($paramData['wfmStatusId'])) {
                    $data['WFM_STATUS_ID'] = $paramData['wfmStatusId'];
                }
                
                if (issetParam($paramData['orderNumber'])) {
                    $data['ORDER_NUMBER'] = $paramData['orderNumber'];
                }
                
                if (issetParam($paramData['parentOrderNumber'])) {
                    $data['PARENT_ORDER_NUMBER'] = $paramData['parentOrderNumber'];
                }
                
                $data['SCENARIO_ID'] = $scenarioId;
                
                foreach ($kpiData as $k => $row) {

                    $columnName     = Input::param($row[0]);
                    $defaultTplId   = issetParam($paramData['kpiDmDtl.defaultTplId'][$k][0]);
                    $templateId     = $paramData['kpiDmDtl.kpiTemplateId'][$k][0];
                    $realTemplateId = $templateId;
                    $dimensionId    = $paramData['kpiDmDtl.dimensionId'][$k][0];
                    $factType       = issetParam($paramData['kpiDmDtl.factType'][$k][0]);
                    $value          = isset($kpiFact[$k]) ? $kpiFact[$k][0] : null; 
                    
                    if (isset($paramData['kpiDmDtl.id'][$k][0])) {
                        $recordId = $paramData['kpiDmDtl.id'][$k][0];
                    }
                    
                    if ($defaultTplId) {
                        
                        if (!isset($paramData['kpiDmDtl.kpiObjectType'][$k])) {
                            
                            $defaultTplData[$defaultTplId]['dimId'] = $dimensionId;
                            $defaultTplData[$defaultTplId]['rootTplId'] = $paramData['kpiDmDtl.rootTemplateId'][$k][0];
                        }
                        
                    } else {
                        $data['TEMPLATE_ID'] = $templateId;
                    }
                    
                    $isEdit      = (isset($paramData['kpiDmDtl.id']) && $paramData['kpiDmDtl.id'][$k][0] != '');
                    $indicatorId = $paramData['kpiDmDtl.indicatorId'][$k][0];

                    if (isset($paramData['kpiDmDtl.kpiObjectType'][$k])) {

                        if (isset($kpiFact[$k])) {
                            
                            $kpiObjectType = Input::param($paramData['kpiDmDtl.kpiObjectType'][$k][0]);
                            
                            foreach ($kpiFact[$k] as $kkey => $kpiRow) {

                                if ($kpiRow != '' && $columnName) {
                                    
                                    $objectRowId         = $rowId;
                                    $templateId          = $realTemplateId;
                                    $kpiRowSplit         = explode('~~~', $kpiRow);
                                    $isAddDmMartRelation = true;

                                    if (!isset($kpiRowSplit[1])) {
                                        continue;
                                    }

                                    if (isset($kpiRowSplit[3]) && $kpiRowSplit[3]) {

                                        $savedDtlArr = explode('|', Input::param($kpiRowSplit[3]));

                                        $savedDtlDmMartId = $savedDtlArr[0];
                                        $savedRelationId = $savedDtlArr[1];
                                        $isAddDmMartRelation = false;

                                        if (isset($kpiRowSplit[4]) && $kpiRowSplit[4] == 'removed') {

                                            $idPh = $this->db->Param(0);
                                            $this->db->Execute("DELETE FROM KPI_DM_MART WHERE ID = $idPh", array($savedDtlDmMartId));
                                            $this->db->Execute("DELETE FROM EA_RELATION WHERE ID = $idPh", array($savedRelationId));
                                            $this->db->Execute("DELETE FROM KPI_DM_MART WHERE RECORD_ID = $idPh", array($savedRelationId));

                                            continue;
                                        }
                                    }

                                    $trgObjectId = $kpiRowSplit[0];
                                    $trgTemplateId = issetParam($kpiRowSplit[2]);

                                    if ($isAddDmMartRelation) {
                                        
                                        if ($defaultTplId) {
                                            $templateId = $paramData['kpiDmDtl.rootTemplateId'][$k][0];
                                        }
                                        
                                        if ($kpiObjectType == 'reverse') {
                                            
                                            $tmpTrgObjectId   = $trgObjectId;
                                            $tmpObjectRowId   = $objectRowId;
                                            
                                            $objectRowId      = $tmpTrgObjectId;
                                            $trgObjectId      = $tmpObjectRowId;
                                            
                                            $tmpTemplateId    = $templateId;
                                            $tmpTrgTemplateId = $trgTemplateId;
                                            
                                            $templateId       = $tmpTrgTemplateId;
                                            $trgTemplateId    = $tmpTemplateId;
                                            
                                        } else {
                                            $templateId       = $realTemplateId;
                                        }

                                        $existsRelationId = $this->model->getExistsKpiRelationModel($templateId, $objectRowId, $trgTemplateId, $trgObjectId, $indicatorId);      
                                            
                                        $dataObject = $eaRelation = array();
                                        $dataObject['DESCRIPTION'] = $kpiRowSplit[1]; 

                                        if (!$existsRelationId) {

                                            $dataObject['ID'] = getUIDAdd($kkey);
                                            $dataObject[$columnName] = $trgObjectId;
                                            $dataObject['TEMPLATE_ID'] = $templateId; 
                                            $dataObject['DIMENSION_ID'] = $dimensionId;
                                            $dataObject['INDICATOR_ID'] = $indicatorId;
                                            $dataObject['TRG_TEMPLATE_ID'] = $trgTemplateId;
                                            $dataObject['RECORD_ID'] = $objectRowId;   
                                            $dataObject['SCENARIO_ID'] = $scenarioId;

                                            if (isset($data['DEPARTMENT_ID'])) {
                                                $dataObject['DEPARTMENT_ID'] = $data['DEPARTMENT_ID'];
                                            }

                                            if (isset($data['CODE'])) {
                                                $dataObject['CODE'] = $data['CODE'];
                                            }

                                            if (isset($data['NAME'])) {
                                                $dataObject['NAME'] = $data['NAME'];
                                            }
                                            
                                            if ($defaultTplId) {
                                                $dataObject['DEFAULT_TEMPLATE_ID'] = $defaultTplId; 
                                            } 
                                            
                                            $this->db->AutoExecute('KPI_DM_MART', $dataObject);    
                                            
                                            $savedRelationId = getUIDAdd($kkey);

                                            $eaRelation['ID'] = $savedRelationId;
                                            $eaRelation['SRC_TEMPLATE_ID'] = $templateId;
                                            $eaRelation['SRC_OBJECT_ID'] = $objectRowId;
                                            $eaRelation['TRG_TEMPLATE_ID'] = $trgTemplateId;
                                            $eaRelation['TRG_OBJECT_ID'] = $trgObjectId;
                                            $eaRelation['INDICATOR_ID'] = $indicatorId;
                                            $eaRelation['SCENARIO_ID'] = $scenarioId;
                                            
                                            $this->db->AutoExecute('EA_RELATION', $eaRelation);
                                            
                                            $this->db->Execute("
                                                INSERT INTO KPI_DM_MART 
                                                (ID, TEMPLATE_ID, INDICATOR1, INDICATOR2, DIMENSION_ID, RECORD_ID, SCENARIO_ID) 
                                                SELECT 
                                                    ID_SEQ.NEXTVAL, 
                                                    KT.ID, 
                                                    ER.SRC_OBJECT_ID, 
                                                    ER.TRG_OBJECT_ID, 
                                                    100, 
                                                    ER.ID, 
                                                    $scenarioId AS SCENARIO_ID 
                                                FROM EA_RELATION ER 
                                                    INNER JOIN KPI_TEMPLATE KT ON ER.SRC_TEMPLATE_ID = KT.SRC_TEMPLATE_ID 
                                                        AND ER.TRG_TEMPLATE_ID = KT.TRG_TEMPLATE_ID 
                                                    INNER JOIN KPI_TEMPLATE_DTL KTD ON KTD.ID = KT.SRC_TEMPLATE_DTL_ID 
                                                        AND KTD.INDICATOR_ID = ER.INDICATOR_ID 
                                                WHERE ER.ID = $savedRelationId");

                                        } else {
                                            $savedRelationId = $existsRelationId;
                                        }
                                    }
                                    
                                    $subTmpKeyId = $trgObjectId;
                                    
                                    if ($kpiObjectType == 'reverse') {
                                        $subTmpKeyId = Input::param($paramData['kpiDmDtl.subTmpKeyId'][$k][$kkey]);
                                    }

                                    if (isset($paramData['kpObject.kpiDmDtl.fact1'][$k][$subTmpKeyId])) {
                                        
                                        $dataSubKpi     = array();
                                        $isSubKpiUpdate = null;
                                        $isSubKpiColumn = false;
                                        $subKpiData     = $paramData['kpObject.kpiDmDtl.fact1'][$k][$subTmpKeyId];
                                        
                                        $subTemplateId = $paramData['pfKpiTemplateId'][$k][$subTmpKeyId][0];
                                        $getSubKpiDimensionId = $this->model->getDimensionIdByTemplateIdModel($subTemplateId);  

                                        $dataSubKpi['ID'] = getUIDAdd($k);
                                        $dataSubKpi['DESCRIPTION'] = (isset($data['NAME']) && isset($dataObject['DESCRIPTION'])) ? $data['NAME'] . ' - ' . $dataObject['DESCRIPTION'] : ''; 
                                        $dataSubKpi['TEMPLATE_ID'] = $subTemplateId; 
                                        $dataSubKpi['DIMENSION_ID'] = $getSubKpiDimensionId;
                                        $dataSubKpi['RECORD_ID'] = $savedRelationId; 

                                        $dataSubKpi['INDICATOR1'] = $objectRowId;
                                        $dataSubKpi['INDICATOR2'] = $trgObjectId;
                                        $dataSubKpi['SCENARIO_ID'] = $scenarioId;
                                        
                                        if ($defaultTplId) {
                                            $dataSubKpi['DEFAULT_TEMPLATE_ID'] = $defaultTplId; 
                                        } 

                                        foreach ($subKpiData as $subKpiKey => $subKpiRow) {

                                            if ($subColumnName = issetParam($paramData['kpObject.kpiDmDtl.pdfColumnName'][$k][$subTmpKeyId][$subKpiKey][0])) {
                                                
                                                $subIndicatorId = $paramData['kpObject.kpiDmDtl.indicatorId'][$k][$subTmpKeyId][$subKpiKey][0];
                                                
                                                /*start*/
                                                if (isset($paramData['kpObject.kpiDmDtl.kpiObjectType'][$k][$subTmpKeyId][$subKpiKey])) {
                                                    
                                                    if (isset($paramData['kpObject.kpiDmDtl.fact1'][$k][$subTmpKeyId][$subKpiKey])) {
                                                        
                                                        $subKpiFactData = $paramData['kpObject.kpiDmDtl.fact1'][$k][$subTmpKeyId][$subKpiKey]; 
                                                        
                                                        foreach ($subKpiFactData as $subSubKpiKey => $subKpiRow) {
                                                            
                                                            if ($subKpiRow != '') {
                                                                
                                                                $isAddDmMartSubRelation = true;
                                                                $subKpiRowSplit = explode('~~~', $subKpiRow);

                                                                if (!isset($subKpiRowSplit[1])) {
                                                                    continue;
                                                                }

                                                                if (isset($subKpiRowSplit[3]) && $subKpiRowSplit[3]) {

                                                                    $savedSubDtlArr = explode('|', Input::param($subKpiRowSplit[3]));

                                                                    $savedSubDtlDmMartId = $savedSubDtlArr[0];
                                                                    $savedSubRelationId = $savedSubDtlArr[1];
                                                                    $isAddDmMartSubRelation = false;

                                                                    if (isset($subKpiRowSplit[4]) && $subKpiRowSplit[4] == 'removed') {

                                                                        $idPh = $this->db->Param(0);
                                                                        $this->db->Execute("DELETE FROM KPI_DM_MART WHERE ID = $idPh", array($savedSubDtlDmMartId));
                                                                        $this->db->Execute("DELETE FROM EA_RELATION WHERE ID = $idPh", array($savedSubRelationId));
                                                                        $this->db->Execute("DELETE FROM KPI_DM_MART WHERE RECORD_ID = $idPh", array($savedSubRelationId));

                                                                        continue;
                                                                    }
                                                                }
                                                                
                                                                $subTrgObjectId = $subKpiRowSplit[0];
                                                                $subTrgTemplateId = issetParam($subKpiRowSplit[2]);
                                                                
                                                                if ($isAddDmMartSubRelation) {
                                                                    
                                                                    $existsRelationId = $this->model->getExistsKpiRelationModel($subTemplateId, $savedRelationId, $subTrgTemplateId, $subTrgObjectId, $subIndicatorId);      

                                                                    $dataObject = $eaRelation = array();
                                                                    $dataObject['DESCRIPTION'] = $subKpiRowSplit[1]; 

                                                                    if (!$existsRelationId) {

                                                                        $dataObject['ID'] = getUIDAdd($kkey);
                                                                        $dataObject[$subColumnName] = $subTrgObjectId;
                                                                        $dataObject['TEMPLATE_ID'] = $subTemplateId; 
                                                                        $dataObject['DIMENSION_ID'] = $getSubKpiDimensionId;
                                                                        $dataObject['INDICATOR_ID'] = $subIndicatorId;
                                                                        $dataObject['TRG_TEMPLATE_ID'] = $subTrgTemplateId;
                                                                        $dataObject['RECORD_ID'] = $savedRelationId;  
                                                                        $dataObject['SCENARIO_ID'] = $scenarioId;

                                                                        if (isset($data['DEPARTMENT_ID'])) {
                                                                            $dataObject['DEPARTMENT_ID'] = $data['DEPARTMENT_ID'];
                                                                        }

                                                                        if (isset($data['CODE'])) {
                                                                            $dataObject['CODE'] = $data['CODE'];
                                                                        }

                                                                        if (isset($data['NAME'])) {
                                                                            $dataObject['NAME'] = $data['NAME'];
                                                                        }

                                                                        /*if ($defaultTplId) {
                                                                            $dataObject['DEFAULT_TEMPLATE_ID'] = $defaultTplId; 
                                                                        } */

                                                                        $this->db->AutoExecute('KPI_DM_MART', $dataObject);                  

                                                                        $savedSubRelationId = getUIDAdd($kkey);

                                                                        $eaRelation['ID'] = $savedSubRelationId;
                                                                        $eaRelation['SRC_TEMPLATE_ID'] = $subTemplateId;
                                                                        $eaRelation['SRC_OBJECT_ID'] = $savedRelationId;
                                                                        $eaRelation['TRG_TEMPLATE_ID'] = $subTrgTemplateId;
                                                                        $eaRelation['TRG_OBJECT_ID'] = $subTrgObjectId;
                                                                        $eaRelation['INDICATOR_ID'] = $subIndicatorId;
                                                                        $eaRelation['SCENARIO_ID'] = $scenarioId;

                                                                        $this->db->AutoExecute('EA_RELATION', $eaRelation);

                                                                        $this->db->Execute("
                                                                            INSERT INTO KPI_DM_MART 
                                                                            (ID, TEMPLATE_ID, INDICATOR1, INDICATOR2, DIMENSION_ID, RECORD_ID, SCENARIO_ID) 
                                                                            SELECT 
                                                                                ID_SEQ.NEXTVAL, 
                                                                                KT.ID, 
                                                                                ER.SRC_OBJECT_ID, 
                                                                                ER.TRG_OBJECT_ID, 
                                                                                100, 
                                                                                ER.ID, 
                                                                                $scenarioId AS SCENARIO_ID 
                                                                            FROM EA_RELATION ER 
                                                                                INNER JOIN KPI_TEMPLATE KT ON ER.SRC_TEMPLATE_ID = KT.SRC_TEMPLATE_ID 
                                                                                    AND ER.TRG_TEMPLATE_ID = KT.TRG_TEMPLATE_ID 
                                                                                INNER JOIN KPI_TEMPLATE_DTL KTD ON KTD.ID = KT.SRC_TEMPLATE_DTL_ID 
                                                                                    AND KTD.INDICATOR_ID = ER.INDICATOR_ID 
                                                                            WHERE ER.ID = $savedSubRelationId");

                                                                    } else {
                                                                        $savedSubRelationId = $existsRelationId;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                if (isset($paramData['subKpiParams'][$k][$trgObjectId][$subKpiKey][$subSubKpiKey])) {
                                                                    
                                                                    parse_str(urldecode($paramData['subKpiParams'][$k][$trgObjectId][$subKpiKey][$subSubKpiKey]), $subKpiParams);

                                                                    $dataSsKpi       = array();
                                                                    $isSsubKpiColumn = false;
                                                                    $isSsubKpiUpdate = null;
                                                                    $subKpiDataType  = $subKpiParams['param']['kpiDmDtl.factType'];
                                                                    $ssTemplateId    = $subKpiParams['param']['pfKpiTemplateId'][0];
                                                                    $ssDimensionId   = $this->model->getDimensionIdByTemplateIdModel($subTemplateId);
                                                                    
                                                                    $dataSsKpi['ID'] = getUIDAdd($k);
                                                                    $dataSsKpi['DESCRIPTION'] = (isset($data['NAME']) && isset($dataObject['DESCRIPTION'])) ? $data['NAME'] . ' - ' . $dataObject['DESCRIPTION'] : ''; 
                                                                    $dataSsKpi['TEMPLATE_ID'] = $ssTemplateId; 
                                                                    $dataSsKpi['DIMENSION_ID'] = $ssDimensionId;
                                                                    $dataSsKpi['RECORD_ID'] = $savedSubRelationId; 

                                                                    $dataSsKpi['INDICATOR1'] = $rowId;
                                                                    $dataSsKpi['INDICATOR2'] = $subTrgObjectId;
                                                                    $dataSsKpi['SCENARIO_ID'] = $scenarioId;
                                        
                                                                    foreach ($subKpiDataType as $ssKey => $ssRow) {
                                                                        
                                                                        if ($ssColumnName = issetParam($subKpiParams['param']['kpiDmDtl.pdfColumnName'][$ssKey][0])) {
                                                                            
                                                                            $ssValueRow = issetParam($subKpiParams['param']['kpiDmDtl.fact1'][$ssKey]);
                                                                            
                                                                            //$ssFactType = $ssRow[0];
                                                                            $ssValue = '';
                                                                            
                                                                            if (isset($ssValueRow[1])) {
                                                                                $ssValue = Arr::implode_r(',', $ssValueRow, true);
                                                                            } elseif (isset($ssValueRow[0])) {
                                                                                $ssValue = Input::param($ssValueRow[0]);
                                                                            }

                                                                            $dataSsKpi[$ssColumnName] = $ssValue;

                                                                            $isSsubKpiColumn = true;

                                                                            if ($ssDmMartId = issetParam($subKpiParams['param']['kpiDmDtl.id'][$ssKey][0])) {
                                                                                $isSsubKpiUpdate = $ssDmMartId;
                                                                            }
                                                                        }
                                                                    }
                                                                    
                                                                    if ($isSsubKpiColumn) {

                                                                        if (!$isSsubKpiUpdate) {

                                                                            $this->db->Execute("
                                                                                DELETE 
                                                                                FROM KPI_DM_MART 
                                                                                WHERE TEMPLATE_ID = ".$this->db->Param(0)." 
                                                                                    AND RECORD_ID = ".$this->db->Param(1)." 
                                                                                    AND INDICATOR1 = ".$this->db->Param(2)." 
                                                                                    AND INDICATOR2 = ".$this->db->Param(3)." 
                                                                                    AND ".$this->db->IfNull('SCENARIO_ID', '0')." = ".$this->db->Param(4), 
                                                                                array($ssTemplateId, $savedSubRelationId, $rowId, $subTrgObjectId, $scenarioId)
                                                                            );

                                                                            $this->db->AutoExecute('KPI_DM_MART', $dataSsKpi);

                                                                        } else {

                                                                            unset($dataSsKpi['ID']);
                                                                            unset($dataSsKpi['DESCRIPTION']);
                                                                            unset($dataSsKpi['TEMPLATE_ID']);
                                                                            unset($dataSsKpi['DIMENSION_ID']);
                                                                            unset($dataSsKpi['RECORD_ID']);
                                                                            unset($dataSsKpi['INDICATOR1']);
                                                                            unset($dataSsKpi['INDICATOR2']);

                                                                            $this->db->AutoExecute('KPI_DM_MART', $dataSsKpi, 'UPDATE', 'ID = '.$isSsubKpiUpdate);
                                                                        }
                                                                    }
                                                                    
                                                                }
                                                            }
                                                        }
                                                        
                                                    }
                                                    
                                                } else {
                                                    
                                                    if (isset($subKpiRow[1])) {
                                                        $subKpiValue = Arr::implode_r(',', $subKpiRow, true);
                                                    } else {
                                                        $subKpiValue = Input::param($subKpiRow[0]);
                                                    }

                                                    $dataSubKpi[$subColumnName] = $subKpiValue; 
                                                    
                                                    $isSubKpiColumn = true;

                                                    if ($subDmMartId = issetParam($paramData['kpObject.kpiDmDtl.id'][$k][$subTmpKeyId][$subKpiKey][0])) {
                                                        $isSubKpiUpdate = $subDmMartId;
                                                    }
                                                }
                                            }
                                        }

                                        if ($isSubKpiColumn) {

                                            if (!$isSubKpiUpdate) {

                                                $this->db->Execute("
                                                    DELETE 
                                                    FROM KPI_DM_MART 
                                                    WHERE TEMPLATE_ID = ".$this->db->Param(0)." 
                                                        AND RECORD_ID = ".$this->db->Param(1)." 
                                                        AND INDICATOR1 = ".$this->db->Param(2)." 
                                                        AND INDICATOR2 = ".$this->db->Param(3)." 
                                                        AND ".$this->db->IfNull('SCENARIO_ID', '0')." = ".$this->db->Param(4), 
                                                    array($subTemplateId, $savedRelationId, $objectRowId, $trgObjectId, $scenarioId)
                                                );

                                                $this->db->AutoExecute('KPI_DM_MART', $dataSubKpi);

                                            } else {

                                                unset($dataSubKpi['ID']);
                                                unset($dataSubKpi['DESCRIPTION']);
                                                unset($dataSubKpi['TEMPLATE_ID']);
                                                unset($dataSubKpi['DIMENSION_ID']);
                                                unset($dataSubKpi['RECORD_ID']);
                                                unset($dataSubKpi['INDICATOR1']);
                                                unset($dataSubKpi['INDICATOR2']);

                                                $this->db->AutoExecute('KPI_DM_MART', $dataSubKpi, 'UPDATE', 'ID = '.$isSubKpiUpdate);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        if ($defaultTplId) {
                            continue;
                        } 

                    } elseif (isset($paramData['kpiDmDtl.kpiGraphType'][$k])) { 
                        
                        $graphData = $paramData['kpiDmDtl.kpiGraphType'][$k][0];
                        
                        if ($graphData) {
                            
                            $graphId = $paramData['kpiDmDtl.kpiGraphId'][$k][0];
                            
                            if (!$graphId) {
                                
                                $graphId = getUID();
                                
                                $graphInsert = array(
                                    'ID'              => $graphId, 
                                    'CREATED_DATE'    => Date::currentDate(), 
                                    'CREATED_USER_ID' => Ue::sessionUserKeyId()
                                );
                                
                                $this->db->AutoExecute('KPI_DM_GRAPH', $graphInsert);
                                
                            } else {
                                
                                $graphUpdate = array(
                                    'MODIFIED_DATE'    => Date::currentDate(), 
                                    'MODIFIED_USER_ID' => Ue::sessionUserKeyId()
                                );
                                
                                $this->db->AutoExecute('KPI_DM_GRAPH', $graphUpdate, 'UPDATE', 'ID = '.$graphId);
                            }
                            
                            $graphData = Mdbpmn::graphXmlSpecialCharReplaceReverse($graphData);
                            
                            $this->db->UpdateClob('KPI_DM_GRAPH', 'GRAPH_XML', $graphData, 'ID = '.$graphId);
                            
                            if ($defaultTplId) {
                        
                                $defaultTplData[$defaultTplId][$columnName] = $graphId;
                                continue;
                                
                            } else {
                                $data[$columnName] = $graphId;
                            }
                        }
                        
                    } elseif (isset($paramData['kpiDmDtl.childObjectType'][$k])) {
                        
                        $trgObjectId     = Input::param($paramData['kpiDmDtl.childObjectPopup'][$k][0]);
                        $trgTemplateId   = Input::param($paramData['kpiDmDtl.childObjectType'][$k][0]);
                        $savedRelationId = $this->model->getExistsEaRelationModel($templateId, $rowId, $indicatorId);
                        
                        if ($trgObjectId && $trgTemplateId) {
                            
                            if (!$savedRelationId) {
                                
                                $savedRelationId = getUIDAdd($k);

                                $eaRelation['ID'] = $savedRelationId;
                                $eaRelation['SRC_TEMPLATE_ID'] = $templateId;
                                $eaRelation['SRC_OBJECT_ID'] = $rowId;
                                $eaRelation['TRG_TEMPLATE_ID'] = $trgTemplateId;
                                $eaRelation['TRG_OBJECT_ID'] = $trgObjectId;
                                $eaRelation['INDICATOR_ID'] = $indicatorId;
                                $eaRelation['SCENARIO_ID'] = $scenarioId;

                                $this->db->AutoExecute('EA_RELATION', $eaRelation);
                                
                            } else {
                                
                                $eaRelation = array(
                                    'TRG_TEMPLATE_ID' => $trgTemplateId, 
                                    'TRG_OBJECT_ID' => $trgObjectId
                                );
                                
                                $this->db->AutoExecute('EA_RELATION', $eaRelation, 'UPDATE', 'ID = ' . $savedRelationId);
                            }
                            
                        } elseif ($savedRelationId) {
                            
                            $this->db->Execute("DELETE FROM EA_RELATION WHERE ID = ".$this->db->Param(0), array($savedRelationId));
                        }
                        
                        if ($defaultTplId) {
                            
                            $defaultTplData[$defaultTplId][$columnName] = $trgObjectId;
                            continue;
                            
                        } else {
                            $data[$columnName] = $trgObjectId;
                        }
                        
                    } else {

                        if ($columnName) {

                            if ($factType == 'file') {
                                
                                if (isset($fileParamData['name']['kpiDmDtl.fact1'][$k][0]) && is_uploaded_file($fileParamData['tmp_name']['kpiDmDtl.fact1'][$k][0])) {

                                    $fileAttr['name'] = $fileParamData['name']['kpiDmDtl.fact1'][$k][0];
                                    $fileAttr['tmp_name'] = $fileParamData['tmp_name']['kpiDmDtl.fact1'][$k][0];
                                    $fileAttr['size'] = $fileParamData['size']['kpiDmDtl.fact1'][$k][0];
                                    $fileAttr['type'] = $fileParamData['type']['kpiDmDtl.fact1'][$k][0];

                                    $uploadResult = self::bpFileUpload(array('ID' => $k), $fileAttr);

                                    if ($uploadResult) {
                                        $value = $uploadResult['path'] . $uploadResult['newname'];
                                    }

                                } elseif ($prevFilePath = issetParam($postData['editfile_param']['kpiDmDtl.fact1'][$k][0])) {
                                    $value = $prevFilePath;
                                }
                                
                            } elseif ($factType == 'multi_file') {
                                
                                if (isset($fileParamData['name']['kpiDmDtl.fact1'][$k][0])) {
                                    
                                    $prevPaths = $value;
                                    $concatPaths = array();
                                    $multiFiles = $fileParamData['name']['kpiDmDtl.fact1'][$k];

                                    foreach ($multiFiles as $mk => $multiFileName) {

                                        $fileAttr['name'] = $fileParamData['name']['kpiDmDtl.fact1'][$k][$mk];
                                        $fileAttr['tmp_name'] = $fileParamData['tmp_name']['kpiDmDtl.fact1'][$k][$mk];
                                        $fileAttr['size'] = $fileParamData['size']['kpiDmDtl.fact1'][$k][$mk];
                                        $fileAttr['type'] = $fileParamData['type']['kpiDmDtl.fact1'][$k][$mk];

                                        $uploadResult = self::bpFileUpload(array('ID' => $k), $fileAttr, $mk);

                                        if ($uploadResult) {

                                            $physicalPath = $uploadResult['path'] . $uploadResult['newname'];
                                            $concatPaths[] = $physicalPath;

                                            array_push(FileUpload::$uploadedFiles, $physicalPath);
                                        } 
                                    }

                                    if ($prevPaths) {
                                        $value = $prevPaths.','.implode(',', $concatPaths);
                                    } else {
                                        $value = implode(',', $concatPaths);
                                    }
                                    
                                } elseif (isset($kpiFact[$k][0]) && isset($kpiFact[$k][1])) {
                                    $value = Input::param($kpiFact[$k][1]);
                                }
                            }
                            
                            if ($value && ($factType == 'decimal' || $factType == 'bigdecimal')) {
                        
                                $value = Number::decimal(Input::param($value));
                                $data[$columnName] = $value;

                            } elseif ($factType == 'combo' || $factType == 'multicombo' || $factType == 'multicheck') {

                                if (Lang::isUseMultiLang() && isset($paramData['kpiDmDtl.fact1_isTranslate'][$k][0])) {

                                    $isTranslationValueSave = true;
                                    $value = '';

                                    if (isset($kpiFact[$k]) && $kpiFact[$k]) {

                                        $tmpJson = array();
                                        $separator = Mdcommon::$separator.Mdcommon::$separator;

                                        foreach ($kpiFact[$k] as $transVal) {

                                            $transValArr = explode($separator, $transVal);
                                            $value .= $transValArr[0].',';

                                            if (isset($transValArr[1])) {
                                                $transJsonArr = json_decode(html_entity_decode($transValArr[1], ENT_QUOTES, 'UTF-8'), true);

                                                foreach ($transJsonArr as $langCode => $langVal) {
                                                    if (isset($tmpJson[$langCode])) {
                                                        $tmpJson[$langCode] .= $langVal.',';
                                                    } else {
                                                        $tmpJson[$langCode] = $langVal.',';
                                                    }
                                                }
                                            }
                                        }

                                        if ($tmpJson) {

                                            foreach ($tmpJson as $tmpJsonK => $tmpJsonV) {
                                                $tmpJson[$tmpJsonK] = rtrim($tmpJsonV, ',');
                                            }

                                            $translationValue[$columnName] = $tmpJson;
                                        }

                                        $value = rtrim($value, ',');
                                    }

                                } elseif (isset($kpiFact[$k])) {
                                    $value = Arr::implode_r(',', $kpiFact[$k], true);
                                }
                                
                                $data[$columnName] = $value;
                                
                            } elseif ($factType == 'text' || $factType == 'description' || $factType == 'description_auto') {
                                
                                if (Lang::isUseMultiLang()) {
                                    $isTranslationValueSave = true;
                                }
                                
                                $translatedVal = self::translateFieldSetValue(
                                    array('IS_TRANSLATE' => '1', 'COLUMN_NAME' => $columnName, 'CHOOSE_TYPE' => ''), 
                                    isset($paramData['kpiDmDtl.fact1_translation'][$k][0]), 
                                    issetParam($paramData['kpiDmDtl.fact1_translation'][$k][0]), 
                                    true, 
                                    $value, 
                                    issetParam($paramData['kpiDmDtl.pfTranslationValue']), 
                                    $translationValue 
                                );

                                if ($translatedVal['isSet']) {
                                    $value = $translatedVal['value'];
                                    $data[$columnName] = $value;
                                }  
                                
                            } else {
                                $value = is_array($value) ? Arr::implode_r(',', $value, true) : Input::param($value);
                                $data[$columnName] = $value;
                            }
                            
                            if ($defaultTplId) {
                                
                                if (isset($data[$columnName])) {
                                    
                                    $defaultTplData[$defaultTplId][$columnName] = $data[$columnName];
                                    unset($data[$columnName]);
                                }

                                continue;
                            }
                        }                    
                    }
                }

                if ($data && isset($data['TEMPLATE_ID'])) {
                    
                    $savedId = $this->model->getExistsKpiDmMartModel($rowId, $data['TEMPLATE_ID']);

                    if ($savedId) {

                        $this->db->AutoExecute('KPI_DM_MART', $data, 'UPDATE', 'ID = '.$savedId);

                    } else {
                        
                        $savedId = getUID();
                        
                        $data['ID']           = $savedId;
                        $data['RECORD_ID']    = $rowId;
                        $data['DIMENSION_ID'] = $dimensionId;

                        $this->db->AutoExecute('KPI_DM_MART', $data);
                    }
                    
                    if (Lang::isUseMultiLang() && isset($isTranslationValueSave)) {
                        
                        if ($translationValue) {
                            
                            $TRANSLATION_VALUE = self::setPfTranslationValue(null, $translationValue);
                            
                            $this->db->UpdateClob('KPI_DM_MART', 'TRANSLATION_VALUE', $TRANSLATION_VALUE, 'ID = '.$savedId);
                            
                        } /*else {
                            $this->db->AutoExecute('KPI_DM_MART', array('TRANSLATION_VALUE' => null), 'UPDATE', 'ID = '.$savedId);
                        }*/
                    }
                    
                    $this->saveSubKpiTemplate($rowId, $data['TEMPLATE_ID'], $paramData);
                }
                
                if ($defaultTplData) {
                    
                    $defaultTplSave = array();
                    
                    if (isset($data['DEPARTMENT_ID'])) {
                        $defaultTplSave['DEPARTMENT_ID'] = $data['DEPARTMENT_ID'];
                    }

                    if (isset($data['CODE'])) {
                        $defaultTplSave['CODE'] = $data['CODE'];
                    }

                    if (isset($data['NAME'])) {
                        $defaultTplSave['NAME'] = $data['NAME'];
                    }

                    if (isset($data['PARENT_ID'])) {
                        $defaultTplSave['PARENT_ID'] = $data['PARENT_ID'];
                    }

                    if (isset($data['NAME2'])) {
                        $defaultTplSave['NAME2'] = $data['NAME2'];
                    }

                    if (isset($data['WFM_STATUS_ID'])) {
                        $defaultTplSave['WFM_STATUS_ID'] = $data['WFM_STATUS_ID'];
                    }

                    if (isset($data['ORDER_NUMBER'])) {
                        $defaultTplSave['ORDER_NUMBER'] = $data['ORDER_NUMBER'];
                    }

                    if (isset($data['PARENT_ORDER_NUMBER'])) {
                        $defaultTplSave['PARENT_ORDER_NUMBER'] = $data['PARENT_ORDER_NUMBER'];
                    }
                    
                    $defaultTplSave['SCENARIO_ID'] = $scenarioId;
                    
                    foreach ($defaultTplData as $dfltTplId => $defaultTplRow) {
                        
                        $tplId     = $dfltTplId;
                        $dimId     = $defaultTplRow['dimId'];
                        $rootTplId = $defaultTplRow['rootTplId'];
                        
                        unset($defaultTplRow['dimId']);
                        unset($defaultTplRow['rootTplId']);
                        
                        $dfData = $defaultTplSave + $defaultTplRow;
                        
                        $savedId = $this->model->getExistsKpiDmMartModel($rowId, $rootTplId, $tplId);
                        
                        if ($savedId) {

                            $this->db->AutoExecute('KPI_DM_MART', $dfData, 'UPDATE', 'ID = '.$savedId);

                        } else {

                            $dfData['ID']           = getUID();
                            $dfData['RECORD_ID']    = $rowId;
                            $dfData['DIMENSION_ID'] = $dimId;
                            $dfData['TEMPLATE_ID']  = $rootTplId;
                            $dfData['DEFAULT_TEMPLATE_ID'] = $tplId;

                            $this->db->AutoExecute('KPI_DM_MART', $dfData);
                        }
                    }
                }

            } elseif (isset($paramData['kpiDmDtl.indicatorColumnName']) && isset($paramData['kpiDmDtl.fact1']) && isset($paramData['kpiDmDtl.kpiTemplateId']) && $rowId) {

                $pfKpiTemplateIds = $paramData['pfKpiTemplateId'];
                $addonSaveData = array();

                if (isset($paramData['departmentId']) && $paramData['departmentId']) {
                    $addonSaveData['DEPARTMENT_ID'] = $paramData['departmentId'];
                }

                if (isset($paramData['code']) && $paramData['code']) {
                    $addonSaveData['CODE'] = $paramData['code'];
                }

                if (isset($paramData['name']) && $paramData['name']) {
                    $addonSaveData['NAME'] = $paramData['name'];
                }

                foreach ($pfKpiTemplateIds as $pfKpiTemplateIdKey => $pfKpiTemplateId) {

                    $this->db->Execute("DELETE FROM KPI_DM_MART WHERE RECORD_ID = ".$this->db->Param(0)." AND TEMPLATE_ID = ".$this->db->Param(1), array($rowId, $pfKpiTemplateId));

                    $indicatorColumnData = $paramData['kpiDmDtl.indicatorColumnName'][$pfKpiTemplateId];
                    $kpiPivotHeadData    = $paramData['kpiPivotHead'][$pfKpiTemplateId];

                    foreach ($kpiPivotHeadData as $kpiPivotHeadFact => $kpiPivotHead) {

                        $saveData = array();

                        foreach ($kpiPivotHead as $headKey => $kpiPivotRowId) {

                            $saveData['ID']            = getUID();
                            $saveData['RECORD_ID']     = $rowId;
                            $saveData['HDR_RECORD_ID'] = $kpiPivotRowId;
                            $saveData['FACT_CODE']     = $kpiPivotHeadFact;
                            $saveData['COLUMN_INDEX']  = ++$headKey;
                            $saveData['TEMPLATE_ID']   = $pfKpiTemplateId;
                            $saveData['TEMPLATE_CODE'] = $paramData['pfKpiTemplateCode'][$pfKpiTemplateIdKey];

                            foreach ($indicatorColumnData as $indicatorKey => $indicatorColumnName) {
                                if ($indicatorColumnName) {
                                    $saveData[$indicatorColumnName] = Number::decimal(issetParam($paramData['kpiDmDtl.'.$kpiPivotHeadFact][$pfKpiTemplateId][$indicatorKey][$kpiPivotRowId]));
                                }
                            }

                            $this->db->AutoExecute('KPI_DM_MART', $saveData + $addonSaveData);
                        }
                    }
                }   
            }

            return true;
            
        } catch (Exception $ex) {
            return false;
        }
    }
    
    public function runAdditionalProcess($processCode, $inputParam) {
        
        if ($processCode == 'metaFixingApprove') {
            
            if (isset($inputParam['setRowWfmStatus'][0])) {
                
                $this->load->model('mdupgrade', 'middleware/models/');
                
                $setRowWfmStatus = $inputParam['setRowWfmStatus'];
                $this->model->updatePatchMetaBugFixModel($setRowWfmStatus);
            }
            
        } elseif ($processCode == 'metaFixingImport') {
            
            if (isset($inputParam['setRowWfmStatus'][0])) {
                
                $this->load->model('mdupgrade', 'middleware/models/');
                
                $setRowWfmStatus = $inputParam['setRowWfmStatus'];
                $this->model->importPatchMetaBugFixModel($setRowWfmStatus);
            }
            
        } elseif ($processCode == 'metaInstallSent') {
            
            if (isset($inputParam['setRowWfmStatus'][0])) {
                
                $this->load->model('mdupgrade', 'middleware/models/');
                
                $setRowWfmStatus = $inputParam['setRowWfmStatus'];
                $this->model->sendPatchMetaBugFixModel($setRowWfmStatus);
            }
        }
        
        return true;
    }
    
    public function saveSubKpiTemplate($rowId, $rootTemplateId, $paramData) {
        
        if (isset($paramData['field.kpiDmDtl.indicatorId'])) {
            
            try {
                
                $currentDate = Date::currentDate();
                $sessionUserKeyId = Ue::sessionUserKeyId();
                $indicators = $paramData['field.kpiDmDtl.indicatorId'];
                $n = 1;
                
                foreach ($indicators as $rootIndicatorId => $rows) {
                    
                    $this->db->Execute("DELETE FROM KPI_DM_DTL WHERE BOOK_ID = ".$this->db->Param(0)." AND ROOT_INDICATOR_ID = ".$this->db->Param(1), array($rowId, $rootIndicatorId));
                    
                    foreach ($rows as $k => $row) {
                        
                        $data = array();
                        $isAdd = false;
                        
                        for ($i = 1; $i <= 10; $i++) {
                            
                            $value = issetParam($paramData['field.kpiDmDtl.fact' . $i][$rootIndicatorId][$k][0]);
                            
                            if ($value != '') {
                                $data['FACT' . $i] = is_array($value) ? Arr::implode_r(',', $value, true) : Input::param($value);
                                
                                $isAdd = true;
                            }
                        }
                        
                        if ($isAdd) {
                            
                            $data['ID'] = getUIDAdd($n);
                            $data['BOOK_ID'] = $rowId;
                            $data['INDICATOR_ID'] = Input::param($row[0]);
                            $data['TEMPLATE_DTL_ID'] = Input::param($paramData['field.kpiDmDtl.templateDtlId'][$rootIndicatorId][$k][0]);
                            $data['ROOT_TEMPLATE_ID'] = $rootTemplateId;
                            $data['ROOT_INDICATOR_ID'] = $rootIndicatorId; 
                            $data['CREATED_DATE'] = $currentDate;
                            $data['CREATED_USER_ID'] = $sessionUserKeyId;
                            $data['SUB_TEMPLATE_ID'] = Input::param($paramData['fieldKpiTemplateId'][$rootIndicatorId][0]);
                            
                            $this->db->AutoExecute('KPI_DM_DTL', $data);
                        }
                        
                        $n++;
                    }
                }
                
            } catch (Exception $ex) {
                return false;
            }
        }
        
        return true;
    }
    
    public function deleteUploadedFiles($uploadedFiles) {
        if (count($uploadedFiles) > 0) {
            foreach ($uploadedFiles as $k => $file) {
                @unlink($file);
            }
        }
        
        return true;
    }
    
    public function bpFileUpload($input, $fileAttr, $prefix = 1) {
        
        if (isset($input['uploadPath']) && $input['uploadPath']) {
            $filePath = $input['uploadPath'];
        } else {
            $filePath = self::bpUploadGetPath();
        }
        
        if (isset($input['newFileName']) && $input['newFileName']) {
            $newFileName = $input['newFileName'];
        } else {
            $newFileName = 'file_' . getUID() . '_' . $input['ID'] . $prefix;
        }
        
        $fileName      = $fileAttr['name'];
        $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
        $fileName      = $newFileName . '.' . $fileExtension;
        $typeCode      = issetParam($input['META_TYPE_CODE']);
        
        if ($typeCode == 'multi_file_thumb' || $typeCode == 'multi_file_style') {
            $input['IS_THUMBNAIL'] = '1';
        }
        
        if (in_array($fileExtension, array('jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff'))) {
            
            Upload::$File = $fileAttr;
            Upload::$method = 0;
            Upload::$SavePath = $filePath;
            Upload::$NewWidth = 2000;
            Upload::$NewName = $newFileName;
            Upload::$OverWrite = true;
            Upload::$CheckOnlyWidth = true;
                
            $uploadError = Upload::UploadFile();

            if ($uploadError == '') {
                
                $response = array(
                    'size'      => $fileAttr['size'], 
                    'extension' => $fileExtension, 
                    'name'      => $fileAttr['name'], 
                    'path'      => $filePath, 
                    'newname'   => $fileName
                );
                
                if (issetParam($input['IS_THUMBNAIL']) == '1') {
                    
                    includeLib('Image/image-magician/php_image_magician');
                    
                    $path = $filePath . 'thumb';

                    if (!is_dir($path)) {
                        mkdir($path, 0777);
                    }
                    
                    $image = new imageLib($filePath . $fileName);
                    
                    $smallThumb = $path . '/' . str_replace('.'.$fileExtension, '_sm.'.$fileExtension, $fileName);
                    $middleThumb = $path . '/' . str_replace('.'.$fileExtension, '_mid.'.$fileExtension, $fileName);

                    $image->resizeImage(100, 200, 'landscape', true);
                    $image->saveImage($smallThumb, 95);

                    $image->resizeImage(400, 500, 'landscape', true);
                    $image->saveImage($middleThumb, 95);
                    
                    $response['smallThumb'] = $smallThumb;
                    $response['middleThumb'] = $middleThumb;
                    
                    array_push(FileUpload::$uploadedFiles, $smallThumb);
                    array_push(FileUpload::$uploadedFiles, $middleThumb);
                }
                
                return $response;
            }
            
        } else {
            
            FileUpload::SetFileName($fileName);
            FileUpload::SetTempName($fileAttr['tmp_name']);
            FileUpload::SetUploadDirectory($filePath);
            FileUpload::SetValidExtensions(explode(',', Config::getFromCache('CONFIG_FILE_EXT')));
            FileUpload::SetMaximumFileSize(FileUpload::GetConfigFileMaxSize());
            $uploadResult = FileUpload::UploadFile();
            
            if ($uploadResult) {
                
                $response = array(
                    'size'      => $fileAttr['size'], 
                    'extension' => $fileExtension, 
                    'name'      => $fileAttr['name'], 
                    'path'      => $filePath, 
                    'newname'   => $fileName
                );
                
                if (issetParam($input['IS_THUMBNAIL']) == '1' && in_array($fileExtension, array('doc', 'docx', 'xls', 'xlsx', 'csv', 'ppt', 'pptx', 'pdf'))) {
                    
                    $thumbConvertUrl = Config::getFromCache('thumbSourceFileUrl');
                    $convertFileToThumbUrl = Config::getFromCache('convertFileToThumbUrl');
                    
                    if ($thumbConvertUrl && $convertFileToThumbUrl) {
                        
                        $convertUrl = $convertFileToThumbUrl . $thumbConvertUrl . $filePath . $fileName . '&pagenumber=1&width=400';
                        
                        $thumbData = getImageDataByCurl($convertUrl);
        
                        if ($thumbData['status'] == 'success') {
                            
                            $thumbPath = $filePath . 'thumb';

                            if (!is_dir($thumbPath)) {
                                mkdir($thumbPath, 0777);
                            }
                    
                            $thumbFilePath = $thumbPath.'/'.$newFileName.'_mid.jpeg';
                            $fileWrite = @file_put_contents($thumbFilePath, $thumbData['data']);
                            
                            if ($fileWrite) {
                                
                                includeLib('Image/image-magician/php_image_magician');
                                
                                $image = new imageLib($thumbFilePath);
                                
                                $smallThumb = $thumbPath.'/'.$newFileName.'_sm.jpeg';

                                $image->resizeImage(100, 200, 'landscape', true);
                                $image->saveImage($smallThumb, 95);

                                $response['smallThumb'] = $smallThumb;
                                $response['middleThumb'] = $thumbFilePath;

                                array_push(FileUpload::$uploadedFiles, $smallThumb);
                                array_push(FileUpload::$uploadedFiles, $thumbFilePath);
                                
                            } else {
                                
                                @unlink($filePath . $fileName);
                                Message::add('e', 'Thumbnail файл үүсгэж чадсангүй!', 'back'); exit;
                            }
                            
                        } else { 
                            @unlink($filePath . $fileName);
                            Message::add('e', 'Convert thumbnail api: '.$thumbData['message'], 'back'); exit;
                        }
                    }
                }
                
                if (in_array($fileExtension, array('mp3', 'mp4', 'mov', 'wmv', 'flv', 'avi', 'avchd', 'webm', 'mkv', 'wav', '3gp', 'mpeg', 'mpg'))) {
                    
                    includeLib('Detect/getid3/getid3');
                    $getID3 = new getID3;
                    $fileInfo = $getID3->analyze($filePath . $fileName);
                    
                    if (isset($fileInfo['playtime_seconds'])) {
                        $response['length'] = intval($fileInfo['playtime_seconds']);
                    }
                }
                
                return $response;
            } 
        }
        
        return false;
    }
    
    public function bpUploadGetPath($path = '') {
        
        $path = ($path) ? $path : UPLOADPATH . Mdwebservice::$uploadedPath;
        
        if (Config::getFromCache('CONFIG_FILE_UPLOAD_DATE_FOLDER')) {
            
            $date = Date::currentDate('Ym');
            $newPath = $path . $date . '/';
            
            if (!is_dir($newPath)) {
                mkdir($newPath, 0777, true);
            }
            
            return $newPath;
        } 
        
        return $path;
    }
    
    public function bpUploadCustomPath($customPath) {
        
        if (Config::getFromCache('CONFIG_FILE_UPLOAD_DATE_FOLDER')) {
            
            $date    = Date::currentDate('Ym');
            $newPath = UPLOADPATH . Mdwebservice::$uploadedPath . $date . $customPath;
            
            if (!is_dir($newPath)) {
                mkdir($newPath, 0777, true);
            }
            
            return $newPath;
            
        } else {
            $path = UPLOADPATH . ltrim($customPath, '/');
        }
        
        return $path;
    }

    public function getOnlyShowParamAndHiddenPrint($data, $fillParamData) {

        $onlyShow = $featureParam = array();
        $hiddenParam = '';

        foreach ($data as $row) {
            
            if ($row['IS_SHOW'] == '1') {
                
                if ($row['FEATURE_NUM'] != '') {
                    array_push($featureParam, $row);
                } else {
                    array_push($onlyShow, $row); 
                }
                
            } else {
                
                $typeCode = $row['META_TYPE_CODE'];
                $defaultValue = Mdmetadata::setDefaultValue($row['DEFAULT_VALUE']);
                $paramRealPath = $row['PARAM_REAL_PATH'];
                $paramName = $row['META_DATA_CODE'];
                $lowerParamName = $row['LOWER_PARAM_NAME'];
                $fillParamVal = self::findRowKeyValFillData($fillParamData, $lowerParamName);

                $attrArray = array(
                    'name' => 'param[' . $paramName . ']',
                    'value' => $defaultValue,
                    'data-path' => $paramRealPath
                );
                
                if ($typeCode == 'pftranslationvalue') {
                    
                    if ($fillParamVal && !is_array($fillParamVal)) {
                        $attrArray['value'] = str_replace('&quot;', '\"', $fillParamVal);
                    }
                        
                    $attrArray['style'] = 'display: none';
                    $attrArray['spellcheck'] = 'false';
                    $attrArray['aria-hidden'] = 'true';
                    $hiddenParam .= Form::textArea($attrArray);
                    
                } else {
                    
                    if ($fillParamVal != '' && !is_array($fillParamVal)) {
                        
                        if ($typeCode == 'boolean') {
                    
                            if ($fillParamVal == '1') {
                                $attrArray['value'] = '1';
                            } elseif ($fillParamVal == '0') {
                                $attrArray['value'] = '0';
                            }

                        } else {
                            $attrArray['value'] = $fillParamVal;
                        }
                    }

                    $hiddenParam .= Form::hidden($attrArray);
                }
            }
        }

        return array(
            'onlyShow' => $onlyShow,
            'hiddenParam' => $hiddenParam,
            'featureParam' => $featureParam
        );
    }
    
    public function renderFeatureParam($methodId, $paramData, $fillParamData, $isDialog = false) {
        if (!isset($this->view)) {
            $this->view = new View();
        }
        
        $this->view->isDialog = $isDialog;
        $this->view->methodId = $methodId;
        $this->view->fillParamData = $fillParamData;
        $this->view->paramData = $paramData;

        return $this->view->renderPrint('sub/featureParam', self::$viewPath);   
    }
    
    public function renderViewFeatureParam($methodId, $paramData, $fillParamData, $isDialog = false) {
        if (!isset($this->view)) {
            $this->view = new View();
        }
        
        $this->view->isDialog = $isDialog;
        $this->view->methodId = $methodId;
        $this->view->fillParamData = $fillParamData;
        $this->view->paramData = $paramData;

        return $this->view->renderPrint('sub/view/featureParam', self::$viewPath);   
    }

    public function renderProcessThemeParam($methodId, $paramData, $fillParamData, $methodRow, $isEditMode) {

        $this->load->model('mdwebservice', 'middleware/models/');
        if (!isset($this->view)) {
            $this->view = new View();
        }

        $this->view->isEditMode = $isEditMode;
        $this->view->methodId = $methodId;
        $this->view->fillParamData = $fillParamData;
        $this->view->paramData = $paramData;
        $this->view->methodRow = $methodRow;
        $this->view->refMetaGroupId = $this->methodRow['REF_META_GROUP_ID'];
        $this->view->sourceId = $this->fillParamData['id'];
        $this->view->owlCarouselphotoBtn = '';
        $this->view->metaValuePhotoRows = false;
        $this->view->processPhoto = '';
        $this->view->defaultPhoto = 'middleware/assets/theme/shop/img/photo_thumb_big.png';

        $this->load->model('mdmetadata', 'middleware/models/');
        if ($this->view->isEditMode == true and $this->view->refMetaGroupId != '' and $this->view->sourceId != '') {
            $this->view->metaValuePhotoRows = $this->model->getMetaDataValuePhotosModel($this->view->refMetaGroupId, $this->view->sourceId);
        }


        $this->load->model('mdwebservice', 'middleware/models/');
        $this->view->processFieldMap = $this->model->getProcessFieldMapModel($this->view->methodId, $this->methodRow['THEME_CODE']);
        $processTheme = file_get_contents(BASEPATH . 'middleware/views/webservice/themes/' . $this->methodRow['THEME_CODE'] . '/theme.html');
        $this->view->addOn = '';
        
        if ($this->view->methodRow['REF_META_GROUP_ID'] != "" and $this->view->methodRow['IS_ADDON_PHOTO'] == '1') {
            $this->view->processPhoto = $this->view->renderPrint('addon/shop/renderBpPhoto', self::$viewPath);
        }
        $searchReplace = array(
            '{process-theme-id}',
            '{process-photo}'
        );

        $replaced = array(
            $this->view->methodId,
            $this->view->processPhoto
        );

        $this->tabButton = $this->tab = $this->tabContent = '';
        $tabName = '';
        $tabIndex = 1;
        $countField = count($this->view->processFieldMap['detial']) - 1;

        foreach ($this->view->processFieldMap['header'] as $k => $row) {
            $param = self::processThemeGetRenderParamControlData($this->view->paramData['onlyShow'], $row);
            array_push($searchReplace, '{'.$row['THEME_FIELD'].'}');
            array_push($replaced, self::getProcessThemeControl($this->view->methodId, $param, $this->view->fillParamData));
        }
        
        array_push($searchReplace, '{hidden-params}');
        array_push($replaced, $this->view->paramData['hiddenParam'] . '<input type="hidden" name="isEditMode" name="isEditMode" value="' . $isEditMode . '">');
        
        foreach ($this->view->processFieldMap['detial'] as $k => $row) {
            if (empty($k)){
                $tabName = $row['TAB_NAME'];
                $this->tabButton .= '<li class="nav-item"><a href="#tab' . $tabIndex . '" data-toggle="tab" aria-expanded="' . ($tabIndex == 1 ? 'true' : 'false') . '" class="nav-link ' . ($tabIndex == 1 ? 'active' : '') . '">' . $row['TAB_NAME'] . '</a></li>';
                $this->tabContent .= '<div class="tab-pane ' . ($tabIndex == 1 ? 'active' : '') . '" id="tab' . $tabIndex . '">';
                $tabIndex++;
            } else if ($tabName != $row['TAB_NAME']) {
                $this->tabButton .= '<li class="nav-item"><a href="#tab' . $tabIndex . '" data-toggle="tab" aria-expanded="' . ($tabIndex == 1 ? 'true' : 'false') . '" class="nav-link ' . ($tabIndex == 1 ? 'active' : '') . '">' . $row['TAB_NAME'] . '</a></li>';
                $this->tabContent .= '</div>';
                $this->tabContent .= '<div class="tab-pane ' . ($tabIndex == 1 ? 'active' : '') . '" id="tab' . $tabIndex . '">';
                $tabIndex++;
            }
            
            $param = self::processThemeGetRenderParamControlData($this->view->paramData['onlyShow'], $row);
            $this->tabContent .= self::getProcessThemeControl($this->view->methodId, $param, $this->view->fillParamData);
            
            if ($countField == $k) {
                $this->tabContent .= '</div>';
            }
            
            $tabName = $row['TAB_NAME'];
        }
        
        $this->tab = '<div class="tabbable-line">';
            $this->tab .= '<ul class="nav nav-tabs">' . $this->tabButton . '</ul>';
            $this->tab .= '<div class="tab-content">' . $this->tabContent . '</div>';
        $this->tab .= '</div>';
        
        array_push($searchReplace, '{group-position}');
        array_push($replaced, $this->tab);
        $string = str_replace($searchReplace, $replaced, $processTheme);
        $string = preg_replace('/\{header-position-[0-9]\}/', '', $string);
        
        return $string;
    }
    
    public function processThemeGetRenderParamControlData($paramList, $param) {
        foreach ($paramList as $row) {
            if ($row['META_DATA_CODE'] == $param['PROCESS_FIELD']) {
                return $row;
            }
        }
    }
    
    public function getProcessThemeControl($methodId, $data, $fillParamData) {
        
        $this->load->model('mdwebservice', 'middleware/models/');
        $paramRealPath = (isset($data['PARAM_REAL_PATH ']) != null ? $data['PARAM_REAL_PATH '] : '');
        $control = self::renderParamControl($methodId, $data, 'param[' . $data['META_DATA_CODE'] . ']', $paramRealPath, $fillParamData);
        if ($data['META_TYPE_CODE'] === 'boolean') {
            return ' <label class="checkbox-inline" for="param[' . $data['PARAM_REAL_PATH'] . ']" data-label-path="' . $data['PARAM_REAL_PATH'] . '">' . $control . ' ' . $data['META_DATA_NAME'] . '</label>';
        } else {
            return '<div class="form-group row fom-row" data-section-path="' . $data['PARAM_REAL_PATH'] . '"><label for="param[' . $data['PARAM_REAL_PATH'] . ']" data-label-path="' . $data['PARAM_REAL_PATH'] . '">' . $data['META_DATA_NAME'] . '</label> ' . $control . '</div>';
        }
        
        return false;
    }

    public function getFeatureCellIndex($headerRow, $cellIndex) {
        $row = Arr::multidimensional_search($headerRow, array('FEATURE_NUM' => $cellIndex));
        if ($row) {
            return $row;
        }
        return false;
    }

    public function checkParamDefaultValues($processMetaDataId, $paramRealPath, $lookupMetaDataId) {
        if (empty($processMetaDataId) && empty($paramRealPath)) {
            return false;
        }
        
        global $db;
        
        $row = $db->GetRow("
            SELECT 
                ID 
            FROM META_PARAM_VALUES 
            WHERE MAIN_META_DATA_ID = ".$db->Param(0)." 
                AND LOOKUP_META_DATA_ID = ".$db->Param(1)."      
                AND LOWER(PARAM_PATH) = ".$db->Param(2), 
            array($processMetaDataId, $lookupMetaDataId, strtolower($paramRealPath))
        );

        if ($row) {
            return true;
        }
        return false;
    }

    public function getParamDefaultValues($processMetaDataId, $paramRealPath, $lookupMetaDataId) {
        
        global $db;
        
        $data = $db->GetAll("
            SELECT 
                VALUE_ID  
            FROM META_PARAM_VALUES 
            WHERE MAIN_META_DATA_ID = ".$db->Param(0)."  
                AND LOOKUP_META_DATA_ID = ".$db->Param(1)." 
                AND LOWER(PARAM_PATH) = ".$db->Param(2), 
            array($processMetaDataId, $lookupMetaDataId, strtolower($paramRealPath))
        );

        return $data;
    }

    public function showBanner($metaDataId, $positionType, $isShow = true) {
        $this->load->model('mdwebservice', 'middleware/models/');
        return $this->model->showBannerModel($metaDataId, $positionType, $isShow);
    }
    
    public function renderDtlGroup() {

        $postData = Input::postData();

        $processMetaDataId = Input::param($postData['processMetaDataId']);
        $paramRealPath = Input::param($postData['paramRealPath']);
        $uniqId = Input::param($postData['uniqId']);

        if ($parentProcessRow = (strpos($paramRealPath, '.') === false ? $this->model->isFirstLevelProcessModel($processMetaDataId, $paramRealPath) : $this->model->isDepthLevelProcessModel($processMetaDataId, $paramRealPath))) {
            
            $fillType = $postData['fillType'];
            $postData['parentId'] = $parentProcessRow['ID'];
            
            $childData = $this->model->onlyShowGroupParamsDataModel($processMetaDataId, $parentProcessRow['ID']);
            
            $row = array(
                'id' => $parentProcessRow['ID'],
                'code' => $paramRealPath,
                'recordtype' => 'rows',
                'isShowAdd' => $parentProcessRow['IS_SHOW_ADD'],
                'isShowDelete' => $parentProcessRow['IS_SHOW_DELETE'],
                'isShowMultiple' => $parentProcessRow['IS_SHOW_MULTIPLE'],
                'widgetCode' => $parentProcessRow['WIDGET_CODE'],
                'jsonConfig' => $parentProcessRow['JSON_CONFIG'],
                'data' => $childData
            );

            $getDtlRowsPopup = array();
            
            if (Input::postCheck('pageSize')) {
                
                $returnData = $this->model->getShowInputParams($processMetaDataId);
                
                if (isset($returnData['pagerConfig']) && count($returnData['pagerConfig'])) {
                    
                    $cacheId = $uniqId;
                    $groupFieldPath = Input::post('groupPath');
                    $groupFieldPathLower = strtolower($groupFieldPath);
                    $pageSize = Input::post('pageSize');
                    
                    $cacheParams = Mdcache::getDetailRowsFromCache($cacheId);
                    $cacheArray = $cacheParams['cacheArray'];
                    
                    $isCachedGroup = false; 
                    
                    if (isset($cacheArray[$groupFieldPathLower])) {
                        
                        if (Input::postCheck('params') && Input::isNotEmpty('params')) {
            
                            parse_str($_POST['params'], $paramsArr);
                            $paramsArr = isset($paramsArr['param']) ? Arr::changeKeyLower($paramsArr['param']) : $paramsArr;

                            $groupRows = Mdcache::modifiedGroupRows($cacheParams['cachePath'], $cacheArray[$groupFieldPathLower], $paramsArr, $groupFieldPathLower);
                            $cacheArray[$groupFieldPathLower] = $groupRows;
                        }
                    
                        $isCachedGroup = true; 
                        $currentPageTotal = Input::post('currentPageTotal');
                        
                        if ($currentPageTotal > $pageSize) {
                            $divide = $currentPageTotal / $pageSize;
                            
                            if (strpos($divide, '.') !== false) {
                                $pageNumberCeil = ceil($divide);
                                $pageNumbers = ($pageNumberCeil ? $pageNumberCeil : 1);
                            } else {
                                $pageNumbers = $divide + 1;
                            }
                            
                        } elseif ($currentPageTotal == $pageSize) {
                            $pageNumbers = 2;
                        } else {
                            $pageNumbers = 1;
                        }  
                        
                        $postData['cacheStr'] = $cacheParams['cacheStr'];
                        
                    } else {
                        $pageNumbers = 1;
                    }
                    
                    if ($fillType == 'autocomplete') {
                        $rowData = $this->model->generateDataProcessKeyLookupMapModel($postData);
                    } elseif ($fillType === 'excelimport') {
                        $rowData = array($groupFieldPathLower => $_POST['selectedRows']);
                    } else {
                        $rowData = $this->model->generateDataProcessLookupMapModel($postData);
                    }
                    
                    $rowDatas = $rowData[$groupFieldPathLower];
                    $expression = (new Mdexpression())->getCacheExpression($processMetaDataId);
                    
                    if ($rowDatas && $groupExpression = issetParam($expression['add_multi_'.$groupFieldPathLower])) {
                        
                        parse_str($_POST['headerData'], $headerDataArr);
                        $headerData = isset($headerDataArr['param']) ? Arr::changeKeyLower($headerDataArr['param']) : $headerDataArr;

                        $groupExpression = str_replace(
                            array(Mdexpression::$cachePrefix, Mdexpression::$cachePrefixHeader), 
                            array('$rowDatas[$rk]',           '$headerData'), 
                        $groupExpression);
                        
                        foreach ($rowDatas as $rk => $rv) {
                            eval($groupExpression);
                        }
                    }

                    if ($isCachedGroup && $rowDatas && $detailData = $cacheArray[$groupFieldPathLower]) {
                        end($detailData);
                        $lastKey = key($detailData) + 1;
                        $rowDatas = array_combine(range($lastKey, count($rowDatas) + $lastKey - 1), array_values($rowDatas));
                    }
                    
                    $responseData = (new Mdcache())->pushDataSplice($returnData['pagerConfig'], $cacheId, $pageSize, $pageNumbers, $groupFieldPathLower, $cacheArray, $rowDatas, $isCachedGroup, $postData['isEditMode']);
                    
                    $this->load->model('mdwebservice', 'middleware/models/');
                    
                    $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlRowsPopup, true, $responseData);
                    
                    $response = array(
                        'html' => issetParam($renderFirstLevelDtl['gridBodyData']), 
                        'count' => $responseData[$groupFieldPathLower.'_total'], 
                        'pageNumber' => $pageNumbers
                    );
                    
                    if (isset($responseData[$groupFieldPathLower.'_aggregatecolumns'])) {
                        $response['aggregate'] = http_build_query($responseData[$groupFieldPathLower.'_aggregatecolumns']);
                    }

                    echo json_encode($response); exit;
                } 
            } 
            
            if ($fillType === 'autocomplete') {
                $rowData = $this->model->generateDataProcessKeyLookupMapModel($postData);
            } elseif ($fillType === 'excelimport') {
                $rowData = array(strtolower($paramRealPath) => $_POST['selectedRows']);
            } else {
                $rowData = $this->model->generateDataProcessLookupMapModel($postData);
            }
            
            $this->load->model('mdwebservice', 'middleware/models/');
            
            if (Input::postCheck('pivotObj') == false) {
                
                if (Input::isEmpty('dtlTheme') == false) {
                    
                    $renderFirstLevelDtl = self::renderFirstLevelDivDtl($uniqId, $processMetaDataId, Input::post('dtlTheme'), $row, $getDtlRowsPopup, $rowData);
                    
                } else {
                    $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlRowsPopup, true, $rowData);
                }
                
            } else {
                
                $pivotObj = Input::post('pivotObj');
                $pivotPath = Input::post('pivotPath');
                $pivotPathLower = strtolower($pivotPath);
                $pivotPathArr = explode('.', $pivotPathLower);
                $pivotFirstPath = $pivotPathArr[0];
                $pivotLastPath = $pivotPathArr[1];
                $pivotColumns = array();
                
                foreach ($pivotObj as $pivotId) {
                    $pivotColumns[] = array('supplierid' => $pivotId);
                }
                
                $showColumns = (new Mdpivot())->bpInputParamsData($processMetaDataId, Input::post('pivotDtlId'), null);
                $showColumnsCount = 0;

                foreach ($showColumns as $cl) {
                    if ($cl['IS_SHOW'] == '1') {
                        $showColumnsCount++;
                    }
                }
                
                $colIndex = $showColumnsCount - 1;
                
                $newRowData = array();
                $newRowDatas = array();
                $rowDatas = $rowData[$pivotFirstPath];
                
                foreach ($rowDatas as $rk => $rd) {
                    $newRowDatas[$rk] = $rd;
                    $newRowDatas[$rk][$pivotLastPath] = $pivotColumns;
                }
                
                $newRowData[$pivotFirstPath] = $newRowDatas;
                
                $renderFirstLevelDtl = self::renderFirstLevelPivotDtl($uniqId, $processMetaDataId, $pivotColumns, $showColumns, $pivotPath, $colIndex, $row, $getDtlRowsPopup, true, $newRowData);
            }

            ob_start('ob_html_compress'); 
                echo issetParam($renderFirstLevelDtl['gridBodyData']);
            ob_end_flush();
        }
        
        exit;
    }
    
    public function bpLinkedGroup() {

        $postData = Input::postData();
        
        $uniqId = Input::param($postData['uniqId']);
        $cacheId = issetVar($postData['cacheId']);
        $processMetaDataId = Input::param($postData['processMetaDataId']);
        $groupPath = Input::param($postData['groupPath']);
        $headerData = $postData['headerData'];
        $groupPathSplit = explode('|', $groupPath);
        
        unset($postData['headerData']);
        
        $response = array();

        foreach ($groupPathSplit as $groupFieldPath) {
            
            $this->load->model('mdwebservice', 'middleware/models/');
            
            $response[$groupFieldPath] = '';
            $parentProcessRow = $this->model->isFirstLevelProcessModel($processMetaDataId, $groupFieldPath);
            
            if ($parentProcessRow) {
                
                if ($responseData = $this->model->bpLinkedGroupModel($processMetaDataId, $parentProcessRow['ID'], $groupFieldPath, $headerData, $postData)) {
                    
                    $this->load->model('mdwebservice', 'middleware/models/');
                    
                    $childData = $this->model->onlyShowGroupParamsDataModel($processMetaDataId, $parentProcessRow['ID']);

                    $row = array(
                        'id' => $parentProcessRow['ID'],
                        'code' => $groupFieldPath,
                        'recordtype' => 'rows',
                        'isShowAdd' => $parentProcessRow['IS_SHOW_ADD'],
                        'isShowDelete' => $parentProcessRow['IS_SHOW_DELETE'],
                        'isShowMultiple' => $parentProcessRow['IS_SHOW_MULTIPLE'],
                        'widgetCode' => $parentProcessRow['WIDGET_CODE'],
                        'data' => $childData
                    );

                    $getDtlSidebar = array();

                    if ($cacheId) {

                        $returnData = $this->model->getShowInputParams($processMetaDataId);

                        if (isset($returnData['pagerConfig']) && count($returnData['pagerConfig'])) {

                            $groupFieldPathLower = strtolower($groupFieldPath);

                            $returnData['pagerConfig'][$groupFieldPathLower]['configArr']['pagesize'] = Input::post('pageSize');

                            $expression = (new Mdexpression())->getCacheExpression($processMetaDataId);

                            if ($groupExpression = issetParam($expression['add_multi_'.$groupFieldPathLower])) {

                                $rowDatas = $responseData[$groupFieldPathLower];
                                
                                parse_str($_POST['headerData'], $headerDataArr);
                                $headerData = isset($headerDataArr['param']) ? Arr::changeKeyLower($headerDataArr['param']) : $headerDataArr;

                                $groupExpression = str_replace(
                                    array(Mdexpression::$cachePrefix, Mdexpression::$cachePrefixHeader), 
                                    array('$rowDatas[$rk]',           '$headerData'), 
                                $groupExpression);

                                foreach ($rowDatas as $rk => $rv) {
                                    eval($groupExpression);
                                }

                                $responseData[$groupFieldPathLower] = $rowDatas;
                            }

                            $responseData = (new Mdcache())->fillParamDataSplice($processMetaDataId, $cacheId, $returnData['pagerConfig'], $responseData);
                             
                            $this->load->model('mdwebservice', 'middleware/models/');
                            
                            $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlSidebar, true, $responseData);
                            $response[$groupFieldPath] = issetParam($renderFirstLevelDtl['gridBodyData']);

                            if (isset($responseData[$groupFieldPathLower.'_total'])) {
                                $response[$groupFieldPath.'_count'] = $responseData[$groupFieldPathLower.'_total'];
                                if (isset($responseData[$groupFieldPathLower.'_aggregatecolumns'])) {
                                    $response[$groupFieldPath.'_aggregate'] = http_build_query($responseData[$groupFieldPathLower.'_aggregatecolumns']);
                                }
                            }

                        } else {
                            $this->load->model('mdwebservice', 'middleware/models/');
                            
                            $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlSidebar, true, $responseData);
                            
                            $response[$groupFieldPath] = issetParam($renderFirstLevelDtl['gridBodyData']);
                            $response[$groupFieldPath.'_count'] = count($responseData[strtolower($groupFieldPath)]);
                        }

                    } else {
                        $this->load->model('mdwebservice', 'middleware/models/');
                        
                        $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlSidebar, true, $responseData);
                        
                        $response[$groupFieldPath] = issetParam($renderFirstLevelDtl['gridBodyData']);
                        $response[$groupFieldPath.'_count'] = count($responseData[strtolower($groupFieldPath)]);
                    }
                }
            }
        }

        echo json_encode($response); exit;
    }
    
    public function fillGroupByDv() {

        $postData = Input::postData();
        
        if (isset($postData['dataObj'])) {
            
            $uniqId = Input::param($postData['uniqId']);
            $processMetaDataId = Input::param($postData['processId']);
            $groupPath = Input::param($postData['groupPath']);
            
            if ($parentProcessRow = strpos($groupPath, '.') === false ? $this->model->isFirstLevelProcessModel($processMetaDataId, $groupPath) : $this->model->isDepthLevelProcessModel($processMetaDataId, $groupPath)) {
                
                $actionType = Input::param(issetParam($postData['actionType']));
                $inputParamsData = isset($postData['inputParamsData']) ? $postData['inputParamsData'] : null;
                $mappingParamsData = $postData['mappingParamsData'];
                
                $rowData = $this->model->fillGroupByDataObjModel($groupPath, $postData['dataObj'], $mappingParamsData);
                $childData = $this->model->onlyShowGroupParamsDataModel($processMetaDataId, $parentProcessRow['ID']);

                $row = array(
                    'id' => $parentProcessRow['ID'],
                    'code' => $groupPath,
                    'recordtype' => 'rows',
                    'isShowAdd' => $parentProcessRow['IS_SHOW_ADD'],
                    'isShowDelete' => $parentProcessRow['IS_SHOW_DELETE'],
                    'isShowMultiple' => $parentProcessRow['IS_SHOW_MULTIPLE'],
                    'widgetCode' => $parentProcessRow['WIDGET_CODE'],
                    'viewMode' => $actionType,
                    'data' => $childData
                );
                
                $getDtlRowsPopup = array();
                $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlRowsPopup, true, $rowData);
                
                ob_start('ob_html_compress'); 
                    echo issetParam($renderFirstLevelDtl['gridBodyData']);
                ob_end_flush();
                
                exit;
            }
        }
        
        if (isset($postData['dataViewCode'])) {
            
            $dataViewCode = Input::param($postData['dataViewCode']);
            
            $this->load->model('mdmetadata', 'middleware/models/');
        
            if ($dataViewId = $this->model->getMetaDataIdByCodeModel($dataViewCode)) {

                $this->load->model('mdwebservice', 'middleware/models/');

                $uniqId = Input::param($postData['uniqId']);
                $processMetaDataId = Input::param($postData['processId']);
                $groupPath = Input::param($postData['groupPath']);
                
                if (Input::numeric('isIndicator') == 1) {
                    
                    $inputParamsData = isset($postData['inputParamsData']) ? $postData['inputParamsData'] : null;
                    $mappingParamsData = $postData['mappingParamsData'];
                    
                    $rowDatas = $this->model->fillGroupByDvModel($dataViewId, $groupPath, $inputParamsData, $mappingParamsData);
                    
                    $this->load->model('mdform', 'middleware/models/');
                    
                    $rowsRender = $this->model->indicatorRowsRender($processMetaDataId, $groupPath, $rowDatas);
                    
                    ob_start('ob_html_compress'); 
                        echo $rowsRender;
                    ob_end_flush();
                    
                } else {
                    
                    if ($parentProcessRow = strpos($groupPath, '.') === false ? $this->model->isFirstLevelProcessModel($processMetaDataId, $groupPath) : $this->model->isDepthLevelProcessModel($processMetaDataId, $groupPath)) {
                    
                        $actionType = Input::param(issetParam($postData['actionType']));
                        $inputParamsData = isset($postData['inputParamsData']) ? $postData['inputParamsData'] : null;
                        $mappingParamsData = $postData['mappingParamsData'];

                        $rowData = $this->model->fillGroupByDvModel($dataViewId, $groupPath, $inputParamsData, $mappingParamsData);
                        $childData = $this->model->onlyShowGroupParamsDataModel($processMetaDataId, $parentProcessRow['ID']);

                        $row = array(
                            'id' => $parentProcessRow['ID'],
                            'code' => $groupPath,
                            'recordtype' => 'rows',
                            'isShowAdd' => $parentProcessRow['IS_SHOW_ADD'],
                            'isShowDelete' => $parentProcessRow['IS_SHOW_DELETE'],
                            'isShowMultiple' => $parentProcessRow['IS_SHOW_MULTIPLE'],
                            'widgetCode' => $parentProcessRow['WIDGET_CODE'],
                            'viewMode' => $actionType,
                            'data' => $childData
                        );

                        $getDtlRowsPopup = array();
                        $renderFirstLevelDtl = self::renderFirstLevelDtl($uniqId, $processMetaDataId, $row, $getDtlRowsPopup, true, $rowData);

                        if (isset($renderFirstLevelDtl['gridBodyData'])) {
                            
                            ob_start('ob_html_compress'); 
                                echo $renderFirstLevelDtl['gridBodyData'];
                            ob_end_flush();

                            exit;
                        } 
                    }
                
                }
            }
        } 
        
        echo '';
    }
    
    public function renderFirstLevelDtl($uniqId, $methodId, $row, $sidebarGroup, $isMultiRow, $fillParamData) {
        
        if (isset($row['widgetCode']) && Mdwidget::bpDetailAvailableWidgets($row['widgetCode'])) {
            
            $fillRender = self::renderFirstLevelDivDtl($uniqId, $methodId, $row['widgetCode'], $row, array(), $fillParamData);
            return $fillRender;
        }
        
        $lowerKey = strtolower($row['code']);
        
        if (isset($fillParamData[$lowerKey])) {
            
            $gridBodyData = $gridBodyRow = '';    
            
            if ($isMultiRow) {
                if (is_array($fillParamData[$lowerKey]) && is_numeric(key($fillParamData[$lowerKey]))) {
                    
                    $rowNum = 0;
                    
                    foreach ($fillParamData[$lowerKey] as $rk => $rowData) {
                        
                        $rowNum++;
                        $htmlBodyCell = $gridTabContentHeader = $gridTabContentBody = '';
                        $ii = 0;
                        $gridRowTypePath = $arg = array();
                        $isTab = false;
                        $sidebarGroupArr_{$row['id']} = array();
                        $sidebarShowRowsDtl_{$row['id']} = false;     
                        
                        $rowClass = '';
                        $rowStateVal = 'unchanged';
                        
                        if (issetParam($rowData['rowstate']) == 'removed') {
                            $rowClass = ' removed-tr d-none';
                            $rowStateVal = 'removed';
                            --$rowNum;
                        }
                        
                        $gridBodyData .= '<tr class="bp-detail-row saved-bp-row'.$rowClass.'">';
                        $gridBodyData .= '<td class="text-center middle bp-dtl-rownumber"><span>' . $rowNum . '</span><input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]" value="'.$rk.'"/></td>';
                        
                        foreach ($row['data'] as $cn => $val) {
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];                            
                            $aggregateClass = $hideClass = '';                         

                            if ($val['COLUMN_AGGREGATE'] != '') {
                                $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                            }

                            if ($val['IS_SHOW'] != '1') {
                                $hideClass = ' hide';
                            }

                            $arg = array(
                                'parentRecordType' => 'rows'
                            );       
                            
                            if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == '') {
                                
                                $gridBodyData .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" class="' . $row['code'] . $val['META_DATA_CODE'] . ' stretchInput text-center' . $hideClass . ' ' . $aggregateClass . '">';
                                $gridBodyData .= Mdwebservice::renderParamControl($methodId, $val, 'param[' . $val['PARAM_REAL_PATH'] . ']['.$rk.'][]', $val['PARAM_REAL_PATH'], $rowData);
                                $gridBodyData .= '</td>';
                                
                                if (issetParam($val['DTL_BUTTON_NAME']) && !isset($dtlBtnName)) {
                                    $gridBodyData .= '<!--dtlBtnName-->';
                                    $dtlBtnName = $this->lang->line($val['DTL_BUTTON_NAME']);
                                }
                                
                            } else {
                                
                                if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'rows' && $val['IS_SHOW'] == '1') {

                                    array_push($gridRowTypePath, $val['PARAM_REAL_PATH']);                                        

                                    ++$ii;
                                    $gridTabActive = '';
                                    if ($ii === 1) {
                                        $gridTabActive = ' active';
                                    }
                                    $isTab = true;
                                    
                                    $arg['isTab'] = 'tab';
                                    $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                                    $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                                    $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];        
                                    $arg['groupKeyLookupMeta'] = $val['LOOKUP_KEY_META_DATA_ID'];
                                    $arg['isShowMultipleKeyMap'] = $val['IS_MULTI_ADD_ROW_KEY'];
                                    $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                                    $arg['code'] = $val['META_DATA_CODE'];
                                    $arg['paramPath'] = $val['PARAM_REAL_PATH'];
                                    $arg['groupConfigParamPath'] = $val['GROUP_CONFIG_PARAM_PATH_GROUP'];
                                    $arg['groupConfigLookupPath'] = $val['GROUP_CONFIG_FIELD_PATH_GROUP'];

                                    $gridTabContentHeader .= '<li class="nav-item" data-li-path="'.$val['PARAM_REAL_PATH'].'">';
                                    $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                    $gridTabContentHeader .= '</li>';
                                    $gridTabContentBody .= '<div class="tab-pane in' . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '">';                                        
                                    $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                    $gridTabContentBody .= '</div>';      

                                } elseif ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'row') {
                                    
                                    if ($val['IS_BUTTON'] != '1') {

                                        $additionalBody = self::appendSubRowInProcessEditMode($uniqId, $methodId, $val, $rowData, $rk);
                                        $gridBodyData .= $additionalBody['additionalBody'];

                                        if (!empty($additionalBody['sideBarArr'])) {
                                            $sidebarShowRowsDtl_{$row['id']} = true;

                                            foreach ($additionalBody['sideBarArr'] as $sdval) {

                                                $sval = $sdval['row'];

                                                if (!in_array($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                                    array_push($sidebarGroupArr_{$row['id']}, $sval['SIDEBAR_NAME']);
                                                }

                                                $groupKey = array_search($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                                $labelAttr = array(
                                                    'text' => Lang::line($sval['META_DATA_NAME']),
                                                    'for' => "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]",
                                                    'data-label-path' => $sval['PARAM_REAL_PATH']
                                                );
                                                if ($sval['IS_REQUIRED'] == '1') {
                                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                                }
                                                if ($sval['META_TYPE_CODE'] == 'date') {
                                                    $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $sval, "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]", '', $sdval['fillData']) . "</div>";
                                                } elseif ($sval['META_TYPE_CODE'] == 'boolean') {
                                                    $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData']);
                                                } else {
                                                    $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData'], 'removeSelect2');
                                                }
                                                $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                                    'input_label_txt' => Form::label($labelAttr),
                                                    'data_path' => $sval['PARAM_REAL_PATH'], 
                                                    'input_html' => $inHtml
                                                );
                                                $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];

                                            }
                                        }

                                    } else {
                                        
                                        ++$ii;
                                        $gridTabActive = '';
                                        if ($ii == 1) {
                                            $gridTabActive = ' active';
                                        }

                                        array_push($gridRowTypePath, $val['PARAM_REAL_PATH']);

                                        $arg['isTab'] = 'tab';
                                        $isTab = true;
                                        $gridTabContentHeader .= '<li class="nav-item ' . $hideClass . '" data-li-path="' . $val['PARAM_REAL_PATH'] . '">';
                                        $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                        $gridTabContentHeader .= '</li>';
                                        $gridTabContentBody .= '<div class="tab-pane in' . $hideClass . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $val['PARAM_REAL_PATH'] . '">';
                                        $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                        $gridTabContentBody .= '</div>';
                                    }

                                } else {
                                    $val['SIDEBAR_NAME'] = trim($val['SIDEBAR_NAME']);

                                    if (!empty($val['SIDEBAR_NAME'])) {

                                        $sidebarShowRowsDtl_{$row['id']} = true;

                                        if (!in_array($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                            array_push($sidebarGroupArr_{$row['id']}, $val['SIDEBAR_NAME']);
                                        }

                                        $groupKey = array_search($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                        $labelAttr = array(
                                            'text' => Lang::line($val['META_DATA_NAME']),
                                            'for' => "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]",
                                            'data-label-path' => $val['PARAM_REAL_PATH']
                                        );
                                        if ($val['IS_REQUIRED'] == '1') {
                                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                        }
                                        if ($val['META_TYPE_CODE'] == 'date') {
                                            $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData) . "</div>";
                                        } elseif ($val['META_TYPE_CODE'] == 'boolean') {
                                            $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData);
                                        } else {
                                            $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData, 'removeSelect2');
                                        }
                                        $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                            'input_label_txt' => Form::label($labelAttr),
                                            'data_path' => $val['PARAM_REAL_PATH'], 
                                            'input_html' => $inHtml
                                        );
                                        $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];                                    
                                    }                                        
                                }
                            }

                            if (!isset($isRowState) && strtolower($val['META_DATA_CODE']) == 'rowstate') {
                                $isRowState = true;
                            }
                        }
                        
                        if (!isset($isRowState)) {
                            $gridBodyData .= '<td data-cell-path="' . $row['code'] . '.rowState" class="display-none">';
                            $gridBodyData .= '<input type="hidden" name="param[' . $row['code'] . '.rowState]['.$rk.'][]" data-path="'.$row['code'].'.rowState" data-field-name="rowState" data-isclear="0" value="'.$rowStateVal.'">';
                            $gridBodyData .= '</td>';
                        }
                        
                        $htmlBodyCell .= '<td class="text-center stretchInput middle tbl-cell-right-freeze' . ($row['isShowDelete'] === '1' ? '' : ' hide') . '">';
                        
                        if ($sidebarShowRowsDtl_{$row['id']}) {
                            
                            $htmlBodyCell .= '<a href="javascript:;" onclick="proccessRenderPopup(\'div#bp-window-' . $methodId . '\', this);" class="btn btn-xs purple-plum bp-btn-sidebar" style="width:21px" title="Popup цонхоор харах"><i class="fa fa-external-link"></i></a>';
                            $htmlBodyCell .= '<div class="sidebarDetailSection hide">';

                            if (!empty($sidebarGroupArr_{$row['id']})) {
                                foreach ($sidebarGroupArr_{$row['id']} as $keyPopGroup => $rowPopGroup) {

                                    $htmlBodyCell .= '<p class="property_page_title">' . Lang::line($rowPopGroup) . '</p>' .
                                    '<div class="panel panel-default bg-inverse grid-row-content">' .
                                    '<table class="table sheetTable sidebar_detail">' .
                                    '<tbody>';
                                    if (isset($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk])) {
                                        foreach ($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk] as $subrowPopGroup) {
                                            $htmlBodyCell .= "<tr data-cell-path='".$subrowPopGroup['data_path']."'>" .
                                            "<td style='width: 229px;' class='left-padding'>" . Lang::line($subrowPopGroup['input_label_txt']) . "</td>" .
                                            "<td>" . $subrowPopGroup['input_html'] . "</td>" .
                                            "</tr>";
                                        }
                                    }
                                    $htmlBodyCell .= '</tbody></table></div>';

                                }
                            }  
                            $htmlBodyCell .= '</div>';
                        }       
                        
                        if ($row['isShowDelete'] === '1') {
                            $htmlBodyCell .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row" title="'.Lang::line('delete_btn').'"><i class="fa fa-trash"></i></a>';
                        }      
                        
                        $htmlBodyCell .= '</td>';

                        if ($isTab) {
                            $gridRowTypePath = implode('|', $gridRowTypePath);
                                
                            if (isset($dtlBtnName)) {
                                
                                $gridBodyCol = '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                                $gridBodyCol .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" title="'.$dtlBtnName.'" data-b-path="' . $gridRowTypePath . '">';
                                $gridBodyCol .= '...';
                                $gridBodyCol .= '</a>';
                                $gridBodyCol .= '<div class="param-tree-container-tab param-tree-container hide">';
                                $gridBodyCol .= '<div class="tabbable-line">
                                        <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                        <div class="tab-content">
                                        ' . $gridTabContentBody . '
                                        </div>
                                    </div>';
                                $gridBodyCol .= '</div>';
                                $gridBodyCol .= '</td>';
                                $gridBodyData = str_replace('<!--dtlBtnName-->', $gridBodyCol, $gridBodyData);
                                
                                unset($dtlBtnName);
                                
                            } else {
                                
                                $gridBodyCol = '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                                $gridBodyCol .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" title="Дэлгэрэнгүй" data-b-path="' . $gridRowTypePath . '">';
                                $gridBodyCol .= '...';
                                $gridBodyCol .= '</a>';
                                $gridBodyCol .= '<div class="param-tree-container-tab param-tree-container hide">';
                                $gridBodyCol .= '<div class="tabbable-line">
                                        <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                        <div class="tab-content">
                                        ' . $gridTabContentBody . '
                                        </div>
                                    </div>';
                                $gridBodyCol .= '</div>';
                                $gridBodyCol .= '</td>';
                                $gridBodyData .= $gridBodyCol;
                            }
                        }

                        $gridBodyData .= $htmlBodyCell;
                        $gridBodyData .= '</tr>';
                    }
                }
            } else { //2015-10-22 10:40
                
                foreach ($row['data'] as $val) {
                    $isRowState = false;
                    $hideClass = '';
                    if ($val['IS_SHOW'] != '1') {
                        $hideClass = 'hide';
                    }

                    if (empty($val['SIDEBAR_NAME'])) {

                        if ($val['RECORD_TYPE'] == 'rows') {
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];
                            $arg['groupKeyLookupMeta'] = $val['LOOKUP_KEY_META_DATA_ID'];
                            $arg['isShowMultipleKeyMap'] = $val['IS_MULTI_ADD_ROW_KEY'];
                            $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                            $arg['id'] = $val['META_DATA_CODE'];
                            $arg['code'] = $val['META_DATA_CODE'];
                            $arg['paramPath'] = $val['PARAM_REAL_PATH'];
                            $arg['groupConfigParamPath'] = $val['GROUP_CONFIG_PARAM_PATH_GROUP'];
                            $arg['groupConfigLookupPath'] = $val['GROUP_CONFIG_FIELD_PATH_GROUP'];                            

                            $gridBodyRow .= '<tr class="bp-detail-row ' . $hideClass . '" data-cell-path="' . $val['PARAM_REAL_PATH'] . '">';
                            
                            if ($val['META_TYPE_CODE'] == 'group' && $val['IS_BUTTON'] == '1') {
                                
                                $gridBodyRow .= '<td class="text-right middle float-left" style="width: 28%">';
                                $labelAttr = array(
                                    'text' => Lang::line($val['META_DATA_NAME'])
                                );
                                if ($val['IS_REQUIRED'] == '1') {
                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                }
                                $gridBodyRow .= Form::label($labelAttr);
                                $gridBodyRow .= '</td>';
                                $gridBodyRow .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 72%" class="middle float-left">';
                                $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            } else {
                                $gridBodyRow .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 100%" class="middle float-left" colspan="2">';
                                $gridBodyRow .= '<p class="meta_description"><i class="fa fa-info-circle"></i> ' . Lang::line($val['META_DATA_NAME']) . '</p>';
                                $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            }
                            $gridBodyRow .= '</tr>';
                            
                        } elseif ($val['RECORD_TYPE'] == 'row') {
                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $val['PARAM_REAL_PATH'] . '">';
                            $gridBodyRow .= '<td>';
                            $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', array(), $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                            $gridBodyRow .= '</td>';
                            $gridBodyRow .= '</tr>';
                        } 
                    }
                    if (strtolower($val['META_DATA_CODE']) == 'rowstate') {
                        $isRowState = true;
                    }
                }
            }
            
            return array(
                'gridBody' => '',
                'gridBodyRow' => $gridBodyRow,
                'gridBodyData' => $gridBodyData,
                'isRowState' => (!isset($isRowState) ? false : $isRowState)
            );
        }

        return false;
    }
    
    public function renderFirstLevelDtlBigGridView($uniqId, $methodId, $row, $sidebarGroup, $isMultiRow, $fillParamData) {
        $lowerKey = strtolower($row['code']);
        $columnCount = issetParam($row['columnCount']);
        $columnCount = (!(int)$columnCount) ? 1 : $columnCount;
        
        if (isset($fillParamData[$lowerKey])) {
            
            $gridBodyData = $gridBodyRow = '';    
            
            if ($isMultiRow) {
                if (is_array($fillParamData[$lowerKey]) && is_numeric(key($fillParamData[$lowerKey]))) {
                    
                    $rowNum = 0;
                    
                    foreach ($fillParamData[$lowerKey] as $rk => $rowData) {
                        
                        $rowNum++;
                        $htmlBodyCell = $gridTabContentHeader = $gridTabContentBody = '';
                        $ii = 0;
                        $gridRowTypePath = $arg = array();
                        $isTab = false;
                        $sidebarGroupArr_{$row['id']} = array();
                        $sidebarShowRowsDtl_{$row['id']} = false;     
                        
                        $rowClass = '';
                        $rowStateVal = 'unchanged';
                        
                        if (issetParam($rowData['rowstate']) == 'removed') {
                            $rowClass = ' removed-tr d-none';
                            $rowStateVal = 'removed';
                            --$rowNum;
                        }
                        
                        $gridBodyData .= '<tr class="bp-detail-row saved-bp-row'.$rowClass.'" style="display: block">';
                        $gridBodyData .= '<td class="text-center middle float-left hide"><input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]" value="'.$rk.'"/></td>';
                        
                        foreach ($row['data'] as $cn => $val) {
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];                            
                            $aggregateClass = $hideClass = '';                         

                            if ($val['COLUMN_AGGREGATE'] != '') {
                                $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                            }

                            if ($val['IS_SHOW'] != '1') {
                                $hideClass = ' hide';
                            }

                            $arg = array(
                                'parentRecordType' => 'rows'
                            );       
                            
                            if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == '') {
                                
                                $gridBodyData .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 22px;">';
                                $labelAttr = array(
                                    'text' => Lang::line($val['META_DATA_NAME']),
                                    'for' => '',
                                    'data-label-path' => $val['PARAM_REAL_PATH']
                                );
                                if ($val['IS_REQUIRED'] == '1') {
                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                }
                                $gridBodyData .= Form::label($labelAttr);
                                $gridBodyData .= '</td>';

                                $gridBodyData .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;" class="' . $row['code'] . $val['META_DATA_CODE'] . ' float-left' . $hideClass . ' ' . $aggregateClass . '">';
                                $gridBodyData .= Mdwebservice::renderParamControl($methodId, $val, 'param[' . $val['PARAM_REAL_PATH'] . ']['.$rk.'][]', $val['PARAM_REAL_PATH'], $rowData);
                                $gridBodyData .= '</td>';
                                
                            } else {
                                
                                if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'rows' && $val['IS_SHOW'] == '1') {

                                    array_push($gridRowTypePath, $val['PARAM_REAL_PATH']); 
                                    
                                    $arg['isTab'] = '';
                                    $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                                    $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                                    $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];        
                                    $arg['groupKeyLookupMeta'] = $val['LOOKUP_KEY_META_DATA_ID'];
                                    $arg['isShowMultipleKeyMap'] = $val['IS_MULTI_ADD_ROW_KEY'];
                                    $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                                    $arg['code'] = $val['META_DATA_CODE'];
                                    $arg['paramPath'] = $val['PARAM_REAL_PATH'];
                                    $arg['groupConfigParamPath'] = $val['GROUP_CONFIG_PARAM_PATH_GROUP'];
                                    $arg['groupConfigLookupPath'] = $val['GROUP_CONFIG_FIELD_PATH_GROUP'];
                                    
                                    if ($val['IS_BUTTON'] != '1') {
                                        
                                        $gridBodyData .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 100%; line-height: 22px;" class="' . $row['code'] . $val['META_DATA_CODE'] . ' float-left' . $hideClass . ' ' . $aggregateClass . '">';
                                                $gridBodyData .= '<fieldset><legend class="text-uppercase font-size-sm font-weight-bold">' . Lang::line($val['META_DATA_NAME']) . '</legend>';
                                                $gridBodyData .= '<div class="tab-pane in" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '">';                                        
                                                $gridBodyData .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                                $gridBodyData .= '</div>';
                                            $gridBodyData .= '</fieldset>';
                                        $gridBodyData .= '</td>';
                                        
                                    } else {

                                        ++$ii;
                                        $gridTabActive = '';

                                        if ($ii === 1) {
                                            $gridTabActive = ' active';
                                        }

                                        $isTab = true;
                                        $arg['isTab'] = 'tab';
                                        
                                        $gridTabContentHeader .= '<li class="nav-item" data-li-path="'.$val['PARAM_REAL_PATH'].'">';
                                        $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                        $gridTabContentHeader .= '</li>';
                                        $gridTabContentBody .= '<div class="tab-pane in' . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '">';                                        
                                        $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                        $gridTabContentBody .= '</div>';    
                                    }
                                    
                                } elseif ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'row') {
                                    
                                    if ($val['IS_BUTTON'] != '1') {

                                        $additionalBody = self::appendSubRowInProcessEditMode($uniqId, $methodId, $val, $rowData, $rk);
                                        $gridBodyData .= $additionalBody['additionalBody'];

                                        if (!empty($additionalBody['sideBarArr'])) {
                                            $sidebarShowRowsDtl_{$row['id']} = true;

                                            foreach ($additionalBody['sideBarArr'] as $sdval) {

                                                $sval = $sdval['row'];

                                                if (!in_array($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                                    array_push($sidebarGroupArr_{$row['id']}, $sval['SIDEBAR_NAME']);
                                                }

                                                $groupKey = array_search($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                                $labelAttr = array(
                                                    'text' => Lang::line($sval['META_DATA_NAME']),
                                                    'for' => "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]",
                                                    'data-label-path' => $sval['PARAM_REAL_PATH']
                                                );
                                                if ($sval['IS_REQUIRED'] == '1') {
                                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                                }
                                                if ($sval['META_TYPE_CODE'] == 'date') {
                                                    $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $sval, "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]", '', $sdval['fillData']) . "</div>";
                                                } elseif ($sval['META_TYPE_CODE'] == 'boolean') {
                                                    $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData']);
                                                } else {
                                                    $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData'], 'removeSelect2');
                                                }
                                                $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                                    'input_label_txt' => Form::label($labelAttr),
                                                    'data_path' => $sval['PARAM_REAL_PATH'], 
                                                    'input_html' => $inHtml
                                                );
                                                $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];

                                            }
                                        }

                                    } else {
                                        
                                        ++$ii;
                                        $gridTabActive = '';
                                        if ($ii == 1) {
                                            $gridTabActive = ' active';
                                        }

                                        array_push($gridRowTypePath, $val['PARAM_REAL_PATH']);

                                        $arg['isTab'] = 'tab';
                                        $isTab = true;
                                        $gridTabContentHeader .= '<li class="nav-item ' . $hideClass . '" data-li-path="' . $val['PARAM_REAL_PATH'] . '">';
                                        $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                        $gridTabContentHeader .= '</li>';
                                        $gridTabContentBody .= '<div class="tab-pane in' . $hideClass . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $val['PARAM_REAL_PATH'] . '">';
                                        $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                        $gridTabContentBody .= '</div>';
                                    }

                                } else {
                                    $val['SIDEBAR_NAME'] = trim($val['SIDEBAR_NAME']);

                                    if (!empty($val['SIDEBAR_NAME'])) {

                                        $sidebarShowRowsDtl_{$row['id']} = true;

                                        if (!in_array($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                            array_push($sidebarGroupArr_{$row['id']}, $val['SIDEBAR_NAME']);
                                        }

                                        $groupKey = array_search($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                        $labelAttr = array(
                                            'text' => Lang::line($val['META_DATA_NAME']),
                                            'for' => "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]",
                                            'data-label-path' => $val['PARAM_REAL_PATH']
                                        );
                                        if ($val['IS_REQUIRED'] == '1') {
                                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                        }
                                        if ($val['META_TYPE_CODE'] == 'date') {
                                            $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData) . "</div>";
                                        } elseif ($val['META_TYPE_CODE'] == 'boolean') {
                                            $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData);
                                        } else {
                                            $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData, 'removeSelect2');
                                        }
                                        $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                            'input_label_txt' => Form::label($labelAttr),
                                            'data_path' => $val['PARAM_REAL_PATH'], 
                                            'input_html' => $inHtml
                                        );
                                        $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];                                    
                                    }                                        
                                }
                            }

                            if (!isset($isRowState) && strtolower($val['META_DATA_CODE']) == 'rowstate') {
                                $isRowState = true;
                            }
                        }
                        
                        if (!isset($isRowState)) {
                            $gridBodyData .= '<td data-cell-path="' . $row['code'] . '.rowState" class="display-none">';
                            $gridBodyData .= '<input type="hidden" name="param[' . $row['code'] . '.rowState]['.$rk.'][]" data-path="'.$row['code'].'.rowState" data-field-name="rowState" data-isclear="0" value="'.$rowStateVal.'">';
                            $gridBodyData .= '</td>';
                        }
                        
                        $htmlBodyCell .= '<td style="width: 100%" class="text-center stretchInput float-left middle' . ($row['isShowDelete'] === '1' ? '' : ' hide') . '">';
                        
                        if ($sidebarShowRowsDtl_{$row['id']}) {
                            
                            $htmlBodyCell .= '<a href="javascript:;" onclick="proccessRenderPopup(\'div#bp-window-' . $methodId . '\', this);" class="btn btn-xs purple-plum bp-btn-sidebar" style="width:21px" title="Popup цонхоор харах"><i class="fa fa-external-link"></i></a>';
                            $htmlBodyCell .= '<div class="sidebarDetailSection hide">';

                            if (!empty($sidebarGroupArr_{$row['id']})) {
                                foreach ($sidebarGroupArr_{$row['id']} as $keyPopGroup => $rowPopGroup) {

                                    $htmlBodyCell .= '<p class="property_page_title">' . Lang::line($rowPopGroup) . '</p>' .
                                    '<div class="panel panel-default bg-inverse grid-row-content">' .
                                    '<table class="table sheetTable sidebar_detail">' .
                                    '<tbody>';
                                    if (isset($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk])) {
                                        foreach ($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk] as $subrowPopGroup) {
                                            $htmlBodyCell .= "<tr data-cell-path='".$subrowPopGroup['data_path']."'>" .
                                            "<td style='width: 229px;' class='left-padding'>" . Lang::line($subrowPopGroup['input_label_txt']) . "</td>" .
                                            "<td>" . $subrowPopGroup['input_html'] . "</td>" .
                                            "</tr>";
                                        }
                                    }
                                    $htmlBodyCell .= '</tbody></table></div>';

                                }
                            }  
                            $htmlBodyCell .= '</div>';
                        }       
                        
                        if ($row['isShowDelete'] === '1') {
                            $htmlBodyCell .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row pull-right mr15" title="'.Lang::line('delete_btn').'"><i class="fa fa-trash"></i></a>';
                        }      
                        
                        $htmlBodyCell .= '</td>';

                        if ($isTab) {
                            $gridRowTypePath = implode('|', $gridRowTypePath);
                            
                            $gridBodyData .= '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                            $gridBodyData .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" style="width:35px" title="Дэлгэрэнгүй" data-b-path="' . $gridRowTypePath . '">';
                            $gridBodyData .= '...';
                            $gridBodyData .= '</a> ';
                            $gridBodyData .= '<div class="param-tree-container-tab param-tree-container hide">';
                            $gridBodyData .= '<div class="tabbable-line">
                                    <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                    <div class="tab-content">
                                    ' . $gridTabContentBody . '
                                    </div>
                                </div>';
                            $gridBodyData .= '</div>';
                            $gridBodyData .= '</td>';
                        } else {
                            $gridRowTypePath = implode('|', $gridRowTypePath);
                            $gridBodyData .= '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                            $gridBodyData .= '<div class="tabbable-line">
                                    <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                    <div class="tab-content">
                                    ' . $gridTabContentBody . '
                                    </div>
                                </div>';
                            $gridBodyData .= '</td>';
                        }

                        $gridBodyData .= $htmlBodyCell;
                        $gridBodyData .= '<td style="float: left;line-height: 22px;width: 100%;" class="text-center"><hr></td></tr>';                    
                    }
                }
                
            } else { //2015-10-22 10:40
                
                foreach ($row['data'] as $val) {
                    $isRowState = false;
                    $hideClass = '';
                    if ($val['IS_SHOW'] != '1') {
                        $hideClass = 'hide';
                    }

                    if (empty($val['SIDEBAR_NAME'])) {

                        if ($val['RECORD_TYPE'] == 'rows') {
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];
                            $arg['groupKeyLookupMeta'] = $val['LOOKUP_KEY_META_DATA_ID'];
                            $arg['isShowMultipleKeyMap'] = $val['IS_MULTI_ADD_ROW_KEY'];
                            $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                            $arg['id'] = $val['META_DATA_CODE'];
                            $arg['code'] = $val['META_DATA_CODE'];
                            $arg['paramPath'] = $val['PARAM_REAL_PATH'];
                            $arg['groupConfigParamPath'] = $val['GROUP_CONFIG_PARAM_PATH_GROUP'];
                            $arg['groupConfigLookupPath'] = $val['GROUP_CONFIG_FIELD_PATH_GROUP'];                            

                            $gridBodyRow .= '<tr class="bp-detail-row ' . $hideClass . '" data-cell-path="' . $val['PARAM_REAL_PATH'] . '">';
                            
                            if ($val['META_TYPE_CODE'] == 'group' && $val['IS_BUTTON'] == '1') {
                                
                                $gridBodyRow .= '<td class="text-right middle float-left" style="width: 28%">';
                                $labelAttr = array(
                                    'text' => Lang::line($val['META_DATA_NAME'])
                                );
                                if ($val['IS_REQUIRED'] == '1') {
                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                }
                                $gridBodyRow .= Form::label($labelAttr);
                                $gridBodyRow .= '</td>';
                                $gridBodyRow .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 72%" class="middle float-left">';
                                $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            } else {
                                $gridBodyRow .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 100%" class="middle float-left" colspan="2">';
                                $gridBodyRow .= '<p class="meta_description"><i class="fa fa-info-circle"></i> ' . Lang::line($val['META_DATA_NAME']) . '</p>';
                                $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            }
                            $gridBodyRow .= '</tr>';
                            
                        } elseif ($val['RECORD_TYPE'] == 'row') {
                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $val['PARAM_REAL_PATH'] . '">';
                            $gridBodyRow .= '<td>';
                            $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', array(), $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                            $gridBodyRow .= '</td>';
                            $gridBodyRow .= '</tr>';
                        } 
                    }
                    if (strtolower($val['META_DATA_CODE']) == 'rowstate') {
                        $isRowState = true;
                    }
                }
            }
            return array(
                'gridBody' => '',
                'gridBodyRow' => $gridBodyRow,
                'gridBodyData' => $gridBodyData,
                'isRowState' => (!isset($isRowState) ? false : $isRowState)
            );
        }

        return false;
    }
    
    public function renderFirstLevelDtlTheme($uniqId, $methodId, $row, $sidebarGroup, $isMultiRow, $fillParamData, $dtlThemeId) {
        $lowerKey = strtolower($row['code']);
        $isRowState = false;
        $gridBodyData = '';
        
        $themeBook = (new Mdmeta())->getThemeBook($dtlThemeId);
        $backgroundColor = ($themeBook) ? $themeBook['BACKGROUND_COLOR'] : '#F9EFAF';
        
        if (isset($fillParamData[$lowerKey])) {
            
            $gridBodyRow = '';       
            
            if ($isMultiRow) {
                if (isset($fillParamData[$lowerKey][0]) && is_array($fillParamData[$lowerKey])) {
                    $totalColumnCount = count($row['data']);
                        
                    foreach ($fillParamData[$lowerKey] as $rk => $rowData) {
                        
                        $htmlBodyCell = '';
                        $ii = 0;
                        $gridRowTypePath = array();
                        $arg = array();
                        $isTab = false;
                        $gridTabContentHeader = '';
                        $gridTabContentBody = '';
                        $sidebarGroupArr_{$row['id']} = array();
                        $sidebarShowRowsDtl_{$row['id']} = false;                           
                        $isRowState = false;
                        
                        /* CONTENT BEGIN */
                        
                        $position1 = $position2 = $position3 = $position4 = $position5 = $position6 = $position7 = $position8 = $position9 = $position10 = '';
                        $position = array();    
                        
                        foreach ($row['data'] as $cn => $val) {

                            ++$ii;
                            (String) $gridTabActive = '';
                            if ($ii === 1) {
                                $gridTabActive = ' active';
                            }
                            $arg['isTab'] = 'tab';
                            $isTab = true;
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];        
                            
                            $aggregateClass = '';                         

                            if ($val['COLUMN_AGGREGATE'] != '') {
                                $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                            }
                            
                            $hideClass = '';
                            
                            if ($val['IS_SHOW'] != '1') {
                                $hideClass = ' hide';
                            }
                            $labelAttr = array(
                                'text' => Lang::line($val['META_DATA_NAME'])
                            );
                            if ($val['IS_REQUIRED'] == '1') {
                                $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                            }
                            $gridBodyRowLabel = Form::label($labelAttr);

                            switch ($val['THEME_POSITION_NO']) {
                                case '1':
                                    if ($val['LOOKUP_TYPE'] === 'label') {
                                        $position1 .= '<div class="col-form-label-theme">';
                                            $position1 .= Mdwebservice::renderParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData);
                                        $position1 .= '</div>';
                                    } else {
                                        $position1 .= Mdwebservice::renderParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData);
                                    }

                                    $val['LOOKUP_TYPE'] = '';
                                    if ($val['RECORD_TYPE'] == 'rows') {
                                        $val['LOOKUP_TYPE'] = 'combo';
                                    }
                                    $gridTabContentBody .= '<tr class="'. $hideClass .'">
                                                                <td class="text-right middle" data-cell-path="templateCode" style="width: 23%">'.$gridBodyRowLabel.'</td>
                                                                <td class="text-right middle" data-cell-path="templateCode" style="width: 23%">
                                                                    '. Mdwebservice::renderParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData) .'
                                                                </td>
                                                            </tr>';

                                    break;
                                case '2':
                                case '3':
                                case '4':
                                case '5':
                                case '6':
                                case '7':
                                case '8':
                                case '9':
                                case '10':
                                    $position[$val['THEME_POSITION_NO']] = '';
                                    $position[$val['THEME_POSITION_NO']] = '<div class="row margin-right-15 ml15 '. $hideClass .'" style="margin-left: 3px !important; margin-right: 0px !important;">'
                                                    .'<div class="form-group row fom-row">'
                                                        .'<label class="col-form-label col-md-12 pr0 pl0">'. Lang::line($val['META_DATA_NAME']) .'</label>'
                                                        .'<div class="col-md-12 ';
                                                        if ($val['LOOKUP_TYPE'] === 'label') {
                                                            $position[$val['THEME_POSITION_NO']] .=  'col-form-label-theme ';
                                                        }
                                                $position[$val['THEME_POSITION_NO']] .=  'pr0 pl0 idcard-registerNum" style="  ">';
                                                $position[$val['THEME_POSITION_NO']] .= Mdwebservice::renderParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData);
                                            $position[$val['THEME_POSITION_NO']] .= '</div>';
                                        $position[$val['THEME_POSITION_NO']] .= '</div>';
                                    $position[$val['THEME_POSITION_NO']] .= '</div>';

                                    $gridTabContentBody .= '<tr class="'. $hideClass .'">
                                                                <td class="text-right middle" data-cell-path="templateCode" style="width: 23%">'.$gridBodyRowLabel.'</td>
                                                                <td class="text-right middle" data-cell-path="templateCode" style="width: 23%">
                                                                '. Mdwebservice::renderParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData) .'
                                                                </td>
                                                            </tr>';
                                    break;

                                default:
                                    $gridTabContentBody .= '<tr class="'. $hideClass .'">
                                                                <td class="text-right middle" data-cell-path="templateCode" style="width: 23%">'.$gridBodyRowLabel.'</td>
                                                                <td class="text-right middle" data-cell-path="templateCode" style="width: 23%">
                                                                    '. Mdwebservice::renderParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData) .'
                                                                </td>
                                                            </tr>';

                                    break;
                            }

                            if (strtolower($val['META_DATA_CODE']) == 'rowstate') {
                                $isRowState = true;
                            }
                        }
                                    
                        $gridBodyDataHidden = '<div class="param-tree-container-tab param-tree-container hide">';
                            $gridBodyDataHidden .= '<table class="table table-sm table-no-bordered bp-header-param">';
                                $gridBodyDataHidden .= '<tbody>';
                                    $gridBodyDataHidden .= $gridTabContentBody;
                                $gridBodyDataHidden .= '</tbody>';
                            $gridBodyDataHidden .= '</table>';
                        $gridBodyDataHidden .= '</div>';
                        
                        $gridBodyData .= '<div class="ml15 mb15 bp-new-dtltheme">'
                                            
                                            . '<div class="mt-card-avatar mt-overlay-1 "  style="background: '. $backgroundColor .';">'
                                                . '<div class="mt-overlay">'
                                                    . '<ul class="mt-info">'
                                                        . '<li>'
                                                            . '<a class="btn default btn-outline" href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\', \'1\');">'
                                                                . '<i class="fa fa-edit"></i>'
                                                            . '</a>'
                                                        . '</li>'
                                                        . '<li>'
                                                            . '<a class="btn default btn-outline bp-remove-theme-row" href="javascript:;">'
                                                                . '<i class="fa fa-trash"></i>'
                                                            . '</a>'
                                                        . '</li>'
                                                    . '</ul>'
                                                . '</div>'
                                                . '<div class="card-body new-theme">'
                                                    . '<div class="row">'
                                                        . '<div class="col-md-10 pr10 ml15">'
                                                            . '<div class="row title-row">'
                                                                . '<div class="form-group row fom-row">'
                                                                    . '<label class="col-form-label col-md-12 pr0 pl0 text font-weight-bold title">'. $position1 .'</label>'
                                                                . '</div> '
                                                            . '</div> '
                                                        . '</div> '
                                                        . '<div class="col-md-12"><input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]"/>';
                        
                                                    foreach ($position as $pos) {
                                                        $gridBodyData .= $pos;
                                                    }
                        
                                            $gridBodyData .= '</div>'
                                                        . '</div>'
                                                    . '</div>'
                                                .'</div>'
                                                .'<div class="row">' . $gridBodyDataHidden . '</div>'
                                            .'</div>';
                    }
                }
            } else { //2015-10-22 10:40
                self::renderFirstLevelDtl($uniqId, $methodId, $row, $sidebarGroup, $isMultiRow, $fillParamData);
                die;
            }
            return array(
                'gridBody' => '',
                'gridBodyRow' => $gridBodyRow,
                'gridBodyData' => $gridBodyData,
                'isRowState' => $isRowState
            );
        }

        return false;
    }
    
    public function renderFirstLevelDtlView($methodId, $row, $sidebarGroup, $isMultiRow, $fillParamData) {
        $lowerKey = strtolower($row['code']);
        $isRowState = false;
        $gridBodyData = '';
        
        if (isset($fillParamData[$lowerKey])) {
            
            $gridBodyRow = '';        
            
            if ($isMultiRow) {
                if (is_array($fillParamData[$lowerKey]) && is_numeric(key($fillParamData[$lowerKey]))) {

                    $totalColumnCount = count($row['data']);
                    $rowNum = 0;
                    
                    foreach ($fillParamData[$lowerKey] as $rk => $rowData) {
                        
                        $rowNum++;
                        $htmlBodyCell = $rowClass = '';
                        $ii = 0;
                        $gridRowTypePath = $arg = array();
                        $isTab = false;
                        $gridTabContentHeader = $gridTabContentBody = '';
                        $sidebarGroupArr_{$row['id']} = array();
                        $sidebarShowRowsDtl_{$row['id']} = false; 
                        
                        if (Mdwebservice::$isLogViewMode && isset($rowData['rowstate'])) {
                            $rowState = strtolower($rowData['rowstate']);
                            if ($rowState == 'added') {
                                $rowClass = ' bplog-added-row';
                            } elseif ($rowState == 'removed') {
                                $rowClass = ' bplog-removed-row';
                            } 
                        }

                        $gridBodyData .= '<tr class="bp-detail-row saved-bp-row'.$rowClass.'">';
                        $gridBodyData .= '<td class="text-center middle bp-dtl-rownumber"><span>' . $rowNum . '</span><input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]"/></td>';

                        $isRowState = false;
                        foreach ($row['data'] as $cn => $val) {
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];
                            $aggregateClass = '';                         

                            if ($val['COLUMN_AGGREGATE'] != '') {
                                $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                            }

                            $hideClass = '';
                            if ($val['IS_SHOW'] != '1') {
                                $hideClass = ' hide';
                            }

                            if ($isMultiRow) {
                                $arg = array(
                                    'parentRecordType' => 'rows'
                                );                                    
                                if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == '') {
                                    $gridBodyData .= '<td data-cell-path="' . $row['code'] . '.' . $val['META_DATA_CODE'] . '" class="stretchInput ' . $hideClass . ' ' . $aggregateClass . '">';
                                    $gridBodyData .= Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . '.' . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData);
                                    $gridBodyData .= '</td>';
                                } else {
                                    if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'rows') {
                                        
                                        array_push($gridRowTypePath, $row['code'] . '.' . $val['META_DATA_CODE']); 
                                        
                                        ++$ii;
                                        $gridTabActive = '';
                                        if ($ii === 1) {
                                            $gridTabActive = ' active';
                                        }
                                        $arg['isTab'] = 'tab';
                                        $isTab = true;
                                        $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                                        $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                                        $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];             
                                        $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                                        $gridTabContentHeader .= '<li class="nav-item ' . $hideClass . '" data-li-path="'.$row['code'].'.'.$val['META_DATA_CODE'].'">';
                                        $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                        $gridTabContentHeader .= '</li>';
                                        $gridTabContentBody .= '<div class="tab-pane in' . $hideClass . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '">';
                                        $gridTabContentBody .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                        $gridTabContentBody .= '</div>';
                                        
                                    } elseif ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'row') {
                                        if ($val['IS_BUTTON'] != '1') {
                                            $additionalBody = (new Mdwebservice())->appendSubRowInProcessEditViewMode($methodId, $methodId, $val, $rowData, $rk);
                                            $gridBodyData .= $additionalBody;
                                        } else {
                                            ++$ii;
                                            $gridTabActive = '';
                                            if ($ii === 1) {
                                                $gridTabActive = ' active';
                                            }
                                            
                                            array_push($gridRowTypePath, $row['code'] . '.' . $val['META_DATA_CODE']);
                                            
                                            $arg['isTab'] = 'tab';
                                            $isTab = true;
                                            $gridTabContentHeader .= '<li class="nav-item ' . $hideClass . '" data-li-path="' . $row['code'] . '.' . $val['META_DATA_CODE'] . '">';
                                            $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                            $gridTabContentHeader .= '</li>';
                                            $gridTabContentBody .= '<div class="tab-pane in' . $hideClass . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '.' . $val['META_DATA_CODE'] . '">';
                                            $gridTabContentBody .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                            $gridTabContentBody .= '</div>';
                                        }
                                    } else {
                                        $val['SIDEBAR_NAME'] = trim($val['SIDEBAR_NAME']);
                                        
                                        if (!empty($val['SIDEBAR_NAME'])) {
                                            $sidebarShowRowsDtl_{$row['id']} = true;

                                            if (!in_array($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                                array_push($sidebarGroupArr_{$row['id']}, $val['SIDEBAR_NAME']);
                                            }

                                            $groupKey = array_search($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                            $labelAttr = array(
                                                'text' => Lang::line($val['META_DATA_NAME']),
                                                'for' => "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]",
                                                'data-label-path' => $row['code'] . "." . $val['META_DATA_CODE']
                                            );
                                            if ($val['META_TYPE_CODE'] == 'date') {
                                                $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . "." . $val['META_DATA_CODE'], $rowData) . "</div>";
                                            } elseif ($val['META_TYPE_CODE'] == 'boolean') {
                                                $inHtml = Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData);
                                            } else {
                                                $inHtml = Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . '.' . $val['META_DATA_CODE'], $rowData, 'removeSelect2');
                                            }
                                            $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                                'input_label_txt' => Form::label($labelAttr), 
                                                'data_path' => $row['code'] . '.' . $val['META_DATA_CODE'],
                                                'input_html' => $inHtml
                                            );
                                            $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];                                    
                                        }                                        
                                    }
                                }
                            } else {
                                if (empty($val['SIDEBAR_NAME'])) {
                                    if ($isMultiRow) {
                                        $gridBodyData .= '<td data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" class="stretchInput text-center' . $hideClass . ' ' . $aggregateClass . '">';
                                        $gridBodyData .= Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][$rk][]", $row['code'] . "." . $val['META_DATA_CODE'], $rowData, $rk);
                                        $gridBodyData .= '</td>';
                                    } else {

                                        if ($val['RECORD_TYPE'] === 'rows') {
                                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '">';
                                            $gridBodyRow .= '<td class="text-right middle float-left" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" style="width: 18%">';
                                            $labelAttr = array(
                                                'text' => Lang::line($val['META_DATA_NAME'])
                                            );
                                            if ($val['IS_REQUIRED'] == '1') {
                                                $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                            }
                                            $gridBodyRow .= Form::label($labelAttr);
                                            $gridBodyRow .= '</td>';
                                            $gridBodyRow .= '<td data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" style="width: 32%" class="middle float-left">';
                                            $gridBodyRow .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                            $gridBodyRow .= '</td>';
                                            $gridBodyRow .= '</tr>';
                                        } elseif ($val['RECORD_TYPE'] === 'row') {
                                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '">';
                                            $gridBodyRow .= '<td>';
                                            $gridBodyRow .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                            $gridBodyRow .= '</td>';
                                            $gridBodyRow .= '</tr>';
                                        } else {

                                            $gridBodyRow .= '<tr class="' . $hideClass . '">';
                                            $gridBodyRow .= '<td class="text-right middle float-left" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" style="width: 18%">';
                                            $labelAttr = array(
                                                'text' => Lang::line($val['META_DATA_NAME']),
                                                'for' => "param[" . $val['META_DATA_CODE'] . "]",
                                                'data-label-path' => $row['code'] . "." . $val['META_DATA_CODE']
                                            );
                                            if ($val['IS_REQUIRED'] == '1') {
                                                $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                            }
                                            $gridBodyRow .= Form::label($labelAttr);
                                            $gridBodyRow .= '</td>';
                                            $gridBodyRow .= '<td data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" style="width: 32%" class="middle float-left">';
                                            $gridBodyRow .= Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][0][]", $row['code'] . "." . $val['META_DATA_CODE'], $fillParamData);
                                            $gridBodyRow .= '</td>';
                                            $gridBodyRow .= '</tr>';
                                        }
                                    }
                                }
                            }

                            if (strtolower($val['META_DATA_CODE']) == 'rowstate') {
                                $isRowState = true;
                            }

                            if (!$isRowState && ($totalColumnCount == ($cn + 1))) {
                                $gridBodyData .= '<td data-cell-path="' . $row['code'] . '.rowState" class="display-none">';
                                $gridBodyData .= Mdwebservice::renderViewParamControl($methodId, array_merge($val, array('PARAM_REAL_PATH' => $row['code'] . '.rowState', 'META_DATA_CODE' => 'rowState', 'LOWER_PARAM_NAME' => 'rowstate', 'DEFAULT_VALUE' => 'unchanged', 'IS_SHOW' => '0')), "param[" . $row['code'] . ".rowState][$rk][]", $row['code'] . ".rowState", $rowData, $rk);
                                $gridBodyData .= '</td>';
                            }
                        }
                        
                        if ($sidebarShowRowsDtl_{$row['id']}) {
                            
                            $htmlBodyCell .= '<td class="text-center stretchInput middle">';
                            $htmlBodyCell .= '<a href="javascript:;" onclick="proccessRenderPopup(\'div#bp-window-' . $methodId . '\', this);" class="btn btn-xs purple-plum bp-btn-sidebar" style="width:21px" title="Popup цонхоор харах"><i class="fa fa-external-link"></i></a>';
                            $htmlBodyCell .= '<div class="sidebarDetailSection hide">';

                            if (!empty($sidebarGroupArr_{$row['id']})) {
                                foreach ($sidebarGroupArr_{$row['id']} as $keyPopGroup => $rowPopGroup) {

                                    $htmlBodyCell .= '<p class="property_page_title">' . Lang::line($rowPopGroup) . '</p>' .
                                    '<div class="panel panel-default bg-inverse grid-row-content">' .
                                    '<table class="table sheetTable sidebar_detail">' .
                                    '<tbody>';
                                    if (isset($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk])) {
                                        foreach ($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk] as $subrowPopGroup) {
                                            $htmlBodyCell .= "<tr data-cell-path='".$subrowPopGroup['data_path']."'>" .
                                            "<td style='width: 229px;' class='left-padding'>" . Lang::line($subrowPopGroup['input_label_txt']) . "</td>" .
                                            "<td>" . $subrowPopGroup['input_html'] . "</td>" .
                                            "</tr>";
                                        }
                                    }
                                    $htmlBodyCell .= '</tbody></table></div>';
                                }
                            }  
                            
                            $htmlBodyCell .= '</div>';
                            $htmlBodyCell .= '</td>';
                        }                                                              

                        if ($isTab) {
                            
                            $gridRowTypePath = implode('|', $gridRowTypePath);
                            
                            $gridBodyData .= '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                            $gridBodyData .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" style="width:35px" title="Дэлгэрэнгүй" data-b-path="' . $gridRowTypePath . '">...</a> ';
                            $gridBodyData .= '<div class="param-tree-container-tab param-tree-container hide">';
                            $gridBodyData .= '<div class="tabbable-line">
                                    <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                    <div class="tab-content">
                                    ' . $gridTabContentBody . '
                                    </div>
                                </div>';
                            $gridBodyData .= '</div>';
                            $gridBodyData .= '</td>';
                        }
                        
                        $gridBodyData .= $htmlBodyCell;
                        $gridBodyData .= '</tr>';
                    }
                }
            } else {
                
                foreach ($row['data'] as $val) {
                    $isRowState = false;
                    $hideClass = '';
                    if ($val['IS_SHOW'] != '1') {
                        $hideClass = "hide";
                    }

                    if (empty($val['SIDEBAR_NAME'])) {

                        if ($val['RECORD_TYPE'] === 'rows') {
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];
                            $arg['isFirstRow'] = $val['IS_FIRST_ROW'];

                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '">';
                            if ($val['META_TYPE_CODE'] == 'group' && $val['IS_BUTTON'] == '1') {
                                $gridBodyRow .= '<td class="text-right middle float-left" style="width: 28%">';
                                $labelAttr = array(
                                    'text' => Lang::line($val['META_DATA_NAME'])
                                );
                                if ($val['IS_REQUIRED'] == '1') {
                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                }
                                $gridBodyRow .= Form::label($labelAttr);
                                $gridBodyRow .= '</td>';
                                $gridBodyRow .= '<td data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" style="width: 72%" class="middle float-left">';
                                $gridBodyRow .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            } else {
                                $gridBodyRow .= '<td data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '" style="width: 100%" class="middle float-left" colspan="2">';
                                $gridBodyRow .= '<p class="meta_description"><i class="fa fa-info-circle"></i> ' . Lang::line($val['META_DATA_NAME']) . '</p>';
                                $gridBodyRow .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            }
                            $gridBodyRow .= '</tr>';
                            
                        } elseif ($val['RECORD_TYPE'] === 'row') {    
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];
                            $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                            
                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '">';
                            $gridBodyRow .= '<td colspan="2" style="padding: 0px;border-left: 0px solid #CCC !important;">';
                            $gridBodyRow .= (new Mdwebservice())->buildTreeParamView($methodId, $val['META_DATA_NAME'], $row['code'] . '.' . $val['META_DATA_CODE'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                            $gridBodyRow .= '</td>';
                            $gridBodyRow .= '</tr>';                            
                            
                        } else {
                            
                            $dtlColWidth = '28%';
                            if(isset($row['columnWidth']) && !empty($row['columnWidth']))
                                $dtlColWidth = $row['columnWidth'] . '%';
                            
                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $row['code'] . "." . $val['META_DATA_CODE'] . '">';
                            $gridBodyRow .= '<td class="text-right middle" style="width: '.$dtlColWidth.'">'.Form::label(array('text' => Lang::line($val['META_DATA_NAME']))).'</td>';
                            $gridBodyRow .= '<td class="bold">';
                            $gridBodyRow .= Mdwebservice::renderViewParamControl($methodId, $val, "param[" . $row['code'] . "." . $val['META_DATA_CODE'] . "][0][]", $row['code'] . "." . $val['META_DATA_CODE'], $fillParamData[$lowerKey]);                            
                            $gridBodyRow .= '</td>';
                            $gridBodyRow .= '</tr>';
                        } 
                    }
                    if (strtolower($val['META_DATA_CODE']) == 'rowstate') {
                        $isRowState = true;
                    }
                }
            }
            return array(
                'gridBody' => '',
                'gridBodyRow' => $gridBodyRow,
                'gridBodyData' => $gridBodyData,
                'isRowState' => $isRowState
            );
        }

        return false;
    }

    public function renderFirstLevelAddEditDtlRow($methodId, $rowData, $parentMetaCode, $columnCount, $fillParamData = '') {
        $gridBodyRow = '';
        if (empty($rowData)) {
            return $gridBodyRow;
        }
        
        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $columnCount);
        $w = count($rows);
        $fillParamData = isset($fillParamData[strtolower($parentMetaCode)]) ? $fillParamData[strtolower($parentMetaCode)] : null;
        
        while ($ww < $w) {
            $columns = $rows[$ww];

            $gridBodyRow .= '<tr>';
            $xx = count($columns);
            $xxx = 0;
            $hrClass = '';
            
            while ($xxx < $xx) {
                if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                    unset($rowData[$resetArrIndex++]);
                    $xxx++;
                    continue;
                }

                if ($columns[$xxx]['IS_SHOW'] !== '1') {
                    $hideClass = ' hide';
                } else
                    $hideClass = '';
                
                $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                $paramName = 'param[' . $paramRealPath . '][0][]';
                
                $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%">';
                $labelAttr = array(
                    'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                    'for' => $paramName,
                    'data-label-path' => $paramRealPath
                );
                if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                }
                $gridBodyRow .= Form::label($labelAttr);
                $gridBodyRow .= '</td>';
                $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;" class="float-left middle' . $hideClass . '">';
                $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $fillParamData);
                $gridBodyRow .= '</div>';
                $gridBodyRow .= '</td>';

                unset($rowData[$resetArrIndex++]);
                
                if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                    $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                    $_seperator = true;
                    $xxx = $xx;
                } else {
                    $xxx++;
                }
            }
            $gridBodyRow .= '</tr>';

            if ($_seperator) {
                $gridBodyRow .= "<tr>";
                $gridBodyRow .= '<td colspan="' . ($columnCount * 2) . '">';
                $gridBodyRow .= '<hr class="custom' . " " . $hrClass . '">';
                $gridBodyRow .= "</td>";
                $gridBodyRow .= "</tr>";
            }

            if ($_seperator) {
                $rows = array_chunk($rowData, $columnCount);
                $_seperator = false;
                $ww = 0;
                $w = count($rows);
                continue;
            }
            $ww++;
        }

        return $gridBodyRow;
    }
    
    public function renderFirstLevelAddEditDtlRowBigGridView($methodId, $rowData, $parentMetaCode, $columnCount, $fillParamData = '', $uniqId = '', $gridBodyRowAfter = '', $rowFullData = array()) {
        $gridBodyRow = '';
        if (empty($rowData)) {
            return $gridBodyRow;
        }
        
        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $columnCount = (!(int)$columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $columnCount);
        
        $w = count($rows);
        $fillParamData = isset($fillParamData[strtolower($parentMetaCode)]) ? $fillParamData[strtolower($parentMetaCode)] : null;
        
        if ($fillParamData && isset($fillParamData[0])) {
            foreach ($fillParamData as $fillKey => $row) {
                $resetArrIndex = 0;
                $ww = 0;
                $_seperator = false;

                $gridBodyRow .= '<tr class="bp-detail-row" style="display: block;">';     
                $gridBodyRow .= '<td><input type="hidden" name="param[' . $parentMetaCode . '.mainRowCount][]"/></td>';
                while ($ww < $w) {
                    $columns = $rows[$ww];

                    $xx = count($columns);
                    $xxx = 0;
                    $hrClass = '';
                    
                    while ($xxx < $xx) {
                        if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                            unset($rowData[$resetArrIndex++]);
                            $xxx++;
                            continue;
                        }

                        if ($columns[$xxx]['IS_SHOW'] !== '1') {
                            $hideClass = ' hide';
                        } else
                            $hideClass = '';
                        
                        $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                        $paramName = 'param[' . $paramRealPath . '][0][]';
                                                
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 12px;min-height: 36px;">';
                        $labelAttr = array(
                            'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                            'for' => $paramName,
                            'data-label-path' => $paramRealPath
                        );
                        if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                        }
                        $gridBodyRow .= Form::label($labelAttr);
                        $gridBodyRow .= '</td>';
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;min-height: 36px;" class="float-left middle' . $hideClass . '">';
                        $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                        $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $row);
                        $gridBodyRow .= '</div>';
                        $gridBodyRow .= '</td>';
                        
                        if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                            $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                            $_seperator = true;
                            $xxx = $xx;
                        } else {
                            $xxx++;
                        }
                    }        

                    if ($_seperator) {
                        $rows = array_chunk($rowData, $columnCount);
                        $_seperator = false;
                        $ww = 0;
                        $w = count($rows);
                        continue;
                    }
                    $ww++;
                }
                
                if (isset($rowFullData['isShowDelete']) && $rowFullData['isShowDelete'] === '1') {
                    $gridBodyRow .= '<td class="text-center stretchInput middle' . ($rowFullData['isShowDelete'] === '1' ? '' : ' hide') . '">';
                    $gridBodyRow .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row pull-right" title="' . $this->lang->line('delete_btn') . '"><i class="fa fa-trash"></i></a>';
                    $gridBodyRow .= '</td>';
                }
                
                $gridBodyRow .= '<td style="float: left;line-height: 22px;width: 100%;" class="text-center"><hr></td>';
                $gridBodyRow .= '<td><table><tbody>' . $gridBodyRowAfter . '</tbody></table></td>';
                
                $gridBodyRow .= '</tr>';                        
            }
        } else {

            $gridBodyRow .= '<tr style="display: block;" class="bp-detail-row">';
            $gridBodyRow .= '<td><input type="hidden" name="param[' . $parentMetaCode . '.mainRowCount][]"/></td>';
            while ($ww < $w) {
                $columns = $rows[$ww];
    
                $xx = count($columns);
                $xxx = 0;
                $hrClass = '';
                
                while ($xxx < $xx) {
                    if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                        unset($rowData[$resetArrIndex++]);
                        $xxx++;
                        continue;
                    }
    
                    if ($columns[$xxx]['IS_SHOW'] !== '1') {
                        $hideClass = ' hide';
                    } else
                        $hideClass = '';
                    
                    $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                    $paramName = 'param[' . $paramRealPath . '][0][]';
                    
                    $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 12px;min-height: 36px;">';
                    $labelAttr = array(
                        'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                        'for' => $paramName,
                        'data-label-path' => $paramRealPath
                    );
                    if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                        $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                    }
                    $gridBodyRow .= Form::label($labelAttr);
                    $gridBodyRow .= '</td>';
                    $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;min-height: 36px;" class="float-left middle' . $hideClass . '">';
                    $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                    $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $fillParamData);
                    $gridBodyRow .= '</div>';
                    $gridBodyRow .= '</td>';
    
                    unset($rowData[$resetArrIndex++]);
                    
                    if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                        $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                        $_seperator = true;
                        $xxx = $xx;
                    } else {
                        $xxx++;
                    }
                }            
    
                if ($_seperator) {
                    $rows = array_chunk($rowData, $columnCount);
                    $_seperator = false;
                    $ww = 0;
                    $w = count($rows);
                    continue;
                }
                $ww++;
            }
            
            $gridBodyRow .= '<td class="w-100 float-left middle"><table class="w-100 pull-left"><tbody>' . $gridBodyRowAfter . '</tbody></table></td>';
            
            if (isset($rowFullData['isShowDelete']) && $rowFullData['isShowDelete'] === '1') {
                $gridBodyRow .= '<td style="width:100%; float: left;" class="text-center stretchInput middle' . ($rowFullData['isShowDelete'] === '1' ? '' : ' hide') . '">';
                $gridBodyRow .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row pull-right mr15" title="' . $this->lang->line('delete_btn') . '"><i class="fa fa-trash"></i></a>';
//                $gridBodyRow .= Form::button(array('data-action-path' => $parentMetaCode, 'class' => 'pull-right mr15 btn btn-xs green-meadow bp-add-one-row', 'value' => '<i class="icon-plus3 font-size-12"></i> ' . $this->lang->line('addRow'), 'onclick' => 'bpAddMainRow_' . $methodId . '(this, \''.$methodId.'\', \'' . $rowFullData['id'] . '\');'));
                $gridBodyRow .= '</td>';
            }
            
            $gridBodyRow .= '<td style="float: left;line-height: 22px;width: 100%;" class="text-center"> <hr></td>';
            $gridBodyRow .= '</tr>'; 
        }

        return $gridBodyRow;
    }

    public function renderFirstLevelAddEditDtlRowView($methodId, $rowData, $parentMetaCode, $columnCount, $fillParamData = '') {
        $gridBodyRow = '';
        if (empty($rowData))
            return $gridBodyRow;

        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $columnCount);
        $w = count($rows);
        $fillParamData = isset($fillParamData[strtolower($parentMetaCode)]) ? $fillParamData[strtolower($parentMetaCode)] : null;
        
        while ($ww < $w) {
            $columns = $rows[$ww];

            $gridBodyRow .= '<tr class="bp-detail-row">';
            $xx = count($columns);
            $xxx = 0;
            $hrClass = '';
            
            while ($xxx < $xx) {
                if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                    unset($rowData[$resetArrIndex++]);
                    $xxx++;
                    continue;
                }

                if ($columns[$xxx]['IS_SHOW'] !== '1') {
                    $hideClass = ' hide';
                } else
                    $hideClass = '';

                $gridBodyRow .= '<td data-cell-path="' . $parentMetaCode . "." . $columns[$xxx]['META_DATA_CODE'] . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : 18) . '%">';
                $labelAttr = array(
                    'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                    'for' => "param[" . $columns[$xxx]['META_DATA_CODE'] . "]",
                    'data-label-path' => $parentMetaCode . "." . $columns[$xxx]['META_DATA_CODE']
                );
                if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                }
                $gridBodyRow .= Form::label($labelAttr);
                $gridBodyRow .= '</td>';
                $gridBodyRow .= '<td data-cell-path="' . $parentMetaCode . "." . $columns[$xxx]['META_DATA_CODE'] . '" style="width: ' . ($columnCount == 1 ? 60 : 32) . '%; line-height: 22px;" class="float-left middle' . $hideClass . '">';
                $gridBodyRow .= Mdwebservice::renderViewParamControl($methodId, $columns[$xxx], "param[" . $parentMetaCode . "." . $columns[$xxx]['META_DATA_CODE'] . "][0][]", $parentMetaCode . "." . $columns[$xxx]['META_DATA_CODE'], $fillParamData);
                $gridBodyRow .= '</td>';

                unset($rowData[$resetArrIndex++]);
                if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                    $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                    $_seperator = true;
                    $xxx = $xx;
                } else
                    $xxx++;
            }
            $gridBodyRow .= '</tr>';

            if ($_seperator) {
                $gridBodyRow .= "<tr>";
                $gridBodyRow .= '<td colspan="' . ($columnCount * 2) . '">';
                $gridBodyRow .= '<hr class="custom' . " " . $hrClass . '">';
                $gridBodyRow .= "</td>";
                $gridBodyRow .= "</tr>";
            }

            if ($_seperator) {
                $rows = array_chunk($rowData, $columnCount);
                $_seperator = false;
                $ww = 0;
                $w = count($rows);
                continue;
            }
            $ww++;
        }

        return $gridBodyRow;
    }
    
    public function renderFirstLevelAddEditDtlRowNtrGridView($methodId, $rowData, $parentMetaCode, $columnCount, $fillParamData = '', $uniqId = '', $gridBodyRowAfter = '', $rowFullData = array()) {
        $gridHeadBodyRow = $gridBodyRow = '';
        
        if (empty($rowData)) {
            return $gridBodyRow;
        }
        
        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $columnCount);
        
        $w = count($rows);
        $fillParamData = isset($fillParamData[strtolower($parentMetaCode)]) ? $fillParamData[strtolower($parentMetaCode)] : null;
        
        if ($fillParamData && isset($fillParamData[0])) {
            foreach ($fillParamData as $fillKey => $row) {
                $resetArrIndex = 0;
                $ww = 0;
                $_seperator = false;
                $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
                $rows = array_chunk($rowData, $columnCount);
                $w = count($rows);

                $gridBodyRow .= '<tr class="bp-detail-row" style="display: block;">';     
                $gridBodyRow .= '<td><input type="hidden" name="param[' . $parentMetaCode . '.mainRowCount][]"/></td>';
                while ($ww < $w) {
                    $columns = $rows[$ww];

                    $xx = count($columns);
                    $xxx = 0;
                    $hrClass = '';
                    
                    while ($xxx < $xx) {
                        if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                            unset($rowData[$resetArrIndex++]);
                            $xxx++;
                            continue;
                        }

                        if ($columns[$xxx]['IS_SHOW'] !== '1') {
                            $hideClass = ' hide';
                        } else
                            $hideClass = '';
                        
                        $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                        $paramName = 'param[' . $paramRealPath . '][0][]';
                                                
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 22px;">';
                        $labelAttr = array(
                            'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                            'for' => $paramName,
                            'data-label-path' => $paramRealPath
                        );
                        if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                        }
                        $gridBodyRow .= Form::label($labelAttr);
                        $gridBodyRow .= '</td>';
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '; line-height: 22px;%" class="float-left middle' . $hideClass . '">';
                        $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                        $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $row);
                        $gridBodyRow .= '</div>';
                        $gridBodyRow .= '</td>';
                        
                        if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                            $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                            $_seperator = true;
                            $xxx = $xx;
                        } else {
                            $xxx++;
                        }
                    }        

                    if ($_seperator) {
                        $rows = array_chunk($rowData, $columnCount);
                        $_seperator = false;
                        $ww = 0;
                        $w = count($rows);
                        continue;
                    }
                    $ww++;
                }
                
                if (isset($rowFullData['isShowDelete']) && $rowFullData['isShowDelete'] === '1') {
                    $gridBodyRow .= '<td class="text-center stretchInput middle' . ($rowFullData['isShowDelete'] === '1' ? '' : ' hide') . '">';
                    $gridBodyRow .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row pull-right" title="' . $this->lang->line('delete_btn') . '"><i class="fa fa-trash"></i></a>';
                    $gridBodyRow .= '</td>';
                }
                
                $gridBodyRow .= '<td style="float: left;line-height: 22px;width: 100%;" class="text-center saf"><hr></td>';
                    $gridBodyRow .= '<td><table><tbody>' . $gridBodyRowAfter . '</tbody></table></td>';
                
                $gridBodyRow .= '</tr>';                        
            }
        } else {
            
            $gridHeadBodyRow .= '<tr style="display: block; float: left; background: #FFF;" class="bp-detail-row w-100">';
            $gridHeadBodyRow .= '<td style="float: left;line-height: 22px;width: 20%;">';
            
            while ($ww < $w) {
                $columns = $rows[$ww];
    
                $xx = count($columns);
                $xxx = 0;
                $hrClass = '';
                
                while ($xxx < $xx) {
                    
                    if ($columns[$xxx]['THEME_POSITION_NO'] == '1') {
                        if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                            unset($rowData[$resetArrIndex++]);
                            $xxx++;
                            continue;
                        }

                        if ($columns[$xxx]['IS_SHOW'] !== '1') {
                            $hideClass = ' hide';
                        } else
                            $hideClass = '';

                        $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                        $paramName = 'param[' . $paramRealPath . '][0][]';

                        $colJson = ''; //htmlentities(json_encode($columns[$xxx]), ENT_QUOTES, 'UTF-8');

                        $gridHeadBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '" tt-roww="'. $colJson .'" style="width: 100% !important; padding: 0.20rem;">';
                        $gridHeadBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $fillParamData);
                        $gridHeadBodyRow .= '</div>';

                        unset($rowData[$resetArrIndex++]);

                    } elseif($columns[$xxx]['THEME_POSITION_NO'] == '2') {
                        
                    } else {
                        if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                            unset($rowData[$resetArrIndex++]);
                            $xxx++;
                            continue;
                        }

                        if ($columns[$xxx]['IS_SHOW'] !== '1') {
                            $hideClass = ' hide';
                        } else
                            $hideClass = '';

                        $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                        $paramName = 'param[' . $paramRealPath . '][0][]';

                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 22px;">';
                        $labelAttr = array(
                            'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                            'for' => $paramName,
                            'data-label-path' => $paramRealPath
                        );
                        if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                        }
                        $gridBodyRow .= Form::label($labelAttr);
                        $gridBodyRow .= '</td>';
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;" class="float-left middle' . $hideClass . '">';
                        $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                        $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $fillParamData);
                        $gridBodyRow .= '</div>';
                        $gridBodyRow .= '</td>';

                        unset($rowData[$resetArrIndex++]);
                    }
                    
                    if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                        $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                        $_seperator = true;
                        $xxx = $xx;
                    } else {
                        $xxx++;
                    }
                }
    
                if ($_seperator) {
                    $rows = array_chunk($rowData, $columnCount);
                    $_seperator = false;
                    $ww = 0;
                    $w = count($rows);
                    continue;
                }
                
                $ww++;
            }
            
            if (isset($rowFullData['isShowDelete']) && $rowFullData['isShowDelete'] === '1') {
                $gridBodyRow .= '<td style="width:100%; float: left;" class="text-center stretchInput middle' . ($rowFullData['isShowDelete'] === '1' ? '' : ' hide') . '">';
                    $gridBodyRow .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row pull-right mr15" title="' . $this->lang->line('delete_btn') . '"><i class="fa fa-trash"></i></a>';
                $gridBodyRow .= '</td>';
            }
            
            $gridHeadBodyRow .=  '<div class="float-left pb10 pt10 w-100" style="width: 100%; text-align: center;"><img src="assets/core/global/img/images.jpg" class="img-fluid rounded-circle imageSrc" style="border:1px #ccc solid;height:70px"></div>'
                                . '<div class="template-action-buttons btn-group-circle btn-group-xs btn-group-solid" style="float: left !important;text-align: center;align-items: center;width: 100%;">' 
                                    . '<a href="javascript:;" style="padding: 2px 6px 2px 6px;" onclick="ntrGetData(this, \'idCardReadWtemplate\', \''. $methodId .'\', \''. $uniqId .'\');" title="И/үнэмлэх" class="btn btn-xs green idCardReadWtemplate-'. $methodId .'"><i class="fa fa-credit-card"></i></a>' 
                                    . '<a href="javascript:;" style="padding: 2px 6px 2px 6px;" onclick="ntrGetData(this, \'citizenData\', \''. $methodId .'\', \''. $uniqId .'\');" title="Х/уншуулах" class="btn btn-xs purple-plum citizenData-'. $methodId .'"><i class="fa fa-credit-card"></i></a>'
                                . '</div>'
                            . '</td>';
            $gridHeadBodyRow .= '<td style="float: left;width: 60%;"><table>';
            $gridHeadBodyRow .= '<td style="background: none !important"><input type="hidden" name="param[' . $parentMetaCode . '.mainRowCount][]"/></td>';
            
            $gridHeadBodyRow .= $gridBodyRow;
            
            $gridHeadBodyRow .= '<td style="float: left;width: 100%; padding: 4px !important;" class="text-center  "> <hr></td>';
            $gridHeadBodyRow .= '<td><table><tbody>' . $gridBodyRowAfter . '</tbody></table></td>';
            
            $gridHeadBodyRow .= '</table></td>';
            
            $gridHeadBodyRow .= '<td style="float: left; padding: 4px !important; width: 20%;">'
                                . '<div class="bp-signature pt40">'
                                    . '<button type="button" class="btn btn-sm purple-plum" onclick="ntrGetData(this, \'signatureWrite\', \''. $methodId .'\', \''. $uniqId .'\');"><i class="fa fa-pencil"></i> Гарын үсэг зурах</button>' 
                                    . '<button type="button" class="btn btn-sm red-sunglo" onclick="ntrGetData(this, \'signatureRemove\', \''. $methodId .'\', \''. $uniqId .'\');" title="Гарын үсэг устгах"><i class="fa fa-trash"></i></button>' 
                                    . '<div class="bp-signature-image"></div>'
                                    . '<input type="hidden" name="param['. $parentMetaCode .'.signature][0][]" class="form-control form-control-sm signatureInit" data-path="'. $parentMetaCode .'.signature" data-field-name="signature" data-isclear="0">'
                                . '</div>'
                            . '</td>';            
            $gridHeadBodyRow .= '</tr>';
            
            
            //$gridBodyRow = '';
            $gridBodyRow = $gridHeadBodyRow;
        }

        return $gridBodyRow;
    }
    
    public function renderDepthLevelAddDtlRow($bpMetaDataId, $rowData, $paramName, $columnCount, $rowIndex, $funcArg = array(), $fillParamData = array()) {
        $this->load->model('mdwebservice', 'middleware/models/');

        $tableCell = '';
        if (empty($rowData)) {
            return $tableCell;
        }

        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $columnCount);
        $w = count($rows);
        
        while ($ww < $w) {
            
            $columns = $rows[$ww];

            $tableCell .= '<tr>';
            $xx = count($columns);
            $xxx = 0;
            $hrClass = '';
            
            while ($xxx < $xx) {
                
                /* start layout */
                if (self::$isLayoutRender 
                    && $columns[$xxx]['IS_SHOW'] == '1' 
                    && $columns[$xxx]['LAYOUT_SECTION_CODE'] 
                    && !isset(self::$layoutExistsParam[$bpMetaDataId][$columns[$xxx]['PARAM_REAL_PATH']])) {
                    
                    self::$fieldCssStyle .= self::fieldHeaderStyleLayout($columns[$xxx], 'bp-window-' . $bpMetaDataId);
                    
                    $rowControl = Mdwebservice::renderLayoutSectionParam($bpMetaDataId, $columns[$xxx], 'param['.$columns[$xxx]['PARAM_REAL_PATH'].'][0][]', $fillParamData);
                    
                    $displayOrder = self::getLayoutParamDisplayOrder($columns[$xxx]['LAYOUT_DISPLAY_ORDER']);
                    
                    if ($columns[$xxx]['LAYOUT_TAB_NAME']) {
                        self::$sections[$columns[$xxx]['LAYOUT_SECTION_CODE']][$columns[$xxx]['LAYOUT_TAB_NAME']]['header'][$displayOrder] = $rowControl;
                    } else {

                        if (isset(self::$layoutSectionOrder[$columns[$xxx]['LAYOUT_SECTION_CODE']][$displayOrder])) {
                            $displayOrder = self::$layoutSectionOrder[$columns[$xxx]['LAYOUT_SECTION_CODE']][$displayOrder] . '.1';
                        } else {
                            self::$layoutSectionOrder[$columns[$xxx]['LAYOUT_SECTION_CODE']][$displayOrder] = $displayOrder;
                        }

                        self::$sections[$columns[$xxx]['LAYOUT_SECTION_CODE']]['pfWithoutTab'][$displayOrder] = $rowControl;
                    }
                    
                    self::$layoutExistsParam[$bpMetaDataId][$columns[$xxx]['PARAM_REAL_PATH']] = 1;
                    
                } else { /* end layout */
                    
                    if ($columns[$xxx]['IS_SHOW'] !== '1') {
                        $hideClass = ' hide';
                    } else {
                        $hideClass = '';
                    }

                    $tableCell .= '<td class="text-right middle float-left' . $hideClass . '" data-cell-path="' . $paramName . "." . $columns[$xxx]['META_DATA_CODE'] . '" style="width: 18%">';
                    $labelAttr = array(
                        'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                        'for' => "param[" . $columns[$xxx]['META_DATA_CODE'] . "]",
                        'data-label-path' => $paramName . "." . $columns[$xxx]['META_DATA_CODE']
                    );
                    if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                        $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                    }
                    $tableCell .= Form::label($labelAttr);
                    $tableCell .= '</td>';
                    $tableCell .= '<td data-cell-path="' . $paramName . "." . $columns[$xxx]['META_DATA_CODE'] . '" style="width: 32%" class="middle float-left' . $hideClass . '">';
                    $control = Mdwebservice::renderParamControl($bpMetaDataId, $columns[$xxx], "param[" . $paramName . "." . $columns[$xxx]['META_DATA_CODE'] . "][" . $rowIndex . "][]", $paramName . "." . $columns[$xxx]['META_DATA_CODE'], $fillParamData, 'removeSelect2');
                    $tableCell .= $control;
                    $tableCell .= '</td>';

                    if (isset($funcArg['htmlcontent'])) {
                        $funcArg['htmlcontent'] = str_ireplace('#'.$paramName . "." . $columns[$xxx]['META_DATA_CODE'].'#', $control, $funcArg['htmlcontent']);
                    }

                    unset($rowData[$resetArrIndex++]);
                }
                
                if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                    $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                    $_seperator = true;
                    $xxx = $xx;
                } else {
                    $xxx++;
                }
            }
            
            $tableCell .= '</tr>';

            if ($_seperator) {
                $tableCell .= "<tr>";
                $tableCell .= '<td colspan="' . ($columnCount * 2) . '">';
                $tableCell .= '<hr class="custom' . ' ' . $hrClass . '">';
                $tableCell .= "</td>";
                $tableCell .= "</tr>";
            }

            if ($_seperator) {
                $rows = array_chunk($rowData, $columnCount);
                $_seperator = false;
                $ww = 0;
                $w = count($rows);
                continue;
            }
            $ww++;
        }

        if (isset($funcArg['htmlcontent'])) {
            return $funcArg['htmlcontent'];
        }
        
        return $tableCell;
    }
    
    public function renderFirstLevelPivotDtl($uniqId, $methodId, $pivotColumns, $showColumns, $pivotPath, $colIndex, $row, $sidebarGroup, $isMultiRow, $fillParamData) {
        $lowerKey = strtolower($row['code']);

        if (isset($fillParamData[$lowerKey])) {

            $gridBodyData = $gridBodyRow = '';    

            if ($isMultiRow && is_array($fillParamData[$lowerKey]) && is_numeric(key($fillParamData[$lowerKey]))) {

                $rowNum = 0;

                foreach ($fillParamData[$lowerKey] as $rk => $rowData) {

                    $rowNum++;
                    $htmlBodyCell = $gridTabContentHeader = $gridTabContentBody = '';
                    $ii = 0;
                    $gridRowTypePath = $arg = array();
                    $isTab = false;
                    $sidebarGroupArr_{$row['id']} = array();
                    $sidebarShowRowsDtl_{$row['id']} = false;     

                    $rowClass = '';
                    $rowStateVal = 'unchanged';

                    if (issetParam($rowData['rowstate']) == 'removed') {
                        $rowClass = ' removed-tr d-none';
                        $rowStateVal = 'removed';
                        --$rowNum;
                    }

                    $gridBodyData .= '<tr class="saved-bp-row'.$rowClass.'">';
                    $gridBodyData .= '<td class="text-center middle bp-dtl-rownumber"><span>' . $rowNum . '</span><input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]" value="'.$rk.'"/></td>';

                    foreach ($row['data'] as $cn => $val) {

                        $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                        $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                        $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];                            
                        $aggregateClass = $hideClass = '';                         

                        if ($val['COLUMN_AGGREGATE'] != '') {
                            $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                        }

                        if ($val['IS_SHOW'] != '1') {
                            $hideClass = ' hide';
                        }

                        $arg = array(
                            'parentRecordType' => 'rows'
                        );       

                        if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == '') {

                            $gridBodyData .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" class="' . $row['code'] . $val['META_DATA_CODE'] . ' stretchInput text-center' . $hideClass . ' ' . $aggregateClass . '">';
                            $gridBodyData .= Mdwebservice::renderParamControl($methodId, $val, 'param[' . $val['PARAM_REAL_PATH'] . ']['.$rk.'][]', $val['PARAM_REAL_PATH'], $rowData);
                            $gridBodyData .= '</td>';

                        } else {
                            if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'rows' && $val['IS_SHOW'] == '1') {
                                
                                $pivotGroupPath = $val['LOWER_PARAM_NAME'];

                            } elseif ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'row') {

                                if ($val['IS_BUTTON'] != '1') {

                                    $additionalBody = Mdwebservice::appendSubRowInProcessEditMode($uniqId, $methodId, $val, $rowData, $rk);
                                    $gridBodyData .= $additionalBody['additionalBody'];

                                    if (!empty($additionalBody['sideBarArr'])) {
                                        $sidebarShowRowsDtl_{$row['id']} = true;

                                        foreach ($additionalBody['sideBarArr'] as $sdval) {

                                            $sval = $sdval['row'];

                                            if (!in_array($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                                array_push($sidebarGroupArr_{$row['id']}, $sval['SIDEBAR_NAME']);
                                            }

                                            $groupKey = array_search($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                            $labelAttr = array(
                                                'text' => $this->lang->line($sval['META_DATA_NAME']),
                                                'for' => "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]",
                                                'data-label-path' => $sval['PARAM_REAL_PATH']
                                            );
                                            if ($sval['IS_REQUIRED'] == '1') {
                                                $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                            }
                                            if ($sval['META_TYPE_CODE'] == 'date') {
                                                $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $sval, "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]", '', $sdval['fillData']) . "</div>";
                                            } elseif ($sval['META_TYPE_CODE'] == 'boolean') {
                                                $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData']);
                                            } else {
                                                $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData'], 'removeSelect2');
                                            }
                                            $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                                'input_label_txt' => Form::label($labelAttr),
                                                'data_path' => $sval['PARAM_REAL_PATH'], 
                                                'input_html' => $inHtml
                                            );
                                            $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];

                                        }
                                    }

                                } else {

                                    ++$ii;
                                    $gridTabActive = '';
                                    if ($ii === 1) {
                                        $gridTabActive = ' active';
                                    }

                                    array_push($gridRowTypePath, $val['PARAM_REAL_PATH']);

                                    $arg['isTab'] = 'tab';
                                    $isTab = true;
                                    $gridTabContentHeader .= '<li class="nav-item ' . $hideClass . '" data-li-path="' . $val['PARAM_REAL_PATH'] . '">';
                                    $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . $this->lang->line($val['META_DATA_NAME']) . '</a>';
                                    $gridTabContentHeader .= '</li>';
                                    $gridTabContentBody .= '<div class="tab-pane in' . $hideClass . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $val['PARAM_REAL_PATH'] . '">';
                                    $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                    $gridTabContentBody .= '</div>';
                                }

                            } else {
                                $val['SIDEBAR_NAME'] = trim($val['SIDEBAR_NAME']);

                                if (!empty($val['SIDEBAR_NAME'])) {

                                    $sidebarShowRowsDtl_{$row['id']} = true;

                                    if (!in_array($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                        array_push($sidebarGroupArr_{$row['id']}, $val['SIDEBAR_NAME']);
                                    }

                                    $groupKey = array_search($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                    $labelAttr = array(
                                        'text' => $this->lang->line($val['META_DATA_NAME']),
                                        'for' => "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]",
                                        'data-label-path' => $val['PARAM_REAL_PATH']
                                    );
                                    if ($val['IS_REQUIRED'] == '1') {
                                        $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                    }
                                    if ($val['META_TYPE_CODE'] == 'date') {
                                        $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData) . "</div>";
                                    } elseif ($val['META_TYPE_CODE'] == 'boolean') {
                                        $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData);
                                    } else {
                                        $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData, 'removeSelect2');
                                    }
                                    $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                        'input_label_txt' => Form::label($labelAttr),
                                        'data_path' => $val['PARAM_REAL_PATH'], 
                                        'input_html' => $inHtml
                                    );
                                    $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];                                    
                                }                                        
                            }
                        }

                        if (!isset($isRowState) && strtolower($val['META_DATA_CODE']) == 'rowstate') {
                            $isRowState = true;
                        }
                    }

                    if (!isset($isRowState)) {
                        $gridBodyData .= '<td data-cell-path="' . $row['code'] . '.rowState" class="display-none">';
                        $gridBodyData .= '<input type="hidden" name="param[' . $row['code'] . '.rowState]['.$rk.'][]" data-path="'.$row['code'].'.rowState" data-field-name="rowState" data-isclear="0" value="'.$rowStateVal.'">';
                        $gridBodyData .= '</td>';
                    }

                    if ($pivotColumns) {

                        foreach ($pivotColumns as $p => $pivotRow) {

                            $isTab = false;
                            $subDataRow = $gridRowTypePath = $arg = array();

                            $lastCellData = '<input type="hidden" name="param['.$pivotPath.'.rowCount]['.$rk.'][]">';

                            if (isset($rowData[$pivotGroupPath])) {

                                $subDtl = $rowData[$pivotGroupPath];

                                foreach ($subDtl as $subRow) {

                                    if ($pivotRow['supplierid'] == $subRow['supplierid']) {
                                        $subDataRow = $subRow;
                                        //break;
                                    }
                                }
                            }

                            foreach ($showColumns as $c => $colRow) {

                                if ($colRow['IS_SHOW'] == '1' && $colRow['LOWER_PARAM_NAME'] != 'paymentdtl') {

                                    $foodAmount = $aggregateClass = '';
                                    $paramRealPath = $colRow['NODOT_PARAM_REAL_PATH'];
                                    $colStyle = ($colIndex == $c) ? ' pv-border-right-bold' : '';

                                    if ($colRow['COLUMN_AGGREGATE'] != '') {
                                        $isAggregate = true;
                                        $foodAmount = '0.00';
                                        $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                                    }

                                    $cellData = '';
                                    $cellClass = 'stretchInput';

                                    if ($subDataRow) {

                                        if ($colRow['META_TYPE_CODE'] == 'group') {

                                            if ($colRow['RECORD_TYPE'] == 'rows' && isset($subDataRow[$colRow['LOWER_PARAM_NAME']]) && $subDataRow[$colRow['LOWER_PARAM_NAME']]) {

                                                $arg['isTab'] = 'tab';
                                                $arg['isShowAdd'] = $colRow['IS_SHOW_ADD'];
                                                $arg['isShowDelete'] = $colRow['IS_SHOW_DELETE'];
                                                $arg['isShowMultiple'] = $colRow['IS_SHOW_MULTIPLE'];        
                                                $arg['groupKeyLookupMeta'] = $colRow['LOOKUP_KEY_META_DATA_ID'];
                                                $arg['isShowMultipleKeyMap'] = $colRow['IS_MULTI_ADD_ROW_KEY'];
                                                $arg['isFirstRow'] = $colRow['IS_FIRST_ROW'];
                                                $arg['code'] = $colRow['META_DATA_CODE'];
                                                $arg['paramPath'] = $colRow['PARAM_REAL_PATH'];
                                                $arg['groupConfigParamPath'] = $colRow['GROUP_CONFIG_PARAM_PATH_GROUP'];
                                                $arg['groupConfigLookupPath'] = $colRow['GROUP_CONFIG_FIELD_PATH_GROUP'];
                                                $arg['parentRecordType'] = 'rowsrows';
                                                $arg['parentRowIndex'] = $p;
                                                $arg['joinstrRows'] = $colRow['RECORD_TYPE'];

                                                $gridTabContentHeader = '<li class="nav-item" data-li-path="'.$colRow['PARAM_REAL_PATH'].'">';
                                                $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $colRow['META_DATA_CODE'] . '" class="nav-link active" data-toggle="tab">' . $this->lang->line($colRow['META_DATA_NAME']) . '</a>';
                                                $gridTabContentHeader .= '</li>';

                                                $gridTabContentBody = '<div class="tab-pane in active" id="' . $row['code'] . '_' . $colRow['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $colRow['META_DATA_CODE'] . '">';                                        
                                                $gridTabContentBody .= self::buildTreeParamTwo($uniqId, $methodId, $colRow['PARAM_REAL_PATH'], $colRow['RECORD_TYPE'], $colRow['ID'], $subDataRow, '', $colRow['COLUMN_COUNT'], $rk, $arg);
                                                $gridTabContentBody .= '</div>';

                                                $cellData .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" style="width:35px" title="Дэлгэрэнгүй" data-b-path="' . $colRow['PARAM_REAL_PATH'] . '">';
                                                $cellData .= '...';
                                                $cellData .= '</a> ';
                                                $cellData .= '<div class="param-tree-container-tab param-tree-container hide">';
                                                $cellData .= '<div class="tabbable-line">
                                                        <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                                        <div class="tab-content">
                                                        ' . $gridTabContentBody . '
                                                        </div>
                                                    </div>';
                                                $cellData .= '</div>';

                                                $cellClass = 'middle';

                                            } elseif ($colRow['RECORD_TYPE'] == 'row' && isset($subDataRow[$colRow['LOWER_PARAM_NAME']]) && $subDataRow[$colRow['LOWER_PARAM_NAME']]) {
                                                $cellData .= 'row';
                                            } else {
                                                $cellData .= '';
                                            }

                                        } else {
                                            $cellData .= Mdwebservice::renderParamControl($methodId, $colRow, 'param[' . $colRow['PARAM_REAL_PATH'] . ']['.$rk.'][]', $colRow['PARAM_REAL_PATH'], $subDataRow);
                                        }

                                    } else {
                                        $cellData .= '';
                                    }

                                    $gridBodyData .= '<td data-group-num="'.$p.'" data-cell-path="' . $colRow['PARAM_REAL_PATH'] . '" class="' . $paramRealPath . ' '.$cellClass.' text-center'.$colStyle.'" '.$aggregateClass.'>';
                                    $gridBodyData .= $cellData;

                                    if ($colStyle != '') {
                                        $gridBodyData .= '<!--lastcell-->';
                                    }

                                    $gridBodyData .= '</td>';

                                } else {
                                    
                                    if ($colRow['META_TYPE_CODE'] == 'group') {

                                        if ($colRow['RECORD_TYPE'] == 'rows' && isset($subDataRow[$colRow['LOWER_PARAM_NAME']]) && $subDataRow[$colRow['LOWER_PARAM_NAME']]) {
                                            
                                            $arg['isTab'] = 'tab';
                                            $arg['isShowAdd'] = $colRow['IS_SHOW_ADD'];
                                            $arg['isShowDelete'] = $colRow['IS_SHOW_DELETE'];
                                            $arg['isShowMultiple'] = $colRow['IS_SHOW_MULTIPLE'];        
                                            $arg['groupKeyLookupMeta'] = $colRow['LOOKUP_KEY_META_DATA_ID'];
                                            $arg['isShowMultipleKeyMap'] = $colRow['IS_MULTI_ADD_ROW_KEY'];
                                            $arg['isFirstRow'] = $colRow['IS_FIRST_ROW'];
                                            $arg['code'] = $colRow['META_DATA_CODE'];
                                            $arg['paramPath'] = $colRow['PARAM_REAL_PATH'];
                                            $arg['groupConfigParamPath'] = $colRow['GROUP_CONFIG_PARAM_PATH_GROUP'];
                                            $arg['groupConfigLookupPath'] = $colRow['GROUP_CONFIG_FIELD_PATH_GROUP'];
                                            $arg['parentRecordType'] = 'rowsrows';
                                            $arg['parentRowIndex'] = $p;
                                            $arg['joinstrRows'] = $colRow['RECORD_TYPE'];

                                            $gridTabContentHeader = '<li class="nav-item" data-li-path="'.$colRow['PARAM_REAL_PATH'].'">';
                                            $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $colRow['META_DATA_CODE'] . '" class="nav-link active" data-toggle="tab">' . $this->lang->line($colRow['META_DATA_NAME']) . '</a>';
                                            $gridTabContentHeader .= '</li>';

                                            $gridTabContentBody = '<div class="tab-pane in active" id="' . $row['code'] . '_' . $colRow['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $colRow['META_DATA_CODE'] . '">';                                        
                                            $gridTabContentBody .= self::buildTreeParamTwo($uniqId, $methodId, $colRow['PARAM_REAL_PATH'], $colRow['RECORD_TYPE'], $colRow['ID'], $subDataRow, '', $colRow['COLUMN_COUNT'], $rk, $arg);
                                            $gridTabContentBody .= '</div>';

                                            $lastCellData .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl hide" style="width:31px" title="Дэлгэрэнгүй" data-b-path="' . $colRow['PARAM_REAL_PATH'] . '">';
                                            $lastCellData .= '...';
                                            $lastCellData .= '</a> ';
                                            $lastCellData .= '<div class="param-tree-container-tab param-tree-container hide">';
                                            $lastCellData .= '<div class="tabbable-line">
                                                    <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                                    <div class="tab-content">
                                                    ' . $gridTabContentBody . '
                                                    </div>
                                                </div>';
                                            $lastCellData .= '</div>';

                                            $cellClass = 'middle';

                                        } elseif ($colRow['RECORD_TYPE'] == 'row' && isset($subDataRow[$colRow['LOWER_PARAM_NAME']]) && $subDataRow[$colRow['LOWER_PARAM_NAME']]) {
                                            $lastCellData .= 'row';
                                        } else {
                                            $lastCellData .= '';
                                        }

                                    } else {
                                        $lastCellData .= Mdwebservice::renderParamControl($methodId, $colRow, 'param[' . $colRow['PARAM_REAL_PATH'] . ']['.$rk.'][]', $colRow['PARAM_REAL_PATH'], $subDataRow);
                                    }
                                }
                            }

                            $gridBodyData = str_replace('<!--lastcell-->', $lastCellData, $gridBodyData);
                        }
                        
                        if ($row['isShowDelete'] == '1') {
                            $gridBodyData .= '<td class="text-center stretchInput middle"><a href="javascript:;" class="btn red btn-xs bp-remove-row" title="'.$this->lang->line('delete_btn').'"><i class="fa fa-trash"></i></a></td>';
                        }
                    }

                    //$htmlBodyCell .= '<td class="text-center stretchInput middle' . ($row['isShowDelete'] === '1' ? '' : ' hide') . '">';

                    if ($sidebarShowRowsDtl_{$row['id']}) {

                        $htmlBodyCell .= '<a href="javascript:;" onclick="proccessRenderPopup(\'div#bp-window-' . $methodId . '\', this);" class="btn btn-xs purple-plum bp-btn-sidebar" style="width:21px" title="Popup цонхоор харах"><i class="fa fa-external-link"></i></a>';
                        $htmlBodyCell .= '<div class="sidebarDetailSection hide">';

                        if (!empty($sidebarGroupArr_{$row['id']})) {
                            foreach ($sidebarGroupArr_{$row['id']} as $keyPopGroup => $rowPopGroup) {

                                $htmlBodyCell .= '<p class="property_page_title">' . $this->lang->line($rowPopGroup) . '</p>' .
                                '<div class="panel panel-default bg-inverse grid-row-content">' .
                                '<table class="table sheetTable sidebar_detail">' .
                                '<tbody>';
                                if (isset($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk])) {
                                    foreach ($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk] as $subrowPopGroup) {
                                        $htmlBodyCell .= "<tr data-cell-path='".$subrowPopGroup['data_path']."'>" .
                                        "<td style='width: 229px;' class='left-padding'>" . $this->lang->line($subrowPopGroup['input_label_txt']) . "</td>" .
                                        "<td>" . $subrowPopGroup['input_html'] . "</td>" .
                                        "</tr>";
                                    }
                                }
                                $htmlBodyCell .= '</tbody></table></div>';

                            }
                        }  
                        $htmlBodyCell .= '</div>';
                    } 

                    /*if ($row['isShowDelete'] === '1') {
                        $htmlBodyCell .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row" title="'.$this->lang->line('delete_btn').'"><i class="fa fa-trash"></i></a>';
                    }  

                    $htmlBodyCell .= '</td>';*/

                    if ($isTab) {

                        $gridRowTypePath = implode('|', $gridRowTypePath);

                        $gridBodyData .= '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                        $gridBodyData .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" style="width:35px" title="Дэлгэрэнгүй" data-b-path="' . $gridRowTypePath . '">';
                        $gridBodyData .= '...';
                        $gridBodyData .= '</a> ';
                        $gridBodyData .= '<div class="param-tree-container-tab param-tree-container hide">';
                        $gridBodyData .= '<div class="tabbable-line">
                                <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                <div class="tab-content">
                                ' . $gridTabContentBody . '
                                </div>
                            </div>';
                        $gridBodyData .= '</div>';
                        $gridBodyData .= '</td>';
                    }

                    $gridBodyData .= $htmlBodyCell;
                    $gridBodyData .= '</tr>';
                }
            }

            return array(
                'gridBody' => '',
                'gridBodyRow' => $gridBodyRow,
                'gridBodyData' => $gridBodyData,
                'isRowState' => (!isset($isRowState) ? false : $isRowState)
            );
        }   
        
        return false;
    }
    
    public function saveModeBpFileFolder() {
        $response = $this->model->saveModeBpFileFolderModel();
        echo json_encode($response);
    }
    
    public function updateModeBpFileFolder() {
        $response = $this->model->updateModeBpFileFolderModel();
        echo json_encode($response);
    }
    
    public function getChildBpFileFolder() {
        $response = $this->model->getChildBpFileFolderModel();
        echo json_encode($response);
    }
    
    public function renderAddModeBpPhotoTab($uniqId = null, $refStructureId = null) {
        $this->view->selectedRow = Input::post('selectedRow');
        $this->view->refStructureId = Input::numeric('refStructureId');
        $this->view->uniqId = Input::numeric('uniqId');
        $this->view->tagData = $this->model->getTagDataModel();
        
        if ($uniqId && $refStructureId) {
            $this->view->refStructureId = $refStructureId;
            $this->view->uniqId = $uniqId;
            return $this->view->renderPrint('addon/renderAddModeBpPhotoTab', self::$viewPath);
        } else {
            $this->view->render('addon/renderAddModeBpPhotoTab', self::$viewPath);
        }
    }

    public function renderAddModeBpFileTab($uniqId = null) {
        $this->view->uniqId = Input::numeric('uniqId');
        
        if ($uniqId) {
            $this->view->uniqId = $uniqId;
            return $this->view->renderPrint('addon/renderAddModeBpFileTab', self::$viewPath);
        } else {
            $this->view->render('addon/renderAddModeBpFileTab', self::$viewPath);
        }
    }

    public function renderAddModeBpCommentTab($uniqId = null) {
        $this->view->uniqId = Input::numeric('uniqId');
        
        if ($uniqId) {
            $this->view->uniqId = $uniqId;
            return $this->view->renderPrint('addon/renderAddModeBpCommentTab', self::$viewPath);
        } else {
            $this->view->render('addon/renderAddModeBpCommentTab', self::$viewPath);
        }
    }
    
    public function renderAddModeBpRelationTab() {
        $this->load->model('mdmetadata', 'middleware/models/');
        
        $this->view->uniqId = Input::numeric('uniqId');
        $this->view->processId = Input::numeric('processId');
        $this->view->refStructureId = Input::numeric('refStructureId');

        $this->view->semanticConfigList = $this->model->getSemanticConfigListModel($this->view->refStructureId, $this->view->processId);

        $this->view->render('addon/renderAddModeBpRelationTab', self::$viewPath);
    }

    public function bpCommentTempSave() {
        $this->view->comment = Input::post('comment');
        $this->view->commentHtmlTag = $this->view->comment;
        $this->view->mentionData = Input::post('mentionData');
        $mentions = json_decode(html_entity_decode($this->view->mentionData, ENT_QUOTES), true);

        if (is_array($mentions)) {
            foreach ($mentions as $row) {
                $this->view->commentHtmlTag = str_replace($row['name'], '<span id="'.$row['id'].'" style="color:#333;font-weight: bold;">'.$row['name'].'</span>', $this->view->commentHtmlTag);                
            }
        }
        
        $this->view->render('addon/bpCommentTempSave', self::$viewPath);
    }

    public function saveBpAddOn($refStructureId, $sourceId) {
        
        if ($refStructureId != '' && $sourceId != '') {
            
            $tempFolderIds    = array();
            $sourceIds        = array($sourceId);
            $currentDate      = Date::currentDate();
            $sessionUserKeyId = Ue::sessionUserKeyId();
            
            if (isset($_POST['param']['pfEcmFindChildTable']) 
                && isset($_POST['param']['pfEcmFindChildColName']) 
                && isset($_POST['param']['pfEcmFindChildSelectName'])) {
                
                $pfEcmFindChildTable = Input::param($_POST['param']['pfEcmFindChildTable']);
                $pfEcmFindChildColName = Input::param($_POST['param']['pfEcmFindChildColName']);
                $pfEcmFindChildSelectName = Input::param($_POST['param']['pfEcmFindChildSelectName']);
                
                $rowIds = $this->model->getEcmFindRowIdsModel($sourceId, $pfEcmFindChildTable, $pfEcmFindChildColName, $pfEcmFindChildSelectName);
                
                if ($rowIds) {
                    $sourceIds = $rowIds;
                }
            }
           
            if (Input::postCheck('bp_photo_extension')) {
                
                includeLib('Image/image-magician/php_image_magician');
                
                $photoData = Input::post('bp_photo_extension');

                foreach ($photoData as $p => $photo) {
                    
                    $photoExtension = $photo;
                    $photoName = 'photo_'.getUID().$p.'.'.$photoExtension;
                    
                    $imgOrig = str_replace(' ', '+', Input::param($_POST['bp_photo_orig_data'][$p]));
                    $imgThumb = str_replace(' ', '+', Input::param($_POST['bp_photo_thumb_data'][$p]));
                    
                    $dataOrig  = base64_decode($imgOrig);
                    $dataThumb = base64_decode($imgThumb); 
                    
                    $photo_original = self::bpUploadCustomPath('/metavalue/photo_original/');
                    
                    $origPhoto = file_put_contents($photo_original.$photoName, $dataOrig);
                    
                    if ($origPhoto) {
                        
                        $photo_thumb = self::bpUploadCustomPath('/metavalue/photo_thumb/');
                        
                        $thumbPhoto = file_put_contents($photo_thumb.$photoName, $dataThumb);
                        
                        if ($thumbPhoto) {
                            
                            $contentId = getUIDAdd($p);
                            $image = new imageLib($photo_original . $photoName);

                            $middleThumb = $photo_thumb . str_replace('.'.$photoName, '_mid.'.$photoExtension, $photoName);

                            $image->resizeImage(400, 500, 'landscape', true);
                            $image->saveImage($middleThumb, 95);
                            
                            $dataContent = array(
                                'CONTENT_ID'           => $contentId,
                                'FILE_NAME'            => ((empty($_POST['bp_photo_name'][$p])) ? $photoName : Input::param($_POST['bp_photo_name'][$p])),
                                'PHYSICAL_PATH'        => $photo_original . $photoName, 
                                'THUMB_PHYSICAL_PATH'  => $photo_thumb . $photoName, 
                                'MIDDLE_PHYSICAL_PATH' => $middleThumb, 
                                'FILE_EXTENSION'       => $photoExtension, 
                                'FILE_SIZE'            => filesize($photo_original . $photoName),
                                'CREATED_USER_ID'      => $sessionUserKeyId,
                                'CREATED_DATE'         => $currentDate,
                                'IS_EMAIL'             => issetParam($_POST['bp_photo_sendmail'][$p]),
                                'IS_PHOTO'             => 1
                            );
                            $dataContentFile = $this->db->AutoExecute('ECM_CONTENT', $dataContent);
                            
                            if ($dataContentFile) {
                                
                                foreach ($sourceIds as $srcId) {

                                    $dataContentMap = array(
                                        'ID'               => getUID(),
                                        'REF_STRUCTURE_ID' => $refStructureId,
                                        'RECORD_ID'        => $srcId,
                                        'CONTENT_ID'       => $contentId,
                                        'IS_MAIN'          => 0,
                                        'ORDER_NUM'        => ($p + 1)
                                    );
                                    $this->db->AutoExecute('ECM_CONTENT_MAP', $dataContentMap);

                                    if (isset($_POST['bp_photo_tag'][$p])) {

                                        $tagValueId = Input::param($_POST['bp_photo_tag'][$p]);
                                        $tagIds = explode(',', $tagValueId);

                                        foreach ($tagIds as $tagId) {

                                            $dataTagMap = array(
                                                'ID'             => getUID(),
                                                'SRC_TABLE_NAME' => 'ECM_CONTENT',
                                                'SRC_TAG_ID'     => $contentId,
                                                'TRG_TABLE_NAME' => 'META_TAG',
                                                'TRG_TAG_ID'     => $tagId,
                                            );
                                            $this->db->AutoExecute('TAG_SEMANTIC_MAP', $dataTagMap);
                                        }
                                    }

                                    if (isset($_POST['bp_folderid'][$p]) && $_POST['bp_folderid'][$p]) {

                                        $directoryId = Input::param($_POST['bp_folderid'][$p]);

                                        $dataDirMap = array(
                                            'ID'               => getUID(),
                                            'REF_STRUCTURE_ID' => $refStructureId,
                                            'RECORD_ID'        => $srcId,
                                            'DIRECTORY_ID'     => $directoryId,
                                            'CREATED_DATE'     => $currentDate,
                                            'CREATED_USER_ID'  => $sessionUserKeyId,
                                            'ORDER_NUM'        => ($p + 1)
                                        );

                                        $result = $this->db->AutoExecute('ECM_DIRECTORY_MAP', $dataDirMap);

                                        if ($result) {

                                            $dataDirCon = array(
                                                'ID'               => getUID(),
                                                'CONTENT_ID'       => $contentId,
                                                'DIRECTORY_ID'     => $directoryId,
                                            );

                                            $result = $this->db->AutoExecute('ECM_CONTENT_DIRECTORY', $dataDirCon);
                                            array_push($tempFolderIds, $directoryId);
                                            $this->db->AutoExecute('ECM_DIRECTORY', array('CHECK_RW' => '0'), 'UPDATE', "ID = $directoryId");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            if (Input::postCheck('bp_folder_id')) {
                
                $photoDirData = Input::post('bp_folder_id');
                
                foreach ($photoDirData as $p => $directoryId) {
                    
                    if (!in_array($directoryId, $tempFolderIds) && $directoryId) {
                        
                        $dataDirMap = array(
                            'ID'               => getUIDAdd($p),
                            'REF_STRUCTURE_ID' => $refStructureId,
                            'RECORD_ID'        => $sourceId,
                            'DIRECTORY_ID'     => $directoryId,
                            'CREATED_DATE'     => $currentDate,
                            'CREATED_USER_ID'  => $sessionUserKeyId,
                            'ORDER_NUM'        => ($p + 1)
                        );
                        
                        $this->db->AutoExecute('ECM_DIRECTORY_MAP', $dataDirMap);
                        $this->db->AutoExecute('ECM_DIRECTORY', array('CHECK_RW' => '0'), 'UPDATE', "ID = $directoryId");
                    }
                }
            }
            
            if (isset($_FILES['bp_file'])) {
                
                $file_arr = Arr::arrayFiles($_FILES['bp_file']);
                $fileData = Input::post('bp_file_name');
                
                if ($fileData !== null) {
                    
                    $file_path = self::bpUploadCustomPath('/metavalue/file/');
                    
                    foreach ($fileData as $f => $file) {
                        
                        if (isset($file_arr[$f]['name']) && $file_arr[$f]['name'] != '' && $file_arr[$f]['size'] != null) {
                            
                            $newFileName = 'file_' . getUID() . $f;
                            $fileExtension = strtolower(substr($file_arr[$f]['name'], strrpos($file_arr[$f]['name'], '.') + 1));
                            $fileName = $newFileName . '.' . $fileExtension;
                            
                            FileUpload::SetFileName($fileName);
                            FileUpload::SetTempName($file_arr[$f]['tmp_name']);
                            FileUpload::SetUploadDirectory($file_path);
                            FileUpload::SetValidExtensions(explode(',', Config::getFromCache('CONFIG_FILE_EXT')));
                            FileUpload::SetMaximumFileSize(FileUpload::GetConfigFileMaxSize()); //10mb
                            $uploadResult = FileUpload::UploadFile();
                            
                            if ($uploadResult) {
                                
                                $contentId = getUIDAdd($f);
                                $dataContent = array(
                                    'CONTENT_ID'      => $contentId,
                                    'FILE_NAME'       => ((empty($file)) ? $file_arr[$f]['name'] : $file),
                                    'PHYSICAL_PATH'   => $file_path . $fileName,
                                    'FILE_EXTENSION'  => $fileExtension,
                                    'FILE_SIZE'       => $file_arr[$f]['size'],
                                    'CREATED_USER_ID' => $sessionUserKeyId,
                                    'CREATED_DATE'    => $currentDate,
                                    'IS_EMAIL'        => issetVar($_POST['bp_file_sendmail'][$f]),
                                    'IS_PHOTO'        => 0
                                );
                                $dataContentFile = $this->db->AutoExecute('ECM_CONTENT', $dataContent);
                                
                                if ($dataContentFile) {
                                    foreach ($sourceIds as $srcId) {
                                        $dataContentMap = array(
                                            'ID'               => getUID(),
                                            'REF_STRUCTURE_ID' => $refStructureId,
                                            'RECORD_ID'        => $srcId,
                                            'CONTENT_ID'       => $contentId,
                                            'ORDER_NUM'        => ($f + 1)
                                        );
                                        $this->db->AutoExecute('ECM_CONTENT_MAP', $dataContentMap);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (Input::postCheck('bpCommentText')) {
                
                $commentData = Input::post('bpCommentText');
                
                foreach ($commentData as $c => $comment) {
                    
                    $dataComment = array(
                        'ID'               => getUIDAdd($c),
                        'REF_STRUCTURE_ID' => $refStructureId,
                        'RECORD_ID'        => $sourceId,
                        'COMMENT_TEXT'     => Input::param($comment),
                        'CREATED_USER_ID'  => $sessionUserKeyId,
                        'CREATED_DATE'     => Input::param($_POST['bpCommentDate'][$c])
                    );
                    $this->db->AutoExecute('ECM_COMMENT', $dataComment);

                    $mentionsUserIds = array();
                    $mentions = json_decode(html_entity_decode(Input::param($_POST['bpMentionData'][$c]), ENT_QUOTES), true);
                    
                    if ($mentions) {
                        foreach ($mentions as $m => $menrow) {
                            $dataMention = array(
                                'ID'               => getUIDAdd($m),
                                'COMMENT_ID'       => $dataComment['ID'],
                                'RECORD_ID'        => Input::param($menrow['id']),
                                'NAME'             => Input::param($menrow['name']),
                                'TABLE_NAME'       => issetVar($menrow['tablename']),
                                'CREATED_USER_ID'  => $sessionUserKeyId,
                                'CREATED_DATE'     => Input::param($_POST['bpCommentDate'][$c])
                            );
                            array_push($mentionsUserIds, array('userId' => $menrow['id']));
                            $this->db->AutoExecute('ECM_COMMENT_MENTION', $dataMention);
                        }

                        $paramsMentions = array(
                            'refStructureId' => $refStructureId,
                            'id' => $dataComment['ID'],
                            'userIds' => $mentionsUserIds
                        );
                        $this->ws->runSerializeResponse(self::$gfServiceAddress, 'send_mention_notification', $paramsMentions);                    
                    }
                }
            }
            
            if (Input::postCheck('mdcomment_text')) {
                
                $comment = Input::post('mdcomment_text');
                $dataComment = array(
                    'ID'               => getUID(),
                    'REF_STRUCTURE_ID' => $refStructureId,
                    'RECORD_ID'        => $sourceId,
                    'COMMENT_TEXT'     => $comment,
                    'CREATED_USER_ID'  => $sessionUserKeyId,
                    'CREATED_DATE'     => $currentDate
                );
                $this->db->AutoExecute('ECM_COMMENT', $dataComment);
            }
            
            if (Input::postCheck('bpcomment_text')) {
                
                $comment = Input::post('bpcomment_text');
                $dataComment = array(
                    'ID'               => getUID(),
                    'REF_STRUCTURE_ID' => $refStructureId,
                    'RECORD_ID'        => $sourceId,
                    'COMMENT_TEXT'     => $comment,
                    'CREATED_USER_ID'  => $sessionUserKeyId,
                    'CREATED_DATE'     => $currentDate
                );
                $this->db->AutoExecute('ECM_COMMENT', $dataComment);
            }
            
            if (Input::postCheck('bp_copy_physical_path')) {
                
                $copyFileData = Input::post('bp_copy_physical_path');
                $copyFileDir = self::bpUploadCustomPath('/metavalue/file/');
                
                foreach ($copyFileData as $k => $filePath) {
                    
                    if (file_exists($filePath)) {
                        
                        $contentId = getUIDAdd($k);                        
                        $fileExtension = Input::param($_POST['bp_copy_file_extension'][$k]);
                        $newPath = $copyFileDir . 'file_' . $contentId . '.' . $fileExtension;
                        
                        if (copy($filePath, $newPath)) {
                            
                            $fileName = Input::param($_POST['bp_copy_file_name'][$k]);
                            $fileName = $fileName ? $fileName : $filePath;
                            $fileSize = Input::param($_POST['bp_copy_file_size'][$k]);
                            
                            $dataContent = array(
                                'CONTENT_ID'      => $contentId,
                                'FILE_NAME'       => $fileName,
                                'PHYSICAL_PATH'   => $newPath,
                                'FILE_EXTENSION'  => $fileExtension,
                                'FILE_SIZE'       => $fileSize,
                                'CREATED_USER_ID' => $sessionUserKeyId,
                                'CREATED_DATE'    => $currentDate,
                                'IS_PHOTO'        => 0
                            );
                            $dataContentFile = $this->db->AutoExecute('ECM_CONTENT', $dataContent);

                            if ($dataContentFile) {
                                $dataContentMap = array(
                                    'ID'               => getUIDAdd($k),
                                    'REF_STRUCTURE_ID' => $refStructureId,
                                    'RECORD_ID'        => $sourceId,
                                    'CONTENT_ID'       => $contentId,
                                    'ORDER_NUM'        => ($k + 1)
                                );
                                $this->db->AutoExecute('ECM_CONTENT_MAP', $dataContentMap);
                            }
                        }
                    }
                }
            }
        }
        
        return true;
    }
    
    public function saveBpFieldEcmContent($refStructureId, $rowId, $fieldEcmContent) {
        
        if ($refStructureId != '' && $rowId != '' && $fieldEcmContent) {
            
            $currentDate = Date::currentDate();
            $sessionUserKeyId = Ue::sessionUserKeyId();
            $filePath = self::bpUploadGetPath(); 
            $n = 0;
            
            foreach ($fieldEcmContent as $field => $tempFilePath) {

                if ($tempFilePath && file_exists($tempFilePath)) {

                    $tempFileParts = pathinfo($tempFilePath);
                    $newPath = $filePath . $tempFileParts['basename'];

                    rename($tempFilePath, $newPath);
                    
                    $fileExtension = strtolower(substr($newPath, strrpos($newPath, '.') + 1));
                    $contentId = getUIDAdd($n);
                    
                    $savedContent = $this->model->getFieldEcmContentModel($refStructureId, $rowId, $field);
                    
                    if ($savedContent) {
                        
                        $idPh = $this->db->Param(0);
                        
                        $this->db->Execute("DELETE FROM ECM_CONTENT_MAP WHERE ID = $idPh", array($savedContent['MAP_ID']));
                        $this->db->Execute("DELETE FROM ECM_CONTENT WHERE CONTENT_ID = $idPh", array($savedContent['CONTENT_ID']));
                        
                        @unlink($savedContent['PHYSICAL_PATH']);
                    }
                    
                    $dataContent = array(
                        'CONTENT_ID'      => $contentId,
                        'FILE_NAME'       => 'Voice record - '.$field,
                        'PHYSICAL_PATH'   => $newPath,
                        'FILE_EXTENSION'  => $fileExtension,
                        'FILE_SIZE'       => filesize($newPath),
                        'TYPE_ID'         => 4001,
                        'CREATED_USER_ID' => $sessionUserKeyId,
                        'CREATED_DATE'    => $currentDate,
                        'IS_PHOTO'        => 0
                    );
                    $dataContentFile = $this->db->AutoExecute('ECM_CONTENT', $dataContent);

                    if ($dataContentFile) {
                        $dataContentMap = array(
                            'ID'               => getUIDAdd($n),
                            'REF_STRUCTURE_ID' => $refStructureId,
                            'RECORD_ID'        => $rowId,
                            'CONTENT_ID'       => $contentId,
                            'TAG_CODE'         => $field, 
                            'ORDER_NUM'        => ($n + 1)
                        );
                        $this->db->AutoExecute('ECM_CONTENT_MAP', $dataContentMap);
                    }
                }
                
                $n ++;
            }
        }
        
        return true;
    }
    
    public function saveBpCheckList($processId, $refStructureId, $sourceId) {
        
        if ($refStructureId != '' && $sourceId != '' && Input::postCheck('bp_checklist')) {
            
            $checkListData = $_POST['bp_checklist'];

            foreach ($checkListData as $checkId => $val) {
                
                $checkListTempId = $_POST['bp_checklist_tempid'][$checkId];
                
                $dataCheckList = array(
                    'ID'           => getUID(),
                    'STRUCTURE_ID' => $refStructureId,
                    'RECORD_ID'    => $sourceId, 
                    'CHECKLIST_ID' => $checkListTempId,
                    'PROCESS_ID'   => $processId, 
                    'IS_CHECKED'   => $val
                );
                $this->db->AutoExecute('META_PROCESS_CHECKLIST_MAP', $dataCheckList);
            }
        }
        
        return true;
    }
    
    public function saveBpMetaVerseRecordMap($processId, $refStructureId, $sourceId) {
        
        if ($refStructureId != '' && $sourceId != '' && Input::postCheck('mvDmRecordMaps')) {
            
            try {
                
                $mvDmRecordMaps = Input::post('mvDmRecordMaps');
                
                if ($trgIndicatorIds = issetParam($mvDmRecordMaps['indicatorId'])) {
                    
                    $sessionUserKeyId = Ue::sessionUserKeyId();
                    
                    foreach ($trgIndicatorIds as $k => $trgIndicatorId) {

                        $trgRecordId = $mvDmRecordMaps['recordId'][$k];

                        $insertMapRow = array(
                            'ID'                   => getUIDAdd($k), 
                            'SRC_REF_STRUCTURE_ID' => $refStructureId, 
                            'TRG_REF_STRUCTURE_ID' => $trgIndicatorId, 
                            'SRC_RECORD_ID'        => $sourceId, 
                            'TRG_RECORD_ID'        => $trgRecordId, 
                            'CREATED_DATE'         => Date::currentDate(), 
                            'CREATED_USER_ID'      => $sessionUserKeyId
                        );

                        $this->db->AutoExecute('META_DM_RECORD_MAP', $insertMapRow);
                    }
                }
                
            } catch (Exception $ex) {
                return false;
            }
        }
        
        return true;
    }
    
    public function fillBpRowsMetaVerseRecordMaps($refStructureId) {
        
        $mvDmRecordMaps = Input::post('mvDmRecordMaps');
        $rows = array();
        
        if ($refStructureId != '' && $trgIndicatorIds = issetParam($mvDmRecordMaps['indicatorId'])) {
            foreach ($trgIndicatorIds as $k => $trgIndicatorId) {
                $rows[] = array(
                    'srcRefStructureId' => $refStructureId, 
                    'trgRefStructureId' => $trgIndicatorId, 
                    'trgRecordId'       => $mvDmRecordMaps['recordId'][$k]
                );
            }
        }
        
        unset($_POST['mvDmRecordMaps']);
        
        return $rows;
    }
    
    public function fillBpRowsMetaVerseSubRecordMaps($refStructureId, $rowsData) {
        
        $mvDmRecordMaps = Input::post('mvDmRecordMaps');
        
        if ($refStructureId != '' && $trgIndicatorIds = issetParam($mvDmRecordMaps['indicatorId'])) {
            
            $rows = array();
            
            foreach ($trgIndicatorIds as $k => $trgIndicatorId) {
                $rows[] = array(
                    'srcRefStructureId' => $refStructureId, 
                    'trgRefStructureId' => $trgIndicatorId, 
                    'trgRecordId'       => $mvDmRecordMaps['recordId'][$k]
                );
            }
            
            foreach ($rowsData as $r => $row) {
                $rowsData[$r]['pfMetaVerseRecordMaps'] = $rows;
            }
        }
        
        unset($_POST['mvDmRecordMaps']);
        
        return $rowsData;
    }

    public function saveBpAttachWidget($refStructureId, $sourceId) {
        
        if ($refStructureId != '' && $sourceId != '' && Input::postCheck('bp_attach_photo')) {
                
            $checkListPath      = self::bpUploadCustomPath('/process_checklist/');
            $checkListThumbPath = self::bpUploadCustomPath('/process_checklist/thumb/');
            
            $photoData = $_POST['bp_attach_photo'];

            foreach ($photoData as $p => $photo) {
                
                if (!empty($_POST['bp_attach_photo'][$p][0])) {
                    
                    $photoExtension = Input::param($_POST['bp_attach_photo_extension'][$p][0]);
                    $photoName = 'file_'.getUID().'.'.$photoExtension;
                    
                    $imgOrig = str_replace(' ', '+', Input::param($_POST['bp_attach_photo'][$p][0]));
                    $imgThumb = str_replace(' ', '+', Input::param($_POST['bp_attach_photo_thumb'][$p][0]));
                    $dataOrig = base64_decode($imgOrig);
                    $dataThumb = base64_decode($imgThumb);
                    
                    $origPhoto = file_put_contents($checkListPath.$photoName, $dataOrig);
                    
                    if ($origPhoto) {
                        
                        $thumbPhoto = file_put_contents($checkListThumbPath.$photoName, $dataThumb);
                        
                        if ($thumbPhoto) {
                            $dataAttach = array(
                                'ID'             => getUID(),
                                'STRUCTURE_ID'   => $refStructureId,
                                'RECORD_ID'      => $sourceId, 
                                'CHECKLIST_ID'   => $p,
                                'FILE_URL'       => $checkListPath . $photoName,
                                'FILE_EXTENSION' => $photoExtension
                            );
                            $this->db->AutoExecute('META_PROCESS_CHECKLIST_MAP', $dataAttach);
                        }
                    }
                    
                } elseif (isset($_FILES['bp_attach']['name'][$p][0]) && $_FILES['bp_attach']['name'][$p][0] != '') {
                        
                    $newFileName = 'file_' . getUID();
                    $fileExtension = strtolower(substr($_FILES['bp_attach']['name'][$p][0], strrpos($_FILES['bp_attach']['name'][$p][0], '.') + 1));
                    $fileName = $newFileName . '.' . $fileExtension;

                    FileUpload::SetFileName($fileName);
                    FileUpload::SetTempName($_FILES['bp_attach']['tmp_name'][$p][0]);
                    FileUpload::SetUploadDirectory($checkListPath);
                    FileUpload::SetValidExtensions(explode(',', Config::getFromCache('CONFIG_FILE_EXT')));
                    FileUpload::SetMaximumFileSize(FileUpload::GetConfigFileMaxSize()); //10mb
                    $uploadResult = FileUpload::UploadFile();

                    if ($uploadResult) {
                        $dataAttach = array(
                            'ID'             => getUID(),
                            'STRUCTURE_ID'   => $refStructureId,
                            'RECORD_ID'      => $sourceId, 
                            'CHECKLIST_ID'   => $p,
                            'FILE_URL'       => $checkListPath . $fileName,
                            'FILE_EXTENSION' => $fileExtension
                        );
                        $this->db->AutoExecute('META_PROCESS_CHECKLIST_MAP', $dataAttach);
                    }
                    
                } elseif (!empty($_POST['bp_attach_url'][$p][0])) {
                    
                    $tempPath = Input::param($_POST['bp_attach_url'][$p][0]);
                    $fileNameExplodeArr = explode('.', $tempPath);
                    $fileExtension = $fileNameExplodeArr[1];
                    $newFileName = 'file_'.getUID().'.'.$fileExtension;

                    $newPath = $checkListPath.$newFileName;
                    
                    rename($tempPath, $newPath);
                }
            }
        }
        
        return true;
    }

    public function renderEditModeBpCommentTab($uniqId = '', $processId = '', $refStructureId = '', $sourceId = '') {
        
        if ($refStructureId == '') {
            
            $this->view->uniqId = Input::post('uniqId');
            $this->view->processId = Input::post('processId');
            $this->view->metaDataId = Input::post('refStructureId');
            $this->view->metaValueId = Input::post('sourceId');
            
            $this->view->render('addon/viewComment', self::$viewPath);
            
        } else {
            $this->view->uniqId = $uniqId;
            $this->view->processId = $processId;
            $this->view->metaDataId = $refStructureId;
            $this->view->metaValueId = $sourceId;
            
            return $this->view->renderPrint('addon/viewComment', self::$viewPath);
        }
    }
    
    public function renderEditModeBpRelationTab() {
        $this->load->model('mdmetadata', 'middleware/models/');

        $this->view->metaDataId  = Input::post('refStructureId');
        $this->view->metaValueId = Input::post('sourceId');
        $this->view->processId   = Input::post('processId');
        $this->view->uniqId      = getUID();
        
        $this->view->metaValueRelationRows = $this->model->getMetaDataValueRelationModel($this->view->metaDataId, $this->view->metaValueId);
        $this->view->semanticConfigList = $this->model->getSemanticConfigListModel($this->view->metaDataId, $this->view->processId);
        
        $this->view->render('addon/viewRelation', self::$viewPath);
    }

    public function renderEditModeBpPhotoTab($uniqId = null, $refStructureId = null, $sourceId = null, $actionType = null) {
        $this->load->model('mdmetadata', 'middleware/models/');
        
        $this->view->uniqId      = Input::numeric('uniqId');
        $this->view->metaDataId  = Input::post('refStructureId');
        $this->view->metaValueId = Input::post('sourceId');
        $this->view->actionType  = Input::post('actionType');
        
        if ($uniqId && $refStructureId && $sourceId) {
            $this->view->uniqId      = $uniqId;
            $this->view->metaDataId  = $refStructureId;
            $this->view->metaValueId = $sourceId;
            $this->view->actionType  = $actionType;
            $isReturn = true;
        }

        $this->view->metaValuePhotoRows = $this->model->getMetaDataValuePhotosModel($this->view->metaDataId, $this->view->metaValueId);
        $this->view->metaValuePhotoFolderRows = $this->model->getMetaDataValuePhotosFolderModel($this->view->metaDataId, $this->view->metaValueId);
        
        $this->load->model('mdwebservice', 'middleware/models/');
        $selectid = Arr::implode_key(', ', $this->view->metaValuePhotoRows, 'ATTACH_ID', true);
        $this->view->selectTagData = ($selectid) ? $this->model->getTagDataModel($selectid) : array();
        $this->view->tagData = $this->model->getTagDataModel();
        
        if (isset($isReturn)) {
            return $this->view->renderPrint('addon/render/viewPhoto', self::$viewPath);
        } else {
            $this->view->render('addon/render/viewPhoto', self::$viewPath);
        }
    }

    public function renderEditModeBpFileTab($uniqId = null, $refStructureId = null, $sourceId = null, $actionType = null) {
        $this->load->model('mdmetadata', 'middleware/models/');
        
        $this->view->uniqId      = Input::numeric('uniqId');
        $this->view->metaDataId  = Input::numeric('refStructureId');
        $this->view->metaValueId = Input::post('sourceId');
        $this->view->callbackFnc = Input::post('callbackFnc');
        $this->view->actionType  = Input::post('actionType');
        
        if ($uniqId && $refStructureId && $sourceId) {
            $this->view->uniqId      = $uniqId;
            $this->view->metaDataId  = $refStructureId;
            $this->view->metaValueId = $sourceId;
            $this->view->actionType  = $actionType;
            $isReturn = true;
        }
        
        $this->view->metaValueFileRows = $this->model->getMetaDataValueFilesModel($this->view->metaDataId, $this->view->metaValueId);
        
        if (isset($isReturn)) {
            return $this->view->renderPrint('addon/viewFile', self::$viewPath);
        } else {
            $this->view->render('addon/viewFile', self::$viewPath);
        }
    }

    public function renderBpTabUploadPhoto() {
        $this->load->model('mdwebservice', 'middleware/models/');

        $result = array();
        
        if (isset($_FILES['bp_photo'])) {

            $metaDataId = Input::numeric('metaDataId');
            $metaValueId = Input::post('metaValueId');
            
            if (is_array($_FILES['bp_photo']['name'])) {
                $dataAttachPhotoArr = array();
                
                foreach ($_FILES['bp_photo']['name'] as $key => $bp_photo) {
                    
                    $photo_arr[$key]['name'] = $_FILES['bp_photo']['name'][$key];
                    $photo_arr[$key]['type'] = $_FILES['bp_photo']['type'][$key];
                    $photo_arr[$key]['tmp_name'] = $_FILES['bp_photo']['tmp_name'][$key];
                    $photo_arr[$key]['error'] = $_FILES['bp_photo']['error'][$key];
                    $photo_arr[$key]['size'] = $_FILES['bp_photo']['size'][$key];
                    
                    $dir_arr[$key] = isset($_POST['bp_folder_id'][$key]) ? $_POST['bp_folder_id'][$key] : issetParam($_POST['bp_folder_id'][0]);
                    $dataAttachPhoto = self::bpTabUploadPhoto($photo_arr, $key, $metaDataId, $metaValueId, $dir_arr);
                    array_push($dataAttachPhotoArr, $dataAttachPhoto);
                }
                
                if ($dataAttachPhotoArr) {
                    echo json_encode(array('status' => 'success', 'dataAttachPhotoArr' => $dataAttachPhotoArr, 'isMulti' => '1', 'message' => 'Амжилттай нэмлээ'));
                } else {
                    echo json_encode(array('status' => 'error', 'message' => 'Алдаа гарлаа'));
                }
                
            } else {
                $p = 0;
                $photo_arr['0'] = $_FILES['bp_photo'];
                $dir_arr[$p] = isset($_POST['bp_folder_id'][$p]) ? $_POST['bp_folder_id'][$p]: '';
                $dataAttachPhoto = self::bpTabUploadPhoto($photo_arr, $p, $metaDataId, $metaValueId, $dir_arr);
                
                if ($dataAttachPhoto) {
                    echo json_encode(array('status' => 'success', 'photoPath' => $dataAttachPhoto['PHYSICAL_PATH'], 'photoThumbPath' => $dataAttachPhoto['THUMB_PHYSICAL_PATH'], 'attachId' => $dataAttachPhoto['CONTENT_ID'], 'isMulti' => '0', 'message' => 'Амжилттай нэмлээ'));
                } else {
                    echo json_encode(array('status' => 'error', 'message' => 'Алдаа гарлаа'));
                }
            }
        }
        
        return json_encode(array('status' => 'info', 'message' => ''));
    }
    
    public function bpTabUploadPhoto($photo_arr, $p, $metaDataId, $metaValueId, $dir_arr = array()) {
        
        if ($photo_arr[$p]['name'] != '') {

            $photo_original = self::bpUploadCustomPath('/metavalue/photo_original/');
            $photo_thumb    = self::bpUploadCustomPath('/metavalue/photo_thumb/');
            
            $realFileName = $photo_arr[$p]['name'];
            $newPhotoName = 'photo_' . getUID() . $p;
            $photoExtension = strtolower(substr($realFileName, strrpos($realFileName, '.') + 1));
            $photoName = $newPhotoName . '.' . $photoExtension;
            
            Upload::$File = $photo_arr[$p];
            Upload::$method = 0;
            Upload::$SavePath = $photo_original;
            Upload::$ThumbPath = $photo_thumb;
            Upload::$NewWidth = 1000;
            Upload::$TWidth = 150;
            Upload::$NewName = $newPhotoName;
            Upload::$OverWrite = true;
            Upload::$CheckOnlyWidth = true;
            $uploadError = Upload::UploadFile();

            if ($uploadError == '') {
                
                includeLib('Image/image-magician/php_image_magician');
                
                $attachPhotoId = getUID();
                $image = new imageLib($photo_original . $photoName);

                $middleThumb = $photo_thumb . str_replace('.'.$photoName, '_mid.'.$photoExtension, $photoName);

                $image->resizeImage(400, 500, 'landscape', true);
                $image->saveImage($middleThumb, 95);

                $dataAttachPhoto = array(
                    'CONTENT_ID'           => $attachPhotoId,
                    'FILE_NAME'            => $realFileName,
                    'PHYSICAL_PATH'        => $photo_original . $photoName,
                    'THUMB_PHYSICAL_PATH'  => $photo_thumb . $photoName,
                    'MIDDLE_PHYSICAL_PATH' => $middleThumb, 
                    'FILE_EXTENSION'       => $photoExtension,
                    'FILE_SIZE'            => $photo_arr[$p]['size'],
                    'CREATED_DATE'         => Date::currentDate(),
                    'CREATED_USER_ID'      => Ue::sessionUserKeyId(), 
                    'IS_PHOTO'             => 1
                );
                $attachPhoto = $this->db->AutoExecute('ECM_CONTENT', $dataAttachPhoto);

                if ($attachPhoto) {
                    
                    $dataMetaPhoto = array(
                        'ID'               => getUID(),
                        'REF_STRUCTURE_ID' => $metaDataId,
                        'RECORD_ID'        => $metaValueId,
                        'CONTENT_ID'       => $attachPhotoId,
                        'IS_MAIN'          => 0,
                        'ORDER_NUM'        => ($p + 1)
                    );
                    
                    $this->db->AutoExecute('ECM_CONTENT_MAP', $dataMetaPhoto);
                    
                    if (isset($dir_arr[$p]) && $dir_arr[$p]) {
                                    
                        $directoryId = Input::param($dir_arr[$p]);

                        $dataDirMap = array(
                            'ID'               => getUID(),
                            'REF_STRUCTURE_ID' => $metaDataId,
                            'RECORD_ID'        => $metaValueId,
                            'DIRECTORY_ID'     => $directoryId,
                            'CREATED_DATE'     => Date::currentDate(),
                            'CREATED_USER_ID'  => Ue::sessionUserKeyId(),
                            'ORDER_NUM'        => ($p + 1)
                        );

                        $result = $this->db->AutoExecute('ECM_DIRECTORY_MAP', $dataDirMap);

                        if ($result) {

                            $dataDirCon = array(
                                'ID'               => getUID(),
                                'CONTENT_ID'       => $attachPhotoId,
                                'DIRECTORY_ID'     => $directoryId,
                            );

                            $result = $this->db->AutoExecute('ECM_CONTENT_DIRECTORY', $dataDirCon);
                            $this->db->AutoExecute('ECM_DIRECTORY', array('CHECK_RW' => '0'), 'UPDATE', "ID = $directoryId");
                        }
                    }
                    
                    return $dataAttachPhoto;
                }
            }
        }
        
        return array();
    }
    
    public function renderBpTabDeletePhoto() {
        $response = $this->model->renderBpTabDeletePhotoModel();
        echo json_encode($response); exit;
    }
    
    public function renderBpTabDeletePhotoFolder() {
        $response = $this->model->renderBpTabDeletePhotoFolderModel();
        echo json_encode($response); exit;
    }

    public function renderBpTabUpdatePhotoForm() {

        $this->view->metaDataId = Input::numeric('metaDataId');
        $this->view->metaValueId = Input::post('metaValueId');
        $this->view->attachId = Input::post('attachId');
        $this->view->getMetaDataValueOnePhoto = $this->model->getMetaDataValueOnePhotoModel($this->view->metaDataId, $this->view->metaValueId, $this->view->attachId);
        
        $response = array(
            'Html' => $this->view->renderPrint('addon/updatePhotoForm', self::$viewPath),
            'Title' => 'Фото засах',
            'close_btn' => $this->lang->line('close_btn'),
            'save_btn' => $this->lang->line('save_btn')
        );
        echo json_encode($response); exit;
    }

    public function renderBpTabUpdateFileForm() {
        
        $this->view->metaDataId = Input::numeric('metaDataId');
        $this->view->metaValueId = Input::post('metaValueId');
        $this->view->attachId = Input::post('attachId');
        $this->view->getMetaDataValueOneFile = $this->model->getMetaDataValueOneFileModel($this->view->metaDataId, $this->view->metaValueId, $this->view->attachId);
        
        $response = array(
            'Html' => $this->view->renderPrint('addon/updateFileForm', self::$viewPath),
            'Title' => 'Файл засах',
            'close_btn' => Lang::line('close_btn'),
            'save_btn' => Lang::line('save_btn')
        );
        echo json_encode($response); 
    }

    public function renderBpTabUpdatePhoto() {
        
        $result = array();
        $attachId = Input::post('attachId');
        $photo_name = Input::post('bp_photo_name');
        
        if ($photo_name == null) {
            $photo_name = '';
        }
        
        if (isset($_FILES['bp_photo'])) {
            $photo_arr['0'] = $_FILES['bp_photo'];
            $p = 0;
            
            if ($photo_arr[$p]['name'] != '') {
                
                $photo_original = self::bpUploadCustomPath('/metavalue/photo_original/');
                $photo_thumb    = self::bpUploadCustomPath('/metavalue/photo_thumb/');
                
                $newPhotoName = 'photo_' . getUID() . $p;
                $photoExtension = strtolower(substr($photo_arr[$p]['name'], strrpos($photo_arr[$p]['name'], '.') + 1));
                $photoFileName = $newPhotoName . '.' . $photoExtension;
                Upload::$File = $photo_arr[$p];
                Upload::$method = 0;
                Upload::$SavePath = $photo_original;
                Upload::$ThumbPath = $photo_thumb;
                Upload::$NewWidth = 1000;
                Upload::$TWidth = 150;
                Upload::$NewName = $newPhotoName;
                Upload::$OverWrite = true;
                $uploadError = Upload::UploadFile();
                
                if ($uploadError == '') {

                    $r = $this->db->GetRow("SELECT PHYSICAL_PATH, THUMB_PHYSICAL_PATH FROM ECM_CONTENT WHERE CONTENT_ID = " . $attachId);
                    
                    if (count($r) > 0) {
                        if (is_file($r['PHYSICAL_PATH'])) {
                            @unlink($r['PHYSICAL_PATH']);
                        }
                        if (is_file($r['THUMB_PHYSICAL_PATH'])) {
                            @unlink($r['THUMB_PHYSICAL_PATH']);
                        }
                    }

                    $dataAttachPhoto = array(
                        'PHYSICAL_PATH'       => $photo_original . $photoFileName,
                        'THUMB_PHYSICAL_PATH' => $photo_thumb . $photoFileName,
                        'FILE_EXTENSION'      => $photoExtension,
                        'IS_EMAIL'            => Input::post('bp_file_sendmail'),
                        'FILE_SIZE'           => $photo_arr[$p]['size'],
                    );

                    if ($photo_name != '') {
                        $dataAttachPhoto = array_merge($dataAttachPhoto, array('FILE_NAME' => $photo_name));
                    }
                    $attachPhoto = $this->db->AutoExecute('ECM_CONTENT', $dataAttachPhoto, 'UPDATE', 'CONTENT_ID = ' . $attachId);
                    
                    if ($attachPhoto) {
                        echo json_encode(array('status' => 'success', 'photoPath' => $dataAttachPhoto['PHYSICAL_PATH'], 'photoThumbPath' => $dataAttachPhoto['THUMB_PHYSICAL_PATH'], 'photoName' => $photo_name, 'attachId' => $attachId, 'message' => 'Амжилттай заслаа'));
                    } else {
                        echo json_encode(array('status' => 'success', 'message' => 'Алдаа гарлаа'));
                    }
                } else {
                    echo json_encode(array('status' => 'error', 'message' => 'Алдаа гарлаа'));
                }
            } 
            
        } else {
            
            $dataAttachPhoto = array(
                'FILE_NAME' => $photo_name,
                'IS_EMAIL' => Input::post('bp_file_sendmail')
            );
            $attachPhoto = $this->db->AutoExecute('ECM_CONTENT', $dataAttachPhoto, 'UPDATE', 'CONTENT_ID = ' . $attachId);
            
            if ($attachPhoto) {
                echo json_encode(array('status' => 'success', 'photoFileName' => '', 'photoName' => $photo_name, 'isEmail' => Input::post('bp_file_sendmail'), 'attachId' => $attachId, 'message' => 'Амжилттай заслаа'));
            } else {
                echo json_encode(array('status' => 'success', 'message' => 'Алдаа гарлаа'));
            }
        }
        
        return true;
    }

    public function renderBpTabUploadFile() {
        
        self::$uploadedFiles = array();
        $fileParamData = array();
        $fileData = Input::fileData();
        $fileData = $fileData['bp_file_update'];
        
        if (count($fileData) > 0) {
            
            $filePath = self::bpUploadCustomPath('/metavalue/file/');
            
            $refStructureId = Input::numeric('refStructureId');
            $metaDataId = $refStructureId ? $refStructureId : Input::numeric('metaDataId');
            $metaValueId = Input::post('metaValueId');
            $fileResult = array();
            $getMaxOrder = (int) $this->db->GetOne("SELECT MAX(ORDER_NUM) FROM ECM_CONTENT_MAP WHERE RECORD_ID = $metaValueId AND REF_STRUCTURE_ID = $metaDataId");
        
            foreach ($fileData['name'] as $rkey => $rfile) {
                
                $newFileName = 'file_' . getUID();
                $fileName = $fileData['name'][$rkey];
                $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
                $fileName = $newFileName . '.' . $fileExtension;

                FileUpload::SetFileName($fileName);
                FileUpload::SetTempName($fileData['tmp_name'][$rkey]);
                FileUpload::SetUploadDirectory($filePath);
                FileUpload::SetValidExtensions(explode(',', Config::getFromCache('CONFIG_FILE_EXT')));
                FileUpload::SetMaximumFileSize(FileUpload::GetConfigFileMaxSize()); //10mb
                $uploadResult = FileUpload::UploadFile();

                if ($uploadResult) {

                    $attachFileId = getUID();
                    $dataAttachFile = array(
                        'CONTENT_ID'      => $attachFileId,
                        'FILE_NAME'       => $rfile,
                        'PHYSICAL_PATH'   => $filePath . $fileName,
                        'FILE_EXTENSION'  => $fileExtension,
                        'FILE_SIZE'       => $fileData['size'][$rkey],
                        'CREATED_USER_ID' => Ue::sessionUserKeyId(),
                        'CREATED_DATE'    => Date::currentDate('Y-m-d H:i:s'),
                        'IS_PHOTO'        => 0
                    );
                    $attachFile = $this->db->AutoExecute('ECM_CONTENT', $dataAttachFile);

                    if ($attachFile) {

                        $dataMetaValue = array(
                            'ID'               => getUID(),
                            'REF_STRUCTURE_ID' => $metaDataId,
                            'RECORD_ID'        => $metaValueId,
                            'CONTENT_ID'       => Input::param($attachFileId),
                            'ORDER_NUM'        => ++$getMaxOrder
                        );
                        $this->db->AutoExecute('ECM_CONTENT_MAP', $dataMetaValue);
                    }

                    if ($attachFile) {
                        array_push($fileResult, array('attachFile' => $dataAttachFile['PHYSICAL_PATH'], 'attachName' => $dataAttachFile['FILE_NAME'], 'extension' => $fileExtension, 'attachId' => $attachFileId, 'fileExtension' => $fileExtension));                        
                    } else {
                        echo json_encode(array('status' => 'error', 'message' => 'Файл хуулаад бичлэг нэмхэд алдаа гарлаа'));
                    }

                } else {
                    echo json_encode(array('status' => 'error', 'message' => 'Файл хуулахад алдаа гарлаа'));
                }
            }
            
            if ($fileResult) {
                echo json_encode(array('status' => 'success', 'fileRows' => $fileResult, 'message' => 'Амжилттай нэмлээ'));
            }
            
        } else {
            echo json_encode(array('status' => 'error', 'message' => 'Файл сонгоогүй байна'));
        }
        
        return true;
    }

    public function renderBpTabUpdateFile() {
        self::$uploadedFiles = array();
        $fileParamData = array();
        
        $attachId = Input::post('attachId');
        $bpFileName = Input::post('bp_file_name');

        if (isset($_FILES['bp_file'])) {
            
            $filePath = self::bpUploadCustomPath('/metavalue/file/');
            
            $newFileName = 'file_' . getUID();
            $fileData = $_FILES['bp_file'];
            $fileName = $fileData['name'];
            $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1));
            $fileName = $newFileName . '.' . $fileExtension;

            FileUpload::SetFileName($fileName);
            FileUpload::SetTempName($fileData['tmp_name']);
            FileUpload::SetUploadDirectory($filePath);
            FileUpload::SetValidExtensions(explode(',', Config::getFromCache('CONFIG_FILE_EXT')));
            FileUpload::SetMaximumFileSize(FileUpload::GetConfigFileMaxSize()); //10mb
            $uploadResult = FileUpload::UploadFile();
            
            if ($uploadResult) {
                
                $r = $this->db->GetRow("SELECT PHYSICAL_PATH FROM ECM_CONTENT WHERE CONTENT_ID = " . $attachId);
                if (count($r) > 0 && is_file($r['PHYSICAL_PATH'])) {
                    @unlink($r['PHYSICAL_PATH']);
                }

                $dataAttachFile = array(
                    'PHYSICAL_PATH'  => $filePath . $fileName,
                    'FILE_EXTENSION' => $fileExtension,
                    'IS_EMAIL' => Input::post('bp_file_sendmail'),
                    'FILE_SIZE'      => $fileData['size'],
                );

                if ($bpFileName != '') {
                    $dataAttachFile = array_merge($dataAttachFile, array('FILE_NAME' => $bpFileName));
                }
                $attachFile = $this->db->AutoExecute('ECM_CONTENT', $dataAttachFile, 'UPDATE', 'CONTENT_ID = ' . $attachId);
                
                if ($attachFile) {
                    echo json_encode(array('status' => 'success', 'attachFile' => $fileName, 'attachName' => $bpFileName, 'extension' => $fileExtension, 'attachId' => $attachId, 'message' => 'Амжилттай заслаа'));
                } else {
                    echo json_encode(array('status' => 'success', 'message' => 'Алдаа гарлаа'));
                }
                
            } else {
                echo json_encode(array('status' => 'error', 'message' => 'Файл хуулахад алдаа гарлаа'));
            }
            
        } else {
            
            $dataAttachFile = array(
                'FILE_NAME' => $bpFileName,
                'IS_EMAIL' => Input::post('bp_file_sendmail')
            );
            $attachFile = $this->db->AutoExecute('ECM_CONTENT', $dataAttachFile, 'UPDATE', 'CONTENT_ID = ' . $attachId);
            
            if ($attachFile) {
                echo json_encode(array('status' => 'success', 'attachFile' => '', 'attachName' => $bpFileName, 'extension' => '', 'isEmail' => Input::post('bp_file_sendmail'), 'attachId' => $attachId, 'message' => 'Амжилттай заслаа'));
            } else {
                echo json_encode(array('status' => 'success', 'message' => 'Алдаа гарлаа'));
            }
        }
        
        return true;
    }

    public function renderBpTabDeleteFile() {
        $response = $this->model->renderBpTabDeleteFileModel();
        echo json_encode($response); 
    }  

    public function renderBpTabMovePhoto($refMetaGroupId, $sourceId) {

        $postData = Input::postData();

        if (isset($postData['originalPhoto'])) {
            
            $photo_original = self::bpUploadCustomPath('/metavalue/photo_original/');
            $photo_thumb    = self::bpUploadCustomPath('/metavalue/photo_thumb/');
            
            foreach ($postData['originalPhoto'] as $key => $orginalPhoto) {
                
                $fileName = $fileExtension = $fileSize = '';
                
                if (is_file($orginalPhoto)) {
                    $orginalPhotoExplode = explode('/', $orginalPhoto);
                    $fileName = end($orginalPhotoExplode);
                    $fileNameExplode = explode('.', $fileName);
                    $fileExtension = end($fileNameExplode);
                    $fileSize = filesize($orginalPhoto);
                    $targetPathFile = $photo_original . $fileName;
                    if (copy($orginalPhoto, $targetPathFile)) {
                        @unlink($orginalPhoto);
                    }
                }
                
                if (is_file($postData['thumbPhoto'][$key])) {
                    $targetPathFile = $photo_thumb . $fileName;
                    if (copy($postData['thumbPhoto'][$key], $targetPathFile)) {
                        @unlink($postData['thumbPhoto'][$key]);
                    }
                }
                
                $attachPhotoId = getUID();
                
                $dataAttachPhoto = array(
                    'ATTACH_ID'       => $attachPhotoId,
                    'ATTACH_NAME'     => '',
                    'ATTACH'          => $photo_original . $fileName,
                    'ATTACH_THUMB'    => $photo_thumb . $fileName,
                    'FILE_EXTENSION'  => $fileExtension,
                    'FILE_SIZE'       => $fileSize,
                    'CREATED_USER_ID' => Ue::sessionUserId()
                );
                $attachPhoto = $this->db->AutoExecute('FILE_ATTACH', $dataAttachPhoto);
                
                if ($attachPhoto) {
                    
                    $dataMetaPhoto = array(
                        'META_DATA_ID'  => $refMetaGroupId,
                        'META_VALUE_ID' => $sourceId,
                        'ATTACH_ID'     => $attachPhotoId,
                        'IS_MAIN'       => 0,
                        'ORDER_NUM'     => ($key + 1)
                    );
                    $this->db->AutoExecute('META_VALUE_PHOTO', $dataMetaPhoto);
                }
            }
        }
        
        return true;
    }

    public function renderBpAddOnPhoto() {
        $this->view->render('addon/renderAddModeBpPhotoTab', self::$viewPath);
    }

    public function runProcessValue() {
        $postData = Input::postData();
        $response = $this->model->runProcessValueModel($postData);
        echo json_encode($response, JSON_UNESCAPED_UNICODE); 
    }
    
    public function execProcess() {
        $postData = Input::postData();
        $response = $this->model->execProcessModel($postData);
        echo json_encode($response, JSON_UNESCAPED_UNICODE); 
    }
    
    public function getProcessParam() {
        $postData = Input::postData();
        $response = $this->model->getProcessParamModel($postData);
        echo json_encode($response, JSON_UNESCAPED_UNICODE); 
    }
    
    public function checkFiscalPeriod() {
        $postDate = Date::formatter(Input::post('date'), 'Y-m-d');
        $date     = new DateTime($postDate);
        
        $fiscalPeriodStartDate = new DateTime(Ue::sessionFiscalPeriodStartDate());
        $fiscalPeriodEndDate   = new DateTime(Ue::sessionFiscalPeriodEndDate());
        
        if ($date >= $fiscalPeriodStartDate && $date <= $fiscalPeriodEndDate) {
            echo 'true'; 
        } else {
            echo 'false'; 
        }
    }
    
    public function lookupAutoComplete() {
        $this->load->model('mdobject', 'middleware/models/');
        
        $type = Input::post('type');
        $lookupId = Input::post('lookupId');
        $processId = Input::post('processId');
        $paramRealPath = Input::post('paramRealPath');
        $where = Input::post('where');
        
        $dvConfig = $this->model->getDVGridOptionsModel($lookupId);
        
        if (isset($dvConfig['QS_META_DATA_ID'])) { // == QuickSearch DV
            $isQuickSearchDv = true;
            $lookupId = $dvConfig['QS_META_DATA_ID'];
        }
        
        $attributes = $this->model->getDataViewMetaValueAttributes($processId, $paramRealPath, $lookupId);

        if ($type == 'code') {
            if (isset($attributes['code'])) {
                
                $q = Input::post('q');
                $q = trim(str_replace('_', '', str_replace('_-_', '', $q)));
                
                if (isset($attributes['isDefaultValues'])) {
                    Mdmetadata::$isProcessParamValues = true;
                    Mdwebservice::$processMetaDataId = $processId;
                    Mdwebservice::$paramRealPath = $paramRealPath;
                }
                
                $idField = $attributes['id'];
                $codeField = $attributes['code'];
                $nameField = $attributes['name'];
                        
                $criteria[$codeField][] = array(
                    'operator' => 'LIKE',
                    'operand' => Str::filterLikePos($q, '*', 'r')
                );
                
                if (Input::isEmpty('criteriaParams') == false) {
                    
                    $requestParams = urldecode(Input::post('criteriaParams'));
                    parse_str($requestParams, $criteriaParams);
                    
                    foreach ($criteriaParams as $k => $v) {
                        
                        if (is_array($v)) {
                            
                            $criteria[$k][] = array(
                                'operator' => 'IN', 
                                'operand' => Arr::implode_r(',', $v, true) 
                            );
                            
                        } elseif ($v != '') {
                            
                            if (strpos($v, '^') === false) {
                                $criteria[$k][] = array(
                                    'operator' => '=',
                                    'operand' => Input::param($v)
                                );
                            } else {
                                $criteria[$k][] = array(
                                    'operator' => 'IN',
                                    'operand' => Arr::implode_r(',', explode('^', $v), true)
                                );
                            }
                        }
                    }
                }
                
                if (Input::post('linkedPopup') === 'OK') {
                    
                    parse_str(urldecode(Input::post('params')), $cardFilterData);
                    
                    if (count($cardFilterData) > 0) {
                        
                        foreach ($cardFilterData as $key => $val) {
                            if (!empty($val)) {
                                $criteria[$key][] = array(
                                    'operator' => '=',
                                    'operand' => Input::param($val)
                                );
                            }
                        }
                    }
                } 

                $result = $this->model->getRowsDataViewByCriteriaModel($lookupId, $criteria, $idField, $codeField, $nameField, $where, isset($isQuickSearchDv));
                        
                echo json_encode($result, JSON_UNESCAPED_UNICODE);
                
            } else {
                echo json_encode(array());
            }
            
        } else {
            
            $isAutoCompleteText = (Input::post('isAutoCompleteText') == '1' && Input::isEmpty('displayField') == false);
            
            if ($isAutoCompleteText) {
                
                $q = Input::post('q');
                
                $idField = $attributes['id'];
                $codeField = $attributes['code'];
                $nameField = Input::post('displayField');
                        
                $criteria[$nameField][] = array(
                    'operator' => 'LIKE',
                    'operand' => Str::filterLikePos($q, '*', 'b')
                );
                
                if (Input::isEmpty('criteriaParams') == false) {
                    
                    $requestParams = urldecode(Input::post('criteriaParams'));
                    parse_str($requestParams, $criteriaParams);
                    
                    foreach ($criteriaParams as $k => $v) {
                        
                        if (is_array($v)) {
                            
                            $criteria[$k][] = array(
                                'operator' => 'IN', 
                                'operand' => Arr::implode_r(',', $v, true) 
                            );
                            
                        } elseif ($v != '') {
                            
                            if (strpos($v, '^') === false) {
                                $criteria[$k][] = array(
                                    'operator' => '=',
                                    'operand' => Input::param($v)
                                );
                            } else {
                                $criteria[$k][] = array(
                                    'operator' => 'IN',
                                    'operand' => Arr::implode_r(',', explode('^', $v), true)
                                );
                            }
                        } 
                        
                    }
                }
                
                if (Input::post('linkedPopup') == 'OK') {
                    
                    parse_str(urldecode(Input::post('params')), $cardFilterData);
                    
                    if (count($cardFilterData) > 0) {
                        foreach ($cardFilterData as $key => $val) {
                            if (!empty($val)) {
                                $criteria[$key][] = array(
                                    'operator' => '=',
                                    'operand' => Input::param($val)
                                );
                            }
                        }
                    }
                }        
                
                $result = $this->model->getRowsDataViewByCriteriaModel($lookupId, $criteria, $idField, $codeField, $nameField, 1);
                        
                echo json_encode($result, JSON_UNESCAPED_UNICODE);
                
            } elseif (isset($attributes['name'])) {
                
                $q = Input::post('q');
                
                if (isset($attributes['isDefaultValues'])) {
                    Mdmetadata::$isProcessParamValues = true;
                    Mdwebservice::$processMetaDataId = $processId;
                    Mdwebservice::$paramRealPath = $paramRealPath;
                }
                
                $idField = $attributes['id'];
                $codeField = $attributes['code'];
                $nameField = $attributes['name'];
                        
                $criteria[$nameField][] = array(
                    'operator' => 'LIKE',
                    'operand' => Str::filterLikePos($q, '*', 'b')
                );
                
                if (Input::isEmpty('criteriaParams') == false) {
                    
                    $requestParams = urldecode(Input::post('criteriaParams'));
                    parse_str($requestParams, $criteriaParams);
                    
                    foreach ($criteriaParams as $k => $v) {
                        
                        if (is_array($v)) {
                            
                            $criteria[$k][] = array(
                                'operator' => 'IN', 
                                'operand' => Arr::implode_r(',', $v, true) 
                            );
                            
                        } elseif ($v != '') {
                            
                            if (strpos($v, '^') === false) {
                                $criteria[$k][] = array(
                                    'operator' => '=',
                                    'operand' => Input::param($v)
                                );
                            } else {
                                $criteria[$k][] = array(
                                    'operator' => 'IN',
                                    'operand' => Arr::implode_r(',', explode('^', $v), true)
                                );
                            }
                        } 
                    }
                }
                
                if (Input::post('linkedPopup') == 'OK') {
                    
                    parse_str(urldecode(Input::post('params')), $cardFilterData);
                    
                    if (count($cardFilterData) > 0) {
                        foreach ($cardFilterData as $key => $val) {
                            if (!empty($val)) {
                                $criteria[$key][] = array(
                                    'operator' => '=',
                                    'operand' => Input::param($val)
                                );
                            }
                        }
                    }
                }        
                
                $result = $this->model->getRowsDataViewByCriteriaModel($lookupId, $criteria, $idField, $codeField, $nameField, $where, isset($isQuickSearchDv));
                        
                echo json_encode($result, JSON_UNESCAPED_UNICODE);
            } else {
                echo json_encode(array());
            }
        }
    }

    public function comboDataSet() {
        
        $jsonAttr = Input::post('jsonAttr');
        
        if (!issetParam($jsonAttr['PROCESS_META_DATA_ID']) || !issetParam($jsonAttr['META_DATA_ID']) || !issetParam($jsonAttr['PARAM_REAL_PATH'])) {
            echo json_encode(array('emptyCombo' => 'OK')); exit;
        }
        
        $this->load->model('mdobject', 'middleware/models/');
        
        $processMetaDataId = $jsonAttr['PROCESS_META_DATA_ID'];
        $lookupMetaDataId = $jsonAttr['META_DATA_ID'];
        $paramRealPath = $jsonAttr['PARAM_REAL_PATH'];
        $requestType = Input::post('requestType');
        $inputParamArr = Input::post('inputParams');
        
        $attributes = $this->model->getDataViewMetaValueAttributes($processMetaDataId, $paramRealPath, $lookupMetaDataId);
        
        if (isset($attributes['isDefaultValues'])) {
            Mdmetadata::$isProcessParamValues = true;
            Mdwebservice::$processMetaDataId = $processMetaDataId;
            Mdwebservice::$paramRealPath = $paramRealPath;
        }
        
        $comboData = (new Mdmetadata())->getMetaDataValuesByDataView($jsonAttr, $requestType, $inputParamArr);
        
        if (Input::postCheck('isResponseObj')) {
            
            if (!empty($comboData)) {
                
                $firstRow = $comboData[0];
                
                $response = array(
                    'list' => $comboData
                );
                
                if (array_key_exists('fixedgroupname', $firstRow['ROW_DATA'])) {
                    $response['isFixedGroupName'] = 1;
                }
                
                if (array_key_exists('rightgreyfield', $firstRow['ROW_DATA'])) {
                    $response['templateGreyField'] = 'rightgreyfield';
                }
                
            } else {
                $response = array('emptyCombo' => 'OK');
            }
            
        } else {
            $response = !empty($comboData) ? $comboData : array('emptyCombo' => 'OK');
        }
        
        echo json_encode($response, JSON_UNESCAPED_UNICODE); 
    }
    
    public function fieldHeaderStyleClass($val, $windowId = '') {
        
        $gridClass = '';
        $paramRealPath = $val['PARAM_REAL_PATH'];
        
        if ($val['COLUMN_WIDTH'] != null) {
            
            $width = intval(trim($val['COLUMN_WIDTH'], 'px'));
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'date' && ($width < 132)) {
                
                $gridClass .= '
                    #'.$windowId.' div[data-section-path="' . $paramRealPath . '"] {
                            width: 132px !important;
                        }  
                    ';
            } elseif ($typeCode != 'boolean' || $typeCode != 'date') {
                
                $gridClass .= '
                    #'.$windowId.' div[data-section-path="' . $paramRealPath . '"] {
                            width:'.$width.'px !important;
                        }  
                    ';
            }
        }
        return $gridClass;
    }
    
    public function fieldHeaderStyleLayout($val, $windowId = '') {
        
        $gridClass = '';
        $paramRealPath = $val['PARAM_REAL_PATH'];
        
        if ($val['COLUMN_WIDTH'] != null) {
            
            $width = intval(trim($val['COLUMN_WIDTH'], 'px'));
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'date' && ($width < 132)) {
                
                $gridClass .= '
                    #'.$windowId.' div[data-section-path="' . $paramRealPath . '"] {
                            width: 132px !important;
                        }  
                    ';
            } elseif ($typeCode != 'boolean' || $typeCode != 'date') {
                
                $gridClass .= '
                    #'.$windowId.' div[data-section-path="' . $paramRealPath . '"] {
                            max-width:'.$width.'px !important;
                        }  
                    ';
            }
        }
        return $gridClass;
    }
    
    public function fieldDetailStyleClassView($val, $paramRealPath, $rootClass = '', $recordType = 'rows') {
        $gridClass = '';
        
        if ($val['IS_SHOW'] === '1') {
            
            $classAuto = false;
            $typeCode = $val['META_TYPE_CODE'];

            if ($val['COLUMN_WIDTH'] != '') {
                $width = trim($val['COLUMN_WIDTH'], 'px');
                if ($width == 'auto') {
                    $classAuto = true;
                } else {
                    $width = intval($width) + 10;
                }
                if ($typeCode == 'date' && ($width < 142)) {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] == 'popup' && ($width < 282)) {
                    $width = 282;
                } 
            } else {
                $width = 100;
                if ($typeCode == 'bigdecimal') {
                    $width = 140;
                } elseif ($typeCode == 'date') {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] != '' && $val['LOOKUP_META_DATA_ID'] != '') {
                    $width = 282;
                } else {
                    $width = (mb_strlen(Lang::line($val['META_DATA_NAME'])) * 7) + 15;
                }
            }
            
            if ($classAuto) {
                $gridClass .= '#'.$rootClass.' .' . $paramRealPath . ' { width:auto !important; min-width:250px !important; }';
            } else {
                $gridClass .= '#'.$rootClass.' .' . $paramRealPath . ' { width:' . $width . 'px !important; }';
            }
            
            if ($typeCode == 'bigdecimal' 
                || $typeCode == 'number' 
                || $typeCode == 'decimal' 
                || $typeCode == 'integer') {
                $gridClass .= '
                    #'.$rootClass.' td[data-cell-path="'.$val['PARAM_REAL_PATH'].'"] {
                        ' . ' text-align: right !important;' . ' 
                    } 
                ';
            }
            
            if ($classAuto) {
                self::$tableWidth = $width;
            } elseif (is_numeric($width) && is_numeric(self::$tableWidth)) {
                self::$tableWidth += $width;
            }
        }
        
        return $gridClass;
    }
    
    public function fieldHeaderStyleClassByTemplate($val, $windowId = '') {
        
        $gridClass = '';
        $paramRealPath = $val['PARAM_REAL_PATH'];
        
        if ($val['COLUMN_WIDTH'] != '') {
            
            $width = intval(trim($val['COLUMN_WIDTH'], 'px'));
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'date' && ($width < 132)) {
                
                $gridClass .= '
                    #'.$windowId.' div[data-section-path="' . $paramRealPath . '"] {
                            width: 132px !important;
                        }  
                    ';
            } elseif ($typeCode != 'boolean' || $typeCode != 'date') {
                    
                if (!empty($val['LOOKUP_TYPE']) && !empty($val['LOOKUP_META_DATA_ID']) && strtolower($val['LOOKUP_TYPE']) == 'combo') {
                    $gridClass .= '
                        #'.$windowId.' div[id="s2id_param['.$paramRealPath.']"] {
                                width:'.$width.'px !important;
                            }  
                        ';
                } else {
                
                    $gridClass .= '
                        #'.$windowId.' div[data-section-path="' . $paramRealPath . '"] {
                                width:'.$width.'px !important;
                            }  
                        ';
                }
            }
        }
        return $gridClass;
    }
    
    public function fieldHeaderStyleClassByWTemplate($val, $windowId = '') {
        
        $gridClass = '';
        $paramRealPath = $val['PARAM_REAL_PATH'];
        
        if ($val['COLUMN_WIDTH'] != null) {
            
            $width = intval(trim($val['COLUMN_WIDTH'], 'px'));
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'date' && ($width < 132)) {
                
                $gridClass .= '
                    #'.$windowId.' input[data-path="' . $paramRealPath . '"] {
                            width: 132px !important;
                        }  
                    ';
            } elseif ($typeCode != 'boolean' && $typeCode != 'date') {
                    
                if (!empty($val['LOOKUP_TYPE']) && !empty($val['LOOKUP_META_DATA_ID']) && strtolower($val['LOOKUP_TYPE']) == 'combo') {
                    $gridClass .= '
                        #'.$windowId.' div[data-s-path="'.$paramRealPath.'"] {
                                width:'.$width.'px !important;
                            }  
                        ';
                } else {
                
                    $gridClass .= '
                        #'.$windowId.' input[data-path="' . $paramRealPath . '"] {
                                width:'.$width.'px !important;
                            }  
                        ';
                }
            }
        }
        
        return $gridClass;
    }
    
    public function fieldDetailRowStyleClass($val, $windowId = '') {
        $gridClass = '';
        $paramRealPath = $val['PARAM_REAL_PATH'];
        
        if ($val['COLUMN_WIDTH'] != null) {
            
            $width = intval(trim($val['COLUMN_WIDTH'], 'px'));
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'date' && ($width < 132)) {
                
                $gridClass .= '
                    #'.$windowId.' div[data-section-path="' . $paramRealPath . '"], #'.$windowId.' input[data-path="' . $paramRealPath . '"] {
                            width:132px !important;
                        }  
                    ';
            } elseif ($typeCode != 'boolean' || $typeCode != 'date') {
                
                if ($val['LOOKUP_TYPE'] == 'combo') {
                    $gridClass .= '
                        #'.$windowId.' div[data-section-path="' . $paramRealPath . '"], #'.$windowId.' select[data-path="' . $paramRealPath . '"] {
                                width:'.$width.'px !important;
                            }  
                        ';
                    $gridClass .= '
                        #'.$windowId.' td[data-cell-path="' . $paramRealPath . '"] .select2-container.form-control {
                                width:'.$width.'px !important;
                            }  
                        ';
                } else {
                    $gridClass .= '
                        #'.$windowId.' div[data-section-path="' . $paramRealPath . '"], #'.$windowId.' input[data-path="' . $paramRealPath . '"] {
                                width:'.$width.'px !important;
                            }  
                        ';
                }
            }
        }
        
        return $gridClass;
    }
    
    public function fieldDetailStyleClass($val, $paramRealPath, $rootClass = '', $recordType = 'rows') {
        $gridClass = '';
        
        if ($val['IS_SHOW'] === '1') {

            $classAuto = $combo = false;
            $typeCode = $val['META_TYPE_CODE'];
            $width = $val['COLUMN_WIDTH'];
            
            if ($typeCode == 'bigdecimal' //150
                || $typeCode == 'date' /**/
                || $typeCode == 'boolean' /*null*/
                || $typeCode == 'integer'/*60*/) {
                $gridClass .= '
                    #'.$rootClass.' th.' . $paramRealPath . '{text-align: center !important;}';
            }

            if ($width != '') {
                
                if (strpos($width, '%') !== false) {
                    
                    $gridClass .= '
                        #'.$rootClass.' .' . $paramRealPath . ' {
                            width:' . $width . ' !important;
                        }';
                    
                    self::$tablePercentWidth += (int) $width;
                    
                    return $gridClass;
                } 
                
                if ($width == 'auto') {
                    $classAuto = true;
                } else {
                    $width = intval($width) + 10;
                
                    if ($typeCode == 'date' && ($width < 142)) {
                        $width = 142;
                    } elseif ($val['LOOKUP_TYPE'] == 'popup' && ($width < 282)) {
                        $width = 282;
                    } elseif ($val['LOOKUP_TYPE'] == 'combo' && $val['LOOKUP_META_DATA_ID'] != '') {
                        $combo = true;
                    } 
                }
                
            } else {
                
                $width = 100;
                
                if ($typeCode == 'bigdecimal') {
                    $width = 140;
                } elseif ($typeCode == 'date') {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] != '' && $val['LOOKUP_META_DATA_ID'] != '') {
                    $width = 282;
                    if ($val['LOOKUP_TYPE'] == 'combo') {
                        $combo = true;
                    } 
                } else {
                    $width = (mb_strlen(Lang::line($val['META_DATA_NAME'])) * 7) + 15;
                }
            }
            
            if ($classAuto) {
                if ($combo) {
                    $gridClass .= '#'.$rootClass.' .' . $paramRealPath . ', 
                        #'.$rootClass.' .' . $paramRealPath . ' .select2-container.form-control {
                            width:auto !important;
                            min-width:250px !important;
                        }';
                } else {
                    $gridClass .= '
                        #'.$rootClass.' .' . $paramRealPath . ' {
                            width:auto !important;
                            min-width:250px !important;
                        }';
                }
                
            } else {
                
                if ($combo) {
                    $gridClass .= '#'.$rootClass.' .' . $paramRealPath . ', 
                        #'.$rootClass.' .' . $paramRealPath . ' .select2-container.form-control {
                            width:' . $width . 'px !important;
                        }';
                } else {
                    $gridClass .= '
                        #'.$rootClass.' .' . $paramRealPath . ' {
                            width:' . $width . 'px !important;
                        }';
                }
            } 
            
            if ($classAuto) {
                self::$tableWidth = $width;
            } elseif (is_numeric($width) && is_numeric(self::$tableWidth)) {
                self::$tableWidth += $width;
            }
        }
        
        return $gridClass;
    }
    
    public function fieldDetailStyleTaxoClass($val, $paramRealPath, $paramRealPath2, $rootClass = '', $recordType = 'rows') {
        $gridClass = '';
        
        if ($val['IS_SHOW'] === '1') {

            $classAuto = false;
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'bigdecimal' //150
                || $typeCode == 'date' /**/
                || $typeCode == 'boolean' /*null*/
                || $typeCode == 'integer'/*60*/) {
                $gridClass .= '
                    #'.$rootClass.' th.' . $paramRealPath . '{
                        ' . ' text-align: center !important;' . ' 
                    } 
                ';
            }

            if ($val['COLUMN_WIDTH'] != '') {
                $width = trim($val['COLUMN_WIDTH'], 'px');
                if ($width == 'auto' && $classAuto == false) {
                    $classAuto = true;
                } else {
                    $width = intval($width) + 10;
                }
                if ($typeCode == 'date' && ($width < 142)) {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] == 'popup' && ($width < 282)) {
                    $width = 282;
                } elseif ($classAuto) {
                    $gridClass .= '
                    #'.$rootClass.' .' . $paramRealPath . ', 
                    #'.$rootClass.' .' . $paramRealPath . ' .select2-container.form-control{
                            width:auto !important;
                            min-width:250px !important;
                        } 
                    ';
                } else {
                    $gridClass .= '
                    #'.$rootClass.' .' . $paramRealPath . ', 
                    #'.$rootClass.' .' . $paramRealPath . ' .select2-container.form-control{
                            width:' . $width . 'px !important;
                        } 
                    ';
                }
            } else {
                $width = 100;
                if ($typeCode == 'bigdecimal') {
                    $width = 140;
                } elseif ($typeCode == 'date') {
                    $width = 142;
                } elseif (!empty($val['LOOKUP_TYPE']) && !empty($val['LOOKUP_META_DATA_ID'])) {
                    $width = 282;
                } else {
                    $width = (mb_strlen(Lang::line($val['META_DATA_NAME'])) * 7) + 15;
                }
                $gridClass .= '
                    #'.$rootClass.' .' . $paramRealPath . ' {
                        ' . ' width: '.$width.'px !important;' . ' 
                    } 
                ';
            }

            $gridClass .= '
                #'.$rootClass.' .' . $paramRealPath . ', 
                #'.$rootClass.' .' . $paramRealPath . ' .select2-container.form-control{
                    width:' . $width . 'px !important;
                }';
            self::$tableWidth += $width;
        
            $totalWidth = 0;
            $classAuto = false;
            $typeCode = $val['META_TYPE_CODE'];
            
            if ($typeCode == 'bigdecimal' //150
                || $typeCode == 'date' /**/
                || $typeCode == 'boolean' /*null*/
                || $typeCode == 'integer'/*60*/) {
                $gridClass .= '
                    #'.$rootClass.' th.' . $paramRealPath . '{
                        ' . ' text-align: center !important;' . ' 
                    } 
                ';
            }

            if ($val['COLUMN_WIDTH'] != '') {
                $width = trim($val['COLUMN_WIDTH'], 'px');
                if ($width == 'auto' && $classAuto == false) {
                    $classAuto = true;
                } else {
                    $width = intval($width) + 10;
                }
                if ($typeCode == 'date' && ($width < 142)) {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] == 'popup' && ($width < 282)) {
                    $width = 282;
                } elseif ($classAuto) {
                    $gridClass .= '
                    #'.$rootClass.' #' . $paramRealPath2 . ', 
                    #'.$rootClass.' #' . $paramRealPath2 . ' .select2-container.form-control{
                            width:auto !important;
                            min-width:250px !important;
                        } 
                    ';
                    $totalWidth = $totalWidth + 260;
                } else {
                    $gridClass .= '
                    #'.$rootClass.' #' . $paramRealPath2 . ', 
                    #'.$rootClass.' #' . $paramRealPath2 . ' .select2-container.form-control{
                            width:' . $width . 'px !important;
                        } 
                    ';
                }
            } else {
                $width = 100;
                if ($typeCode == 'bigdecimal') {
                    $width = 140;
                } elseif ($typeCode == 'date') {
                    $width = 142;
                } elseif (!empty($val['LOOKUP_TYPE']) && !empty($val['LOOKUP_META_DATA_ID'])) {
                    $width = 282;
                } else {
                    $width = (mb_strlen(Lang::line($val['META_DATA_NAME'])) * 7) + 15;
                }
                $gridClass .= '
                    #'.$rootClass.' #' . $paramRealPath2 . ' {
                        ' . ' width: '.$width.'px !important;' . ' 
                    } 
                ';
            }

            $gridClass .= '
                #'.$rootClass.' #' . $paramRealPath2 . ', 
                #'.$rootClass.' #' . $paramRealPath2 . ' .select2-container.form-control{
                    width:' . $width . 'px !important;
                }';
        }
        
        return $gridClass;
    }
    
    public function fieldDetailStyleWidth($val) {
        $width = 100;
        
        if ($val['IS_SHOW'] === '1') {

            $classAuto = $combo = false;
            $typeCode = $val['META_TYPE_CODE'];

            if ($val['COLUMN_WIDTH'] != '') {
                $width = trim($val['COLUMN_WIDTH'], 'px');
                
                if ($width == 'auto') {
                    $classAuto = true;
                } else {
                    $width = intval($width) + 10;
                }
                
                if ($typeCode == 'date' && ($width < 142)) {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] == 'popup' && ($width < 282)) {
                    $width = 282;
                } 
                
            } else {
                $width = 100;
                if ($typeCode == 'bigdecimal') {
                    $width = 140;
                } elseif ($typeCode == 'date') {
                    $width = 142;
                } elseif ($val['LOOKUP_TYPE'] != '' && $val['LOOKUP_META_DATA_ID'] != '') {
                    $width = 282;
                } else {
                    $width = (mb_strlen(Lang::line($val['META_DATA_NAME'])) * 7) + 15;
                }
            }
        }
        
        return $width;
    }
    
    public function getLookupRowIndex() {
        $this->load->model('mdobject', 'middleware/models/');
        
        if (Input::isEmpty('dataRowData') === false) {

            $dataRowData = Input::post('dataRowData');
            $lookupId = $dataRowData['META_DATA_ID'];
            $processId = $dataRowData['PROCESS_META_DATA_ID'];
                    
        } else {
            $q = Input::post('q');
            $type = Input::post('type');
            $lookupId = Input::post('lookupId');            
            $processId = Input::post('processId');
        }
        
        $paramRealPath = Input::post('paramRealPath');
        $rowIndex = Input::post('rowIndex');
        
        if ($idField = $this->model->getDataViewMetaValueId($lookupId)) {
            
            if (Mdwebservice::checkParamDefaultValues($processId, $paramRealPath, $lookupId)) {
                Mdwebservice::$isProcessParamValues = true;
                Mdwebservice::$processMetaDataId = $processId;
                Mdwebservice::$paramRealPath = $paramRealPath;
            }

            $this->load->model('mdobject', 'middleware/models/');

            $codeField = $this->model->getDataViewMetaValueCode($lookupId);
            $nameField = $this->model->getDataViewMetaValueName($lookupId);
            
            $criteria = array();
            
            if (Input::isEmpty('criteriaParams') == false) {
                $requestParams = urldecode(Input::post('criteriaParams'));
                parse_str($requestParams, $criteriaParams);

                foreach ($criteriaParams as $k => $v) {
                    $criteria[$k][] = array(
                        'operator' => '=',
                        'operand' => Input::param($v)
                    );
                }
            }
            $result = $this->model->getRowIndexDataViewByCriteriaModel($processId, $paramRealPath, $lookupId, $idField, $codeField, $nameField, $rowIndex, $criteria);

            echo json_encode($result);
        }
        exit;
    }
    
    public function comboSingleDataSetCtrl() {
        $jsonAttr = Input::post('jsonAttr');
        $getId = Input::post('getId');
        
        $criteriaParams = array();
        if (Input::isEmpty('params') == false) {
            parse_str(urldecode(Input::post('params')), $criteriaParams);
        }

        $comboData = (new Mdmetadata())->getSingleMetaDataValuesByDataView($jsonAttr, $getId, $criteriaParams);
        
        echo !empty($comboData) ? json_encode($comboData[0]) : json_encode(array('emptyCombo' => 'OK')); exit;
    }      
    
    public function renderBpHdrSidebar($methodId, $row, $fillParamData) {
        
        $labelAttr = array(
            'text' => Lang::line($row['META_DATA_NAME']),
            'for' => 'param[' . $row['META_DATA_CODE'] . ']',
            'data-label-path' => $row['META_DATA_CODE']
        );
        
        if ($row['IS_REQUIRED'] == '1') {
            $labelAttr['required'] = 'required';
        }    
        
        return array(
            'input_label_txt' => Form::label($labelAttr),
            'data_path' => $row['META_DATA_CODE'], 
            'input_html' => Mdwebservice::renderParamControl($methodId, $row, 'param[' . $row['META_DATA_CODE'] . ']', $row['META_DATA_CODE'], $fillParamData)                                                
        );
    }
    
    public function wfmStatusForm($refStructureId, $sourceId, $selectedRowData, $wfmStatusParams) {
        
        $this->view->nowStatusName = isset($selectedRowData['wfmstatusname']) ? $selectedRowData['wfmstatusname'] : '';
        $this->view->nowStatusColor = isset($selectedRowData['wfmstatuscolor']) ? $selectedRowData['wfmstatuscolor'] : '';
        
        return $this->view->renderPrint('addon/status/wfmStatusForm', self::$viewPath);
    }
    
    public function invoiceQrCode($data) {
        require_once BASEPATH.'libs/QRCode/custom/QRGenerator.php';
        $qrcode = new QRGenerator($data, 150, 'UTF-8', 'L', 0); 
        return '<img src="'.$qrcode->generate().'">';
    }
    
    public function invoiceBarCode($code, $size = '20', $orientation = 'horizontal', $code_type = 'code128') {
        require_once BASEPATH.'libs/Barcode/barcode.php';
        $barcode = new Barcode();
        $barcode->generate($code, $size, $orientation, $code_type);
    }
    
    public function billPrint() {
        
        $this->view->billHtml = $this->model->billPrintModel();
                
        $response = array(
            'html' => $this->view->renderPrint('addon/widget/billPrint', self::$viewPath),
            'title' => 'Bill Print',
            'close_btn' => Lang::line('close_btn')
        );
        echo json_encode($response); exit;
    }
    
    public function themeRenderData($processMetaDataId, $fillData, $paramList, $bpTab) {
        loadPhpQuery();
        $this->load->model('mdwebservice', 'middleware/models/');
        $this->view->themeData = $this->model->getDataFromThemeLink($processMetaDataId);
        
        // paramList - н index - г солиж авах
        $paramList = $this->fixParamList($paramList);

        // section хуваалтууд
        $this->view->sectionData = $this->model->getThemeSectionData($this->view->themeData['ID']);
        
        if (!$this->view->sectionData) {
            return null;
        }
        // section-ны доторх дата
        foreach ($this->view->sectionData AS $index => $section) {
            
            $result = $this->model->getThemeSectionDetail($section['ID']);
            
            if ($result) {
                $this->view->sectionData[$index]['SECTION_DETAIL'] = $result;
            } else {
                $this->view->sectionData[$index]['SECTION_DETAIL'] = null;
            }

            //get html
            if ($section['FILE_NAME']) {
                
                $sectionContentHtml = file_get_contents(BASEPATH . 'middleware/assets/theme/layout/process/style/' . $section['FILE_NAME']);
                $sectionObj = phpQuery::newDocumentHTML($sectionContentHtml);
                $langObjLen = $sectionObj['lang']->length();

                if ($langObjLen > 0) {
                    foreach (pq('lang') as $langObj) {
                        $o = pq($langObj);
                        $o->replaceWith(Lang::line($o->html()));
                    }
                    $sectionContentHtml = (String) $sectionObj->html();
                }
                $this->view->sectionData[$index]['STYLE_CONTENT'] = $sectionContentHtml;
            } else {
                $this->view->sectionData[$index]['STYLE_CONTENT'] = '';
            }
        }
        // theme html 
        $themeContent = file_get_contents(BASEPATH . 'middleware/assets/theme/layout/process/theme/' . $this->view->themeData['FILE_NAME']);
        $themeContent = str_replace('[uniqId]', getUID(), $themeContent);
        $themeContent = str_replace('{{footerDescriptionMN}}', '<p style="color:'.Config::getFromCacheDefault('anketFooterTextColor', null, '#000').'">'.Lang::lineDefault('hrmRecruitFooter', 'Бид бүх мэдээллийн нууцлалыг чанд хадгалж харьцах бөгөөд хуулиар шаардсан буюу зөвшөөрснөөс бусад тохиолдолд тухайн хүнийг ажлын байранд тохирох эсэхийг тогтоохоос бусад зорилгоор мэдээллийг задруулах буюу ашиглахгүй болно.').'</p>', $themeContent);
        $themeContent = str_replace('{{footerDescriptionEN}}', '<p style="color:'.Config::getFromCacheDefault('anketFooterTextColor', null, '#000').'">'.Lang::lineDefault('hrmRecruitFooterEn', 'All information will be treated with the strictest conficientiality and will not be disclosed or used for any other purpose than to assess the suitability of a person except in so far as it may be required and permitted by law.').'</p>', $themeContent);
        $themeContent = str_replace('{{tab1}}', Lang::lineDefault('hrmHeadertab1', 'Ажлын байр'),  $themeContent);
        $themeContent = str_replace('{{tab2}}', Lang::lineDefault('hrmHeadertab2', 'Ерөнхий мэдээлэл'),  $themeContent);
        $themeContent = str_replace('{{tab3}}', Lang::lineDefault('hrmHeadertab3', 'Боловсрол'), $themeContent);
        $themeContent = str_replace('{{tab4}}', Lang::lineDefault('hrmHeadertab4', 'ЭША-ын туршлага'),  $themeContent);
        $themeContent = str_replace('{{tab5}}', Lang::lineDefault('hrmHeadertab5', 'Туршлага'),  $themeContent);
        $themeContent = str_replace('{{tab6}}', Lang::lineDefault('hrmHeadertab6', 'Гэр бүл'),  $themeContent);
        $themeContent = str_replace('{{tab7}}', Lang::lineDefault('hrmHeadertab7', 'Ур чадвар'), $themeContent);
        $themeContent = str_replace('{{tab8}}', Lang::lineDefault('hrmHeadertab8', 'Бусад'), $themeContent);
        $themeContent = str_replace('{{tab91}}', Lang::lineDefault('hrmHeadertab91', 'Ерөнхий<br>мэдээлэл'),  $themeContent);
        $themeContent = str_replace('{{tab92}}', Lang::lineDefault('hrmHeadertab92', 'Ажлын<br>байр'),  $themeContent);
        $themeContent = str_replace('{{tab93}}', Lang::lineDefault('hrmHeadertab93', 'Ажлын<br>туршлага'), $themeContent);
        $themeContent = str_replace('{{tab94}}', Lang::lineDefault('hrmHeadertab94', 'Холбогдох<br>хаяг'),  $themeContent);
        $themeContent = str_replace('{{tab95}}', Lang::lineDefault('hrmHeadertab95', 'Туршлага'),  $themeContent);
        $themeContent = str_replace('{{tab96}}', Lang::lineDefault('hrmHeadertab96', 'Бусад'),  $themeContent);
        $themeContent = str_replace('{{tab97}}', Lang::lineDefault('hrmHeadertab97', 'Ур чадвар'), $themeContent);
        $themeContent = str_replace('{{tab98}}', Lang::lineDefault('hrmHeadertab98', 'Бусад'), $themeContent);        
        $themeContent = str_replace('{{staticskilldescription}}', Config::getFromCache('AnketEvalutionConfig'), $themeContent);        
        // replace html
        $themeObj = phpQuery::newDocumentHTML($themeContent);
        $langObjLen = $themeObj['lang']->length();

        if ($langObjLen > 0) {
            foreach (pq('lang') as $langObj) {
                $o = pq($langObj);
                $o->replaceWith(Lang::line($o->html()));
            }
            $themeContent = (String) $themeObj->html();
        }
        
        $themeContentReplaced = $this->replaceSectionContent($themeContent, $this->view->sectionData, $fillData, $paramList, $this->getHeaderData($this->view->paramList));
        $this->view->themeContent = str_replace('{{addons}}', $bpTab['tabStart'] . $bpTab['tabEnd'], $themeContentReplaced);
        $hiddernHtml = $this->renderHiddenParamForTheme($processMetaDataId, $this->view->paramList, $this->view->fillParamData);
        $this->view->themeContent .= $hiddernHtml;

        $methodHtml = $this->view->renderPrint('sub/renderMethodTheme', self::$viewPath);
        $methodHtml = str_replace('Мөр нэмэх', 'Нэмэх', $methodHtml);

        return $methodHtml;
    }

    public function replaceSectionContent($themeContent, $sectionData, $fillData, $paramList, $headerData) {
        foreach ($sectionData AS $section) {
            $findme = '{{' . $section['SECTION_NAME'] . '}}';
            if ($section['FILE_NAME'] != 'grid.html') {
                $sectionContent = $this->calculateSectionContent($section, $fillData, $paramList, $headerData);
            } else {
                $sectionContent = '';
                if (isset($paramList[$section['PARAM_PATH']])) {
                    $sectionContent = Mdwebservice::drawGrid($paramList[$section['PARAM_PATH']]);
                }
            }

            $themeContent = str_replace($findme, $sectionContent, $themeContent);
        }

        return $themeContent;
    }

    public function calculateSectionContent($section, $fillData, $paramList, $headerData) {
        $this->load->model('mdwebservice', 'middleware/models/');
        $sectionContent = $section['STYLE_CONTENT'];

        // Хэрэв Dataview төрөлтэй бол
        if (array_key_exists($section['PARAM_PATH'], $paramList)) {

            if (isset($section['SECTION_DETAIL'])) {
                if ($paramList[$section['PARAM_PATH']]['recordtype'] == 'rows') {
                    $sectionContentArray = array();
                    $startPoint = strpos($sectionContent, "{{rowsbegin}}");
                    if ($startPoint > 0) {
                        $length = strpos($sectionContent, "{{rowsend}}") - strpos($sectionContent, "{{rowsbegin}}");
                        $sectionContentRows = substr($sectionContent, $startPoint, $length);
                        $sectionContentRows = str_replace("{{rowsbegin}}", "", $sectionContentRows);
                        $sectionContentRowsInitial = $sectionContentRows;
                    } else {
                        $sectionContentRows = $sectionContent;
                        $sectionContentRowsInitial = $sectionContent;
                    }

                    $paramListSection = $paramList[$section['PARAM_PATH']];
                    $currentParamDataList = $this->fixParamListData($paramListSection['data']);

                    if ($fillData != null) {
                        $rows = isset($fillData[strtolower($section['PARAM_PATH'])]) ? $fillData[strtolower($section['PARAM_PATH'])] : null;

                        if ($rows != null) {
                            $sectionContent = str_replace('{{bpaddmainmultirowbtn}}', $this->getSectionOtherHtml($paramListSection, $sectionContent), $sectionContent);

                            array_push($sectionContentArray, '<div id="sectionParamPath" data-parampath="' . $section['PARAM_PATH'] . '"></div>');

                            foreach ($rows AS $index => $row) {

                                $sectionContentRow = '<div class="singleRowTmp" data-rowindex="' . $index . '">';
                                $sectionContentRow .= '<button type="button" class="removeRowBtn" onclick=""><i class="fa fa-times"></i></button>';
                                $sectionContentRow .= $sectionContentRows;
                                $parentDvId = $section['META_DATA_ID']; // Хэрэв тухайн элемент нь detail дотор байвал гадуур нь байгаа DV - н ID - г заавал дамжуулана.                        
                                $isAddedParamPath = false;
                                foreach ($section['SECTION_DETAIL'] AS $sectionDetail) {

                                    if (isset($currentParamDataList[$sectionDetail['PARAM_REAL_PATH']])) {
                                        $currentParamData = $currentParamDataList[$sectionDetail['PARAM_REAL_PATH']];
                                    } else {
                                        $currentParamData = $this->findCurrentParamFromAnotherDv($sectionDetail, $paramList, $headerData);
                                        if (!$currentParamData) {
                                            continue;
                                        }
                                    }

                                    if (!$isAddedParamPath) {
                                        $sectionContentRow .= '<input type="hidden" name="paramPath" data-parampath="' . $section['PARAM_PATH'] . '" />';
                                        $isAddedParamPath = true;
                                    }

                                    $currentValue = $this->findCurrentValueFromAnyDv($currentParamData, $fillData,
                                            $paramListSection['recordtype'], $index);

                                    // Тухайн элемент тухайн DV - биш header -н элемент эсэхийг шалгаж байна.
                                    if ($this->checkIsHeaderParam($sectionDetail['PARAM_REAL_PATH'])) {
                                        $name = "param[" . $currentParamData['PARAM_REAL_PATH'] . "]";
                                    } else {
                                        $name = "param[" . $currentParamData['PARAM_REAL_PATH'] . "][$index][]";
                                    }

                                    $replaceData = Mdwebservice::renderParamControl($this->view->methodId, $currentParamData, $name, $currentParamData['META_DATA_CODE'], array(strtolower($currentParamData['META_DATA_CODE']) => $currentValue));

                                    $labelName = Mdwebservice::renderParamLabelForTheme($currentParamData);
                                    $findPos = '{{' . $sectionDetail['POSITION_NAME'] . '}}';

                                    $sectionContentRow = str_replace($findPos,
                                            '<div class="sestion-positions" id="' . $currentParamData['META_DATA_ID'] . '" data-metadatacode="' . strtolower($currentParamData['META_DATA_CODE']) . '" data-valuefield="' . strtolower($currentParamData['VALUE_FIELD']) . '">' . $labelName . $replaceData . '</div>',
                                            $sectionContentRow); // давталтаар үүссэн html үүд                            
                                }
                                $sectionContentRow .= '<input type="hidden" name="param[' . $paramListSection['code'] . '.mainRowCount][]" />';
                                $sectionContentRow .= '</div>';

                                array_push($sectionContentArray, $sectionContentRow);
                            }
                            $sectionContentReplaced = implode("", $sectionContentArray);
                        } else {
                            $sectionContent = str_replace('{{bpaddmainmultirowbtn}}',
                                    $this->getSectionOtherHtml($paramListSection, $sectionContent), $sectionContent);
                            $sectionContentReplaced = $this->getSectionContentRow($sectionContentRows, $section, $currentParamDataList,
                                    $paramList, $paramListSection);
                        }
                    } else {                        
                        $sectionContent = str_replace('{{bpaddmainmultirowbtn}}',
                                $this->getSectionOtherHtml($paramListSection, $sectionContent), $sectionContent);
                        $sectionContentReplaced = $this->getSectionContentRow($sectionContentRows, $section, $currentParamDataList,
                                $paramList, $paramListSection);
                    }

                    $sectionContent = str_replace($sectionContentRowsInitial, $sectionContentReplaced, $sectionContent);
                } else if ($paramList[$section['PARAM_PATH']]['recordtype'] == 'row') {
                    if (isset($paramList[$section['PARAM_PATH']]['data'])) {
                        $currentParamDataList = $this->fixParamListData($paramList[$section['PARAM_PATH']]['data']);
                        foreach ($section['SECTION_DETAIL'] AS $sectionDetail) {
                            $findPos = '{{' . $sectionDetail['POSITION_NAME'] . '}}';

                            if (isset($currentParamDataList[$sectionDetail['PARAM_REAL_PATH']])) {
                                $currentParamData = $currentParamDataList[$sectionDetail['PARAM_REAL_PATH']];
                            } else {
                                $currentParamData = $this->findCurrentParamFromAnotherDv($sectionDetail, $paramList, $headerData);
                                if (!$currentParamData) {
                                    continue;
                                }
                            }

                            // Тухайн элемент тухайн DV - биш header -н элемент эсэхийг шалгаж байна.
                            if ($this->checkIsHeaderParam($sectionDetail['PARAM_REAL_PATH'])) {
                                $name = "param[" . $currentParamData['PARAM_REAL_PATH'] . "]";
                            } else {
                                $name = "param[" . $currentParamData['PARAM_REAL_PATH'] . "][0][]";
                            }
                            $currentValue = !is_null($fillData) ? $this->findCurrentValueFromAnyDv($currentParamData, $fillData,
                                            $paramList[$section['PARAM_PATH']]['recordtype'], null) : null; // row учир index байхгүй
                            $replaceData = Mdwebservice::renderParamControl($this->view->methodId, $currentParamData, $name, $currentParamData['META_DATA_CODE'],
                                            array(strtolower($currentParamData['META_DATA_CODE']) => $currentValue));
                            $labelName = Mdwebservice::renderParamLabelForTheme($currentParamData);
                            $sectionContent = str_replace($findPos,
                                    $this->getSectionOtherHtml($labelName . $replaceData, $currentParamData['PARAM_REAL_PATH']),
                                    $sectionContent);
                        }
                    }
                }
            } else {
                $sectionContent = $section['PARAM_PATH'];
            }
            $this->view->isDtlTbl = true;
        } else {
            // Хэрэв Dataview төрөлтэй биш бол
            if (isset($section['SECTION_DETAIL'])) {
                foreach ($section['SECTION_DETAIL'] AS $sectionDetail) {

                    $findPos = '{{' . $sectionDetail['POSITION_NAME'] . '}}';
                    if (!isset($headerData[strtolower($sectionDetail['PARAM_PATH'])])) {
                        continue;
                    }
                    $currentParamData = $headerData[strtolower($sectionDetail['PARAM_PATH'])];
                    if ($fillData != null) {
                        $currentValue = isset($fillData[strtolower($sectionDetail['PARAM_PATH'])]) ? $fillData[strtolower($sectionDetail['PARAM_PATH'])]
                                    : null;
                    } else {
                        $currentValue = null;
                    }
                    $name = "param[" . $currentParamData['META_DATA_CODE'] . "]";
                    $replaceData = Mdwebservice::renderParamControl($this->view->methodId, $currentParamData, $name, $currentParamData['META_DATA_CODE'],
                                    array(strtolower($currentParamData['META_DATA_CODE']) => $currentValue));

                    if ($replaceData === null) {
                        $replaceData = '';
                    }
                    $labelName = Mdwebservice::renderParamLabelForTheme($currentParamData);                    
                    $sectionContent = str_replace($findPos,
                            $this->getSectionOtherHtml($labelName . $replaceData, $currentParamData['PARAM_REAL_PATH']), $sectionContent);
                }
            }
        }

        $sectionContent = str_replace("{{rowsbegin}}", "", $sectionContent);
        $sectionContent = str_replace("{{rowsend}}", "", $sectionContent);

        return $sectionContent;
    }

    private function getSectionContentRow($sectionContentRows, $section, $currentParamDataList, $paramList, $paramListSection) {
        $sectionContentRow = $sectionContentRows;
        $parentDvId = $section['META_DATA_ID']; // Хэрэв тухайн элемент нь detail дотор байвал гадуур нь байгаа DV - н ID - г заавал дамжуулана.                        
        foreach ($section['SECTION_DETAIL'] AS $sectionDetail) {

            if (isset($currentParamDataList[$sectionDetail['PARAM_REAL_PATH']])) {
                $currentParamData = $currentParamDataList[$sectionDetail['PARAM_REAL_PATH']];
            } else {
                $currentParamData = $this->findCurrentParamFromAnotherDv($sectionDetail, $paramList, $headerData);
                if (!$currentParamData) {
                    continue;
                }
            }

            // Тухайн элемент тухайн DV - биш header -н элемент эсэхийг шалгаж байна.
            $currentValue = "";
            if ($this->checkIsHeaderParam($sectionDetail['PARAM_REAL_PATH'])) {
                $name = "param[" . $currentParamData['PARAM_REAL_PATH'] . "]";
            } else {
                $name = "param[" . $currentParamData['PARAM_REAL_PATH'] . "][0][]";
            }
            $replaceData = Mdwebservice::renderParamControl($this->view->methodId, $currentParamData, $name, $currentParamData['META_DATA_CODE'], null);
            $labelName = Mdwebservice::renderParamLabelForTheme($currentParamData);
            $findPos = '{{' . $sectionDetail['POSITION_NAME'] . '}}';
            $sectionContentRow = str_replace($findPos,
                    '<div class="sestion-positions" id="' . $currentParamData['META_DATA_ID'] . '" data-metadatacode="' . strtolower($currentParamData['META_DATA_CODE']) . '" data-valuefield="' . strtolower($currentParamData['VALUE_FIELD']) . '">' . $labelName . $replaceData . '</div>',
                    $sectionContentRow); // давталтаар үүссэн html үүд                            
        }
        $sectionContentRow .= '<input type="hidden" name="param[' . $paramListSection['code'] . '.mainRowCount][]" />';
        $sectionContentRow .= '<div id="sectionParamPath" data-parampath="' . $section['PARAM_PATH'] . '"></div>';

        return $sectionContentRow;
    }

    private function getSectionOtherHtml($controlHtml, $realPath) {
        $wrappedHtml = '';

        if (!is_array($controlHtml)) {
            $wrappedHtml = '<div data-section-path="' . $realPath . '">' . $controlHtml . '</div>';
        }

        return $wrappedHtml;
    }

    private function wrapThemeControl() {
        $sectionOtherHtml = '<div class="col-md-12 no-padding">';
        if ($paramListSection['groupKeyLookupMeta'] != '' && $paramListSection['isShowMultipleKeyMap'] != '0') {
            phpQuery::newDocumentHTML($sectionContent);
            $panelId = '';
            if (pq('sectionpanel')->length > 0) {
                $panelId = pq('sectionpanel')->html();
            }
            $sectionOtherHtml .= '<div class="input-group quick-item-process float-left bp-add-ac-row" data-action-path="' . $paramListSection['code'] . '">';
            $sectionOtherHtml .= '<div class="input-icon">';
            $sectionOtherHtml .= '</div>';
            $sectionOtherHtml .= '<span class="input-group-btn">';
            $sectionOtherHtml .= Form::button(array('data-action-path' => $paramListSection['code'], 'class' => 'btn btn-xs green-meadow bp-group-save',
                        'value' => '<i class="icon-plus3 font-size-12"></i>', 'onclick' => 'bpAddMainMultiRow_' . $this->view->methodId . '(this, \'' . $this->view->methodId . '\', \'' . $paramListSection['groupKeyLookupMeta'] . '\', \'\', \'' . $paramListSection['paramPath'] . '\', \'autocomplete\', function(rows){ selectedRowsBpAddRowForTheme(rows, \'' . $panelId . '\'); });'));
            $sectionOtherHtml .= '</span>';
            $sectionOtherHtml .= '</div>';
        }
        $sectionOtherHtml .= '</div>';

        return $sectionOtherHtml;
    }

    public function getHeaderData($paramList) {
        $headerDataSorted = array();
        if (isset($paramList[0]['data'])) {
            $headerData = $paramList[0]['data'];
            foreach ($headerData AS $headerRow) {
                $headerDataSorted[strtolower($headerRow['META_DATA_CODE'])] = $headerRow;
            }
        }

        return $headerDataSorted;
    }

    // paramList -н index нь тоо байгаа учир дурын index рүү шууд хандах боломжгүй байгаа болохоор code - оор index хийв.    
    public function fixParamList($paramList) {
        $fixedParamList = array();
        foreach ($paramList AS $row) {
            if (isset($row['code'])) {
                $fixedParamList[$row['code']] = $row;
            }
        }

        return $fixedParamList;
    }

    // paramList -н data -н index нь тоо байгаа учир дурын index рүү шууд хандах боломжгүй байгаа болохоор META_DATA_CODE - оор index хийв.    
    public function fixParamListData($paramListData) {
        $fixedParamListData = array();
        foreach ($paramListData AS $row) {
            if (isset($row['PARAM_REAL_PATH'])) {
                $fixedParamListData[$row['PARAM_REAL_PATH']] = $row;
            }
        }

        return $fixedParamListData;
    }

    public function checkIsHeaderParam($paramPath) {
        $explode = explode('.', $paramPath);
        if (count($explode) > 1) {
            return false;
        } else {
            return true;
        }
    }

    public function findCurrentParamFromAnotherDv($sectionDetail, $paramList, $headerData) {
        $paramReaPathArray = explode('.', $sectionDetail['PARAM_REAL_PATH']);
        if (count($paramReaPathArray) > 1) {
            $dvPath = $paramReaPathArray[0];
            if (isset($paramList[$dvPath])) {
                foreach ($paramList[$dvPath]['data'] as $paramListDataArray) {
                    if (strtolower($paramListDataArray['META_DATA_CODE']) == strtolower($sectionDetail['PARAM_PATH'])) {
                        return $paramListDataArray;
                    }
                }
            }
        } else {
            $path = $paramReaPathArray[0];
            if (isset($headerData[strtolower($path)])) {
                return $headerData[strtolower($path)];
            }
        }

        return null;
    }

    public function findCurrentValueFromAnyDv($currentParamData, $fillData, $recordtype, $index = null) {
        $paramReaPathArray = explode(".", $currentParamData['PARAM_REAL_PATH']);
        if (count($paramReaPathArray) > 1) {
            $dvPath = $paramReaPathArray[0];
            if (isset($fillData[strtolower($dvPath)])) {
                if ($recordtype == 'rows') {
                    $fillDataDvRow = $fillData[strtolower($dvPath)][$index];
                } else if ($recordtype == 'row') {
                    $fillDataDvRow = $fillData[strtolower($dvPath)];
                } else {
                    return null;
                }

                if (isset($fillDataDvRow[strtolower($paramReaPathArray[1])])) {
                    if (is_array($fillDataDvRow[strtolower($paramReaPathArray[1])])) {
                        return $fillDataDvRow[strtolower($paramReaPathArray[1])]['id'];
                    } else {
                        return $fillDataDvRow[strtolower($paramReaPathArray[1])];
                    }
                } else {
                    return null;
                }
            }
        } else {
            $path = $paramReaPathArray[0];
            if (isset($fillData[strtolower($path)])) {
                if (is_array($fillData[strtolower($path)])) {
                    return $fillData[strtolower($path)]['id'];
                } else {
                    return $fillData[strtolower($path)];
                }
            }
        }
        return null;
    }

    public function renderHiddenParamForTheme($processMetaDataId, $paramList, $fillData) {
        $html = '<div class="hidden">';

        foreach ($paramList AS $param) {

            if ($param['type'] == 'header') {

                foreach ($param['data'] AS $row) {
                    if ($row['IS_SHOW'] != '1') {
                        
                        $code = $row['META_DATA_CODE'];
                        $path = $row['PARAM_REAL_PATH'];

                        $html .= self::renderParamControl($processMetaDataId, $row, 'param[' . $path . ']', $code, $fillData);
                    }
                }
                
            } elseif ($param['type'] == 'detail' && isset($param['data'])) {

                foreach ($param['data'] AS $row) {
                    if ($row['IS_SHOW'] != '1' && substr_count($row['PARAM_REAL_PATH'], '.') == 1) {
                        
                        $code = $row['META_DATA_CODE'];
                        $path = $row['PARAM_REAL_PATH'];
                        
                        $html .= self::renderParamControl($processMetaDataId, $row, 'param[' . $path . '][0][]', $code, $fillData);
                    }
                }
            }
        }

        $html .= '</div>';

        return $html;
    }

    public function drawGrid($paramTheme) {
        if (!is_array($paramTheme)) {
            return '';
        }
        $this->view->paramTheme = $paramTheme;
        return $this->view->renderPrint('sub/renderGrid', self::$viewPath);
    }

    public function findCriteria($processId, $tabHeaderContentArr) {
        
        $langCode = Lang::getCode();
        $cache = phpFastCache();

        $data = $cache->get('bpTabHdrContent_' . $processId);

        if ($data == null) {
            
            $data = array();
            $searchHeaderArr = array();
            $searchContentArr = array();

            foreach ($tabHeaderContentArr as $key => $row) {
                $groupingName = trim($row['GROUPING_NAME']);

                if (!empty($groupingName)) {
                    if (!in_array($groupingName, $searchHeaderArr)) {
                        $searchHeaderArr[$key] = $groupingName;
                    }
                    $groupKey = array_search($groupingName, $searchHeaderArr);
                    $searchContentArr[$groupKey][] = $row;
                } else {
                    array_push($data, $row);
                }
            }

            $dataGroup = array(
                'header' => $searchHeaderArr,
                'content' => $searchContentArr
            );
            
            $data = array(
                'data' => $data,
                'dataGroup' => $dataGroup
            );
            
            $cache->set('bpTabHdrContent_' . $processId, $data, Mdwebservice::$expressionCacheTime);
        }

        return $data;
    }

    public function getTabHeaderContent($methodId, $subrow, $tabSecondWidth, $seperatorWidth, $labelWidth, $fillParamData) {
        $tabHeaderContent = $tabHeaderParam = '';
        if ($subrow['IS_SHOW'] != '1') {
            $tabHeaderParam = 'hide';
        }

        $tabHeaderContent .= "<tr data-cell-path='" . $subrow['META_DATA_CODE'] . "' class='" . $tabHeaderParam . "'>";
        $tabHeaderContent .= '<td class="text-right middle" style="width: ' . $labelWidth . '%">';
        $labelAttr = array(
            'text' => Lang::line($subrow['META_DATA_NAME']),
            'for' => "param[" . $subrow['META_DATA_CODE'] . "]",
            'data-label-path' => $subrow['META_DATA_CODE']
        );
        if ($subrow['IS_REQUIRED'] == '1') {
            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
        }
        $tabHeaderContent .= Form::label($labelAttr);
        $tabHeaderContent .= "</td>";
        $tabHeaderContent .= '<td class="middle" style="width: '.$tabSecondWidth.'%">';
        $tabHeaderContent .= '<div data-section-path="' . $subrow['PARAM_REAL_PATH'] . '">';
        $tabHeaderContent .= Mdwebservice::renderParamControl($methodId, $subrow, "param[" . $subrow['META_DATA_CODE'] . "]", $subrow['META_DATA_CODE'], $fillParamData);
        $tabHeaderContent .= "</div>";
        $tabHeaderContent .= "</td>";
        $tabHeaderContent .= "</tr>";

        if (!empty($subrow['SEPARATOR_TYPE'])) {
            $tabHeaderContent .= '<tr>
                <td colspan="'.$seperatorWidth.'">
                    <hr class="custom ' . $subrow['SEPARATOR_TYPE'] . '">
                </td>
            </tr>';
        }

        return $tabHeaderContent;
    }
    
    public function getTabSplitColumnContent($methodId, $columnCount, $params, $seperatorWidth, $labelWidth, $fillParamData) {
        $tabHeaderContent = '';
        
        $paramsCount = count($params);
        $chunkCount = $paramsCount / $columnCount;
        
        $rows = array_chunk($params, ($chunkCount < 1 ? 1 : $chunkCount));

        $columnDividePercent = (100 - ($labelWidth * $columnCount)) / $columnCount;
        $mainWidth = 100 / $columnCount;
        $labelWidth = $labelWidth * $columnCount;
        $controlWidth = $columnDividePercent * $columnCount;
        
        foreach ($rows as $param) {
            
            $tabHeaderContent .= '<div class="bp-tab-table" style="width: ' . $mainWidth . '%">';
            
                foreach ($param as $row) {
                    
                    $tabHeaderParam = '';
                            
                    if ($row['IS_SHOW'] != '1') {
                        $tabHeaderParam = ' hide';
                    }
                    
                    $tabHeaderContent .= '<div class="bp-tab-table-cell '.$tabHeaderParam.'" data-cell-path="'.$row['META_DATA_CODE'].'">';
                    
                        $tabHeaderContent .= '<div class="bp-tab-table-label" style="width: ' . $labelWidth . '%">';
                            $labelAttr = array(
                                'text' => Lang::line($row['META_DATA_NAME']),
                                'for' => 'param[' . $row['META_DATA_CODE'] . ']',
                                'data-label-path' => $row['META_DATA_CODE']
                            );
                            if ($row['IS_REQUIRED'] == '1') {
                                $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                            }
                        $tabHeaderContent .= Form::label($labelAttr);    
                        $tabHeaderContent .= '</div>';

                        $tabHeaderContent .= '<div class="bp-tab-table-control" style="width: '.$controlWidth.'%">';
                            $tabHeaderContent .= '<div data-section-path="' . $row['PARAM_REAL_PATH'] . '">';
                            $tabHeaderContent .= Mdwebservice::renderParamControl($methodId, $row, 'param[' . $row['META_DATA_CODE'] . ']', $row['META_DATA_CODE'], $fillParamData);
                            $tabHeaderContent .= "</div>";
                        $tabHeaderContent .= '</div>';
                        
                    $tabHeaderContent .= '</div>';
                }
                
            $tabHeaderContent .= '</div>';
        }
        
        return $tabHeaderContent.'<div class="clearfix w-100"></div>';
    }

    public function responseRenderParamControl() {

        $dataViewId = Input::post('dataViewId');
        $rowData = Input::post('rowData');

        echo Mdwebservice::renderParamControl($dataViewId, $rowData, 'param[' . $rowData['META_DATA_CODE'] . ']', $rowData['META_DATA_CODE'], false); exit;
    }
    
    public function renderTemplateViews($bpTemplateRow, $isEditNtrTrust = 0) {
        
        if (empty($bpTemplateRow['contentId'])) {
            $this->view->widgets = $this->view->renderPrint('addon/widget/widgets', self::$viewPath);

            if ($this->view->processActionType == 'view') {
                loadPhpQuery();
                $methodHtml = $this->view->renderPrint('sub/renderMethodTemplateView', self::$viewPath);
            } else {
                $methodHtml = $this->view->renderPrint('sub/renderMethodTemplate', self::$viewPath);
            }
        } else {
            if ($this->view->processActionType == 'view') {
                loadPhpQuery();
                $methodHtml = $this->view->renderPrint('sub/renderMethodTemplateView', self::$viewPath);
            } else {
                $mduser = &getInstance();
                $mduser->load->model('mduser', 'middleware/models/');
                $this->view->operator = $mduser->model->gettokenDataByUserId();
                
                $methodHtml = ($isEditNtrTrust) ? $this->view->renderPrint('sub/renderMethodTemplateEdit_v2', self::$viewPath) : $this->view->renderPrint('sub/renderMethodTemplate_v2', self::$viewPath);
            }
        }

        return $methodHtml;
    }
    
    public function replaceTaxonamy($taxonamyBody, $paramList) {
        
        preg_match_all('/.*?(color:\#.*?;).*?/', $taxonamyBody, $parseStyleColor);
        if (!empty($parseStyleColor[1])) {
            foreach ($parseStyleColor[1] as $color) {
                $taxonamyBody = str_replace($color, '', $taxonamyBody);
            }
        }
        
        preg_match_all('/(\#)(.*?)(\#)/', $taxonamyBody, $parseMeta);
        $setTag = '';
        
        if (!empty($parseMeta[2])) {
            foreach ($parseMeta[2] as $meta) {
                $metaAs = $metaTitle = $meta;
                preg_match_all('/^(.*)@/', $meta, $getMetaGroup);
                
                if (!empty($getMetaGroup[0])) {
                    //preg_match_all('/@(.*)&|@(.*)/', $meta, $getMetaGroup);
                    $metaAs = $metaTitle = $getMetaGroup[1][0];
                } else {
                    $metaExp = explode("&", $meta);
                    if (isset($metaExp[1])) {
                        $metaAs = $metaTitle = $metaExp[0];
                    }
                }
                preg_match_all('/&(.*)$/', $meta, $getTag);
                if (!empty($getTag[0])) {
                    $setTag = trim($getTag[1][0]);
                    $setTag = $this->model->getTaxonamyByTagModel($setTag);
                    $setTag = $setTag ? $setTag['ID'] : '';
                }
                
                $getBody = $this->model->searchMetaGroupProcessModel($metaAs, $paramList);
                if (isset($metaExp[1])) {
                    $metaAs = $meta;
                }
                
                if ($getBody) {
                    $groupMetas = Arr::implode_key_condition(' ', $getBody['data'], 'META_DATA_CODE', 'META_TYPE_CODE', 'METAGROUP', true);
                    $taxonamyBody = preg_replace('/(\#)('.$meta.')(\#)/', '<span title="'.$metaAs.'" data-title="'. $metaTitle .'" data-path-realname="${2}" data-template-tagid="'.$setTag.'" class="${2} detail-template-body detail-template-child-'.$getBody['recordtype'].'"><span class="metagroup-fields-list hidden">'.$groupMetas.'</span>'.$meta.'</span>', $taxonamyBody);
                }
                
                if (isset($metaExp[1])) {
                    unset($metaExp);
                }
            }
        }
        
        $headerBody = $this->model->searchMetaHeaderGroupProcessModel($paramList);
        
        if ($headerBody) {
            $groupMetas = Arr::implode_key_condition(' ', $headerBody['data'], 'META_DATA_CODE', 'META_TYPE_CODE', 'METAGROUP', true);
            $taxonamyBody = preg_replace('/(\#)(main@Widget)(\#)/', '<span title="mainWidget" data-title="mainWidget" data-path-realname="${2}" data-template-tagid="mainWidget" class="${2} detail-template-body detail-template-child-header"><span class="metagroup-fields-list hidden">'.$groupMetas.'</span>main@Widget</span>', $taxonamyBody);
        }
        
        return $taxonamyBody;
    }
    
    public function replaceTaxonamyProcces($taxonamyBody, $methodId, $showCopyBtn = '0') {
        preg_match_all('/.*?(color:\#.*?;).*?/', $taxonamyBody, $parseStyleColor);
        if (!empty($parseStyleColor[1])) {
            foreach ($parseStyleColor[1] as $color) {
                $taxonamyBody = str_replace($color, '', $taxonamyBody);
            }
        }        
        
        preg_match_all('/(\#)(.*?)(\#)/', $taxonamyBody, $parsePathRow);
        
        if (!empty($parsePathRow[2])) {
            foreach ($parsePathRow[2] as $tagVal) {
                $metaAs = $tagVal;
                $metaExp = ''; /*Өмнөх Exp аваад байгаа тул өөрчлөв*/
                
                preg_match_all('/^(.*)@/', $tagVal, $getMetaGroup);
                
                if (!empty($getMetaGroup[0])) {
                    $tagVal = $getMetaGroup[1][0];
                } else {
                    $metaExp = explode("&", $tagVal);
                    if (isset($metaExp[1])) {
                        $tagVal = $metaExp[0];
                    }
                }
                
                $getBody = $this->model->getTaxonamyConfigByPathModel($tagVal, $metaAs, $this->view->bpTemplateId);            
                
                if ($getBody) {
                    
                    $getGroupInfo = $this->model->searchMetaGroupProcessModel($getBody['PATH'], $this->view->paramList);
                    
                    if ($getGroupInfo) {
                        if (empty($getBody['WIDGET_CODE']) && empty($getBody['EXPRESSION'])) {
                            $taxBodyReplace = self::replaceTaxonamyTagProccesField($getBody['BODY'], $tagVal);
                            
                            if (isset($metaExp[1])) {
                                $tagVal = $metaAs;
                            }
                            
                            $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', '<span data-dtl-template-path="'.$tagVal.'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="'.$tagVal.' detail-template-body detail-template-child-'.$getGroupInfo['recordtype'].'">'.htmlentities($taxBodyReplace, ENT_QUOTES, 'UTF-8').'</span>', $taxonamyBody);
                            
                        } else {
                            if (isset($metaExp[1])) {
                                $tagVal = $metaAs;
                            }
                            
                            if (empty($getBody['WIDGET_CODE'])) {
                                if ($getBody['IS_ADD_BUTTON'] == '1') {
                                    
                                    if ($getBody['IS_COPY_BUTTON'] == '1') {
                                        $replaceTagHtml = '<span data-dtl-template-path="'.$tagVal.'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="'.$tagVal.' detail-template-body detail-template-child-'.$getGroupInfo['recordtype'].'">';
                                            $replaceTagHtml .= '<span class="detail-template-body-rows">';
                                                $replaceTagHtml .= '<a href="javascript:;" onclick="templateDtlAddExpressionRowParty_'. $methodId .'(this, \'\', \''.urlencode(json_encode(array($getBody))).'\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -65px;">&nbsp;<i class="icon-plus3 font-size-12"></i>&nbsp;</a>';
                                                if ($showCopyBtn === '1') {
                                                    $replaceTagHtml .= '<a href="javascript:;" onclick="bpCopyPrevData(this, \''.urlencode(json_encode(array($getBody))).'\', \'1\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -23px;">&nbsp;<i class="fa fa-copy font-size-12"></i>&nbsp;</a>';
                                                }
                                            $replaceTagHtml .= '</span>';
                                        $replaceTagHtml .= '</span>';

                                        $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/',  $replaceTagHtml, $taxonamyBody);
                                    } else {
                                        $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', '<span data-dtl-template-path="'.$tagVal.'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="'.$tagVal.' detail-template-body detail-template-child-'.$getGroupInfo['recordtype'].'"><span class="detail-template-body-rows"><a href="javascript:;" onclick="templateDtlAddExpressionRowParty_'. $methodId .'(this, \'\', \''.urlencode(json_encode(array($getBody))).'\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -23px;">&nbsp;<i class="icon-plus3 font-size-12"></i>&nbsp;</a></span></span>', $taxonamyBody);
                                    }

                                } else {
									if ($getBody['IS_COPY_BUTTON'] == '1') {
                                        $replaceTagHtml = '<span data-dtl-template-path="'.$tagVal.'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="'.$tagVal.' detail-template-body detail-template-child-'.$getGroupInfo['recordtype'].'">';
                                            $replaceTagHtml .= '<span class="detail-template-body-rows">';
                                                if ($showCopyBtn === '1') {
                                                    $replaceTagHtml .= '<a href="javascript:;" onclick="bpCopyPrevData(this, \''.urlencode(json_encode(array($getBody))).'\', \'1\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -23px;">&nbsp;<i class="fa fa-copy font-size-12"></i>&nbsp;</a>';
                                                }
                                            $replaceTagHtml .= '</span>';
                                        $replaceTagHtml .= '</span>';

                                        
                                    } else {
										$replaceTagHtml = '<span data-dtl-template-path="'.$tagVal.'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="'.$tagVal.' detail-template-body detail-template-child-'.$getGroupInfo['recordtype'].'">';
											$replaceTagHtml .= '<span class="detail-template-body-rows"></span>';
										$replaceTagHtml .= '</span>';
									}

									$taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/',  $replaceTagHtml, $taxonamyBody);
                                }
                            } else {
                                $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', '<span class="'.$tagVal.' detail-template-body detail-template-child-'.$getGroupInfo['recordtype'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'"></span>', $taxonamyBody);
                            }
                        }
                    }
                }
                
                if ($metaAs === 'main@Widget') {
                    $getBody = $this->model->getTaxonamyConfigByPathModel('mainWidget', 'main@Widget', $this->view->bpTemplateId);
                    
                    if (empty($getBody['WIDGET_CODE'])) {
                        if ($getBody['IS_ADD_BUTTON'] == '1') {
                            
                            if ($getBody['IS_COPY_BUTTON'] == '1') {
                                $replaceTagHtml = '<span data-dtl-template-path="mainWidget" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="mainWidget detail-template-body detail-template-child-header">';
                                    $replaceTagHtml .= '<span class="detail-template-body-rows">';
                                        $replaceTagHtml .= '<a href="javascript:;" onclick="templateDtlAddExpressionRowParty_'. $methodId .'(this, \'\', \''.urlencode(json_encode(array($getBody))).'\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -65px;">&nbsp;<i class="icon-plus3 font-size-12"></i>&nbsp;</a>';
                                        if ($showCopyBtn === '1') {
                                            $replaceTagHtml .= '<a href="javascript:;" title="Хуулах" onclick="bpCopyPrevData(this, \''.urlencode(json_encode(array($getBody))).'\', \'1\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -23px;">&nbsp;<i class="fa fa-copy font-size-12"></i>&nbsp;</a>';
                                        }
                                    $replaceTagHtml .= '</span>';
                                $replaceTagHtml .= '</span>';
                                
                                $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', $replaceTagHtml, $taxonamyBody);
                            } else {
                                $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', '<span data-dtl-template-path="mainWidget" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="mainWidget detail-template-body detail-template-child-header"><span class="detail-template-body-rows"><a href="javascript:;" onclick="templateDtlAddExpressionRowParty_'. $methodId .'(this, \'\', \''.urlencode(json_encode(array($getBody))).'\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -23px;">&nbsp;<i class="icon-plus3 font-size-12"></i>&nbsp;</a></span></span>', $taxonamyBody);
                            }
                            
                        } else {

							if ($getBody['IS_COPY_BUTTON'] == '1') {

                                $replaceTagHtml = '<span data-dtl-template-path="mainWidget" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="mainWidget detail-template-body detail-template-child-header">';
                                    $replaceTagHtml .= '<span class="detail-template-body-rows">';
                                        if ($showCopyBtn === '1') {
                                            $replaceTagHtml .= '<a href="javascript:;" title="Хуулах" onclick="bpCopyPrevData(this, \''.urlencode(json_encode(array($getBody))).'\', \'1\')" class="btn btn-xs btn-circle purple-plum float-left mt5 bp-tmp-idcard-part-add-sidebar" style="margin-left: -23px;">&nbsp;<i class="fa fa-copy font-size-12"></i>&nbsp;</a>';
                                        }
                                    $replaceTagHtml .= '</span>';
                                $replaceTagHtml .= '</span>';
							}
							else {
								$replaceTagHtml = '<span data-dtl-template-path="mainWidget" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'" data-display-picture="'.$getBody['IS_PICTURE'].'" class="mainWidget detail-template-body detail-template-child-header">';
									$replaceTagHtml .= '<span class="detail-template-body-rows"></span>';
								$replaceTagHtml .= '</span>';
							}
							
                            $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', $replaceTagHtml, $taxonamyBody);
                        }
                    } else {
                        $taxonamyBody = preg_replace('/(\#)('.$metaAs.')(\#)/', '<span data-dtl-template-path="mainWidget" class="mainWidget detail-template-body detail-template-child-header" data-display-picture="'.$getBody['IS_PICTURE'].'" data-dtl-taxconfig-id="'.$getBody['CONFIG_ID'].'"></span>', $taxonamyBody);
                    }
                }
            }
        }
        
        return $taxonamyBody;
    }
    
    public function getTaxonamyTagExpressionProcces($expression, $path, &$expressionTags, $expressionDtl, $expressionDtlKey, $bpTemplateId, $mainRow = array()) {
        $this->load->model('mdwebservice', 'middleware/models/');
        
        preg_match_all('/\[(.*?)\]/', $expression, $exp);
        preg_match_all('/\[(.*?)\]/', $expressionDtl, $expDtl);
        preg_match_all('/\[(.*?)\]/', $expressionDtlKey, $expDtlKey);
        $expressionTagsChild['tag'] = array();
        $expressionTagsChild['body'] = array();
        $expressionTagsChild['id'] = array();
        
        $expressionTagsChild['tag_header'] = array();
        $expressionTagsChild['body_header'] = array();
        $expressionTagsChild['id_header'] = array();
        
        $expressionTagsChild['tag_dtl'] = array();
        $expressionTagsChild['body_dtl'] = array();
        $expressionTagsChild['id_dtl'] = array();
        
        $expressionTagsChild['tag_dtlkey'] = array();
        $expressionTagsChild['body_dtlkey'] = array();
        $expressionTagsChild['id_dtlkey'] = array();
        
        $path = explode('\\&', $path);
        $path = $path[0];
        
        $tagSign = (isset($mainRow['IS_MULTI']) && $mainRow['IS_MULTI'] == '1') ? 'tag(row)' : 'tag()';
        $tagSignHide = (isset($mainRow['IS_MULTI']) && $mainRow['IS_MULTI'] == '1') ? 'tagHide(row)' : 'tagHide()';
        
        if (!empty($exp[1])) {
            foreach ($exp[1] as $key => $valGetPath) {
                $valGetPath = trim($valGetPath);
                
                if (strpos($expression, '['.$valGetPath.'].' . $tagSign) !== false || stripos($expression, '['.$valGetPath.'].' . $tagSignHide) !== false) {
                    preg_match_all('/^(.*)@/', $valGetPath, $getTaxTag);
                    
                    if(!empty($getTaxTag[0])) {
                        $valGetPath = $getTaxTag[1][0];
                    }                
                    $getBody = $this->model->getTaxonamyByTagModel($valGetPath);

                    if ($getBody) {
                        if (!in_array($valGetPath, $expressionTagsChild['tag'])) {
                            array_push($expressionTagsChild['tag'], $valGetPath);
                            array_push($expressionTagsChild['body'], $getBody['BODY']);
                            array_push($expressionTagsChild['id'], $getBody['ID']);
                        }
                    }
                }
            }            
            if (isset($expressionTags[$path])) {
                foreach ($expressionTagsChild['tag'] as $krow => $row) {
                    array_push($expressionTags[$path]['tag'], $row);
                    array_push($expressionTags[$path]['body'], $expressionTagsChild['body'][$krow]);
                    array_push($expressionTags[$path]['id'], $expressionTagsChild['id'][$krow]);
                }
            } else {
                $expressionTags[$path] = $expressionTagsChild;
            }
        }
        
        if (!empty($expDtl[1])) {
            foreach ($expDtl[1] as $key => $valGetPath) {
                $valGetPath = trim($valGetPath);
                
                if (strpos($expressionDtl, '['.$valGetPath.'].' . $tagSign) !== false || stripos($expressionDtl, '['.$valGetPath.'].' . $tagSignHide) !== false) {
                    $valGetPath = explode(".", $valGetPath);
                    
                    if (isset($valGetPath[1])) {
                        preg_match_all('/^(.*)@/', $valGetPath[1], $getTaxTag);

                        if (!empty($getTaxTag[0])) {
                            $valGetPath[1] = $getTaxTag[1][0];
                        }
                        $getBody = $this->model->getTaxonamyByTagModel($valGetPath[1]);

                        if ($getBody) {
                            if (!in_array($valGetPath[1], $expressionTagsChild['tag_dtl'])) {
                                array_push($expressionTagsChild['tag_dtl'], $valGetPath[1]);
                                array_push($expressionTagsChild['body_dtl'], $getBody['BODY']);
                                array_push($expressionTagsChild['id_dtl'], $getBody['ID']);
                            }
                        }
                        $expressionTags[$path.'__dtlpath'] = $valGetPath[0];
                    }
                }
            }
            
            $expressionTags[$path] = $expressionTagsChild;
        }
        
        if (!empty($expDtlKey[1])) {
            
            foreach ($expDtlKey[1] as $key => $valGetPath) {
                $valGetPath = trim($valGetPath);
                if (strpos($expressionDtlKey, '['.$valGetPath.'].' . $tagSign) !== false || stripos($expressionDtlKey, '['.$valGetPath.'].' . $tagSignHide) !== false) {
                    $valGetPath = explode(".", $valGetPath);
                    
                    if (isset($valGetPath[2])) {
                        preg_match_all('/^(.*)@/', $valGetPath[2], $getTaxTag);
                        
                        if (!empty($getTaxTag[0])) {
                            $valGetPath[2] = $getTaxTag[1][0];
                        }
                        $getBody = $this->model->getTaxonamyByTagModel($valGetPath[2]);
                        
                        if ($getBody) {
                            if (!in_array($valGetPath[2], $expressionTagsChild['tag_dtlkey'])) {
                                array_push($expressionTagsChild['tag_dtlkey'], $valGetPath[2]);
                                array_push($expressionTagsChild['body_dtlkey'], $getBody['BODY']);
                                array_push($expressionTagsChild['id_dtlkey'], $getBody['ID']);
                            }
                        }
                        $expressionTags[$path.'__dtlkeypath'] = $valGetPath[0].'.'.$valGetPath[1];
                    }
                }
            }
            
            $expressionTags[$path] = $expressionTagsChild;
        }
        
        if ($path === 'mainWidget') {
            $getBody = $this->model->getTaxonamyConfigByPathModel('mainWidget', 'main@Widget', $bpTemplateId);
        
            if ($getBody) {
                if (!in_array($path, $expressionTagsChild['tag_header'])) {
                    $expressionTagsChild['tag_header'] = $path;
                    $expressionTagsChild['body_header'] = $getBody['BODY'];
                    $expressionTagsChild['id_header'] = $getBody['ID'];
                }
            }
            
            $expressionTags[$path] = $expressionTagsChild;
        }
    }
    
    public function replaceTaxonamyTagExpressionProcces($expressionJS, $expressionCombo = '', $methodId = '', $mainRow = array()) {
        $this->load->model('mdwebservice', 'middleware/models/');
        $taxomyFunctionName = (isset($mainRow['IS_MULTI']) && $mainRow['IS_MULTI'] == '1') ? 'appendTaxonamyFunctionMultiple_' : 'appendTaxonamyFunction_';
        $tagSign = (isset($mainRow['IS_MULTI']) && $mainRow['IS_MULTI'] == '1') ? 'tag\((.*?)\)' : 'tag\(\)';
        $tagNumber = (isset($mainRow['IS_MULTI']) && $mainRow['IS_MULTI'] == '1') ? '$1' : '\'\'';
        
        try {
            preg_match_all('/\[(.*?)\]\.'. $tagSign .'/', $expressionJS, $exp);        
            
            
            if (!empty($exp[1])) {
                $exp[1] = Arr::arrayUnigue($exp[1]);
                
                foreach ($exp[1] as $key => $valGetPath) {
                    $valGetPath = trim($valGetPath);
                    $valGetPath = explode(".", $valGetPath);

                    if (!isset($valGetPath[1])) {
                        $valGetPath = $valGetPath[0];
                        $valGetPath2 = $valGetPath;
                        
                        preg_match_all('/^(.*)@/', $valGetPath, $getTaxTag);
                        if (!empty($getTaxTag[0])) {
                            $valGetPath2 = $getTaxTag[1][0];
                        }
                        
                        $getBody = $this->model->getTaxonamyByTagModel($valGetPath2);
                        if ($getBody) {
                            $expressionJS = preg_replace('/\['.$valGetPath.'\]\.'. $tagSign .'/', $taxomyFunctionName. $methodId .'(\''.$valGetPath.'\', _this, \''.$expressionCombo.'\', \'\', '. $tagNumber .');', $expressionJS);
                        }

                    } else {
                        preg_match_all('/^(.*)@/', $valGetPath[1], $getTaxTag);

                        $vg = $valGetPath[1];
                        if (!empty($getTaxTag[0])) {
                            $vg = $getTaxTag[1][0];
                        }
                        
                        $getBody = $this->model->getTaxonamyByTagModel($vg);
                        if ($getBody) {
                            $expressionJS = preg_replace('/\['.implode(".", $valGetPath).'\]\.'. $tagSign .'/', $taxomyFunctionName. $methodId .'(\''.implode(".", $valGetPath).'\', _this, \''.$expressionCombo.'\', \'\', '. $tagNumber .');', $expressionJS);
                        }
                    }
                }
            }
            
            preg_match_all('/\[(.*?)\]\.tagHide\(\)/i', $expressionJS, $expHide);        

            if (!empty($expHide[1])) {
                
                $tagSign = (isset($mainRow['IS_MULTI']) && $mainRow['IS_MULTI'] == '1') ? 'tagHide\((.*?)\)' : 'tagHide\(\)';
                $expHide[1] = Arr::arrayUnigue($expHide[1]);

                foreach ($expHide[1] as $key => $valGetPath) {
                    $valGetPath = trim($valGetPath);
                    $valGetPath = explode(".", $valGetPath);

                    if (!isset($valGetPath[1])) {
                        $valGetPath = $valGetPath[0];
                        $valGetPath2 = $valGetPath;
                        
                        preg_match_all('/^(.*)@/', $valGetPath, $getTaxTag);
                        if (!empty($getTaxTag[0])) {
                            $valGetPath2 = $getTaxTag[1][0];
                        }
                        
                        $getBody = $this->model->getTaxonamyByTagModel($valGetPath2);
                        if ($getBody) {
                            $expressionJS = preg_replace('/\['.$valGetPath.'\]\.tagHide\(\)/i', $taxomyFunctionName . $methodId .'(\''.$valGetPath.'\', _this, \''.$expressionCombo.'\', \'hide\', \'\');', $expressionJS);
                        }

                    } else {
                        preg_match_all('/^(.*)@/', $valGetPath[1], $getTaxTag);

                        $vg = $valGetPath[1];
                        if (!empty($getTaxTag[0])) {
                            $vg = $getTaxTag[1][0];
                        }
                        $getBody = $this->model->getTaxonamyByTagModel($vg);
                        if ($getBody) {
                            $expressionJS = preg_replace('/\['.implode(".", $valGetPath).'\]\.tagHide\(\)/i', $taxomyFunctionName . $methodId .'(\''.implode(".", $valGetPath).'\', _this, \'\', \'hide\', \'\');', $expressionJS);
                        }
                    }
                }
            }
            
            return $expressionJS;
        } catch (Exception $ex) {
            echo 'Message: ' .$ex->getMessage(); die;
        }
    }
    
    public function replaceTaxonamyKeyTagExpressionProcces($expressionJS, $expressionCombo = '', $methodId  = '') {
        $this->load->model('mdwebservice', 'middleware/models/');
        
        try {
            preg_match_all('/\[(.*?)\]\.tag\(\)/', $expressionJS, $exp);        
            
            if (!empty($exp[1])) {
                $exp[1] = Arr::arrayUnigue($exp[1]);
                foreach ($exp[1] as $key => $valGetPath) {
                    $valGetPath = trim($valGetPath);
                    $valGetPath = explode(".", $valGetPath);
                    
                    if (!isset($valGetPath[2])) {
                        $valGetPath = $valGetPath[0];
                        $valGetPath2 = $valGetPath;
                        
                        preg_match_all('/^(.*)@/', $valGetPath, $getTaxTag);
                        if(!empty($getTaxTag[0])) {
                            $valGetPath2 = $getTaxTag[1][0];
                        }
                        
                        $getBody = $this->model->getTaxonamyKeyByTagModel($valGetPath2);
                        if($getBody) {
                            $expressionJS = preg_replace('/\['.$valGetPath.'\]\.tag\(\)/', 'appendTaxonamyFunction_'. $methodId .'(\''.$valGetPath.'\', _this, \'\', \'\');', $expressionJS);
                        }

                    } else {
                        preg_match_all('/^(.*)@/', $valGetPath[1], $getTaxTag);

                        $vg = $valGetPath[2];
                        if(!empty($getTaxTag[0])) {
                            $vg = $getTaxTag[2][0];
                        }
                        
                        $getBody = $this->model->getTaxonamyKeyByTagModel($vg);
                        
//                        if ($getBody) {
//                            $expressionJS = preg_replace('/\['.implode(".", $valGetPath).'\]\.tag\(\)/', 'appendTaxonamyFunction_'. $methodId .'(\''.implode(".", $valGetPath).'\', _this, \''.$expressionCombo.'\', \'\');', $expressionJS);
//                        } 
                        $expressionJS = preg_replace('/\['.implode(".", $valGetPath).'\]\.tag\(\)/', 'appendTaxonamyFunction_'. $methodId .'(\''.implode(".", $valGetPath).'\', _this, \''.$expressionCombo.'\', \'\');', $expressionJS);
                        
                    }
                }
            }

            preg_match_all('/\[(.*?)\]\.tagHide\(\)/i', $expressionJS, $expHide);        

            if (!empty($expHide[1])) {
                $expHide[1] = Arr::arrayUnigue($expHide[1]);

                foreach ($expHide[1] as $key => $valGetPath) {
                    $valGetPath = trim($valGetPath);
                    $valGetPath = explode(".", $valGetPath);

                    if (!isset($valGetPath[1])) {
                        $valGetPath = $valGetPath[0];
                        $valGetPath2 = $valGetPath;
                        
                        preg_match_all('/^(.*)@/', $valGetPath, $getTaxTag);
                        if(!empty($getTaxTag[0])) {
                            $valGetPath2 = $getTaxTag[1][0];
                        }
                        
                        $getBody = $this->model->getTaxonamyByTagModel($valGetPath2);
                        if ($getBody) {
                            $expressionJS = preg_replace('/\['.$valGetPath.'\]\.tagHide\(\)/i', 'appendTaxonamyFunction_'. $methodId .'(\''.$valGetPath.'\', _this, \''.$expressionCombo.'\', \'hide\');', $expressionJS);
                        }

                    } else {
                        preg_match_all('/^(.*)@/', $valGetPath[1], $getTaxTag);

                        $vg = $valGetPath[1];
                        if (!empty($getTaxTag[0])) {
                            $vg = $getTaxTag[1][0];
                        }
                        $getBody = $this->model->getTaxonamyByTagModel($vg);
                        if ($getBody) {
                            $expressionJS = preg_replace('/\['.implode(".", $valGetPath).'\]\.tagHide\(\)/i', 'appendTaxonamyFunction_'. $methodId .'(\''.implode(".", $valGetPath).'\', _this, \'\', \'hide\');', $expressionJS);
                        }
                    }
                }
            }
            
            return $expressionJS;
            
        } catch (Exception $ex) {
            echo 'Message: ' .$ex->getMessage(); die;
        }
    }
    
    public function replaceTaxonamyTagProccesField($taxBody, $path) {
        if ($this->view->paramList) {
            foreach ($this->view->paramList as $k => $row) {
                if ($row['type'] == 'detail' && $row['code'] == $path) {
                    foreach ($row['data'] as $ind => $val) {
                        $taxBody = str_ireplace('#'.$val['META_DATA_CODE'].'#', Mdwebservice::renderParamControl($this->view->methodId, $val, $row['code'] . "." . $val['META_DATA_CODE'], $val['META_DATA_CODE'], null), $taxBody);
                    }
                }
            }
        }
        
        return $taxBody;
    }
    
    public function detailThemeView($processId, $themeCode, $paramData, $fillParamData) {
        
        $result = null;
        
        if ($themeCode == '1') {
            $result = (new Mdwebservice())->renderViewBigCard($processId, $paramData, $fillParamData);
        } else {
            switch ($themeCode) {
                case '11':
                    $result = (new Mdwebservice())->renderViewInfo($processId, $paramData, $fillParamData);

                    break;
                case '12':
                    $result = (new Mdwebservice())->renderViewTimeLine($processId, $paramData, $fillParamData);

                    break;
                default:
                    $result = '';
                    break;
            }
        }
        
        return $result;
    }
    
    public function renderViewBigCard($processId, $row, $fillParamData) {
        
        $result = '<div class="horizontal-scroll" data-table-path="'.$row['code'].'" data-table-path-lower="'.Str::lower($row['code']).'">';
        
        $lowerKey = strtolower($row['code']);

        if (isset($fillParamData[$lowerKey])) {
            
            $paramData = $row['data'];
            $fillParamData = $fillParamData[$lowerKey];
            $htmlContent = file_get_contents(BASEPATH . 'middleware/views/webservice/themes/view/theme1.php');
            $sideBar = '';
            
            foreach ($paramData as $i => $val) {
                
                if ($val['FEATURE_NUM'] != '') {
                    
                    $paramName = strtolower($val['META_DATA_CODE']);
                    $featureNum = $val['FEATURE_NUM'];
                    $htmlContent = str_replace('$rowData[\'{fieldName'.$featureNum.'}\']', '$rowData[\''.$paramName.'\']', $htmlContent);
                    $htmlContent = str_replace('{pos'.$featureNum.'}', '\'.Mdwebservice::renderViewParamControl($processId, $paramData['.$i.'], "param[' . $val['PARAM_REAL_PATH'] . '][0][]", \''.$val['PARAM_REAL_PATH'].'\', $rowData).\'', $htmlContent);
                    $htmlContent = str_replace('{label'.$featureNum.'}', Lang::line($val['META_DATA_NAME']), $htmlContent);
                    $htmlContent = str_replace('{path'.$featureNum.'}', $val['PARAM_REAL_PATH'], $htmlContent);
                }
                
                if ($val['SIDEBAR_NAME'] != '') {
                        
                    $sideBar .= '$paramData['.$i.'][\'SIDEBAR_NAME\'] = trim($paramData['.$i.'][\'SIDEBAR_NAME\']);

                        if (!empty($paramData['.$i.'][\'SIDEBAR_NAME\'])) {
                            $sidebarShowRowsDtl_{$row[\'id\']} = true;

                            if (!in_array($paramData['.$i.'][\'SIDEBAR_NAME\'], $sidebarGroupArr_{$row[\'id\']})) {
                                array_push($sidebarGroupArr_{$row[\'id\']}, $paramData['.$i.'][\'SIDEBAR_NAME\']);
                            }

                            $groupKey = array_search($paramData['.$i.'][\'SIDEBAR_NAME\'], $sidebarGroupArr_{$row[\'id\']});
                            $labelAttr = array(
                                \'text\' => Lang::line($paramData['.$i.'][\'META_DATA_NAME\']),
                                \'for\' => "param[" . $row[\'code\'] . "." . $paramData['.$i.'][\'META_DATA_CODE\'] . "][$k][]",
                                \'data-label-path\' => $row[\'code\'] . "." . $paramData['.$i.'][\'META_DATA_CODE\']
                            );
                            if ($paramData['.$i.'][\'META_TYPE_CODE\'] == \'date\') {
                                $inHtml = \'<div style="width: 132px; text-align: left;">\' . Mdwebservice::renderViewParamControl($processId, $paramData['.$i.'], "param[" . $row[\'code\'] . "." . $paramData['.$i.'][\'META_DATA_CODE\'] . "][$k][]", $row[\'code\'] . "." . $paramData['.$i.'][\'META_DATA_CODE\'], $rowData) . "</div>";
                            } elseif ($paramData['.$i.'][\'META_TYPE_CODE\'] == \'boolean\') {
                                $inHtml = Mdwebservice::renderViewParamControl($processId, $paramData['.$i.'], "param[" . $row[\'code\'] . "." . $paramData['.$i.'][\'META_DATA_CODE\'] . "][$k][]", $row[\'code\'] . \'.\' . $paramData['.$i.'][\'META_DATA_CODE\'], $rowData);
                            } else {
                                $inHtml = Mdwebservice::renderViewParamControl($processId, $paramData['.$i.'], "param[" . $row[\'code\'] . "." . $paramData['.$i.'][\'META_DATA_CODE\'] . "][$k][]", $row[\'code\'] . \'.\' . $paramData['.$i.'][\'META_DATA_CODE\'], $rowData, \'removeSelect2\');
                            }
                            $sidebarDtlRowsContentArr_{$row[\'id\'].$groupKey}[$k][] = array(
                                \'input_label_txt\' => Form::label($labelAttr), 
                                \'data_path\' => $row[\'code\'] . \'.\' . $paramData['.$i.'][\'META_DATA_CODE\'],
                                \'input_html\' => $inHtml
                            );
                            $sidebarDtlRowsContentArr_{$row[\'id\']}[$groupKey][$k] = $sidebarDtlRowsContentArr_{$row[\'id\'].$groupKey}[$k];                                    
                        } ';
                    
                } else {
                    
                    if ($val['IS_SHOW'] == '1' && ($val['RECORD_TYPE'] == 'rows' || $val['RECORD_TYPE'] == 'row')) {
                        
                        $hideClass = '';
                            
                        $sideBar .= '++$ii; ';
                        $sideBar .= '$gridTabActive = \'\';
                        if ($ii === 1) {
                            $gridTabActive = \' active\';
                        }
                        $arg[\'isTab\'] = \'tab\';
                        $isTab = true;
                        $arg[\'isShowAdd\'] = $paramData['.$i.'][\'IS_SHOW_ADD\'];
                        $arg[\'isShowDelete\'] = $paramData['.$i.'][\'IS_SHOW_DELETE\'];
                        $arg[\'isShowMultiple\'] = $paramData['.$i.'][\'IS_SHOW_MULTIPLE\'];             
                        $arg[\'isFirstRow\'] = $paramData['.$i.'][\'IS_FIRST_ROW\'];
                        $gridTabContentHeader .= \'<li class="nav-item ' . $hideClass .'">\';
                        $gridTabContentHeader .= \'<a href="#\' . $row[\'code\'] . "_" . $paramData['.$i.'][\'META_DATA_CODE\'] . \'" data-toggle="tab" class="nav-link \'. $gridTabActive . \'">\' . Lang::line($paramData['.$i.'][\'META_DATA_NAME\']) . \'</a>\';
                        $gridTabContentHeader .= \'</li>\';
                        $gridTabContentBody .= \'<div class="tab-pane in' . $hideClass . '\'.$gridTabActive . \'" id="\' . $row[\'code\'] . "_" . $paramData['.$i.'][\'META_DATA_CODE\'] . \'" data-section-path="\' . $row[\'code\'] . "_" . $paramData['.$i.'][\'META_DATA_CODE\'] . \'">\';
                        $gridTabContentBody .= self::buildTreeParamView($processId, $paramData['.$i.'][\'META_DATA_NAME\'], $row[\'code\'] . \'.\' . $paramData['.$i.'][\'META_DATA_CODE\'], $paramData['.$i.'][\'RECORD_TYPE\'], $paramData['.$i.'][\'ID\'], $rowData, \'\', $arg, $paramData['.$i.'][\'IS_BUTTON\'], $paramData['.$i.'][\'COLUMN_COUNT\'], $k);
                        $gridTabContentBody .= \'</div>\';';
                    }
                }
            }
            
            $htmlContent = str_replace('{sidebar}', $sideBar, $htmlContent);
                
            foreach ($fillParamData as $k => $rowData) {
                
                $ii = 0;
                $isTab = false;
                $gridTabContentHeader = $gridTabContentBody = '';
                $sidebarGroupArr_{$row['id']} = array();
                $sidebarShowRowsDtl_{$row['id']} = false;   

                eval($htmlContent);
            }
        }
        
        $result .= '</div>';
        
        return $result;
    }
    
    public function renderViewInfo($processId, $row, $fillParamData) {
        
        $result = '<div data-table-path="'.$row['code'].'" data-table-path-lower="'.Str::lower($row['code']).'">';
        
        $lowerKey = strtolower($row['code']);

        if (isset($fillParamData[$lowerKey])) {
            
            $paramData = $row['data'];
            $fillParamData = $fillParamData[$lowerKey];
            $htmlContent = file_get_contents(BASEPATH . 'middleware/views/webservice/themes/view/theme2.php');
            $sideBar = '';
            
            foreach ($paramData as $i => $val) {
                
                if ($val['THEME_POSITION_NO']) {
                    $paramName = strtolower($val['META_DATA_CODE']);
                    $htmlContent = str_replace('{position-'.$val['THEME_POSITION_NO'].'}', '\'.Mdwebservice::renderViewParamControl($processId, $paramData['.$i.'], "param[' . $val['PARAM_REAL_PATH'] . '][0][]", \''.$val['PARAM_REAL_PATH'].'\', $rowData).\'', $htmlContent);
                }
            }
            
            for ($index = 1; $index <= 10; $index++) {
                $htmlContent = str_replace('{label-'. $index .'}', '', $htmlContent);
                $htmlContent = str_replace('{position-'. $index .'}', '', $htmlContent);
            }
            
            foreach ($fillParamData as $k => $rowData) {
                
                $ii = 0;
                $isTab = false;
                $gridTabContentHeader = $gridTabContentBody = '';
                $sidebarGroupArr_{$row['id']} = array();
                $sidebarShowRowsDtl_{$row['id']} = false;   

                eval($htmlContent);
            }
        }
        
        $result .= '</div>';
        
        return $result;
    }
    
    public function renderViewTimeLine($processId, $row, $fillParamData) {
        
        $result = '<div class="" data-table-path="'.$row['code'].'" data-table-path-lower="'.Str::lower($row['code']).'">';
        
        $lowerKey = strtolower($row['code']);

        $htmlContent = file_get_contents(BASEPATH . 'middleware/views/webservice/themes/view/theme3.php');
        
        if (isset($fillParamData[$lowerKey])) {
            
            $paramData = $row['data'];
            $fillParamData = $fillParamData[$lowerKey];
            $sideBar = '';
            
            foreach ($paramData as $i => $val) {
                
                if ($val['THEME_POSITION_NO']) {
                    
                    $paramName = strtolower($val['META_DATA_CODE']);
                    $htmlContent = str_replace('{position-'.$val['THEME_POSITION_NO'].'}', '\'.Mdwebservice::renderViewParamControl($processId, $paramData['.$i.'], "param[' . $val['PARAM_REAL_PATH'] . '][0][]", \''.$val['PARAM_REAL_PATH'].'\', $rowData).\'', $htmlContent);
                    $htmlContent = str_replace('{label-'.$val['THEME_POSITION_NO'].'}', Lang::line($val['META_DATA_NAME']), $htmlContent);
                    if ($val['COLUMN_WIDTH']) {
                        $htmlContent = str_replace('{label-width-'.$val['THEME_POSITION_NO'].'}', 'style="width:'.$val['COLUMN_WIDTH'].';"', $htmlContent);
                    }
                
                }
            }
            for ($index = 1; $index <= 10; $index++) {
                $htmlContent = str_replace('{label-'. $index .'}', '', $htmlContent);
                $htmlContent = str_replace('{label-width-'. $index .'}', '', $htmlContent);
                $htmlContent = str_replace('{position-'. $index .'}', '', $htmlContent);
            }
            foreach ($fillParamData as $k => $rowData) {
                
                $ii = 0;
                $isTab = false;
                $gridTabContentHeader = $gridTabContentBody = '';
                $sidebarGroupArr_{$row['id']} = array();
                $sidebarShowRowsDtl_{$row['id']} = false;   

                eval($htmlContent);
            }
        }
        
        $result .= '</div>';
        
        return $result;
    }
    
    public function getDetailUserConfig($processId, $groupId, $groupCode) {
        $this->load->model('mdwebservice', 'middleware/models/');
        $result = $this->model->getDetailUserConfigModel($processId, $groupId, $groupCode);
        return $result;
    }
    
    public function detailUserOption() {
        
        $this->view->metaDataId = Input::post('processId');
        $this->view->groupPath = Input::post('groupPath');
        $this->view->parentId = Input::post('parentId'); 
        
        $data = $this->model->bpDetailColumnsModel($this->view->metaDataId, $this->view->parentId, $this->view->groupPath);
        $this->view->detailColumns = $data['data'];
        $this->view->userConfig = $data['userConfig'];
        
        $response = array(
            'html' => $this->view->renderPrint('addon/user/config', self::$viewPath),
            'title' => $this->lang->line('META_00112'), 
            'save_btn' => $this->lang->line('save_btn'), 
            'close_btn' => $this->lang->line('close_btn')
        );
        echo json_encode($response); exit;
    }
    
    public function detailUserOptionSave() {
        $response = $this->model->detailUserOptionSaveModel();
        echo json_encode($response); exit;
    }
    
    public function renderViewProcess() {
        
        if (self::$isLayoutRender) {
            
            $renderProcess = self::renderLayoutProcess();
            
        } else {
            
            $processCode = Str::upper($this->view->methodRow['META_DATA_CODE']);

            if ($processCode == 'HRM_EMP_PROFILE_001' || $processCode == 'GOV_HRM_EMP_PROFILE_001' || $processCode == 'HRM_STUDENT_PROFILE_001' || $processCode == 'HRM_CANDIDATE_PROFILE_001') {
                $renderProcess = $this->view->renderPrint('themes/view/layout/hr_anket', self::$viewPath);
            } elseif ($processCode == 'MEMBERGET_002') {
                $renderProcess = $this->view->renderPrint('themes/view/layout/membership', self::$viewPath);
            } elseif ($processCode == 'COZY_ANKET_VIEW') {
                $renderProcess = $this->view->renderPrint('themes/view/layout/hr_anket_cozy', self::$viewPath);
            } elseif ($processCode == 'FITCUSTOMERVIEW_DV_002') {
                $renderProcess = $this->view->renderPrint('themes/view/layout/membership_fitness', self::$viewPath);
            } elseif ($this->view->methodRow['THEME'] == 'web') {
                $renderProcess = $this->view->renderPrint('sub/renderMethodViewWithDtlTheme', self::$viewPath);
            } else {
                $renderProcess = $this->view->renderPrint('sub/renderMethodView', self::$viewPath);
            }
        }
        
        return $renderProcess;
    }
    
    public function generateLayoutCss($methodId, $attr) {
        
        $css = null;
        
        if ($attr) {
            
            $arr = array();
            
            foreach ($attr as $key => $val) {
                
                if ($key == 'sectionNoBorder' && $val) {
                    
                    $arr[] = '#bp-window-' . $methodId .' form .card { border: none; box-shadow: none; }';
                    
                } elseif ($key == 'backgroundColor' && $val) {
                    
                    if ($this->view->isDialog) {
                        $arr[] = 'div[aria-describedby="dialog-businessprocess-'.$methodId.'"] { background-color: '.$val.'; }';
                        $arr[] = 'div[aria-describedby="dialog-businessprocess-'.$methodId.'"] .tabbable-line > .tab-content { background-color: transparent; }';
                        $arr[] = 'div[aria-describedby="dialog-businessprocess-'.$methodId.'"] .nav-tabs .nav-link.active { background-color: transparent; }';
                    } else {
                        $arr[] = '#bp-window-'.$methodId.' .bp-layout { background-color: '.$val.'; padding-top: 8px; margin-left: -15px; margin-right: -15px; margin-top: -7px; }';
                        $arr[] = '#bp-window-'.$methodId.' .bp-layout .tabbable-line > .tab-content { background-color: transparent; }';
                        $arr[] = '#bp-window-'.$methodId.' .bp-layout .nav-tabs .nav-link.active { background-color: transparent; }';
                    }
                    
                } elseif ($key == 'sectionTitleNoBottomBorder' && $val) {
                    
                    $arr[] = '#bp-window-' . $methodId .' form .card > .card-header { border-bottom: none; margin-top: -10px; margin-bottom: 6px; }';
                    
                } elseif ($key == 'labelColor' && $val) {
                    
                    $arr[] = '#bp-window-' . $methodId .' form .col-form-label, #bp-window-' . $methodId .' form .bp-layout-anchor-label-color { color: '.$val.' }';
                    $arr[] = '#bp-window-' . $methodId .' form input[type=text].stringInit:focus { border: 1px '.$val.' solid!important; }';
                    $arr[] = '#bp-window-' . $methodId .' form input[type=text].datetimeInit:focus { border: 1px '.$val.' solid!important; }';
                    $arr[] = '#bp-window-' . $methodId .' form textarea:focus { border: 1px '.$val.' solid!important; }';
                }
            }
            
            $css = implode('', $arr);
        }
        
        return $css;
    }
    
    public function generateLayoutSectionCss($methodId, $code, $attr) {
        
        $css = null;
        
        if ($attr && is_array($attr)) {
            
            $arr = array();
            
            foreach ($attr as $key => $val) {
                
                if ($key == 'backgroundColor' && $val) {
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card { background-color: '.$val.'; }';
                } elseif ($key == 'textColor' && $val) {
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card .card-title { color: '.$val.'; }';
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card input[type="text"] { color: '.$val.'; }';
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card .pf-codewithphoto-parent .pf-codewithphoto-popup { color: '.$val.'; }';
                } elseif ($key == 'labelColor' && $val) {
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card .col-form-label { color: '.$val.'; }';
                } elseif ($key == 'labelWidth' && $val) {
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card .col-form-label {';
                        $arr[] = '-ms-flex: 0 0 auto;'; 
                        $arr[] = 'flex: 0 0 auto;'; 
                        $arr[] = 'width: '.$val.';'; 
                        $arr[] = 'max-width: 100%;'; 
                    $arr[] = '}';
                    $arr[] = '#bp-window-' . $methodId .' form .bl-sectioncode'.$code.'-card .col-form-control {';
                        $arr[] = '-ms-flex-preferred-size: 0!important;'; 
                        $arr[] = 'flex-basis: 0%!important;';
                        $arr[] = '-ms-flex-positive: 1!important;';
                        $arr[] = 'flex-grow: 1!important;';
                        $arr[] = 'max-width: 100%!important;';
                        $arr[] = 'overflow: auto!important;';
                    $arr[] = '}';
                }
            }
            
            $css = implode('', $arr);
        }
        
        return $css;
    }
    
    public function renderLayoutProcess() {
        
        $this->view->isLayoutRender = true;
        $this->view->hiddenParam = '';
        $this->view->gridHeaderClass = '';
        $this->view->hiddenDetail = '';
        
        $layout = $this->view->renderPrint('sub/layout/' . $this->view->methodRow['LAYOUT_CODE'], self::$viewPath);
        
        if ($this->view->processActionType == 'view') {
            self::$renderLayoutSectionParamFnc = 'renderLayoutSectionParamView';
            self::$renderParamControlFnc = 'renderViewParamControl';
            self::$renderLayoutSectionRowFnc = 'renderLayoutSectionRowView';
            $detailDefaultViewName = 'defaultView';
        } else {
            self::$renderLayoutSectionParamFnc = 'renderLayoutSectionParamAddEdit';
            self::$renderParamControlFnc = 'renderParamControl';
            self::$renderLayoutSectionRowFnc = 'renderLayoutSectionRow';
            $detailDefaultViewName = 'default';
        }
        
        $layoutOtherAttr = issetJsonToArr($this->view->methodRow['LAYOUT_OTHER_ATTR']);
        $this->view->gridHeaderClass .= self::generateLayoutCss($this->view->methodId, $layoutOtherAttr);
        
        $sectionsConfig = $this->model->getSectionsConfigByProcessIdModel($this->view->methodId);
        
        self::$sections = $sectionPositions = array();
        
        foreach ($this->view->paramList as $k => $row) {
                    
            if ($row['type'] == 'header' && isset($row['data'])) {
                    
                $buildData = Mdwebservice::getOnlyShowParamAndHiddenPrint($row['data'], $this->view->fillParamData);
                
                if (isset($buildData['hiddenParam']) && $buildData['hiddenParam']) {
                    $this->view->hiddenParam = $buildData['hiddenParam'];
                }
                
                foreach ($buildData['onlyShow'] as $param) {

                    if ($param['LAYOUT_SECTION_CODE']) {

                        $this->view->gridHeaderClass .= self::fieldHeaderStyleLayout($param, 'bp-window-' . $this->view->methodId);
                        
                        $headerControl = self::renderLayoutSectionParam($this->view->methodId, $param, 'param['.$param['PARAM_REAL_PATH'].']', $this->view->fillParamData);
                        
                        $displayOrder = self::getLayoutParamDisplayOrder($param['LAYOUT_DISPLAY_ORDER']);
                        
                        if ($param['LAYOUT_TAB_NAME']) {
                            self::$sections[$param['LAYOUT_SECTION_CODE']][$param['LAYOUT_TAB_NAME']]['header'][$displayOrder] = $headerControl;
                        } else {
                            
                            if (isset(self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder])) {
                                $displayOrder = self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] . '.1';
                            } else {
                                self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] = $displayOrder;
                            }
                            
                            self::$sections[$param['LAYOUT_SECTION_CODE']]['pfWithoutTab'][$displayOrder] = $headerControl;
                        }
                        
                        if ($widgetCode = issetParam($sectionsConfig[$param['LAYOUT_SECTION_CODE']]['widgetCode'])) {
                            
                            if ($widgetCode == 'form_bank_card') {
                                $sectionPositions[$param['LAYOUT_SECTION_CODE']][$widgetCode][$displayOrder] = array(
                                    'param' => $param, 
                                    'value' => issetParam($this->view->fillParamData[$param['LOWER_PARAM_REAL_PATH']])
                                );
                            }
                        }
                        
                    } else {
                        $this->view->hiddenParam .= self::{self::$renderParamControlFnc}($this->view->methodId, $param, 'param['.$param['META_DATA_CODE'].']', '', $this->view->fillParamData);
                    }
                }
                
            } elseif ($row['type'] == 'detail' && $row['isShow'] == '1' && isset($row['data'])) {
                
                if ($row['recordtype'] == 'rows') {
                    
                    $this->view->paramRow = $row;
                    $detail = $this->view->renderPrint('sub/detail/' . $detailDefaultViewName, self::$viewPath);
                    
                    if ($row['layoutSectionCode']) {
                        
                        $this->view->isDtlTbl = true;
                        
                        if ($rowsTitle = issetParam($row['layoutOtherAttr']['rowsTitle'])) {
                            $detail = self::renderLayoutSectionTitle($rowsTitle) . $detail;
                        }
                        
                        if ($row['layoutTabName']) {
                            self::$sections[$row['layoutSectionCode']][$row['layoutTabName']]['detail'][] = $detail;
                        } else {
                            
                            $displayOrder = self::getLayoutParamDisplayOrder(issetParam($row['layoutDisplayOrder']));

                            if (isset(self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder])) {
                                $displayOrder = self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder] . '.1';
                            } else {
                                self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder] = $displayOrder;
                            }
                            
                            self::$sections[$row['layoutSectionCode']]['pfWithoutTab'][$displayOrder] = $detail;
                        }
                        
                    } else {
                        $this->view->hiddenDetail .= $detail;
                    }
                    
                } else { // recordtype = row 
                    
                    $lowerParamName = $row['lowerParamName'];
                    $fillParamData = isset($this->view->fillParamData[$lowerParamName]) ? $this->view->fillParamData[$lowerParamName] : array();
                        
                    if ($row['layoutSectionCode']) {
                        
                        foreach ($row['data'] as $param) {
        
                            if ($param['IS_SHOW'] == '1' && $param['LAYOUT_SECTION_CODE']) {
                                
                                $displayOrder = self::getLayoutParamDisplayOrder($param['LAYOUT_DISPLAY_ORDER']);
                                
                                if (!$param['RECORD_TYPE']) {
                                
                                    $this->view->gridHeaderClass .= self::fieldHeaderStyleLayout($param, 'bp-window-' . $this->view->methodId);
                                    
                                    $rowControl = Mdwebservice::renderLayoutSectionParam($this->view->methodId, $param, 'param['.$param['PARAM_REAL_PATH'].'][0][]', $fillParamData);
                                    
                                    if ($param['LAYOUT_TAB_NAME']) {
                                        self::$sections[$param['LAYOUT_SECTION_CODE']][$param['LAYOUT_TAB_NAME']]['header'][$displayOrder] = $rowControl;
                                    } else {
                                        
                                        if (isset(self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder])) {
                                            $displayOrder = self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] . '.1';
                                        } else {
                                            self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] = $displayOrder;
                                        }

                                        self::$sections[$param['LAYOUT_SECTION_CODE']]['pfWithoutTab'][$displayOrder] = $rowControl;
                                    }
                                    
                                } else {
                                    
                                    $rowControl = Mdwebservice::{self::$renderLayoutSectionRowFnc}($this->view->methodId, $param, $fillParamData);

                                    if ($param['LAYOUT_TAB_NAME']) {
                                        self::$sections[$param['LAYOUT_SECTION_CODE']][$param['LAYOUT_TAB_NAME']]['header'][$displayOrder] = $rowControl;
                                    } else {
                                        
                                        if (isset(self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder])) {
                                            $displayOrder = self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] . '.1';
                                        } else {
                                            self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] = $displayOrder;
                                        }

                                        self::$sections[$param['LAYOUT_SECTION_CODE']]['pfWithoutTab'][$displayOrder] = $rowControl;
                                    }
                                }
                                
                            } else {
                                
                                if ($param['IS_SHOW'] == '1') {
                                    
                                    $displayOrder = self::getLayoutParamDisplayOrder($param['LAYOUT_DISPLAY_ORDER']);
                                    
                                    if (!$param['RECORD_TYPE']) {
                                        
                                        $this->view->gridHeaderClass .= self::fieldHeaderStyleLayout($param, 'bp-window-' . $this->view->methodId);
                                        $rowControl = Mdwebservice::renderLayoutSectionParam($this->view->methodId, $param, 'param['.$param['PARAM_REAL_PATH'].'][0][]', $fillParamData);

                                        if ($row['layoutTabName']) {
                                            self::$sections[$row['layoutSectionCode']][$row['layoutTabName']]['header'][$displayOrder] = $rowControl;
                                        } else {
                                            
                                            if (isset(self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder])) {
                                                $displayOrder = self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder] . '.1';
                                            } else {
                                                self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder] = $displayOrder;
                                            }

                                            self::$sections[$row['layoutSectionCode']]['pfWithoutTab'][$displayOrder] = $rowControl;
                                        }
                                        
                                    } else {
                                        
                                        $rowControl = Mdwebservice::{self::$renderLayoutSectionRowFnc}($this->view->methodId, $param, $fillParamData);

                                        if ($row['layoutTabName']) {
                                            self::$sections[$row['layoutSectionCode']][$row['layoutTabName']]['header'][$displayOrder] = $rowControl;
                                        } else {
                                            
                                            if (isset(self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder])) {
                                                $displayOrder = self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder] . '.1';
                                            } else {
                                                self::$layoutSectionOrder[$row['layoutSectionCode']][$displayOrder] = $displayOrder;
                                            }

                                            self::$sections[$row['layoutSectionCode']]['pfWithoutTab'][$displayOrder] = $rowControl;
                                        }
                                    }
                                    
                                } else {
                                    if (!$param['RECORD_TYPE']) {
                                        $this->view->hiddenParam .= self::renderParamControl($this->view->methodId, $param, 'param['.$param['PARAM_REAL_PATH'].'][0][]', '', $fillParamData);
                                    } else {
                                        $this->view->hiddenParam .= Mdwebservice::{self::$renderLayoutSectionRowFnc}($this->view->methodId, $param, $fillParamData);
                                    }
                                }
                            }
                        }
                        
                    } else {
                        
                        $isRowSection = false;
                        $rowHiddenParam = '';
                        
                        foreach ($row['data'] as $param) {
        
                            if ($param['IS_SHOW'] == '1' && $param['LAYOUT_SECTION_CODE']) {
                                
                                $displayOrder = self::getLayoutParamDisplayOrder($param['LAYOUT_DISPLAY_ORDER']);
                                
                                if (!$param['RECORD_TYPE']) {
                                
                                    $this->view->gridHeaderClass .= self::fieldHeaderStyleLayout($param, 'bp-window-' . $this->view->methodId);
                                    
                                    $rowControl = Mdwebservice::renderLayoutSectionParam($this->view->methodId, $param, 'param['.$param['PARAM_REAL_PATH'].'][0][]', $fillParamData);
                                    
                                    if ($param['LAYOUT_TAB_NAME']) {
                                        self::$sections[$param['LAYOUT_SECTION_CODE']][$param['LAYOUT_TAB_NAME']]['header'][$displayOrder] = $rowControl;
                                    } else {
                                        
                                        if (isset(self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder])) {
                                            $displayOrder = self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] . '.1';
                                        } else {
                                            self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] = $displayOrder;
                                        }

                                        self::$sections[$param['LAYOUT_SECTION_CODE']]['pfWithoutTab'][$displayOrder] = $rowControl;
                                    }
                                    
                                } else {
                                    
                                    $rowControl = Mdwebservice::{self::$renderLayoutSectionRowFnc}($this->view->methodId, $param, $fillParamData);
                                    
                                    if ($param['LAYOUT_TAB_NAME']) {
                                        self::$sections[$param['LAYOUT_SECTION_CODE']][$param['LAYOUT_TAB_NAME']]['header'][$displayOrder] = $rowControl;
                                    } else {
                                        
                                        if (isset(self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder])) {
                                            $displayOrder = self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] . '.1';
                                        } else {
                                            self::$layoutSectionOrder[$param['LAYOUT_SECTION_CODE']][$displayOrder] = $displayOrder;
                                        }

                                        self::$sections[$param['LAYOUT_SECTION_CODE']]['pfWithoutTab'][$displayOrder] = $rowControl;
                                    }
                                }
                                
                                $isRowSection = true;
                                
                            } else {
                                
                                if (!$param['RECORD_TYPE']) {
                                    $rowHiddenParam .= self::renderParamControl($this->view->methodId, $param, 'param['.$param['PARAM_REAL_PATH'].'][0][]', '', $fillParamData);
                                } else {
                                    $rowHiddenParam .= Mdwebservice::{self::$renderLayoutSectionRowFnc}($this->view->methodId, $param, $fillParamData);
                                }
                            }
                        }
                        
                        if (!$isRowSection) {
                            
                            $this->view->paramRow = $row;
                            $detail = $this->view->renderPrint('sub/detail/' . $detailDefaultViewName, self::$viewPath);
                            $this->view->hiddenDetail .= $detail;
                            
                        } else {
                            $this->view->hiddenParam .= $rowHiddenParam;
                        }
                    }
                }
            }
        }
        
        if (self::$sections) {
            
            $navbarFixedArr = array();
            
            foreach (self::$sections as $key => $controls) {
                
                if (isset($sectionPositions[$key]['form_bank_card'])) {
                    
                    $sectionWidget = (new Mdwidget())->generateBpSectionWidget($this->view->methodId, $key, 'form_bank_card', $sectionPositions[$key]['form_bank_card']);
                    
                    $layout = str_replace('bl-sectioncode'.$key.'-card', 'bl-sectioncode'.$key.'-card bl-widget-form_bank_card-'.$this->view->methodId.'-'.$key, $layout);
                    $layout = str_replace('<!--sectionCode'.$key.'-->', $sectionWidget . '<!--sectionCode'.$key.'-->', $layout);
                    
                    continue;
                }
                
                $sectionColumnCount = 1;
                
                if (isset($sectionsConfig[$key])) {
                    
                    $sectionRow = $sectionsConfig[$key];
                    
                    if (issetParam($sectionRow['widgetCode'])) {
                        $layout = str_replace('bl-sectioncode'.$key.'-card', 'bl-sectioncode'.$key.'-card bl-widget-' . $sectionRow['widgetCode'], $layout);
                        $this->view->gridHeaderClass .= (new Mdwidget())->generateBpSectionCss($this->view->methodId, $sectionRow['widgetCode']);
                    }
                    
                    if (isset($sectionRow['otherAttr'])) {
                        $this->view->gridHeaderClass .= self::generateLayoutSectionCss($this->view->methodId, $key, $sectionRow['otherAttr']);
                        
                        if (issetParam($sectionRow['otherAttr']['noPadding'])) {
                            $layout = str_replace('bl-sectioncode'.$key.'-card', 'bl-sectioncode'.$key.'-card bl-section-no-padding', $layout);
                        }
                    }
                    
                    if ($sectionRow['columnCount']) {
                        $sectionColumnCount = $sectionRow['columnCount'];
                    }
                    
                    if ($sectionRow['title'] != '') {
                        
                        $title = $this->lang->line($sectionRow['title']);
                        $noTitle = issetParam($sectionRow['otherAttr']['noTitle']);
                        $isNavbarFixed = issetParam($sectionRow['otherAttr']['navbarFixed']);
                        
                        if ($isNavbarFixed) {
                            
                            $navbarFixedId = issetParam($sectionRow['id']);
                            $navbarFixedArr[$key] = array('id' => $navbarFixedId, 'title' => $title);
                            
                            $layout = str_replace('data-bl-col="'.$key.'"', 'data-bl-col="'.$key.'" data-fixed-id="'.$navbarFixedId.'"', $layout);
                        }
                        
                        if ($noTitle != '1') {
                            $layout = str_replace('<!--sectionCode'.$key.'-title-->', self::renderLayoutSectionTitle($title), $layout);
                        } 
                    }
                    
                    if ($sectionRow['borderStyle'] != '') {
                        $layout = str_replace('bl-sectioncode'.$key.'-card', 'bl-sectioncode'.$key.'-card ' . $sectionRow['borderStyle'], $layout);
                    }
                    
                    if ($sectionRow['backgroundStyle'] != '') {
                        $layout = str_replace('bl-sectioncode'.$key.'-card', 'bl-sectioncode'.$key.'-card ' . $sectionRow['backgroundStyle'], $layout);
                    }
                    
                    if ($sectionRow['labelPosition'] != '') {
                        $layout = str_replace('bl-sectioncode'.$key.'-card', 'bl-sectioncode'.$key.'-card bl-labelposition-' . $sectionRow['labelPosition'], $layout);
                    }
                    
                    if (issetParam($sectionRow['width'])) {
                        $layout = str_replace('data-bl-col="'.$key.'"', 'data-bl-col="'.$key.'" style="width: '.$sectionRow['width'].'; max-width: '.$sectionRow['width'].';"', $layout);
                    }
                }
                
                if (isset($controls['pfWithoutTab']) && !isset($controls['pfWithoutTab']['header'])) {
                    
                    ksort($controls['pfWithoutTab']);
                    
                    if ($sectionColumnCount == 1) {
                        
                        $layout = str_replace('<!--sectionCode'.$key.'-->', implode('', $controls['pfWithoutTab']) . '<!--sectionCode'.$key.'-->', $layout);
                        
                    } else {
                        
                        $columnDivideControls = self::renderLayoutColumnControls($key, $sectionColumnCount, $controls['pfWithoutTab']);
                        
                        $layout = str_replace('<!--sectionCode'.$key.'-->', $columnDivideControls . '<!--sectionCode'.$key.'-->', $layout);
                    }
                }
                
                if (isset($controls['pfWithoutTab']['header'])) {
                    
                    ksort($controls['pfWithoutTab']['header']);
                    
                    if ($sectionColumnCount == 1) {
                        $layout = str_replace('<!--sectionCode'.$key.'-->', implode('', $controls['pfWithoutTab']['header']) . '<!--sectionCode'.$key.'-->', $layout);
                    } else {
                        
                        $columnDivideControls = self::renderLayoutColumnControls($key, $sectionColumnCount, $controls['pfWithoutTab']['header']);
                        
                        $layout = str_replace('<!--sectionCode'.$key.'-->', $columnDivideControls . '<!--sectionCode'.$key.'-->', $layout);
                    }
                }
                
                if (isset($controls['pfWithoutTab']['detail'])) {
                    $layout = str_replace('<!--sectionCode'.$key.'-->', implode('', $controls['pfWithoutTab']['detail']) . '<!--sectionCode'.$key.'-->', $layout);
                }
                
                unset($controls['pfWithoutTab']);
                
                if ($controls) {
                    
                    $t = 1;
                    $tabs = $tabItem = $tabPane = array();
                    
                    foreach ($controls as $tabName => $control) {
                        
                        $tabId = 'bp_section_tab_'.$this->view->uniqId.'_'.$key.'_'.$t;
                        
                        $tabItem[] = '<li><a href="#'.$tabId.'" data-toggle="tab" class="nav-link'.($t == 1 ? ' active' : '').'">'.Lang::line($tabName).'</a></li>';
                        
                        $tabPane[] = '<div class="tab-pane'.($t == 1 ? ' active' : '').'" id="'.$tabId.'">';
                        
                        if (isset($control['header'])) {
                            
                            if ($sectionColumnCount == 1) {
                                $tabPane[] = implode('', $control['header']);
                            } else {
                                $columnDivideControls = self::renderLayoutColumnControls($key, $sectionColumnCount, $control['header']);
                                $tabPane[] = $columnDivideControls;
                            }
                        }
                        
                        if (isset($control['detail'])) {
                            $tabPane[] = implode('', $control['detail']);
                        }
                        
                        $tabPane[] = '</div>';
                        
                        $t++;
                    }
                    
                    $tabs[] = '<div class="tabbable-line bp-tabs">';
                        $tabs[] = '<ul class="nav nav-tabs">';
                            $tabs[] = implode('', $tabItem);
                        $tabs[] = '</ul>';
                        $tabs[] = '<div class="tab-content">';
                            $tabs[] = implode('', $tabPane);
                        $tabs[] = '</div>';
                    $tabs[] = '</div>';
                    
                    $layout = str_replace('<!--sectionCode'.$key.'-->', implode('', $tabs) . '<!--sectionCode'.$key.'-->', $layout);
                }
            }
            
            $layout = str_replace('<!--columnWidthEnd--><!--columnWidthStart-->', '', $layout);
            $layout = str_replace('<!--columnWidthStart-->', '<div class="row">', $layout);
            $layout = str_replace('<!--columnWidthEnd-->', '</div>', $layout);
            
            if ($navbarFixedArr) {
                $layout = str_replace('<!--navbar-->', self::renderLayoutNavBar($navbarFixedArr, 'topFixed'), $layout);
            }
        }
        
        $this->view->layout = $layout;
        
        if (self::$fieldCssStyle) {
            $this->view->gridHeaderClass .= self::$fieldCssStyle;
        }
        
        $renderProcess = $this->view->renderPrint('sub/layout/index', self::$viewPath);   

        return $renderProcess;
    }
    
    public function renderLayoutNavBar($navbarFixedArr, $type) {
        
        $bar = array();
        
        if ($type == 'topFixed') {
            
            ksort($navbarFixedArr);
            
            $i = 1;
            $bar[] = '<div class="col-md-12">';
            $bar[] = '<ul class="nav nav-tabs nav-scroll">';
            
            foreach ($navbarFixedArr as $row) {
                
                $bar[] = '<li class="col nav-item'.($i == 1 ? ' active' : '').'">
                    <a href="javascript:;" class="nav-link" data-go-fixed-id="'.$row['id'].'">
                        <div class="order-number">'.$i.'</div>
                        <div><span>'.$row['title'].'</span></div>
                    </a>
                </li>';
                
                $i++;
            }

            $bar[] = '</ul>';
            $bar[] = '</div>';
            
            $bar[] = '<div class="col-md-12" style="height: 50px;"></div>';
        }
        
        return implode('', $bar);
    }
    
    public function getLayoutParamDisplayOrder($optDisplayOrder) {
        
        if ($optDisplayOrder != '') {
            $displayOrder = $optDisplayOrder;
        } else {
            $displayOrder = 9999;
            if (!isset(self::$layoutDisplayOrder[$displayOrder])) {
                self::$layoutDisplayOrder[$displayOrder] = $displayOrder;
            } else {
                self::$layoutDisplayOrder[$displayOrder] = self::$layoutDisplayOrder[$displayOrder] + 1;
                $displayOrder = self::$layoutDisplayOrder[$displayOrder];
            }
        }
        
        return $displayOrder;
    }
    
    public function renderLayoutColumnControls($sectionCode, $columnCount, $controls) {
        
        $headerCount = count($controls); $c = 0;
        $colDivide = round($headerCount / $columnCount); $checkDivide = 1;
                
        $render[] = '<div class="row">';

        foreach ($controls as $control) {

            if ($checkDivide == 1) {
                $render[] = '<div class="col">';
            }

            $render[] = $control;

            if ($checkDivide == $colDivide || $headerCount == ($c + 1)) {
                $render[] = '</div>';
                $checkDivide = 1;
            } else {
                $checkDivide ++;
            }
            
            $c++;
        }

        $render[] = '</div>';
    
        return implode('', $render);
    }
    
    public function renderLayoutSectionTitle($title) {
        
        $header = '<div class="card-header"><h6 class="card-title">'.$title.'</h6></div>';
        
        return $header;
    }
    
    public function renderLayoutSectionParam($methodId, $param, $paramName, $fillParamData) {
        return self::{self::$renderLayoutSectionParamFnc}($methodId, $param, $paramName, $fillParamData);
    }
    
    public function renderLayoutSectionParamAddEdit($methodId, $param, $paramName, $fillParamData) {
        
        $controlStyle = $controlClass = '';
        $labelAttr = array(
            'class'           => 'col-form-label col-md-3 pr-0 line-height-normal', 
            'data-label-path' => $param['PARAM_REAL_PATH']
        );
        
        if (!issetParam($param['LAYOUT_OTHER_ATTR']['noLabel'])) {
            
            if ($param['IS_REQUIRED'] == '1') {
                $labelAttr['required'] = 'required';
            }

            $labelAttr['for'] = $paramName;
            $labelAttr['text'] = Lang::line($param['META_DATA_NAME']);
            $labelAttr['style'] = '';
            
            if ($tooltip = issetParam($param['JSON_CONFIG']['tooltip'])) {
                $labelAttr['no_colon'] = 1;
                $labelAttr['text'] .= '<span class="label-colon">:</span> <i class="fas fa-info-circle text-grey-700" data-qtip-title="'.Lang::line($tooltip).'" data-qtip-pos="top"></i>';
            }
            
            if ($labelAlign = issetParam($param['LAYOUT_OTHER_ATTR']['labelAlign'])) {
                $labelAttr['class'] = $labelAttr['class'] . ' text-' . $labelAlign;
            }
            
            if ($labelMarginBottom = issetParam($param['LAYOUT_OTHER_ATTR']['labelMarginBottom'])) {
                $labelAttr['style'] = $labelAttr['style'] . 'margin-bottom:' . $labelMarginBottom . ';';
            }
            
            if ($labelFontSize = issetParam($param['LAYOUT_OTHER_ATTR']['labelFontSize'])) {
                $labelAttr['style'] = $labelAttr['style'] . 'font-size:' . $labelFontSize . ';';
            }
        } 
        
        if ($controlWidth = issetParam($param['LAYOUT_OTHER_ATTR']['controlWidth'])) {
            $controlStyle = 'width: ' . $controlWidth . ';';
        }
        
        if ($controlAlign = issetParam($param['LAYOUT_OTHER_ATTR']['controlAlign'])) {
            
            if ($controlAlign == 'center') {
                $controlStyle .= 'margin-left: auto; margin-right: auto;';
            } elseif ($controlAlign == 'left') {
                $controlStyle .= 'margin-right: auto;';
            } elseif ($controlAlign == 'right') {
                $controlStyle .= 'margin-left: auto;';
            }
        }
        
        if ($rowBreak = issetParam($param['LAYOUT_OTHER_ATTR']['rowBreak'])) {
            $controlClass = 'bp-control-row-break';
        }
        
        if ($showMaxRowsLength = issetParam($param['LAYOUT_OTHER_ATTR']['showMaxRowsLength'])) {
            $param['SHOW_MAX_ROWS_LENGTH'] = $showMaxRowsLength;
        }
        
        if ($controlHeight = issetParam($param['LAYOUT_OTHER_ATTR']['controlHeight'])) {
            
            $this->view->gridHeaderClass .= '#bp-window-' . $methodId .' [data-path="'.$param['PARAM_REAL_PATH'].'"] { height: ' . $controlHeight . '!important; }';
        }
        
        if ($controlFontSize = issetParam($param['LAYOUT_OTHER_ATTR']['controlFontSize'])) {
            
            $this->view->gridHeaderClass .= '#bp-window-' . $methodId .' [data-path="'.$param['PARAM_REAL_PATH'].'"] { font-size: ' . $controlFontSize . '!important; }';
        }
        
        if ($controlFontWeight = issetParam($param['LAYOUT_OTHER_ATTR']['controlFontWeight'])) {
            
            $this->view->gridHeaderClass .= '#bp-window-' . $methodId .' [data-path="'.$param['PARAM_REAL_PATH'].'"] { font-weight: ' . $controlFontWeight . '!important; }';
        }
        
        if ($placeholder = issetParam($param['LAYOUT_OTHER_ATTR']['placeholder'])) {
            $param['PLACEHOLDER_NAME'] = Lang::line($placeholder);
        }
        
        $control = self::renderParamControl($methodId, $param, $paramName, '', $fillParamData);
        
        if ($widgetCode = issetParam($param['LAYOUT_WIDGET_CODE'])) {
            
            $control = (new Mdwidget())->runField(
                array(
                    'methodId'    => $methodId, 
                    'methodRow'   => $this->view->methodRow, 
                    'widgetCode'  => $widgetCode, 
                    'control'     => $control, 
                    'labelName'   => $param['META_DATA_NAME'],
                    'placeholder' => $param['PLACEHOLDER_NAME'], 
                    'paramData'   => $fillParamData
                )
            );
        }
        
        $formGroup = '<div class="form-group row align-items-center" data-cell-path="'.$param['PARAM_REAL_PATH'].'">
            '.Form::label($labelAttr).'
            <div class="col-md-9 col-form-control bp-header-param">
                <div data-section-path="'.$param['PARAM_REAL_PATH'].'" class="'.$controlClass.'" style="'.$controlStyle.'">
                    '.$control.'
                </div>
            </div>
        </div>';
        
        if ($columnWidth = issetParam($param['LAYOUT_OTHER_ATTR']['columnWidth'])) {
            
            $addonTag = '';
            
            if ($lineBreak = issetParam($param['LAYOUT_OTHER_ATTR']['lineBreak'])) {
                $addonTag = '<div class="w-100"></div>';
            }
            
            $formGroup = '<!--columnWidthStart--><div class="col-md-12" style="-ms-flex: 0 0 '.$columnWidth.';flex: 0 0 '.$columnWidth.';max-width: '.$columnWidth.';">'.$formGroup.'</div>'.$addonTag.'<!--columnWidthEnd-->';
        }
        
        return $formGroup;
    }
    
    public function renderLayoutSectionParamView($methodId, $param, $paramName, $fillParamData) {
        
        $controlStyle = $controlClass = '';
        $labelAttr = array(
            'class'           => 'col-form-label col-md-3 pt2 pr-0 line-height-normal', 
            'data-label-path' => $param['PARAM_REAL_PATH']
        );
        
        if (!issetParam($param['LAYOUT_OTHER_ATTR']['noLabel'])) {

            $labelAttr['for'] = $paramName;
            $labelAttr['text'] = Lang::line($param['META_DATA_NAME']);
            $labelAttr['style'] = '';
            
            if ($tooltip = issetParam($param['JSON_CONFIG']['tooltip'])) {
                $labelAttr['no_colon'] = 1;
                $labelAttr['text'] .= '<span class="label-colon">:</span> <i class="fas fa-info-circle text-grey-700" data-qtip-title="'.Lang::line($tooltip).'" data-qtip-pos="top"></i>';
            }
            
            if ($labelAlign = issetParam($param['LAYOUT_OTHER_ATTR']['labelAlign'])) {
                $labelAttr['class'] = $labelAttr['class'] . ' text-' . $labelAlign;
            }
            
            if ($labelMarginBottom = issetParam($param['LAYOUT_OTHER_ATTR']['labelMarginBottom'])) {
                $labelAttr['style'] = $labelAttr['style'] . 'margin-bottom:' . $labelMarginBottom . ';';
            }
            
            if ($labelFontSize = issetParam($param['LAYOUT_OTHER_ATTR']['labelFontSize'])) {
                $labelAttr['style'] = $labelAttr['style'] . 'font-size:' . $labelFontSize . ';';
            }
        }  
        
        if ($controlWidth = issetParam($param['LAYOUT_OTHER_ATTR']['controlWidth'])) {
            $controlStyle = 'width: ' . $controlWidth . ';';
        }
        
        if ($controlAlign = issetParam($param['LAYOUT_OTHER_ATTR']['controlAlign'])) {
            
            if ($controlAlign == 'center') {
                $controlStyle .= 'margin-left: auto; margin-right: auto;';
            } elseif ($controlAlign == 'left') {
                $controlStyle .= 'margin-right: auto;';
            } elseif ($controlAlign == 'right') {
                $controlStyle .= 'margin-left: auto;';
            }
        }
        
        if ($rowBreak = issetParam($param['LAYOUT_OTHER_ATTR']['rowBreak'])) {
            $controlClass = 'bp-control-row-break';
        }
        
        if ($controlHeight = issetParam($param['LAYOUT_OTHER_ATTR']['controlHeight'])) {
            
            $this->view->gridHeaderClass .= '#bp-window-' . $methodId .' [data-path="'.$param['PARAM_REAL_PATH'].'"] { height: ' . $controlHeight . '!important; }';
        }
        
        if ($controlFontSize = issetParam($param['LAYOUT_OTHER_ATTR']['controlFontSize'])) {
            
            $this->view->gridHeaderClass .= '#bp-window-' . $methodId .' [data-path="'.$param['PARAM_REAL_PATH'].'"] { font-size: ' . $controlFontSize . '!important; }';
        }
        
        if ($controlFontWeight = issetParam($param['LAYOUT_OTHER_ATTR']['controlFontWeight'])) {
            
            $this->view->gridHeaderClass .= '#bp-window-' . $methodId .' [data-path="'.$param['PARAM_REAL_PATH'].'"] { font-weight: ' . $controlFontWeight . '!important; }';
        }
        
        $control = self::renderViewParamControl($methodId, $param, $paramName, '', $fillParamData);
        
        if ($widgetCode = issetParam($param['LAYOUT_WIDGET_CODE'])) {
            
            $control = (new Mdwidget())->runField(
                array(
                    'methodId'    => $methodId, 
                    'methodRow'   => $this->view->methodRow, 
                    'widgetCode'  => $widgetCode, 
                    'control'     => $control, 
                    'labelName'   => $param['META_DATA_NAME'],
                    'placeholder' => $param['PLACEHOLDER_NAME'], 
                    'paramData'   => $fillParamData
                )
            );
        }
        
        $formGroup = '<div class="form-group row" data-cell-path="'.$param['PARAM_REAL_PATH'].'">
            '.Form::label($labelAttr).'
            <div class="col-md-9 col-form-control bp-header-param">
                <div data-section-path="'.$param['PARAM_REAL_PATH'].'" class="'.$controlClass.'" style="'.$controlStyle.'">
                    '.$control.'
                </div>
            </div>
        </div>';
        
        if ($columnWidth = issetParam($param['LAYOUT_OTHER_ATTR']['columnWidth'])) {
            
            $addonTag = '';
            
            if ($lineBreak = issetParam($param['LAYOUT_OTHER_ATTR']['lineBreak'])) {
                $addonTag = '<div class="w-100"></div>';
            }
            
            $formGroup = '<!--columnWidthStart--><div class="col-md-12" style="-ms-flex: 0 0 '.$columnWidth.';flex: 0 0 '.$columnWidth.';max-width: '.$columnWidth.';">'.$formGroup.'</div>'.$addonTag.'<!--columnWidthEnd-->';
        }
        
        return $formGroup;
    }
    
    public function renderLayoutSectionRow($methodId, $param, $fillParamData) {
        
        $labelAttr = array(
            'text'            => Lang::line($param['META_DATA_NAME']),
            'class'           => 'col-form-label col-md-3 text-right pr-0 line-height-normal', 
            'data-label-path' => $param['PARAM_REAL_PATH']
        );
        
        if ($param['IS_REQUIRED'] == '1') {
            $labelAttr['required'] = 'required';
        }
        
        $arg = array(
            'isFirstRow' => $param['IS_FIRST_ROW']
        );
        
        $control = (new Mdwebservice())->buildTreeParam($this->view->uniqId, $methodId, $param['META_DATA_NAME'], $param['PARAM_REAL_PATH'], $param['RECORD_TYPE'], $param['ID'], $fillParamData, '', $arg, 1, $param['COLUMN_COUNT']);
                                                
        return '<div class="form-group row align-items-center" data-cell-path="'.$param['PARAM_REAL_PATH'].'">
            '.Form::label($labelAttr).'
            <div class="col-md-9 col-form-control bp-header-param">
                <div data-section-path="'.$param['PARAM_REAL_PATH'].'" class="bp-layout-rowcontrol">
                    <a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId. ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" title="Дэлгэрэнгүй">...</a>
                    <div class="param-tree-container-tab param-tree-container hide">
                        '.$control.'
                    </div>
                </div>
            </div>
        </div>';
    }
    
    public function renderLayoutSectionRowView($methodId, $param, $fillParamData) {
        
        $labelAttr = array(
            'text'            => Lang::line($param['META_DATA_NAME']),
            'class'           => 'col-form-label col-md-3 text-right pr-0 line-height-normal', 
            'data-label-path' => $param['PARAM_REAL_PATH']
        );
        
        $control = (new Mdwebservice())->buildTreeParamView($methodId, $param['META_DATA_NAME'], $param['PARAM_REAL_PATH'], $param['RECORD_TYPE'], $param['ID'], $fillParamData, '', array(), 1, $param['COLUMN_COUNT']);
                                                
        return '<div class="form-group row align-items-center" data-cell-path="'.$param['PARAM_REAL_PATH'].'">
            '.Form::label($labelAttr).'
            <div class="col-md-9 col-form-control bp-header-param">
                <div data-section-path="'.$param['PARAM_REAL_PATH'].'" class="bp-layout-rowcontrol">
                    <a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId. ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" title="Дэлгэрэнгүй">...</a>
                    <div class="param-tree-container-tab param-tree-container hide">
                        '.$control.'
                    </div>
                </div>
            </div>
        </div>';
    }
    
    public function tagupdate() {
        try {
            if (Input::postCheck('tagId') && Input::isEmpty('tagId') === false) {
                $tagIds = Input::post('tagId');
                foreach ($tagIds as $tagId) {
                    $dataTagMap = array(
                        'ID' => getUID(),
                        'SRC_TABLE_NAME' => 'ECM_CONTENT',
                        'SRC_TAG_ID' => Input::post('attachId'),
                        'TRG_TABLE_NAME' => 'META_TAG',
                        'TRG_TAG_ID' => $tagId,
                    );
                    $this->db->AutoExecute('TAG_SEMANTIC_MAP', $dataTagMap);
                }
            }
        } catch (Exception $ex) {
            echo json_encode($ex);
        }
    }
    
    public function getWidgetAllConfig($methodId, $bpTemplateId, $widgetConfig, $expressionTags, $editNtrMode) {
        
        $cache = phpFastCache();
        $cacheExp = $cache->get('ntTaxonamyConfig_' . $bpTemplateId . '_' . $methodId);
        $this->view->taxonamyScriptsEvent = $cache->get('ntTaxonamyScriptsEvent_' . $bpTemplateId . '_' . $methodId);
        $this->view->taxonamyScriptsEventDtl = $cache->get('ntTaxonamyScriptsEventDtl_' . $bpTemplateId . '_' . $methodId);
        $this->view->taxonamyScriptsEventKeyDtl = $cache->get('ntTaxonamyScriptsEventKeyDtl_' . $bpTemplateId . '_' . $methodId);
        
        if ($cacheExp == null) {
            $this->view->taxonamyScriptsEvent = $this->view->taxonamyScriptsEventDtl = $this->view->taxonamyScriptsEventKeyDtl = '';
            
            if ($widgetConfig) {
                
                foreach ($widgetConfig as $wk => $wv) {
                    if (empty($wk)) {
                        foreach ($widgetConfig[$wk]['rows'] as $cval) {
                            $getComboJS = '';

                            if (strpos($cval['PATH_AS'], '@') === false) {
                                $cval['PATH'] = str_replace('&', '\\\&', $cval['PATH_AS']);
                            }

                            self::getTaxonamyTagExpressionProcces($cval['EXPRESSION'], $cval['PATH'], $expressionTags, $cval['EXPRESSION_DTL'], $cval['EXPRESSION_DTL_KEY'], $bpTemplateId, $cval);

                            $taxonamyScriptsEvent = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION'], $methodId, $cval['PATH'], false, false, $cval, $editNtrMode);

                            if (!empty($cval['EXPRESSION_DTL'])) {
                                $getComboJS = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL'], $methodId, $cval['PATH'], true, true, $cval, $editNtrMode);
                            }    

                            $taxonamyScriptsEvent = self::replaceTaxonamyTagExpressionProcces($taxonamyScriptsEvent, $getComboJS, $methodId, $cval);           
                            $this->view->taxonamyScriptsEvent .= $taxonamyScriptsEvent;

                            if (!empty($cval['EXPRESSION_DTL'])) {
                                $taxonamyScriptsEventDtl = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL'], $methodId, $cval['PATH'], true, false, $cval, $editNtrMode);
                                $taxonamyScriptsEventDtl = self::replaceTaxonamyTagExpressionProcces($taxonamyScriptsEventDtl, '', $methodId);
                                $this->view->taxonamyScriptsEventDtl .= $taxonamyScriptsEventDtl;
                            }

                            if (!empty($cval['EXPRESSION_DTL_KEY'])) {
                                $taxonamyScriptsEventKeyDtl = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL_KEY'], $methodId, $cval['PATH'], true, false, $cval, $editNtrMode);
                                $taxonamyScriptsEventKeyDtl = self::replaceTaxonamyTagExpressionProcces($taxonamyScriptsEventKeyDtl, '', $methodId);
                                $this->view->taxonamyScriptsEventKeyDtl .= $taxonamyScriptsEventKeyDtl;
                            }
                        }
                    } else {
                        foreach($widgetConfig[$wk]['rows'] as $cval) {
                            if (strpos($cval['PATH_AS'], '@') !== false) {

                                $getComboJS = '';

                                self::getTaxonamyTagExpressionProcces($cval['EXPRESSION'], $cval['PATH'], $expressionTags, $cval['EXPRESSION_DTL'], $cval['EXPRESSION_DTL_KEY'], $bpTemplateId, $cval);

                                $taxonamyScriptsEvent = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION'], $methodId, $cval['PATH'], false, false, $cval, $editNtrMode);

                                if (!empty($cval['EXPRESSION_DTL'])) {
                                    $getComboJS = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL'], $this->view->methodId, $cval['PATH'], true, true, $cval, $editNtrMode);
                                }

                                $taxonamyScriptsEvent = self::replaceTaxonamyTagExpressionProcces($taxonamyScriptsEvent, $getComboJS, $methodId);

                                $this->view->taxonamyScriptsEvent .= $taxonamyScriptsEvent;

                                if (!empty($cval['EXPRESSION_DTL'])) {
                                    $taxonamyScriptsEventDtl = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL'], $methodId, $cval['PATH'], true, false, $cval, $editNtrMode);
                                    $getComboJSDtlKey = '';

                                    if (!empty($cval['EXPRESSION_DTL_KEY'])) {
                                        $getComboJSDtlKey = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL_KEY'], $methodId, $cval['PATH'], true, true, $cval, $editNtrMode);
                                    }

                                    $taxonamyScriptsEventDtl = self::replaceTaxonamyTagExpressionProcces($taxonamyScriptsEventDtl, $getComboJSDtlKey, $methodId);
                                    $this->view->taxonamyScriptsEventDtl .= $taxonamyScriptsEventDtl;
                                }

                                if (!empty($cval['EXPRESSION_DTL_KEY'])) {

                                    $taxonamyScriptsEventKeyDtl = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL_KEY'], $methodId, $cval['PATH'], true, false, $cval, $editNtrMode);

                                    if (!empty($cval['EXPRESSION_DTL'])) {
                                        $getComboJS = (new Mdexpression())->fullExpressionConvertEventTaxonamy($cval['EXPRESSION_DTL_KEY'], $methodId, $cval['PATH'], true, true, $cval, $editNtrMode);
                                    }

                                    $taxonamyScriptsEventKeyDtl = self::replaceTaxonamyKeyTagExpressionProcces($taxonamyScriptsEventKeyDtl, $getComboJS, $methodId);

                                    $this->view->taxonamyScriptsEventKeyDtl .= $taxonamyScriptsEventKeyDtl;
                                }
                            }
                        }
                    }
                }
            }
            
            $cache->set('ntTaxonamyConfig_' . $bpTemplateId . '_' . $methodId, $expressionTags, Mdwebservice::$expressionCacheTime);
            $cache->set('ntTaxonamyScriptsEvent_' . $bpTemplateId . '_' . $methodId, $this->view->taxonamyScriptsEvent, Mdwebservice::$expressionCacheTime);
            $cache->set('ntTaxonamyScriptsEventDtl_' . $bpTemplateId . '_' . $methodId, $this->view->taxonamyScriptsEventDtl, Mdwebservice::$expressionCacheTime);
            $cache->set('ntTaxonamyScriptsEventKeyDtl_' . $bpTemplateId . '_' . $methodId, $this->view->taxonamyScriptsEventKeyDtl, Mdwebservice::$expressionCacheTime);

            $cacheExp = $expressionTags;
        }
        
        return $cacheExp;
    }
    
    public function getTemplateWidgetContent($methodId, $bpTemplateId, $htmlTemplate, $showCopyBtn = '0') {
        $cache = phpFastCache();
        $cacheContent = null;//$cache->get('ntTemplateTaxonamyContent_' . $bpTemplateId . '_' . $methodId);
        
        if ($cacheContent == null) {
            
            $htmlTemplate = html_entity_decode(file_get_contents($htmlTemplate), ENT_QUOTES, 'UTF-8');
            $content = html_entity_decode(self::replaceTaxonamyProcces($htmlTemplate, $methodId, $showCopyBtn), ENT_QUOTES, 'UTF-8');
            
            $cache->set('ntTemplateTaxonamyContent_' . $bpTemplateId . '_' . $methodId, $content, Mdwebservice::$expressionCacheTime);
            
            $cacheContent = $content;
        }
        
        return $cacheContent;
    }   
    
    public function bpWebcamUpload($base64Photo = '') {
        
        if (!isset($base64Photo) || empty($base64Photo)) {
            return '';
        }

        $img = str_replace(' ', '+', $base64Photo);
        $data = base64_decode($img);
        $photoName = 'file_webcam_' . getUID() . '.png';

        $photo_original = Mdwebservice::bpUploadCustomPath('/process/');

        $origPhoto = file_put_contents($photo_original.$photoName, $data);

        if ($origPhoto) {
            return $photo_original . $photoName;
        } 
        return '';
    }    
    
    public function fillParamByJson($json) {
        
        if (Input::post('isFillArrayPostParam') == '1') {
            $fillParamData = $json;
        } else {
            $fillJsonParam = json_decode($json, true);
            $fillParamData = Arr::changeKeyLower($fillJsonParam);
        }
        
        return $fillParamData;
    }
    
    public function loadTabComboData() {
        $metas = json_decode(urldecode(Input::post('metas')), true);

        if (Input::post('type') === 'card') {
            echo $this->renderCardTabControl();
        } else {
            echo $this->renderComboTabControl($metas['META_DATA_ID'], $metas['PARAM'], "param[".$metas['META_DATA_CODE']."]", $metas['META_DATA_CODE']);
        }
        exit;
    }
    
    public function renderViewDepthLevelAddDtlRow($bpMetaDataId, $rowData, $paramName, $columnCount, $rowIndex, $funcArg = array(), $fillParamData = array()) {
        $this->load->model('mdwebservice', 'middleware/models/');

        $tableCell = '';
        if (empty($rowData))
            return $tableCell;

        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $this->columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $this->columnCount);
        $w = count($rows);
        
        while ($ww < $w) {
            $columns = $rows[$ww];

            $tableCell .= '<tr>';
            $xx = count($columns);
            $xxx = 0;
            $hrClass = '';
            while ($xxx < $xx) {

                if ($columns[$xxx]['IS_SHOW'] !== '1') {
                    $hideClass = ' hide';
                } else
                    $hideClass = '';

                $tableCell .= '<td class="text-right middle float-left' . $hideClass . '" data-cell-path="' . $paramName . "." . $columns[$xxx]['META_DATA_CODE'] . '" style="width: 18%">';
                $labelAttr = array(
                    'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                    'for' => "param[" . $columns[$xxx]['META_DATA_CODE'] . "]",
                    'data-label-path' => $paramName . "." . $columns[$xxx]['META_DATA_CODE']
                );
                if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                }
                $tableCell .= Form::label($labelAttr);
                $tableCell .= '</td>';
                $tableCell .= '<td data-cell-path="' . $paramName . "." . $columns[$xxx]['META_DATA_CODE'] . '" style="width: 32%" class="middle float-left' . $hideClass . '">';
                $control = Mdwebservice::renderViewParamControl($bpMetaDataId, $columns[$xxx], "param[" . $paramName . "." . $columns[$xxx]['META_DATA_CODE'] . "][" . $rowIndex . "][]", $paramName . "." . $columns[$xxx]['META_DATA_CODE'], $fillParamData, 'removeSelect2');
                $tableCell .= $control;
                $tableCell .= '</td>';

                if(isset($funcArg['htmlcontent'])) {
                    $funcArg['htmlcontent'] = str_ireplace('#'.$paramName . "." . $columns[$xxx]['META_DATA_CODE'].'#', $control, $funcArg['htmlcontent']);
                }
                
                unset($rowData[$resetArrIndex++]);
                
                if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                    $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                    $_seperator = true;
                    $xxx = $xx;
                } else
                    $xxx++;
            }
            $tableCell .= '</tr>';

            if ($_seperator) {
                $tableCell .= "<tr>";
                $tableCell .= '<td colspan="' . ($this->columnCount * 2) . '">';
                $tableCell .= '<hr class="custom' . " " . $hrClass . '">';
                $tableCell .= "</td>";
                $tableCell .= "</tr>";
            }

            if ($_seperator) {
                $rows = array_chunk($rowData, $this->columnCount);
                $_seperator = false;
                $ww = 0;
                $w = count($rows);
                continue;
            }
            $ww++;
        }

        if (isset($funcArg['htmlcontent'])) {
            return $funcArg['htmlcontent'];
        }
        
        return $tableCell;
    }    
    
    public function processDtlViewRender($methodId, $param, $htmlContent, $fillParamData) {
        
        $paramPath = $param['paramPath'];
        $lowerPath = strtolower($paramPath);
        
        $DOMContent = phpQuery::newDocumentHTML($htmlContent);
            
        $tableHtml = $DOMContent['table#'.$paramPath.':eq(0)'];
        $tableBody = $tableHtml['tbody']->html();
            
        if (isset($fillParamData[$lowerPath])) {
            
            preg_match_all('/#([A-Za-z0-9_.-]+)#/i', $tableBody, $getColumns);
            
            if (isset($getColumns[0]) && $getColumns[0]) {
                
                $tableRows = '';
                
                $rows = $fillParamData[$lowerPath];
                $n = 1;
                
                foreach ($rows as $row) {
                    
                    $tableBodyRow = $tableBody;
                    
                    foreach ($param['data'] as $ind => $val) {
                        
                        $paramRealPath = $val['PARAM_REAL_PATH'];
                        
                        if (strpos($tableBodyRow, '#'.$paramRealPath.'#') !== false) {
                            
                            $cellVal = Mdwebservice::renderViewParamControl($methodId, $val, $paramRealPath, $paramRealPath, $row);
                            $tableBodyRow = str_replace('#'.$paramRealPath.'#', $cellVal, $tableBodyRow);
                        }
                    }
                    
                    $tableBodyRow = str_replace('#rownum#', $n, $tableBodyRow);
                    
                    $tableRows .= $tableBodyRow;
                    
                    $n++;
                }
                
                $DOMContent['table#'.$paramPath.':eq(0) > tbody:eq(0)']->html($tableRows);
                
                $htmlContent = $DOMContent->html();
            }
            
        } else {
            
            $tableBody = preg_replace('/\#([A-Za-z0-9_.-]+)\#/s', '', $tableBody);
            
            $DOMContent['table#'.$paramPath.':eq(0) > tbody:eq(0)']->html($tableBody);
            $htmlContent = $DOMContent->html();
        }
        
        return $htmlContent;
    }

    public function renderIconReloadControl($dvid) {
        $lookupMetaDataId = $dvid;
        $processMetaDataId = Input::numeric('processMetaDataId');
        $formControl = $hiddenformControl = '';

        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );
        $lookUpParam['criteria']['filterStartDate'] = array(
            array(
                'operator' => '=',
                'operand' =>  Ue::sessionFiscalPeriodStartDate()
            )                     
        );
        $lookUpParam['criteria']['filterEndDate'] = array(
            array(
                'operator' => '=',
                'operand' =>  Ue::sessionFiscalPeriodEndDate()
            )                     
        );        
        
        $this->load->model('mddatamodel', 'middleware/models/');
        $getCodeNameFieldName = $this->model->getCodeNameFieldNameModel($lookupMetaDataId);
        $idColumnName = $getCodeNameFieldName['id'];

        $lookupSuggestedValues = (new Mddatamodel())->dvFilterLookupSuggestedValues($processMetaDataId, array('LOOKUP_META_DATA_ID' => $lookupMetaDataId));

        if ($lookupSuggestedValues) {
            $lookUpParam['criteria'][$idColumnName][] = array(
                'operator' => 'IN',
                'operand' => Arr::implode_key(',', $lookupSuggestedValues, 'VALUE_ID', true)
            );
        }

        $result = $this->ws->runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);
        $dataRow = null;

        if (isset($result['result']) && count($result['result']) > 0) {
            
            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRow = $result['result'];
        }

        if ($dataRow) {

            $hiddenformControl .= '<div class="radio-list radio-list-hidden" style="display:none;">';

            $metaValueIdColumnName = $getCodeNameFieldName['id'];
            $metaValueNameColumnName = $getCodeNameFieldName['name'];
            $dataRowCount = count($dataRow);
            $dataRowFirst = $dataRow[0];
            $isCount = array_key_exists('count', $dataRowFirst);

            for ($in = 0; $in < $dataRowCount; $in++) {
                
                $iconName = $count = null;
                
                if ($isCount) {
                    $count = '<span class="m-menu__link-badge">
                        <span class="badge badge-pill" title="' . $dataRow[$in]['count'] . '">' . $dataRow[$in]['count'] . '</span>
                    </span>';
                }
                
                if (isset($dataRow[$in]['icon']) && file_exists($dataRow[$in]['icon'])) {
                    $icon = $dataRow[$in]['icon'];
                } elseif (isset($dataRow[$in]['iconname']) && $dataRow[$in]['iconname']) {
                    $iconName = $dataRow[$in]['iconname'];
                } else {
                    $icon = 'assets/core/global/img/appmenu.png';
                }

                if ($iconName) {
                    if (strpos($iconName, '<i class="') !== false) {
                        $iconImg = $iconName;
                    } else {
                        $iconImg = '<i class="'.$iconName.' mr-1"></i>';
                    }
                } else {
                    $iconImg = '<img src="'.$icon.'" onerror="onBankImgError(this);">';
                }

                if ($in < 10) {
                    $formControl .= '<li class="" data-id="'. $dataRow[$in][$metaValueIdColumnName].'" title="'. $dataRow[$in][$metaValueNameColumnName] .'">
                                        <div class="item-icon-selection">';

                    $formControl .= '<div>'.$iconImg.'</div>
                                            <p>'. $dataRow[$in][$metaValueNameColumnName] .'</p>
                                            '.$count.'
                                        </div>
                                    </li>';
                } else {
                    
                    $hiddenformControl .= '<li class="" data-id="'. $dataRow[$in][$metaValueIdColumnName].'" title="'. $dataRow[$in][$metaValueNameColumnName] .'">
                                        <div class="item-icon-selection">';

                    $hiddenformControl .= '<div>' . $iconImg . '</div>
                                            <p>'. $dataRow[$in][$metaValueNameColumnName] .'</p>
                                            '.$count.'
                                        </div>
                                    </li>';
                }                                     
            }
            
            $hiddenformControl .= '</div>';
        }

        echo $formControl . $hiddenformControl; exit;
    }    

    public function renderComboDataView($lookupMetaDataId, $returnType = '') {
        $lookUpParam = array(
            'systemMetaGroupId' => $lookupMetaDataId,
            'showQuery' => 0, 
            'ignorePermission' => 1 
        );

        $result = $this->ws->runSerializeResponse(self::$gfServiceAddress, Mddatamodel::$getDataViewCommand, $lookUpParam);

        if (isset($result['result']) && count($result['result']) > 0) {
            
            unset($result['result']['aggregatecolumns']);
            unset($result['result']['paging']); 

            $dataRow = $result['result'];
        }

        if ($dataRow) {

            $this->load->model('mddatamodel', 'middleware/models/');

            $getCodeNameFieldName = $this->model->getCodeNameFieldNameModel($lookupMetaDataId);

            $metaValueIdColumnName = $getCodeNameFieldName['id'];
            $metaValueNameColumnName = $getCodeNameFieldName['name'];
            $comboData = array();

            for ($in = 0; $in < count($dataRow); $in++) {        
                array_push($comboData, array('META_VALUE_ID' => $dataRow[$in][$metaValueIdColumnName], 'META_VALUE_NAME' => $dataRow[$in][$metaValueNameColumnName]));
            }
        }
        if ($returnType) {
            return $comboData;
        } else {
            echo !empty($comboData) ? json_encode($comboData) : json_encode(array('emptyCombo' => 'OK')); exit;
        }
    }    

    public function saveComboDataView() {        
        $this->load->model('mdmeta', 'middleware/models/');
        $getProcessCode = $this->model->getMetaDataCodeByIdModel(Input::post('processId'));

        $param = Input::post('selectedRow');
        $data = $this->ws->runResponse(self::$gfServiceAddress, $getProcessCode, $param);

        if ($data['status'] == 'success') {
            $result = array('status' => 'success', 'message' => 'Success');
        } else {
            $result = array('status' => 'error', 'message' => $this->ws->getResponseMessage($data));
        }

        jsonResponse($result);
    }
    
    public function renderFirstLevelAddEditDtlRowCardView($methodId, $rowData, $parentMetaCode, $columnCount, $fillParamData = '', $uniqId = '', $gridBodyRowAfter = '', $rowFullData = array()) {
        $gridBodyRow = '<div class="col-md-4">
                            <div class="card">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-center">
                                        <div class="mr-2">
                                            <img src="assets/custom/img/user.png" class="rounded-circle" width="44" height="44">
                                        </div>
                                        <div class="d-flex flex-column">
                                            <a href="javascript:void(0);" class="media-title font-weight-bold mb-0 line-height-normal word-break-all">БАТБАЯР .Г</a>
                                            <span class="text-muted font-size-sm mr-3 line-height-normal text-uppercase font-size-10">Боловсролын референт</span>
                                            <span class="text-muted font-size-sm mr-3 line-height-normal text-uppercase font-size-10 font-weight-bold">2019/10/11 - 2019/10/12</span>
                                        </div>
                                        <div class="ml-auto">
                                            <a href="javascript:void(0);">
                                                <button type="button" class="btn btn-sm alpha-success text-success-800 btn-icon rounded-round mr3" style="padding: 2px 8px;background: #8bc34a !important;">
                                                    <i class="icon-checkmark ddd font-size-12"></i>
                                                </button>
                                            </a>
                                            <a href="javascript:void(0);">
                                                <button type="button" class="btn btn-sm alpha-danger text-danger-800 btn-icon rounded-round mr3" style="padding: 2px 8px;">
                                                    <i class="icon-more2 font-size-12"></i>
                                                </button>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>';
        $gridBodyRow = '';
        if (empty($rowData)) {
            return $gridBodyRow;
        }
        
        $resetArrIndex = 0;
        $ww = 0;
        $_seperator = false;
        $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
        $rows = array_chunk($rowData, $columnCount);
        
        $w = count($rows);
        $fillParamData = isset($fillParamData[strtolower($parentMetaCode)]) ? $fillParamData[strtolower($parentMetaCode)] : null;
        
        if ($fillParamData && isset($fillParamData[0])) {
            foreach ($fillParamData as $fillKey => $row) {
                $resetArrIndex = 0;
                $ww = 0;
                $_seperator = false;
                $columnCount = empty($columnCount) ? self::$defaultRowColumnCount : $columnCount;
                $rows = array_chunk($rowData, $columnCount);
                $w = count($rows);

                $gridBodyRow .= '<tr class="bp-detail-row" style="display: block;">';     
                $gridBodyRow .= '<td><input type="hidden" name="param[' . $parentMetaCode . '.mainRowCount][]"/></td>';
                while ($ww < $w) {
                    $columns = $rows[$ww];

                    $xx = count($columns);
                    $xxx = 0;
                    $hrClass = '';
                    
                    while ($xxx < $xx) {
                        if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                            unset($rowData[$resetArrIndex++]);
                            $xxx++;
                            continue;
                        }

                        if ($columns[$xxx]['IS_SHOW'] !== '1') {
                            $hideClass = ' hide';
                        } else
                            $hideClass = '';
                        
                        $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                        $paramName = 'param[' . $paramRealPath . '][0][]';
                                                
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 22px;">';
                        $labelAttr = array(
                            'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                            'for' => $paramName,
                            'data-label-path' => $paramRealPath
                        );
                        
                        if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                        }
                        
                        $gridBodyRow .= Form::label($labelAttr);
                        $gridBodyRow .= '</td>';
                        $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;" class="float-left middle' . $hideClass . '">';
                        $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                        $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $row);
                        $gridBodyRow .= '</div>';
                        $gridBodyRow .= '</td>';
                        
                        if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                            $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                            $_seperator = true;
                            $xxx = $xx;
                        } else {
                            $xxx++;
                        }
                    }

                    if ($_seperator) {
                        $rows = array_chunk($rowData, $columnCount);
                        $_seperator = false;
                        $ww = 0;
                        $w = count($rows);
                        continue;
                    }
                    $ww++;
                }
                /*
                if (isset($rowFullData['isShowDelete']) && $rowFullData['isShowDelete'] === '1') {
                    $gridBodyRow .= '<td class="text-center stretchInput middle' . ($rowFullData['isShowDelete'] === '1' ? '' : ' hide') . '">';
                    $gridBodyRow .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row" title="' . $this->lang->line('delete_btn') . '"><i class="fa fa-trash"></i></a>';
                    $gridBodyRow .= '</td>';
                }*/
                
                //$gridBodyRow .= '<td style="float: left;line-height: 22px;width: 100%;" class="text-center saf"><hr></td>';
                $gridBodyRow .= '<td><table><tbody>' . $gridBodyRowAfter . '</tbody></table></td>';
                
                $gridBodyRow .= '</tr>';                    
            }
        } else {

            //$gridBodyRow .= '<tr style="display: block;">';
            $gridBodyRow .= '<td><input type="hidden" name="param[' . $parentMetaCode . '.mainRowCount][]"/></td>';
            while ($ww < $w) {
                $columns = $rows[$ww];
    
                $xx = count($columns);
                $xxx = 0;
                $hrClass = '';
                
                while ($xxx < $xx) {
                    if (!empty($columns[$xxx]['SIDEBAR_NAME']) || $columns[$xxx]['RECORD_TYPE'] === 'rows') {
                        unset($rowData[$resetArrIndex++]);
                        $xxx++;
                        continue;
                    }
    
                    if ($columns[$xxx]['IS_SHOW'] !== '1') {
                        $hideClass = ' hide';
                    } else
                        $hideClass = '';
                    
                    $paramRealPath = $parentMetaCode . '.' . $columns[$xxx]['META_DATA_CODE'];
                    $paramName = 'param[' . $paramRealPath . '][0][]';
                    
                    $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" class="text-right float-left middle' . $hideClass . '" style="width: ' . ($columnCount == 1 ? 25 : ($columnCount == 2 ? 18 : 10)) . '%;float: left;line-height: 22px;">';
                    $labelAttr = array(
                        'text' => Lang::line($columns[$xxx]['META_DATA_NAME']),
                        'for' => $paramName,
                        'data-label-path' => $paramRealPath
                    );
                    if ($columns[$xxx]['IS_REQUIRED'] == '1') {
                        $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                    }
                    $gridBodyRow .= Form::label($labelAttr);
                    $gridBodyRow .= '</td>';
                    $gridBodyRow .= '<td data-cell-path="' . $paramRealPath . '" style="width: ' . ($columnCount == 1 ? 60 : ($columnCount == 2 ? 32 : 22)) . '%; line-height: 22px;" class="float-left middle' . $hideClass . '">';
                    $gridBodyRow .= '<div data-section-path="' . $columns[$xxx]['PARAM_REAL_PATH'] . '">';
                    $gridBodyRow .= Mdwebservice::renderParamControl($methodId, $columns[$xxx], $paramName, '', $fillParamData);
                    $gridBodyRow .= '</div>';
                    $gridBodyRow .= '</td>';
    
                    unset($rowData[$resetArrIndex++]);
                    
                    if (!empty($columns[$xxx]['SEPARATOR_TYPE'])) {
                        $hrClass = $columns[$xxx]['SEPARATOR_TYPE'];
                        $_seperator = true;
                        $xxx = $xx;
                    } else {
                        $xxx++;
                    }
                }            
    
                if ($_seperator) {
                    $rows = array_chunk($rowData, $columnCount);
                    $_seperator = false;
                    $ww = 0;
                    $w = count($rows);
                    continue;
                }
                $ww++;
            }
            /*
            if (isset($rowFullData['isShowDelete']) && $rowFullData['isShowDelete'] === '1') {
                $gridBodyRow .= '<td style="width:100%; float: left;" class="text-center stretchInput middle' . ($rowFullData['isShowDelete'] === '1' ? '' : ' hide') . '">';
                $gridBodyRow .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row pull-right mr15" title="' . $this->lang->line('delete_btn') . '"><i class="fa fa-trash"></i></a>';
//                $gridBodyRow .= Form::button(array('data-action-path' => $parentMetaCode, 'class' => 'pull-right mr15 btn btn-xs green-meadow bp-add-one-row', 'value' => '<i class="icon-plus3 font-size-12"></i> ' . $this->lang->line('addRow'), 'onclick' => 'bpAddMainRow_' . $methodId . '(this, \''.$methodId.'\', \'' . $rowFullData['id'] . '\');'));
                $gridBodyRow .= '</td>';
            }*/
            
            //$gridBodyRow .= '<td style="float: left;line-height: 22px;width: 100%;" class="text-center adsas"><hr></td>';
            $gridBodyRow .= '<td><table><tbody>' . $gridBodyRowAfter . '</tbody></table></td>';
            
            
            //$gridBodyRow .= '</tr>';            
        }

        return $gridBodyRow;
    }
    
    public function renderFirstLevelDtlCardView($uniqId, $methodId, $row, $sidebarGroup, $isMultiRow, $fillParamData) {
        $lowerKey = strtolower($row['code']);
        $gridBodyData = $gridBodyRow = $tempGridBodyData = '';
        $tempbodyArr = array();
        
        if (isset($fillParamData[$lowerKey])) {
            
            $gridBodyData = $gridBodyRow = '';    
            
            if ($isMultiRow) {
                if (is_array($fillParamData[$lowerKey]) && is_numeric(key($fillParamData[$lowerKey]))) {
                    
                    $rowNum = 0;
                    
                    foreach ($fillParamData[$lowerKey] as $rk => $rowData) {
                        $tempGridBodyData = '<td><div class="w-100" style="padding-right: .625rem; padding-left: .625rem;">
                                <div class="card" style="    position: unset; ">
                                    <div class="card-body p-3">
                                        <div class="d-flex align-items-center">
                                            <div class="mr-2" data-path-featurenum="1"><img src="" class="rounded-circle" width="44" height="44" onerror="onUserImgError(this);" ></div>
                                            <div class="d-flex flex-column">
                                                <a href="javascript:void(0);" class="media-title font-weight-bold mb-0 line-height-normal word-break-all" data-path-featurenum="2">{path-featurenum-2}</a>
                                                <span class="text-muted font-size-sm mr-3 line-height-normal text-uppercase font-size-10" data-path-featurenum="3">{path-featurenum-3}</span>
                                                <span class="text-muted font-size-sm mr-3 line-height-normal text-uppercase font-size-10 font-weight-bold" data-path-featurenum="4">{path-featurenum-4} - {path-featurenum-6}</span>
                                            </div>
                                            <div class="ml-auto">
                                                <a href="javascript:void(0);">
                                                    {path-featurenum-5}
                                                </a>
                                                {path-more-button}
                                                <a href="javascript:void(0);" class="d-none">
                                                    <button type="button" class="btn btn-sm alpha-danger text-danger-800 btn-icon rounded-round mr3" style="padding: 2px 8px;">
                                                        <i class="icon-more2 font-size-12"></i>
                                                    </button>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div></td>';
                        
                        foreach ($row['data'] as $cn => $val) {
                            
                            if ($val['FEATURE_NUM'] != '' && $val['RECORD_TYPE'] == '') {
                                $gridBodyData1 = Mdwebservice::renderParamControl($methodId, $val, 'param[' . $val['PARAM_REAL_PATH'] . ']['.$rk.'][]', $val['PARAM_REAL_PATH'], $rowData);
                                
                                if ($val['FEATURE_NUM'] == '5') {
//                                    $gridBodyData1 = '<span class="d-none path-featurenum-5">'. $gridBodyData1 .'</span>
//                                    <button type="button" class="btn btn-sm alpha-success text-success-800 btn-icon rounded-round mr3" style="padding: 2px 8px;background: #8bc34a !important;">
//                                        <i class="icon-checkmark ddd font-size-12"></i>
//                                    </button>';
                                    
                                }
                                
                                $tempGridBodyData = str_replace('{path-featurenum-'. $val['FEATURE_NUM'] .'}', $gridBodyData1, $tempGridBodyData);
                            }
                        }
                        
                        for ($ti = 1; $ti <= 10; $ti++) {
                            $tempGridBodyData = str_replace('{path-featurenum-'. $ti .'}', '', $tempGridBodyData);
                        }
                        
                        array_push($tempbodyArr, $tempGridBodyData);
                        
                    }
                    
                    
                    foreach ($fillParamData[$lowerKey] as $rk => $rowData) {
                        $rowNum++;
                        $htmlBodyCell = $gridTabContentHeader = $gridTabContentBody = '';
                        $ii = 0;
                        $gridRowTypePath = $arg = array();
                        $isTab = false;
                        $sidebarGroupArr_{$row['id']} = array();
                        $sidebarShowRowsDtl_{$row['id']} = false;     
                        
                        $rowClass = '';
                        $rowStateVal = 'unchanged';
                        
                        if (issetParam($rowData['rowstate']) == 'removed') {
                            $rowClass = ' removed-tr d-none';
                            $rowStateVal = 'removed';
                            --$rowNum;
                        }
                        
                        $gridBodyData .= '<tr class="bp-detail-row saved-bp-row'.$rowClass.'" style="display: block">';
                        $gridBodyData .= '<td class="text-center middle float-left hide"><input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]" value="'.$rk.'"/></td>';
                        
                        foreach ($row['data'] as $cn => $val) {
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];                            
                            $aggregateClass = $hideClass = '';                         

                            if ($val['COLUMN_AGGREGATE'] != '') {
                                $aggregateClass = 'aggregate-' . $val['COLUMN_AGGREGATE'];
                            }

                            if ($val['IS_SHOW'] != '1') {
                                $hideClass = ' hide';
                            }

                            $arg = array(
                                'parentRecordType' => 'rows'
                            );       
                            
                            if ($val['FEATURE_NUM'] != '' && $val['RECORD_TYPE'] == '') {} else {
                                if ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'rows' && $val['IS_SHOW'] == '1') {

                                    array_push($gridRowTypePath, $val['PARAM_REAL_PATH']);                                        

                                    ++$ii;
                                    $gridTabActive = '';
                                    if ($ii === 1) {
                                        $gridTabActive = ' active';
                                    }
                                    $isTab = true;
                                    
                                    $arg['isTab'] = 'tab';
                                    $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                                    $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                                    $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];        
                                    $arg['groupKeyLookupMeta'] = $val['LOOKUP_KEY_META_DATA_ID'];
                                    $arg['isShowMultipleKeyMap'] = $val['IS_MULTI_ADD_ROW_KEY'];
                                    $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                                    $arg['code'] = $val['META_DATA_CODE'];
                                    $arg['paramPath'] = $val['PARAM_REAL_PATH'];
                                    $arg['groupConfigParamPath'] = $val['GROUP_CONFIG_PARAM_PATH_GROUP'];
                                    $arg['groupConfigLookupPath'] = $val['GROUP_CONFIG_FIELD_PATH_GROUP'];

                                    $gridTabContentHeader .= '<li class="nav-item" data-li-path="'.$val['PARAM_REAL_PATH'].'">';
                                    $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                    $gridTabContentHeader .= '</li>';
                                    $gridTabContentBody .= '<div class="tab-pane in' . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '">';                                        
                                    $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                    $gridTabContentBody .= '</div>';      

                                } elseif ($val['SIDEBAR_NAME'] == '' && $val['RECORD_TYPE'] == 'row') {
                                    
                                    if ($val['IS_BUTTON'] != '1') {

                                        $additionalBody = self::appendSubRowInProcessEditMode($uniqId, $methodId, $val, $rowData, $rk);
                                        $gridBodyData .= $additionalBody['additionalBody'];

                                        if (!empty($additionalBody['sideBarArr'])) {
                                            $sidebarShowRowsDtl_{$row['id']} = true;

                                            foreach ($additionalBody['sideBarArr'] as $sdval) {

                                                $sval = $sdval['row'];

                                                if (!in_array($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                                    array_push($sidebarGroupArr_{$row['id']}, $sval['SIDEBAR_NAME']);
                                                }

                                                $groupKey = array_search($sval['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                                $labelAttr = array(
                                                    'text' => Lang::line($sval['META_DATA_NAME']),
                                                    'for' => "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]",
                                                    'data-label-path' => $sval['PARAM_REAL_PATH']
                                                );
                                                if ($sval['IS_REQUIRED'] == '1') {
                                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                                }
                                                if ($sval['META_TYPE_CODE'] == 'date') {
                                                    $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $sval, "param[" . $sval['PARAM_REAL_PATH'] . "][$rk][]", '', $sdval['fillData']) . "</div>";
                                                } elseif ($sval['META_TYPE_CODE'] == 'boolean') {
                                                    $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData']);
                                                } else {
                                                    $inHtml = Mdwebservice::renderParamControl($methodId, $sval, 'param[' . $sval['PARAM_REAL_PATH'] . ']['.$rk.'][]', '', $sdval['fillData'], 'removeSelect2');
                                                }
                                                $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                                    'input_label_txt' => Form::label($labelAttr),
                                                    'data_path' => $sval['PARAM_REAL_PATH'], 
                                                    'input_html' => $inHtml
                                                );
                                                $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];

                                            }
                                        }

                                    } else {
                                        
                                        ++$ii;
                                        $gridTabActive = '';
                                        if ($ii == 1) {
                                            $gridTabActive = ' active';
                                        }

                                        array_push($gridRowTypePath, $val['PARAM_REAL_PATH']);

                                        $arg['isTab'] = 'tab';
                                        $isTab = true;
                                        $gridTabContentHeader .= '<li class="nav-item ' . $hideClass . '" data-li-path="' . $val['PARAM_REAL_PATH'] . '">';
                                        $gridTabContentHeader .= '<a href="#' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" class="nav-link ' . $gridTabActive . '" data-toggle="tab">' . Lang::line($val['META_DATA_NAME']) . '</a>';
                                        $gridTabContentHeader .= '</li>';
                                        $gridTabContentBody .= '<div class="tab-pane in' . $hideClass . $gridTabActive . '" id="' . $row['code'] . '_' . $val['META_DATA_CODE'] . '" data-section-path="' . $val['PARAM_REAL_PATH'] . '">';
                                        $gridTabContentBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $rowData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                        $gridTabContentBody .= '</div>';
                                    }

                                } else {
                                    $val['SIDEBAR_NAME'] = trim($val['SIDEBAR_NAME']);

                                    /*if (!empty($val['SIDEBAR_NAME'])) {*/

                                        $sidebarShowRowsDtl_{$row['id']} = true;

                                        if (!in_array($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']})) {
                                            array_push($sidebarGroupArr_{$row['id']}, $val['SIDEBAR_NAME']);
                                        }

                                        $groupKey = array_search($val['SIDEBAR_NAME'], $sidebarGroupArr_{$row['id']});
                                        $labelAttr = array(
                                            'text' => Lang::line($val['META_DATA_NAME']),
                                            'for' => "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]",
                                            'data-label-path' => $val['PARAM_REAL_PATH']
                                        );
                                        if ($val['IS_REQUIRED'] == '1') {
                                            $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                        }
                                        if ($val['META_TYPE_CODE'] == 'date') {
                                            $inHtml = '<div style="width: 132px; text-align: left;">' . Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData) . "</div>";
                                        } elseif ($val['META_TYPE_CODE'] == 'boolean') {
                                            $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData);
                                        } else {
                                            $inHtml = Mdwebservice::renderParamControl($methodId, $val, "param[" . $val['PARAM_REAL_PATH'] . "][$rk][]", $val['PARAM_REAL_PATH'], $rowData, 'removeSelect2');
                                        }
                                        $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk][] = array(
                                            'input_label_txt' => Form::label($labelAttr),
                                            'data_path' => $val['PARAM_REAL_PATH'], 
                                            'data_hideclass' => $hideClass, 
                                            'input_html' => $inHtml
                                        );
                                        $sidebarDtlRowsContentArr_{$row['id']}[$groupKey][$rk] = $sidebarDtlRowsContentArr_{$row['id'].$groupKey}[$rk];                                    
                                    /*}   */                                     
                                }
                            }

                            if (!isset($isRowState) && strtolower($val['META_DATA_CODE']) == 'rowstate') {
                                $isRowState = true;
                            }
                        }
                        
                        if (!isset($isRowState)) {
                            $gridBodyData .= '<td data-cell-path="' . $row['code'] . '.rowState" class="display-none">';
                            $gridBodyData .= '<input type="hidden" name="param[' . $row['code'] . '.rowState]['.$rk.'][]" data-path="'.$row['code'].'.rowState" data-field-name="rowState" data-isclear="0" value="'.$rowStateVal.'">';
                            $gridBodyData .= '</td>';
                        }
                        
                        //$htmlBodyCell .= '<td class="text-center stretchInput float-left middle' . ($row['isShowDelete'] === '1' ? '' : ' hide') . '">';
                        
                        if ($sidebarShowRowsDtl_{$row['id']}) {
                            
                            $htmlBodyCell .= '<a href="javascript:;" onclick="proccessRenderPopup(\'div#bp-window-' . $methodId . '\', this);" class="btn btn-sm alpha-danger text-danger-800 btn-icon rounded-round mr3 bp-btn-sidebar" style="padding: 2px 8px;" title="Popup цонхоор харах"><i class="icon-more2 font-size-12"></i></a>';
                            $htmlBodyCell .= '<div class="sidebarDetailSection hide">';

                            if (!empty($sidebarGroupArr_{$row['id']})) {
                                foreach ($sidebarGroupArr_{$row['id']} as $keyPopGroup => $rowPopGroup) {

                                    $htmlBodyCell .= '<p class="property_page_title">' . Lang::line($rowPopGroup) . '</p>' .
                                    '<div class="panel panel-default bg-inverse grid-row-content">' .
                                    '<table class="table sheetTable sidebar_detail">' .
                                    '<tbody>';
                                    if (isset($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk])) {
                                        foreach ($sidebarDtlRowsContentArr_{$row['id']}[$keyPopGroup][$rk] as $subrowPopGroup) {
                                            $htmlBodyCell .= "<tr data-cell-path='".$subrowPopGroup['data_path']."' class='". $subrowPopGroup['data_hideclass'] ."'>" .
                                            "<td style='width: 229px;' class='left-padding'>" . Lang::line($subrowPopGroup['input_label_txt']) . "</td>" .
                                            "<td>" . $subrowPopGroup['input_html'] . "</td>" .
                                            "</tr>";
                                        }
                                    }
                                    $htmlBodyCell .= '</tbody></table></div>';

                                }
                            }  
                            
                            $htmlBodyCell .= '</div>';
                        }
                        
                        if ($row['isShowDelete'] === '1') {
                            // $htmlBodyCell .= '<a href="javascript:;" class="btn red btn-xs bp-remove-row" title="'.Lang::line('delete_btn').'"><i class="fa fa-trash"></i></a>';
                        }      
                        
                        //$htmlBodyCell .= '</td>';
                        
                        if ($isTab) {
                            $gridRowTypePath = implode('|', $gridRowTypePath);
                            
                            $gridBodyData .= '<td class="text-center stretchInput middle" data-cell-path="' . $gridRowTypePath . '">';
                            $gridBodyData .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" style="width:35px" title="Дэлгэрэнгүй" data-b-path="' . $gridRowTypePath . '">';
                            $gridBodyData .= '...';
                            $gridBodyData .= '</a> ';
                            $gridBodyData .= '<div class="param-tree-container-tab param-tree-container hide">';
                            $gridBodyData .= '<div class="tabbable-line">
                                    <ul class="nav nav-tabs">' . $gridTabContentHeader . '</ul>
                                    <div class="tab-content">
                                    ' . $gridTabContentBody . '
                                    </div>
                                </div>';
                            $gridBodyData .= '</div>';
                            $gridBodyData .= '</td>';
                        }

                        //$gridBodyData .= $htmlBodyCell;
                        
                        $gridBodyData .= isset($tempbodyArr[$rk]) ? $tempbodyArr[$rk] : '';
                        
                        $gridBodyData = str_replace('{path-more-button}', $htmlBodyCell, $gridBodyData);
                        
                        $gridBodyData .= '</tr>';                    
                        
                    }
                    
                }
            } else { //2015-10-22 10:40
                foreach ($row['data'] as $val) {
                    $isRowState = false;
                    $hideClass = '';
                    if ($val['IS_SHOW'] != '1') {
                        $hideClass = 'hide';
                    }

                    if (empty($val['SIDEBAR_NAME'])) {
                        if ($val['RECORD_TYPE'] == 'rows') {
                            
                            $arg['isShowAdd'] = $val['IS_SHOW_ADD'];
                            $arg['isShowDelete'] = $val['IS_SHOW_DELETE'];
                            $arg['isShowMultiple'] = $val['IS_SHOW_MULTIPLE'];
                            $arg['groupKeyLookupMeta'] = $val['LOOKUP_KEY_META_DATA_ID'];
                            $arg['isShowMultipleKeyMap'] = $val['IS_MULTI_ADD_ROW_KEY'];
                            $arg['isFirstRow'] = $val['IS_FIRST_ROW'];
                            $arg['id'] = $val['META_DATA_CODE'];
                            $arg['code'] = $val['META_DATA_CODE'];
                            $arg['paramPath'] = $val['PARAM_REAL_PATH'];
                            $arg['groupConfigParamPath'] = $val['GROUP_CONFIG_PARAM_PATH_GROUP'];
                            $arg['groupConfigLookupPath'] = $val['GROUP_CONFIG_FIELD_PATH_GROUP'];                            

                            $gridBodyRow .= '<tr class="bp-detail-row ' . $hideClass . '" data-cell-path="' . $val['PARAM_REAL_PATH'] . '">';
                            
                            if ($val['META_TYPE_CODE'] == 'group' && $val['IS_BUTTON'] == '1') {
                                
                                $gridBodyRow .= '<td class="text-right middle float-left" style="width: 28%">';
                                $labelAttr = array(
                                    'text' => Lang::line($val['META_DATA_NAME'])
                                );
                                if ($val['IS_REQUIRED'] == '1') {
                                    $labelAttr = array_merge($labelAttr, array('required' => 'required'));
                                }
                                $gridBodyRow .= Form::label($labelAttr);
                                $gridBodyRow .= '</td>';
                                $gridBodyRow .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 72%" class="middle float-left">';
                                $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            } else {
                                $gridBodyRow .= '<td data-cell-path="' . $val['PARAM_REAL_PATH'] . '" style="width: 100%" class="middle float-left" colspan="2">';
                                $gridBodyRow .= '<p class="meta_description"><i class="fa fa-info-circle"></i> ' . Lang::line($val['META_DATA_NAME']) . '</p>';
                                $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                                $gridBodyRow .= '</td>';
                            }
                            $gridBodyRow .= '</tr>';
                            
                        } elseif ($val['RECORD_TYPE'] == 'row') {
                            $gridBodyRow .= '<tr class="' . $hideClass . '" data-cell-path="' . $val['PARAM_REAL_PATH'] . '">';
                            $gridBodyRow .= '<td>';
                            $gridBodyRow .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData[$lowerKey], '', array(), $val['IS_BUTTON'], $val['COLUMN_COUNT']);
                            $gridBodyRow .= '</td>';
                            $gridBodyRow .= '</tr>';
                        } 
                    }
                    if (strtolower($val['META_DATA_CODE']) == 'rowstate') {
                        $isRowState = true;
                    }
                }
            }
            
            return array(
                'gridBody' => '',
                'gridBodyRow' => $gridBodyRow,
                'gridBodyData' => $gridBodyData,
                'isRowState' => (!isset($isRowState) ? false : $isRowState)
            );
        }

        return false;
    }
    
    public function bpCustomDetail($methodId, $uniqId, $row, $fillParamData = null) {
        
        $dtlTheme = issetDefaultVal($row['widgetCode'], $row['dtlTheme']);
        
        if ($dtlTheme == '14' || $dtlTheme == 'card_one_column') {
            
            $detail = self::bpDetailCardOneColumn($methodId, $uniqId, $row, 0, $fillParamData);
            
        } elseif ($dtlTheme == 'detail_withoutlabel1') {
            
            $detail = self::widgetBpDetailRender($methodId, $uniqId, $row, $fillParamData);
            
        } else {
            $detail = '';
        }
        
        return $detail;
    }
    
    public function widgetBpDetailRender($methodId, $uniqId, $row, $fillParamData) {
        
        $result = (new Mdwidget())->runBpDetail(
            array(
                'methodId'      => $methodId, 
                'uniqId'        => $uniqId, 
                'row'           => $row, 
                'fillParamData' => $fillParamData
            )
        );
        
        return $result;
    }
    
    public function bpDetailCardOneColumn($methodId, $uniqId, $row, $rk = 0, $fillParamData = null) {
        
        $cardHeader = '';
        $addSavedClassName = '';
        if ($fillParamData) {
            $addSavedClassName = ' saved-bp-row';
        }
        
        $gridBody = '<div class="detail-card2 mr-3 float-left bp-detail-row'.$addSavedClassName.'">';
        
            $gridBody .= '<input type="hidden" name="param[' . $row['code'] . '.mainRowCount][]" value="'.$rk.'"/>';
            $gridBody .= '<!--cardHeader-->';

            $gridBody .= '<div class="p-2">';
            $gridBody .= '<button type="button" class="btn btn-sm btn-outline-danger trash-btn bp-remove-row"><i class="fa fa-trash"></i></button>';
                $gridBody .= '<table class="table">
                <tbody>';

                    foreach ($row['data'] as $ind => $val) {

                        $hideClass = '';
                        
                        if ($val['THEME_POSITION_NO']) {
                            
                            if ($val['THEME_POSITION_NO'] == '1') {
                                
                                $value = '';
                                
                                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $val['LOWER_PARAM_NAME'])) {
                                    $value = $fillParamValue;
                                }
                                
                                $picture = '<div class="mr-2">
                                                <img src="'.$value.'" class="rounded-circle" width="44" height="44" onerror="onUserImageError(this);">
                                            </div>';
                                
                            } elseif ($val['THEME_POSITION_NO'] == '2') {
                                
                                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $val['LOWER_PARAM_NAME'])) {
                                    $cardHeader .= '<span class="media-title font-weight-bold mb-0 line-height-normal word-break-all font-size-12">'.$fillParamValue.'</span>';
                                }
                                
                            } elseif ($val['THEME_POSITION_NO'] == '3') {
                                
                                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $val['LOWER_PARAM_NAME'])) {
                                    $cardHeader .= '<span class="text-muted font-size-sm line-height-normal text-uppercase font-size-10 text-nowrap text-one-line" style="width:260px;">
                                        '.$fillParamValue.'
                                    </span>';
                                }
                                
                            } elseif ($val['THEME_POSITION_NO'] == '4') {
                                
                                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $val['LOWER_PARAM_NAME'])) {
                                    $cardHeader .= '<span class="text-muted mr-3 line-height-normal font-size-11">
                                        '.$fillParamValue.' 
                                    </span>';
                                }
                                
                            } elseif ($val['THEME_POSITION_NO'] == '5') {
                                
                                if ($fillParamValue = self::findRowKeyValFillData($fillParamData, $val['LOWER_PARAM_NAME'])) {
                                    $cardHeaderRight = '
                                    <div class="d-flex flex-column ml-auto">
                                        <div class="font-size-12 text-black">'.$fillParamValue.'</div>
                                    </div>';
                                }
                            }
                            
                        } else {
                            
                            if (empty($val['SIDEBAR_NAME'])) {

                                if ($val['IS_SHOW'] != '1') {
                                    $hideClass = ' d-none';
                                }

                                $gridBody .= '<tr data-cell-path="' . $val['PARAM_REAL_PATH'] . '" class="' . $val['NODOT_PARAM_REAL_PATH'] . ' ' . $hideClass . '">';
                                    $gridBody .= '<td class="text-right text-gray border-0 pt-0 pr-0">'.Lang::line($val['META_DATA_NAME']).':</td>';
                                    $gridBody .= '<td class="font-weight-bold border-0 pt-0 pr-0">';
                                        
                                    if ($val['RECORD_TYPE']) {
                                        
                                        if ($val['IS_SHOW'] == '1') {
                                            
                                            $arg = array(
                                                'parentRecordType' => 'rows', 
                                                'isTab' => 'tab', 
                                                'isShowAdd' => $val['IS_SHOW_ADD'], 
                                                'isShowDelete' => $val['IS_SHOW_DELETE'], 
                                                'isShowMultiple' => $val['IS_SHOW_MULTIPLE'], 
                                                'groupKeyLookupMeta' => $val['LOOKUP_KEY_META_DATA_ID'], 
                                                'isShowMultipleKeyMap' => $val['IS_MULTI_ADD_ROW_KEY'], 
                                                'id' => $val['META_DATA_CODE'], 
                                                'code' => $val['META_DATA_CODE'], 
                                                'paramPath' => $val['PARAM_REAL_PATH'], 
                                                'groupConfigParamPath' => $val['GROUP_CONFIG_PARAM_PATH_GROUP'], 
                                                'groupConfigLookupPath' => $val['GROUP_CONFIG_FIELD_PATH_GROUP'], 
                                                'isFirstRow' => $val['IS_FIRST_ROW']
                                            );
                                            
                                            $gridBody .= '<a href="javascript:;" onclick="paramTreePopup(this, ' . getUID() . ', \'div#bp-window-' . $methodId . ':visible\');" class="hide-tbl btn btn-sm purple-plum bp-btn-subdtl" title="Дэлгэрэнгүй">...</a> ';
                                            $gridBody .= '<div class="param-tree-container-tab param-tree-container hide">';
                                            $gridBody .= self::buildTreeParam($uniqId, $methodId, $val['META_DATA_NAME'], $val['PARAM_REAL_PATH'], $val['RECORD_TYPE'], $val['ID'], $fillParamData, '', $arg, $val['IS_BUTTON'], $val['COLUMN_COUNT'], $rk);
                                            $gridBody .= '</div>';
                                        }
                                        
                                    } else {
                                        $gridBody .= Mdwebservice::renderParamControl($methodId, $val, 'param[' . $val['PARAM_REAL_PATH'] . ']['.$rk.'][]', $val['PARAM_REAL_PATH'], $fillParamData);
                                    }
                                    
                                    $gridBody .= '</td>';
                                $gridBody .= '</tr>';
                            }
                        }
                    }
                    
                    $gridBody .= '<tr data-cell-path="' . $row['code'] . '.rowState" class="d-none">';
                        $gridBody .= '<td></td>';
                        $gridBody .= '<td>';
                            $gridBody .= '<input type="hidden" name="param[' . $row['code'] . '.rowState]['.$rk.'][]" data-path="'.$row['code'].'.rowState" data-field-name="rowState" data-isclear="0">';
                        $gridBody .= '</td>';
                    $gridBody .= '</tr>';

                    $gridBody .= '</tbody>';
                $gridBody .= '</table>';
            $gridBody .= '</div>';
        $gridBody .= '</div>';
        
        if ($cardHeader) {
            
            $gridBodyHeader = '<div class="card">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        '.issetParam($picture).' 
                        <div class="d-flex flex-column">
                            '.$cardHeader.' 
                        </div>
                        '.issetParam($cardHeaderRight).' 
                    </div>
                </div>
            </div>';
            
            $gridBody = str_replace('<!--cardHeader-->', $gridBodyHeader, $gridBody);
        }
        
        return $gridBody;
    }
    
    public function renderFirstLevelDivDtl($uniqId, $processMetaDataId, $dtlThemeCode, $row, $getDtlRowsPopup, $fillParamData) {
        
        $lowerKey = strtolower($row['code']);
        $gridBodyData = '';

        if (isset($fillParamData[$lowerKey])) {
            $gridBodyData = self::renderCustomDtlLoop($uniqId, $processMetaDataId, $dtlThemeCode, $row, $getDtlRowsPopup, $fillParamData[$lowerKey]);
        }
        
        return array(
            'gridBody' => '',
            'gridBodyData' => $gridBodyData,
            'isRowState' => !isset($isRowState) ? false : $isRowState
        );
    }
    
    public function renderCustomDtlLoop($uniqId, $processMetaDataId, $dtlThemeCode, $row, $getDtlRowsPopup, $fillParamData) {
        
        $gridBodyData = '';
        $dtlThemeCode = issetDefaultVal($row['widgetCode'], $dtlThemeCode);
        
        if ($dtlThemeCode == '14' || $dtlThemeCode == 'card_one_column') {
                
            foreach ($fillParamData as $rk => $rowData) {
                $gridBodyData .= self::bpDetailCardOneColumn($processMetaDataId, $uniqId, $row, $rk, $rowData);
            }
            
        } elseif ($dtlThemeCode == 'detail_withoutlabel1' 
                || $dtlThemeCode == 'detail_withoutlabel2' 
                || $dtlThemeCode == 'detail_circle_photo' 
                || $dtlThemeCode == 'detail_colorable_tag' 
                || $dtlThemeCode == 'detail_attachments' 
                || $dtlThemeCode == 'detail_attachments2' 
                || $dtlThemeCode == 'detail_doc_history' 
                || $dtlThemeCode == 'detail_user_card_001' 
                || $dtlThemeCode == 'detail_buttons' 
                || $dtlThemeCode == 'detail_circle_icon' 
                || $dtlThemeCode == 'detail_circle_file' 
                || $dtlThemeCode == 'detail_notes' 
                || $dtlThemeCode == 'detail_frame_paper_001' 
                || $dtlThemeCode == 'detail_frame_paper_tree' 
                || $dtlThemeCode == 'detail_file_preview_001') {
            
            $gridBodyData = self::widgetBpDetailRender($processMetaDataId, $uniqId, $row, $fillParamData);
        }

        return $gridBodyData;
    }
    
    public function renderCustomParent($row, $gridBodyData = '', $bottomCustomAddRow = '') {
        
        $html = '<div data-table-path="'.$row['code'].'" data-table-path-lower="'. Str::lower($row['code']).'" data-row-id="'.$row['id'].'" class="bprocess-table-dtl bprocess-div-dtl-'.$row['dtlTheme'].' bpdtl-widget-'.$row['widgetCode'].'" data-dtltheme="'.$row['dtlTheme'].'">
            <div class="tbody">'.$gridBodyData.'</div> 
            '.$bottomCustomAddRow.'    
        </div>';
        
        return $html;
    }
    
    public function dvToProcessRender() {    
        
        $this->view->methodId = Input::numeric('metaDataId');
        $this->view->methodRow = $this->model->getDVProcessHeaderConfigModel($this->view->methodId);
                
        $response = array();
        
        if ($this->view->methodRow) {
            
            Mdwebservice::$isGroupRender = 1;
            
            $this->view->renderType = '0';
            $this->view->mainBpTab = array('tabStart' => '', 'tabEnd' => '', 'ticket' => '0');
            $this->view->isBpOpenParam = null;
            $this->view->selectedRowData = array();
            
            $this->view->uniqId = getUID();
            $this->view->processSubType = null;
            $this->view->processActionType = null;
            
            self::$processCode = $this->view->methodRow['META_DATA_CODE'];
            
            $this->view->runMode = null;
            
            $this->view->isKnowledge = null;
            $this->view->isShowPrevNext = null;

            $this->view->isDialog = false;
            $this->view->isHeaderName = true;
            $this->view->isSystemProcess = 'true';

            $runBtn = null;
            
            $this->view->isIgnoreActionBtn = true;
            $this->view->processActionBtn = $runBtn;

            $this->view->responseType = Input::post('responseType');
            $this->view->openParams = Input::post('openParams');
            $this->view->callerType = Input::post('callerType');
            $this->view->isProcess = true;
            $this->view->fillParamData = null;
            $this->view->isEditMode = false;
            $this->view->isPrintView = false;
            $this->view->isSavePrint = false;
            $this->view->batchNumber = null;

            $this->view->columnCount = (empty($this->view->methodRow['COLUMN_COUNT']) ? self::$defaultColumnCount : $this->view->methodRow['COLUMN_COUNT']);
            $this->view->labelWidth = (empty($this->view->methodRow['LABEL_WIDTH']) ? ($this->view->columnCount == 1 ? 45 : self::$defaultLabelWidth) : intval($this->view->methodRow['LABEL_WIDTH']));
            $this->view->sourceId = null;
            $this->view->realSourceIdAutoMap = null;
            
            $this->view->isPrint = false;
            $this->view->isBanner = false;       
            
            $this->view->dmMetaDataId = null;
                       
            $this->view->newStatusParams = null;

            $this->view->row = '';
            $this->view->metaDataCode = '';
            
            $this->view->cyphertext = null;
            $this->view->plainText = null;
                    
            $this->view->addonJsonParam = '{}';
            
            $this->view->bpTab = array('tabStart' => '', 'tabEnd' => '');
            
            $dialogWidth = ($this->view->methodRow['WINDOW_SIZE'] == 'custom' && $this->view->methodRow['WINDOW_WIDTH'] != '') ? $this->view->methodRow['WINDOW_WIDTH'] : self::$defaultWindowWidth;
            
            $this->view->checkListStartHtml = null;
            $this->view->checkListEndHtml = null;
            $checkList = null;
            
            $this->view->bpTab = $this->model->renderAddModeBpTab($this->view->uniqId, $this->view->methodRow, $checkList, $this->view->selectedRowData, $this->view->dmMetaDataId);
            
            $returnData = $this->model->getDVProcessInputParams($this->view->methodId);
            $this->view->paramList = $returnData['renderData'];        
            
            $this->view->cache = phpFastCache();

            $this->view->bpFullScriptsEvent = $this->view->cache->get('processFullExpression_' . $this->view->methodId);
            $this->view->bpFullScriptsWithoutEvent = $this->view->cache->get('processFullExpressionWithoutEvent_' . $this->view->methodId);
            $this->view->bpFullScriptsVarFnc = $this->view->cache->get('processFullExpressionVarFnc_' . $this->view->methodId);
            $this->view->bpFullScriptsSave = $this->view->cache->get('processFullExpressionSave_' . $this->view->methodId);
            $this->view->bpFullScriptsAfterSave = $this->view->cache->get('processFullExpressionAfterSave_' . $this->view->methodId);
            
            if ($this->view->bpFullScriptsEvent == null) {
                
                $this->view->bpFullScriptsVarFnc = '';
                $this->view->cache->set('processFullExpressionVarFnc_' . $this->view->methodId, $this->view->bpFullScriptsVarFnc, self::$expressionCacheTime);
                
                $this->view->bpFullScriptsEvent = '';
                $this->view->cache->set('processFullExpression_' . $this->view->methodId, $this->view->bpFullScriptsEvent, self::$expressionCacheTime);

                $this->view->bpFullScriptsWithoutEvent = '';
                $this->view->cache->set('processFullExpressionWithoutEvent_' . $this->view->methodId, $this->view->bpFullScriptsWithoutEvent, self::$expressionCacheTime);
                
                $this->view->bpFullScriptsSave = '';
                $this->view->bpFullScriptsAfterSave = '';
                
                $this->view->cache->set('processFullExpressionSave_' . $this->view->methodId, $this->view->bpFullScriptsSave, self::$expressionCacheTime);
                $this->view->cache->set('processFullExpressionAfterSave_' . $this->view->methodId, $this->view->bpFullScriptsAfterSave, self::$expressionCacheTime);
            }

            $isDialogSize = '';
            
            if (!$this->view->isDialog && ($this->view->callerType == 'generalledger' || $this->view->callerType == 'drilldown')) {
                $this->view->isDialog = true;
                $isDialogSize = 'auto';
            }
            
            $this->view->cacheId = null;
            
            $methodHtml = $this->view->renderPrint('sub/renderMethod', self::$viewPath);   
            
            $methodHtml = str_replace('_'.$this->view->methodId, '_'.$this->view->uniqId, $methodHtml);
            $methodHtml = preg_replace('/(process\/file)(_\d+)(_'.$this->view->uniqId.')(_\d+)/', '${1}${2}_'.$this->view->methodId.'${4}', $methodHtml);
            
            if ($this->view->isDialog) {
                                
                $response = array_merge($response, array(
                    'Html' => $methodHtml,
                    'Title' => $this->lang->line($this->view->methodRow['META_DATA_NAME']),
                    'close_btn' => $this->lang->line('close_btn'),
                    'run_btn' => $runBtn,
                    'mode' => 'dialog',
                    'dialogClass' => $this->view->methodRow['WINDOW_TYPE'],
                    'dialogSize' => $this->view->methodRow['WINDOW_SIZE'],
                    'dialogWidth' => $dialogWidth,
                    'dialogHeight' => (($this->view->methodRow['WINDOW_SIZE'] == 'custom' && $this->view->methodRow['WINDOW_HEIGHT'] != '') ? $this->view->methodRow['WINDOW_HEIGHT'] : self::$defaultWindowHeight),
                    'isPrintView' => $this->view->isPrintView,
                    'run_mode' => $this->view->runMode, 
                    'runBtnColor' => '', 
                    'isDialogSize' => $isDialogSize, 
                    'metaType' => 'businessProcess', 
                    'metaDataId' => $this->view->methodId, 
                    'uniqId' => $this->view->uniqId,
                    'helpContentId' => null,
                    'isKnowledge' => $this->view->isKnowledge,
                    'isShowPrevNext' => $this->view->isShowPrevNext,
                    'selectedRowData' => $this->view->selectedRowData, 
                    'isSystemProcess' => $this->view->isSystemProcess
                ));
                
            } else {
                
                $methodHtmlAppend = '';
                
                if (!$this->view->renderType) {
                    $methodHtmlAppend .= '<div class="row">';
                }
                
                $methodHtmlAppend .= $methodHtml;
                
                if (!$this->view->renderType) {
                    $methodHtmlAppend .= '</div>';
                }
                
                $response = array(
                    'Html' => $methodHtmlAppend, 
                    'Title' => $this->lang->line($this->view->methodRow['META_DATA_NAME']), 
                    'mode' => 'main', 
                    'metaType' => 'businessProcess', 
                    'metaDataId' => $this->view->methodId,
                    'uniqId' => $this->view->uniqId, 
                    'isSystemProcess' => $this->view->isSystemProcess
                );
            }
            
        } else {
            $methodHtml = $this->view->renderPrint('sub/renderWarning', self::$viewPath);
            $response = array(
                'Html' => $methodHtml,
                'Title' => 'Тохиргоогүй процесс',
                'close_btn' => $this->lang->line('close_btn'),
                'run_btn' => $this->lang->line('save_btn'),
                'mode' => 'dialog',
                'dialogClass' => 'standart',
                'dialogSize' => 'standart',
                'dialogWidth' => self::$defaultWindowWidth,
                'dialogHeight' => self::$defaultWindowHeight,
                'isPrintView' => false, 
                'runBtnColor' => '', 
                'metaType' => 'businessProcess', 
                'metaDataId' => $this->view->methodId 
            );
        }
        
        echo json_encode($response); exit;
    }
    
    public function setLookupDefaultValue($value, $lookupMetaDataId, $lookupType, $valueField) {
        
        if ($value == '') {
            return null;
        }
        
        $lowerValue = strtolower($value);
        
        if ($lowerValue == 'firstrow' && $lookupMetaDataId) {
            $value = (new Mddatamodel())->getDvFirstRow($lookupMetaDataId, $lookupType, $valueField);
        } else {
            $value = Mdmetadata::setDefaultValue($value);
        }
        
        return $value;
    }
    
    public function graphFieldRender($methodId, $param, $fillParamData) {
        
        $fillParamValue = self::findRowKeyValFillData($fillParamData, $param['LOWER_PARAM_REAL_PATH']);
        
        if ($fillParamValue) {
            $fillParamValue = Mdbpmn::graphXmlSpecialCharReplace($fillParamValue);
        }
            
        $control = '<div data-cell-path="'.$param['PARAM_REAL_PATH'].'">';
        
            $control .= Form::textArea(array('name' => 'param['.$param['PARAM_REAL_PATH'].']', 'id' => 'graphInput-'.$param['ID'], 'style' => 'display: none', 'class' => 'mxgraph-load', 'value' => $fillParamValue, 'data-dtlid' => $param['ID']));

            $control .= '<button type="button" class="btn btn-light btn-sm" onclick="bpFieldGraphView(this, \''.$param['ID'].'\');"><i class="icon-design"></i> Editor</button>';
            //$control .= '<button type="button" class="btn btn-light btn-sm ml8" onclick="bpFieldGraphSaveImage(this, \''.$param['ID'].'\');" title="Save to image"><i class="fa fa-camera"></i></button>';
            $control .= '<div id="graphview-'.$param['ID'].'" class="svg-d-inline text-center"></div>';
        $control .= '</div>';
        
        return $control;
    }
    
    public function bpDetailExcelExport() {
        
        set_time_limit(0);
        ini_set('memory_limit', '-1');
        
        includeLib('Office/Excel/PHPExcel');
        includeLib('Office/Excel/PHPExcel/Writer/Excel2007');
        
        $objPHPExcel = new PHPExcel();
        $objPHPExcel->getProperties()
                ->setCreator('Veritech ERP')
                ->setCompany('Veritech ERP')
                ->setLastModifiedBy('')
                ->setTitle('Office 2007 - Document')
                ->setSubject('Office 2007 - Document')
                ->setDescription('')
                ->setKeywords('')
                ->setCategory('');
        
        $objPHPExcel->setActiveSheetIndex(0);
        $sheet = $objPHPExcel->getActiveSheet();
        
        $listName = Lang::line('META_00062');
        $sheet->setTitle(Str::excelSheetName(Str::utf8_substr($listName, 0, 31)));
        
        if (!array_key_exists(0, $_POST['dtl'])) {
            header('Pragma: no-cache');
            header('Expires: 0');
            header('Set-Cookie: fileDownload=false; path=/');
            echo 'No data!'; exit();
        }        
        
        $startRowIndex = 1;
        $headerParams = $_POST['dtl'][0];        
        $h = 0;
        
        foreach ($headerParams as $key => $row) {            
            $sheet->setCellValue(numToAlpha($h + 2) . $startRowIndex, $key);
            $headerData[$h] = $key;
            $h++;
        }
        
        $headerCount = count($headerData);

        $sheet->setCellValue('A'.$startRowIndex, '№');
        
        $i = $startRowIndex + 1;
        
        $exportDataRows = $_POST['dtl'];        
        
        foreach ($exportDataRows as $key => $value) {
            
            $sheet->setCellValue(numToAlpha(1) . $i, ++$key);
            
            foreach ($headerData as $k => $item) {
                
                $numToAlpha = numToAlpha($k + 2);
                $cellValue = '';
                
                if (isset($value[$item])) {
                    $cellValue = $value[$item];
                }

                if (is_numeric($cellValue)) {
                    $headerStyle['alignment']['horizontal'] = PHPExcel_Style_Alignment::HORIZONTAL_RIGHT;
                    $sheet->setCellValueExplicit($numToAlpha . $i, $cellValue, PHPExcel_Cell_DataType::TYPE_NUMERIC);
                    $sheet->getStyle($numToAlpha . $i)->applyFromArray($headerStyle);
                } else {
                    $sheet->setCellValueExplicit($numToAlpha . $i, $cellValue, PHPExcel_Cell_DataType::TYPE_STRING);
                }

            }
            $i++;
        }
        
        if (count($_POST['footerData'])) {            
            $footerData = $_POST['footerData'];
            $footerIndex = 0;
            
            foreach ($footerData as $item) {
                if ($item) {
                    $footerStyle['font']['bold'] = true;
                    $footerStyle['alignment']['horizontal'] = PHPExcel_Style_Alignment::HORIZONTAL_RIGHT;
                    $sheet->setCellValueExplicit(numToAlpha($footerIndex + 2) . $i, $item, PHPExcel_Cell_DataType::TYPE_NUMERIC);
                    $sheet->getStyle(numToAlpha($footerIndex + 2) . $i)->applyFromArray($footerStyle);
                    $sheet->getStyle(numToAlpha($footerIndex + 2) . $i)->getNumberFormat()->setFormatCode('0.000');
                } else {
                    $sheet->setCellValueExplicit(numToAlpha($footerIndex + 2) . $i, '', PHPExcel_Cell_DataType::TYPE_STRING);
                }
                $footerIndex++;
            }
        }
        
        $sheet->freezePane('A'.($startRowIndex + 1));
        
        foreach (range(0, $headerCount) as $columnID) {
            $sheet->getColumnDimensionByColumn($columnID)->setAutoSize(true);
        }
        
        $sheet->getStyle('A'.$startRowIndex.':' . numToAlpha($headerCount + 1) . $startRowIndex)->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'wrap' => true
                ),
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ),
                'fill' => array(
                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                    'color' => array('rgb' => '74ad42')
                )
            )
        );
        
        try {
            header('Pragma: no-cache');
            header('Expires: 0');
            header('Set-Cookie: fileDownload=true; path=/');
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');
            header('Content-Disposition: attachment;filename="' . $listName . ' - ' . Date::currentDate('YmdHi') . '.xlsx"');
            header('Content-Transfer-Encoding: binary');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            ob_end_clean();
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save('php://output');
            
        } catch (Exception $e) {
            
            header('Pragma: no-cache');
            header('Expires: 0');
            header('Set-Cookie: fileDownload=false; path=/');
            echo $e->getMessage(); 
        }
        
        exit;
    }    
    
    public function detailWidgetByView($methodId, $widgetCode, $configRow, $fillParamData) {
        
        $lowerKey = $configRow['lowerParamName'];

        if (isset($fillParamData[$lowerKey]) && $fillParamData[$lowerKey]) {
            
            $firstKey = key($fillParamData[$lowerKey]);
            
            if (!is_numeric($firstKey)) {
                $fillData = array($fillParamData[$lowerKey]);
            } else {
                $fillData = $fillParamData[$lowerKey];
            }
            
            $result = '';
            $childParams = $configRow['data'];

            if ($childParams) {
                
                $widgetDataList = array();
                $widgetDataTmplt = Mdwidget::widgetDataTemplate($widgetCode);

                foreach ($fillData as $fillRow) {

                    $widgetData = $widgetDataTmplt;

                    foreach ($childParams as $childParam) {

                        if ($childParam['THEME_POSITION_NO']) {

                            foreach ($widgetDataTmplt as $posKey => $posVal) {

                                if (isset($fillRow[$childParam['LOWER_PARAM_NAME']]) && isset($widgetDataTmplt['position'.$childParam['THEME_POSITION_NO']])) {

                                    if (!is_array($posVal)) {
                                        
                                        $widgetData['position' . $childParam['THEME_POSITION_NO']] = $fillRow[$childParam['LOWER_PARAM_NAME']];
                                        
                                    } else {
                                        $childs = self::groupParamsData($methodId, $childParam['ID']);

                                        if ($childs) {

                                            $childWidgetTmplt = $widgetDataTmplt['position'.$childParam['THEME_POSITION_NO']][0];
                                            $childDatas = $fillRow[$childParam['LOWER_PARAM_NAME']];
                                            $widgetData['position' . $childParam['THEME_POSITION_NO']] = array();

                                            foreach ($childDatas as $childData) {

                                                $childWidgetData = $childWidgetTmplt;

                                                foreach ($childs as $child) {

                                                    if ($child['THEME_POSITION_NO'] && isset($childData[$child['LOWER_PARAM_NAME']])) {
                                                        $childWidgetData['position' . $child['THEME_POSITION_NO']] = $childData[$child['LOWER_PARAM_NAME']];
                                                    }
                                                }

                                                $widgetData['position' . $childParam['THEME_POSITION_NO']][] = $childWidgetData;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    $widgetDataList[] = $widgetData;
                }
                
                $result = (new Mdwidget())->run(array('widgetCode' => $widgetCode, 'data' => $widgetDataList));
            }
            
        } else {
            $result = html_tag('div', array('class' => 'alert alert-info'), 'No data!');
        }
        
        return $result;
    }
    
}