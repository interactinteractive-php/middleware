var _lastSelectedIndex = '',
    _processPostParam = '',
    _processRecordId = '',
    _dvAdvancedCriteria = '',
    _processParam = {},
    _processAddonParam = {},
    _processReportTemplateArchive = {},
    _changeWfmStatusNextRowParams = {}, 
    _taskFlowParams = {},
    _taskFlowBpOpenData = {}, 
    bpOpenParamObj = [],
    _thisTagElement = undefined,
    processAlreadyLoad = false,
    _isReadLocker = false, 
    _isRunAfterProcessSave = false;

function getRowIndex(target) {
    var $tr = $(target).closest('tr.datagrid-row');
    return parseInt($tr.attr('datagrid-row-index'));
}

function loadSignScripts() {
    if (typeof callSign !== 'function') {
        $.cachedScript('middleware/assets/js/pki/sign.js');
    }
}

function callWebServiceByMeta(metaDataId, isDialog, valuePackageId, isSystemMeta, params, isRefresh, wfmStatusParams, callback, callbackAfterSave, selectedRowData, dmMetaDataId, addonJsonParam, runDefaultGet, runDefaultGetParam, htmlTag) {
    if (typeof isRefresh === 'undefined' && typeof isAppMultiTab !== 'undefined' && isAppMultiTab) {
        var $tabMainContainer = $('body').find("div.card-multi-tab > div.tabbable-line > ul.card-multi-tab-navtabs");
        if ($tabMainContainer.find("a[href='#app_tab_" + metaDataId + "']").length) {
            $tabMainContainer.find("a[href='#app_tab_" + metaDataId + "']").tab('show');
            return;
        }
    }
    if (typeof(isDialog) === 'undefined') {
        isDialog = false;
    }
    if (typeof(isSystemMeta) === 'undefined') {
        isSystemMeta = 'false';
    }

    var workSpaceId = '', workSpaceParams = '';    

    if (typeof(_thisTagElement) !== 'undefined') {
        var _thisElem = $(_thisTagElement);
        if (_thisElem.closest("div.ws-area").length > 0) {
            var wsArea = _thisElem.closest("div.ws-area");
            var workSpaceIdAttr = wsArea.attr("id").split("-");
            workSpaceId = workSpaceIdAttr[2];
            workSpaceParams = $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize();

            var menuCriteria = wsArea.find('.ws-menu ul.workspace-menu li.active a[data-criteria]');

            if (menuCriteria.length) {
                workSpaceParams = workSpaceParams + '&' + menuCriteria.attr('data-criteria');
            }
        }

        _thisTagElement = undefined;
    }
    var processParam = {
        metaDataId: metaDataId,
        isDialog: isDialog,
        isSystemMeta: isSystemMeta,
        wfmStatusParams: wfmStatusParams,
        openParams: JSON.stringify(params),
        oneSelectedRow: selectedRowData,
        dmMetaDataId: dmMetaDataId,
        workSpaceId: workSpaceId,
        workSpaceParams: workSpaceParams,
        addonJsonParam: JSON.stringify(addonJsonParam),
        runDefaultGet: (typeof runDefaultGet !== 'undefined') ? '1' : '0',
        runDefaultGetParam: runDefaultGetParam
    };

    if (_processPostParam != '' && _processPostParam != null) {
        processParam['fillDataParams'] = _processPostParam;
        if ((wfmStatusParams == '' || wfmStatusParams == null) && _processPostParam.indexOf('_processparamtowfmstatusparam') !== -1) {
            processParam['wfmStatusParams'] = _processPostParam;
        }        
        _processPostParam = '';
    }
    if (_processRecordId != '' && _processRecordId != null) {
        processParam['recordId'] = _processRecordId;
        _processRecordId = '';
    }
    
    $.ajax({
        type: 'post',
        url: 'mdwebservice/callMethodByMeta',
        data: processParam,
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            if (typeof callback !== 'function') {
                
                if (data.saveAddMode === 'testcase') {
                
                    if (typeof isTestCaseAddonScript === 'undefined') {
                        $.getScript('middleware/assets/js/addon/testcase.js').done(function() {
                            renderTestCaseProcess(this, data);
                        });
                    } else {
                        renderTestCaseProcess(this, data);
                    }            
                
                } else if (data.mode === 'dialog') {
                    var $dialogName = 'dialog-businessprocess-' + metaDataId;
                    if (!$('#' + $dialogName).length) {
                        $('<div id="' + $dialogName + '" class="display-none"></div>').appendTo('body');
                    } else {
                        $('#' + $dialogName).dialogExtend('restore');
                        Core.unblockUI();
                        return;
                    }
                    var $dialog = $('#' + $dialogName);
                    $dialog.empty().append(data.Html);

                    var hidePrintButton = '', runModeButton = '';
                    var processUniqId = data.uniqId;

                    if (typeof data.save_and_print === 'undefined') {
                        hidePrintButton = ' hide';
                    }
                    if (data.run_mode === '') {
                        runModeButton = ' hide';
                    }

                    var buttons = [{
                            text: data.run_mode,
                            class: 'btn green-meadow btn-sm bp-run-btn bp-btn-saveadd ' + runModeButton,
                            click: function(e) {
                                
                                var processForm = $dialog.find('form');
                                
                                if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                    if (bpFormValidate(processForm)) {

                                        if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                            var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                            var yes_btn = plang.get('yes_btn');
                                            var no_btn = plang.get('no_btn');
                                            var yes_btn_class = '';
                                            
                                            if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                                no_btn = plang.get('close_btn');
                                                yes_btn_class = ' d-none';
                                            }
                                            
                                            $confirmDialog.empty().append(window[processUniqId + '_note']);
                                            $confirmDialog.dialog({
                                                cache: false,
                                                resizable: false,
                                                bgiframe: true,
                                                autoOpen: false,
                                                title: window[processUniqId + '_title'],
                                                width: 370,
                                                height: "auto",
                                                modal: true,
                                                open: function() {
                                                    setTimeout(function() {
                                                        $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                    }, 100);
                                                },
                                                close: function() {
                                                    $confirmDialog.empty().dialog('destroy').remove();
                                                    uiDialogOverlayRemove();
                                                },
                                                buttons: [{
                                                        text: yes_btn,
                                                        class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                        click: function() {
                                                            if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                                PNotify.removeAll();
                                                                new PNotify({
                                                                    title: window[processUniqId + '_messageType'],
                                                                    text: window[processUniqId + '_message'],
                                                                    type: window[processUniqId + '_messageType'],
                                                                    sticker: false
                                                                });
                                                            }
                                                            callWebServiceByMetaRunMode(processForm, $dialogName, processUniqId, e.target);

                                                            $confirmDialog.dialog('close');
                                                        }
                                                    },
                                                    {
                                                        text: no_btn,
                                                        class: 'btn blue-madison btn-sm',
                                                        click: function() {
                                                            $confirmDialog.dialog('close');
                                                        }
                                                    }
                                                ]
                                            });
                                            $confirmDialog.dialog('open');
                                        } else {
                                            callWebServiceByMetaRunMode(processForm, $dialogName, processUniqId, e.target, callbackAfterSave);
                                        }

                                    } else {
                                        bpIgnoreGroupRemove(processForm);
                                    }
                                    
                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                            }
                        },
                        {
                            text: data.run_btn,
                            class: 'btn green-meadow btn-sm bp-run-btn bp-btn-save',
                            click: function(e) {
                                
                                var processForm = $dialog.find('form');
                                
                                if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                    if (bpFormValidate(processForm)) {

                                        if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                            var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                            var yes_btn = plang.get('yes_btn');
                                            var no_btn = plang.get('no_btn');
                                            var yes_btn_class = '';
                                            
                                            if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                                no_btn = plang.get('close_btn');
                                                yes_btn_class = ' d-none';
                                            }
        
                                            $confirmDialog.empty().append(window[processUniqId + '_note']);
                                            $confirmDialog.dialog({
                                                cache: false,
                                                resizable: false,
                                                bgiframe: true,
                                                autoOpen: false,
                                                title: window[processUniqId + '_title'],
                                                width: 370,
                                                height: "auto",
                                                modal: true,
                                                open: function() {
                                                    setTimeout(function() {
                                                        $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                    }, 100);
                                                },
                                                close: function() {
                                                    $confirmDialog.empty().dialog('destroy').remove();
                                                    uiDialogOverlayRemove();
                                                },
                                                buttons: [{
                                                        text: yes_btn,
                                                        class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                        click: function() {
                                                            if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                                PNotify.removeAll();
                                                                new PNotify({
                                                                    title: window[processUniqId + '_messageType'],
                                                                    text: window[processUniqId + '_message'],
                                                                    type: window[processUniqId + '_messageType'],
                                                                    sticker: false
                                                                });
                                                            }
                                                            callWebServiceByMetaRunAjaxSubmit(processForm, $dialogName, processUniqId, e.target, callbackAfterSave);

                                                            $confirmDialog.dialog('close');
                                                        }
                                                    },
                                                    {
                                                        text: no_btn,
                                                        class: 'btn blue-madison btn-sm',
                                                        click: function() {
                                                            $("#" + $dialogName).dialog('close');
                                                            $confirmDialog.dialog('close');
                                                        }
                                                    }
                                                ]
                                            });
                                            $confirmDialog.dialog('open');
                                        } else {
                                            callWebServiceByMetaRunAjaxSubmit(processForm, $dialogName, processUniqId, e.target, callbackAfterSave);
                                        }
                                    } else {
                                        bpIgnoreGroupRemove(processForm);
                                    }
                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                            }
                        },
                        {
                            text: data.save_and_print,
                            class: 'btn purple-plum btn-sm bp-run-btn bp-btn-saveprint ' + hidePrintButton,
                            click: function(e) {
                                
                                var processForm = $dialog.find('form');
                                
                                if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                    if (bpFormValidate(processForm)) {

                                        if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                            var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                            var yes_btn = plang.get('yes_btn');
                                            var no_btn = plang.get('no_btn');
                                            var yes_btn_class = '';

                                            if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                                no_btn = plang.get('close_btn');
                                                yes_btn_class = ' d-none';
                                            }
        
                                            $confirmDialog.empty().append(window[processUniqId + '_note']);
                                            $confirmDialog.dialog({
                                                cache: false,
                                                resizable: false,
                                                bgiframe: true,
                                                autoOpen: false,
                                                title: window[processUniqId + '_title'],
                                                width: 370,
                                                height: "auto",
                                                modal: true,
                                                open: function() {
                                                    setTimeout(function() {
                                                        $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                    }, 100);
                                                },
                                                close: function() {
                                                    $confirmDialog.empty().dialog('destroy').remove();
                                                    uiDialogOverlayRemove();
                                                },
                                                buttons: [{
                                                        text: yes_btn,
                                                        class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                        click: function() {
                                                            if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                                PNotify.removeAll();
                                                                new PNotify({
                                                                    title: window[processUniqId + '_messageType'],
                                                                    text: window[processUniqId + '_message'],
                                                                    type: window[processUniqId + '_messageType'],
                                                                    sticker: false
                                                                });
                                                            }
                                                            callWebServiceByMetaPrintAjaxSubmit(processForm, $dialogName, processUniqId, e.target, metaDataId, data.get_process_id, dmMetaDataId);

                                                            $confirmDialog.dialog('close');
                                                        }
                                                    },
                                                    {
                                                        text: no_btn,
                                                        class: 'btn blue-madison btn-sm',
                                                        click: function() {
                                                            $confirmDialog.dialog('close');
                                                        }
                                                    }
                                                ]
                                            });
                                            $confirmDialog.dialog('open');
                                        } else {
                                            callWebServiceByMetaPrintAjaxSubmit(processForm, $dialogName, processUniqId, e.target, metaDataId, data.get_process_id, dmMetaDataId);
                                        }

                                    } else {
                                        bpIgnoreGroupRemove(processForm);
                                    }

                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm bp-btn-close',
                            click: function() {
                                $dialog.parent().find('.ui-dialog-titlebar-close').click();
                                //$dialog.dialog('close');
                            }
                        }
                    ];
                    
                    if (data.hasOwnProperty('isKnowledge') && data.isKnowledge != '0') {
                        buttons.splice(0, 0, {
                            text: 'Тусламж',
                            class: 'btn btn-info btn-sm float-left bp-btn-help',
                            click: function() {
                                pfHelpDataView(data.metaDataId);
                            }
                        });
                    }

                    if (isTestServer) {
                        buttons.splice(1, 0, {
                            text: 'Тест кэйс хадгалах',
                            class: 'btn btn-danger btn-sm bp-btn-testcase float-left',
                            click: function(e) {
                                var processForm = $dialog.find('form');
                                saveBusinessProcessTestCase($(e.target), processForm);
                            }
                        });
                    }
                    
                    $dialog.dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: data.dialogWidth,
                        height: data.dialogHeight,
                        modal: true,
                        closeOnEscape: isCloseOnEscape,
                        open: function() {
                            enableScrolling();
                        },
                        close: function() {
                            removeHtmlEditorByElement($dialog);
                            $dialog.empty().dialog('destroy').remove();
                        },
                        buttons: buttons
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    if (data.dialogSize === 'fullscreen') {
                        $dialog.dialogExtend('maximize');
                    }
                    
                    $dialog.dialog('open');

                    $dialog.bind('dialogextendminimize', function() {
                        $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').addClass('display-none');
                    });
                    $dialog.bind('dialogextendmaximize', function() {
                        $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').removeClass('display-none');
                    });
                    $dialog.bind('dialogextendrestore', function() {
                        $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').removeClass('display-none');
                    });

                    Core.initBPAjax($dialog);

                } else {

                    if (data.isSystemProcess == 'true') {
                        var $viewFormMeta = $('#viewFormMeta');
                        $viewFormMeta.empty().append(data.Html);
                        Core.initBPAjax($viewFormMeta);
                        $('#renderMeta, #editFormGroup').hide();
                        $viewFormMeta.show();
                    } else {
                        if (typeof htmlTag !== 'undefined') {
                            var $viewFormMeta = $(htmlTag);
                            $viewFormMeta.empty().append(data.Html).promise().done(function() {
                                Core.initBPAjax($viewFormMeta);
                                return;
                            });
                        } else {
                            newContainerAppend(data.Html, metaDataId, data.Title);
                        }
                    }

                    $('html, body').animate({
                        scrollTop: 0
                    }, 'slow');
                }
            } else {
                callback(data);
            }

            processAlreadyLoad = false;

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function callWebServiceByMetaRunMode(processForm, $dialogName, processUniqId, etarget, callbackAfterSave) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Түр хүлээнэ үү...', boxed: true});
        },
        success: function(responseData) {

            PNotify.removeAll();
            new PNotify({
                title: responseData.status,
                text: responseData.message,
                type: responseData.status,
                addclass: pnotifyPosition,
                sticker: false
            });

            if (responseData.status === 'success') {
                if (typeof callbackAfterSave === 'function') {
                    callbackAfterSave();
                }
                bpProcessFieldClear(processForm, responseData.uniqId);
                
                var openParams = processForm.find("input[id='openParams']").val();
                var wfmStatusParams = processForm.find("input[name='wfmStatusParams']").val();                

                if (wfmStatusParams !== '') {
                    var wfmObj = new URLSearchParams(wfmStatusParams);
                    if (wfmObj && wfmObj.get('statusName')) {
                        new PNotify({
                            title: 'Success',
                            text: '<strong>'+wfmObj.get('statusName')+'</strong> төлөвт шилжлээ.',
                            type: 'success',
                            addclass: pnotifyPosition,
                            sticker: false
                        });                        
                    }
                }
            
                if (openParams !== '') {
                    openParams = JSON.parse(openParams);

                    if (openParams.hasOwnProperty('afterSaveNoAction') && openParams.afterSaveNoAction && openParams.hasOwnProperty('afterSaveNoActionFnc') && openParams.afterSaveNoActionFnc) {
                        eval(openParams.afterSaveNoActionFnc);
                    }
                }
            }

            window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
            bpIgnoreGroupRemove(processForm);

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}
function callWebServiceByMetaRunAjaxSubmit(processForm, $dialogName, processUniqId, etarget, callbackAfterSave) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
        },
        success: function(responseData) {

            PNotify.removeAll();
            new PNotify({
                title: responseData.status,
                text: responseData.message,
                type: responseData.status,
                addclass: pnotifyPosition,
                sticker: false
            });

            if (responseData.status === 'success') {

                $("#" + $dialogName).dialog('close');

                if (typeof callbackAfterSave === 'function') {
                    callbackAfterSave(responseData);
                }
                
                var openParams = processForm.find("input[id='openParams']").val();
                var wfmStatusParams = processForm.find("input[name='wfmStatusParams']").val();

                if (wfmStatusParams !== '') {
                    var wfmObj = new URLSearchParams(wfmStatusParams);
                    if (wfmObj && wfmObj.get('statusName')) {
                        new PNotify({
                            title: 'Success',
                            text: '<strong>'+wfmObj.get('statusName')+'</strong> төлөвт шилжлээ.',
                            type: 'success',
                            addclass: pnotifyPosition,
                            sticker: false
                        });                        
                    }
                }                
            
                if (openParams !== '') {
                    openParams = JSON.parse(openParams);

                    if (openParams.hasOwnProperty('afterSaveNoAction') && openParams.afterSaveNoAction && openParams.hasOwnProperty('afterSaveNoActionFnc') && openParams.afterSaveNoActionFnc) {
                        eval(openParams.afterSaveNoActionFnc);
                    }
                }
            } 
            
            window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
            bpIgnoreGroupRemove(processForm);
            
            Core.unblockUI();
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}
function callWebServiceByMetaPrintAjaxSubmit(processForm, $dialogName, processUniqId, etarget, metaDataId, processId, templateId, dmMetaDataId) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();
            new PNotify({
                title: responseData.status,
                text: responseData.message,
                type: responseData.status,
                addclass: pnotifyPosition,
                sticker: false
            });

            if (responseData.status === 'success') {
                bpProcessFieldClear(processForm, responseData.uniqId);
                
                var openParams = processForm.find("input[id='openParams']").val();
                var wfmStatusParams = processForm.find("input[name='wfmStatusParams']").val();

                if (wfmStatusParams !== '') {
                    var wfmObj = new URLSearchParams(wfmStatusParams);
                    if (wfmObj && wfmObj.get('statusName')) {
                        new PNotify({
                            title: 'Success',
                            text: '<strong>'+wfmObj.get('statusName')+'</strong> төлөвт шилжлээ.',
                            type: 'success',
                            addclass: pnotifyPosition,
                            sticker: false
                        });                        
                    }
                }                
            
                if (openParams !== '') {
                    openParams = JSON.parse(openParams);

                    if (openParams.hasOwnProperty('afterSaveNoAction') && openParams.afterSaveNoAction && openParams.hasOwnProperty('afterSaveNoActionFnc') && openParams.afterSaveNoActionFnc) {
                        eval(openParams.afterSaveNoActionFnc);
                    }
                }

                if (responseData.rowId !== '') {
                    processPrintPreview($(etarget), metaDataId, responseData.rowId, processId, responseData.resultData, templateId);
                }
            }

            window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
            bpIgnoreGroupRemove(processForm);

            Core.unblockUI();
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}
function newContainerAppend(htmlContent, metaDataId, title) {

    if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab) {

        if (typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab && processAlreadyLoad) {
            appMultiTabByContent({ metaDataId: metaDataId, title: title, type: 'process', content: htmlContent });
        } else {
            appMultiTabBusinessProcess(htmlContent, metaDataId, title);
        }

        return;
    }

    var pageContent = $("div.pf-header-main-content:first");

    if ($.trim(pageContent.html()) === '') {

        pageContent.append('<div class="col-md-12 second-content-">' +
            '<div class="vr-workspace-theme card light shadow">' +
            '<div class="card-body">' +
            htmlContent +
            '</div>' +
            '</div>' +
            '</div>').promise().done(function() {
            Core.initBPAjax(pageContent.find("div.second-content-"));
            pageContent.find("div.second-content-").find("a.bp-btn-back").remove();
        });

    } else {

        var firstContent = $("div:not(div[class*='second-content-']):eq(0)", pageContent);
        firstContent.addClass("display-none first-content-");

        if ($("div.second-content-", pageContent).length > 0) {
            pageContent.find("div.second-content-").empty().removeClass("display-none").show();
            pageContent.find("div.second-content-").append('<div class="vr-workspace-theme card light shadow">' +
                '<div class="card-body">' +
                htmlContent +
                '</div>' +
                '</div>').promise().done(function() {
                Core.initAjax(pageContent.find("div.second-content-"));
                pageContent.find("div.second-content-").find("a.bp-btn-back").remove();
            });
        } else {
            pageContent.append('<div class="col-md-12 second-content-">' +
                '<div class="vr-workspace-theme card light shadow">' +
                '<div class="card-body">' +
                htmlContent +
                '</div>' +
                '</div>' +
                '</div>').promise().done(function() {
                Core.initAjax(pageContent.find("div.second-content-"));
                pageContent.find("div.second-content-").find("a.bp-btn-back").remove();
            });
        }
    }

    $(".scroll-to-top").trigger("click");
}

function backFirstContent(elem) {
    if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab) {

        var $this = $(elem);

        if (typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab &&
            typeof $this.attr('data-dm-id') !== 'undefined' && $this.attr('data-dm-id') != '') {

            var $appTab = $this.closest("div[id*='app_tab_']");
            var dmId = $this.attr('data-dm-id');

            var appTabId = $appTab.attr('id');
            var $li = $('body').find("a[href='#" + appTabId + "']").closest('li');

            $appTab.empty().remove();
            $li.remove();

            var dmAppTabId = $('body').find("#object-value-list-" + dmId).closest("div[id*='app_tab_']").attr('id');
            $('body').find("a[href='#" + dmAppTabId + "']").tab('show');

        } else {
            var $container = $this.closest(".dv-process");
            $container.empty().hide();
            $container.closest(".tab-pane").find("div.row:eq(0)").show();
            $container.closest(".tab-pane").find("div.main-dataview-container").show();
        }

        $(window).trigger('resize');
        return;
    }

    var $pageContent = $("div.pf-header-main-content:first");
    $(".second-content-", $pageContent).addClass("display-none").hide();
    $(".first-content-", $pageContent).removeClass("display-none").show();
    $(window).trigger('resize');
}

function commonMetaDataGrid(chooseType, elem, params, funcName, _this) {
    var funcName = typeof funcName === 'undefined' ? 'selectableCommonMetaDataGrid' : funcName;
    var _this = typeof _this === 'undefined' ? '' : _this;
    var $dialogName = 'dialog-commonmetadata';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdmetadata/metaDataSelectableGrid',
        data: { chooseType: chooseType, params: params },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1220,
                height: 'auto',
                modal: true,
                close: function() {
                    $dialog.empty().dialog('close');
                },
                buttons: [{
                        text: data.addbasket_btn,
                        class: 'btn green-meadow btn-sm float-left',
                        click: function() {
                            basketCommonMetaDataGrid();
                        }
                    },
                    {
                        text: data.choose_btn,
                        class: 'btn blue btn-sm datagrid-common-choose-btn',
                        click: function() {
                            if (typeof(window[funcName]) === 'function') {
                                window[funcName](chooseType, elem, params, _this);
                            } else {
                                alert('Function undefined error: ' + funcName);
                            }
                            var countBasketList = $('#commonBasketMetaDataGrid').datagrid('getData').total;
                            if (countBasketList > 0) {
                                $dialog.dialog('close');
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');
            Core.unblockUI();
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function commonMetaDataSelectableGrid(chooseType, params, elem) {

    var $this = $(elem);
    var $parent = $this.closest('.meta-autocomplete-wrap');
    var $params = $parent.attr('data-params');
    var $dialogName = 'dialog-commonmetadata';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);
    var $hidden = $parent.find("input[type='hidden']");

    $.ajax({
        type: 'post',
        url: 'mdmetadata/metaDataSelectableGrid',
        data: { chooseType: chooseType, params: $params, selectedId: $hidden.val() },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1220,
                height: "auto",
                modal: true,
                open: function() {
                    disableScrolling();
                },
                close: function() {
                    enableScrolling();
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.addbasket_btn,
                        class: 'btn green-meadow btn-sm float-left',
                        click: function() {
                            basketCommonMetaDataGrid();
                        }
                    },
                    {
                        text: data.choose_btn,
                        class: 'btn blue btn-sm',
                        click: function() {

                            var countBasketList = $('#commonBasketMetaDataGrid').datagrid('getData').total;

                            if (countBasketList > 0) {

                                var selectedRow = $('#commonBasketMetaDataGrid').datagrid('getRows')[0];

                                $hidden.val(selectedRow.META_DATA_ID);
                                $parent.find("#_displayField").val(selectedRow.META_DATA_CODE).attr('title', selectedRow.META_DATA_CODE);
                                $parent.find("#_nameField").val(selectedRow.META_DATA_NAME).attr('title', selectedRow.META_DATA_NAME);

                                $hidden.trigger('change');

                                $dialog.dialog('close');
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function callReportByMeta(reportModelId) {
    var $dialogName = 'dialog-metareportmodel';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'rmreport/report',
        data: { reportModelId: reportModelId },
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: 'Report',
                width: 1250,
                minWidth: 1250,
                height: "auto",
                modal: false,
                close: function() {
                    $("#" + $dialogName).empty().dialog('close');
                },
                buttons: [{
                    text: 'Хаах',
                    class: 'btn btn-primary btn-sm',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax();
    });
}

function callDashboardByMeta(metaDataId) {
    var $dialogName = 'dialog-metadashboard';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mdmetadata/dashboard',
        data: { metaDataId: metaDataId },
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: 'Dashboard',
                width: 800,
                minWidth: 800,
                height: "auto",
                modal: false,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $("#" + $dialogName).empty().dialog('close');
                },
                buttons: [{
                    text: 'Хаах',
                    class: 'btn btn-primary btn-sm',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            });
            $("#" + $dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($("#" + $dialogName));
    });
}

function dataViewSelectableGrid(metaDataCode, processMetaDataId, lookupMetaDataId, chooseType, paramRealPath, elem, funcName) {
    var $this = $(elem), 
        params = '',
        linkedPopup = '',
        isGridShow = 'true',
        chooseType = (chooseType == '') ? 'single' : chooseType, 
        selectedRowData = {}, 
        isWithPopupCombo = $this.hasClass('bp-field-with-popup-combo'), 
        isCodeWithPhoto = $this.hasClass('pf-codewithphoto-popup');

    if (!isWithPopupCombo) {
        
        if (isCodeWithPhoto) {
            
            var $parent = $this.closest('.pf-codewithphoto-parent');    
            var $thisHidden = $parent.find('input');
            var selectedRows = $this.serializeArray();

            if ($this.attr('readonly') && $this.val() == '') {
                return;
            } else if ($this.attr('readonly') && $this.val() != '') {
                isGridShow = 'false';
            }

            if ((chooseType == 'single' || chooseType == 'singlealways') &&
                $this.val() != '' &&
                $this.hasAttr('data-row-data') &&
                $this.attr('data-row-data') != '') {

                selectedRowData = dataViewSelectedRowsResolver(JSON.parse($this.attr('data-row-data')));
            }
            
        } else {
            var $parent = $this.closest('div.meta-autocomplete-wrap');    
            var $thisHidden = $parent.find('input[type="hidden"]');
            var selectedRows = $thisHidden.serializeArray();

            if ($parent.find("input[id*='_displayField']").attr('readonly') && $thisHidden.val() == '') {
                return;
            } else if ($parent.find("input[id*='_displayField']").attr('readonly') && $thisHidden.val() != '') {
                isGridShow = 'false';
            }

            if ((chooseType == 'single' || chooseType == 'singlealways') &&
                $thisHidden.val() != '' &&
                $thisHidden.hasAttr('data-row-data') &&
                $thisHidden.attr('data-row-data') != '') {

                selectedRowData = dataViewSelectedRowsResolver(JSON.parse($thisHidden.attr('data-row-data')));
            }
        }
    
    } else {
        
        var $parent = $this.closest('.input-group'), $thisHidden = $this, selectedRows = {};
        var selectedOption = $thisHidden.select2('data');

        if (selectedOption) {
            var rowObj = {};
            for (var key in selectedOption) {
                rowObj = {};
                rowObj['value'] = selectedOption[key]['id'];
                selectedRows[key] = rowObj;
            }
        }
    }

    if (typeof $thisHidden.attr('data-in-param') !== 'undefined' && $thisHidden.attr('data-in-param') != '' && typeof $thisHidden.attr('data-in-lookup-param') !== 'undefined') {

        var _inputParam = $thisHidden.attr('data-in-param').split('|');
        var _lookupParam = $thisHidden.attr('data-in-lookup-param').split('|');
        var isBPDtlTbl = $this.closest('table').hasClass('bprocess-table-dtl');

        if ($parent.closest('.popup-parent-tag').length) {
            var $parentForm = $parent.closest('.popup-parent-tag');
        } else {
            var $parentForm = $this.closest('form');

            if ($parentForm.attr('id') == 'default-criteria-form') {
                $parentForm = $parentForm.closest('.main-dataview-container').find('form');
            } else if ($parentForm.closest('.selectable-dataview-grid').length) {
                $parentForm = $parentForm.closest('.selectable-dataview-grid').find('form');
            }
        }

        for (var i = 0; i < _inputParam.length; i++) {
            if (isBPDtlTbl) {
                if ($this.closest('tr').find("[data-path='" + _inputParam[i] + "']").length) {
                    var paramsVal = $this.closest('tr').find("[data-path='" + _inputParam[i] + "']");
                } else if ($this.closest('table').closest('tr').find("[data-path='" + _inputParam[i] + "']").length) {
                    var paramsVal = $this.closest('table').closest('tr').find("[data-path='" + _inputParam[i] + "']");
                } else {
                    var paramsVal = $parentForm.find("[data-path='" + _inputParam[i] + "']");
                }
            } else {
                var paramsVal = $parentForm.find("[data-path='" + _inputParam[i] + "']");
            }

            if (paramsVal.length) {
                var paramVal = '';

                if (paramsVal.prop('tagName') == 'SELECT') {
                    if (paramsVal.hasClass('select2')) {
                        paramVal = paramsVal.select2('val');
                    } else {
                        paramVal = paramsVal.val();
                    }
                } else {
                    if (paramsVal.length > 1) {

                        _lookupParam[i] = _lookupParam[i] + '[]';
                        paramVal = paramsVal.map(function() { return this.value; }).get().join(',');

                    } else if (paramsVal.hasClass('bigdecimalInit')) {
                        paramVal = paramsVal.autoNumeric('get');
                    } else {
                        paramVal = paramsVal.val();
                    }
                }

                linkedPopup = 'OK';
                params += _lookupParam[i] + '=' + paramVal + '&';
            }
        }
    }
    if (typeof $thisHidden.attr('data-criteria-param') !== 'undefined' && $thisHidden.attr("data-criteria-param") != '') {
        var paramsPathArr = $thisHidden.attr('data-criteria-param').split('|');
        for (var i = 0; i < paramsPathArr.length; i++) {
            var fieldPathArr = paramsPathArr[i].split('@');
            var fieldPath = fieldPathArr[0];
            var inputPath = fieldPathArr[1];
            var fieldValue = '';

            if ($("[data-path='" + fieldPath + "']", $this.closest('div.xs-form')).length > 0) {
                fieldValue = getBpRowParamNum($this.closest('div.xs-form'), elem, fieldPath);
            } else if ($("[data-path='" + fieldPath + "']", $this.closest('form')).length > 0) {
                fieldValue = getBpRowParamNum($this.closest('form'), elem, fieldPath);
            } else if ($this.closest('.popup-parent-tag').length) {
                fieldValue = getBpRowParamNum($this.closest('.popup-parent-tag'), elem, fieldPath);
            } else {
                var fieldPath2 = fieldPath.split('.')
                var dtlCode = fieldPath2[0].toLowerCase().trim();
                var $table = $this.closest('form').find("table[data-table-path='kpiDmDtl']:eq(0)");
                var $getRow = $table.find("> tbody > tr[data-dtl-code='"+dtlCode+"']");
            
                if ($getRow.length) {
                    var factName = fieldPath2[1].trim();
                    var groupPath = $table.attr('data-group-path');
                    
                    if (groupPath) {
                        fieldValue = $getRow.find('[data-path="'+groupPath+'kpiDmDtl.'+factName+'"]:eq(0)').val();
                    } else {
                        fieldValue = $getRow.find('[data-path="kpiDmDtl.'+factName+'"]:eq(0)').val();
                    }      
                } else {             
                    fieldValue = fieldPath;
                }
            }

            params += inputPath + '=' + fieldValue + '&';
        }
    }
    if (typeof $thisHidden.attr('data-criteria') !== 'undefined' && $thisHidden.attr('data-criteria') != '') {
        params += $thisHidden.attr('data-criteria') + '&';
    }
    if (typeof $this.attr('data-criteria') !== 'undefined' && $this.attr('data-criteria') != '') {
        params += $this.attr('data-criteria') + '&';
    }
    if ($thisHidden.hasAttr('data-idwithcomma') && $thisHidden.attr('data-idwithcomma') == '1') {
        var commaPath = $thisHidden.attr('data-path'), 
            $commaForm = $this.closest('.main-action-meta').find('.dialog-dv-onlysearchform[data-spath="'+commaPath+'"] form');
        if ($commaForm.length) {
            params += $commaForm.serialize() + '&param[autoSearch]=1&';
        }
    }

    if (params != '') {
        linkedPopup = 'OK';
        params = params + 'autoSearch=1';
    }

    var printCopiesParams = '';
    if ($parent.find('input[data-print-copies]').length) {
        $parent.find('input[data-print-copies]').each(function() {
            var $pcField = $(this);
            printCopiesParams += $pcField.val() + '=' + $pcField.attr('data-print-copies') + '&';
        });
    }

    var $dialogName = 'dialog-dataview-selectable-' + lookupMetaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdmetadata/dataViewSelectableGrid',
        data: {
            metaDataId: lookupMetaDataId,
            chooseType: chooseType,
            processMetaDataId: processMetaDataId,
            paramRealPath: paramRealPath,
            selectedRows: selectedRows,
            params: encodeURIComponent(params),
            linkedPopup: linkedPopup,
            isGridShow: isGridShow,
            selectedRowData: selectedRowData,
            printCopiesParams: printCopiesParams
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            $dialog.empty().append(data.Html);

            if (typeof data.addbasket_btn !== 'undefined') {
                $dialog.dialog({
                    cache: false,
                    resizable: false,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: typeof data.Width !== 'undefined' ? data.Width : '1200',
                    height: typeof data.Height !== 'undefined' ? data.Height : 'auto',
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        enableScrolling();
                        $dialog.empty().dialog('destroy').remove();
                        
                        var $prevDataGridElem = $('#objectdatagrid-' + lookupMetaDataId);
                        
                        if ($prevDataGridElem.length) {
                            window['objectdatagrid_' + lookupMetaDataId] = $prevDataGridElem;
                        }
                    },
                    buttons: [{
                            text: data.addbasket_btn,
                            class: 'btn green-meadow btn-sm float-left',
                            click: function() {
                                window['basketCommonSelectableDataGrid_' + lookupMetaDataId]();
                            }
                        },
                        {
                            text: data.choose_btn,
                            class: 'btn blue btn-sm datagrid-choose-btn',
                            click: function() {

                                Core.blockUI({message: 'Loading...', boxed: true});
                                
                                if (!isCodeWithPhoto) {
                                    
                                    var $getFirstHidden = $parent.find("input[type=hidden]:first");
                                    var getFirstHiddenId = $getFirstHidden.attr("id");
                                    var getFirstHiddenDataPath = $getFirstHidden.attr("data-path");
                                    var getFirstHiddenName = $getFirstHidden.attr("name");
                                    var getFirstHiddenClass = typeof $getFirstHidden.attr("class") !== 'undefined' ? $getFirstHidden.attr("class") : '';
                                    var getFirstHiddenOutParam = typeof $getFirstHidden.attr("data-out-param") !== 'undefined' ? $getFirstHidden.attr("data-out-param") : '';
                                    var getFirstHiddenInParam = typeof $getFirstHidden.attr("data-in-param") !== 'undefined' ? $getFirstHidden.attr("data-in-param") : '';
                                    var getFirstHiddenOutGroup = typeof $getFirstHidden.attr("data-out-group") !== 'undefined' ? $getFirstHidden.attr("data-out-group") : '';
                                    var getFirstHiddenCriteria = typeof $getFirstHidden.attr("data-criteria") !== 'undefined' ? $getFirstHidden.attr("data-criteria") : '';
                                    var getFirstHiddenCriteriaParam = typeof $getFirstHidden.attr("data-criteria-param") !== 'undefined' ? $getFirstHidden.attr("data-criteria-param") : '';
                                    var getFirstHiddenLookupParam = typeof $getFirstHidden.attr("data-in-lookup-param") !== 'undefined' ? $getFirstHidden.attr("data-in-lookup-param") : '';

                                    $parent.find("input[type=hidden]").remove();
                                    $parent.find("div.input-group").prepend('<input type="hidden" data-criteria="' + getFirstHiddenCriteria + '" data-criteria-param="' + getFirstHiddenCriteriaParam + '" name="' + getFirstHiddenName + '" id="' + getFirstHiddenId + '" data-path="' + getFirstHiddenDataPath + '" class="' + getFirstHiddenClass + '" data-out-param="' + getFirstHiddenOutParam + '" data-in-param="' + getFirstHiddenInParam + '" data-out-group="' + getFirstHiddenOutGroup + '" data-in-lookup-param="' + getFirstHiddenLookupParam + '">');
                                    $parent.find("input[id='" + metaDataCode + "_displayField']").val('').attr('title', '');
                                    $parent.find("input[id='" + metaDataCode + "_nameField']").val('').attr('title', '');
                                    
                                } else {
                                    $parent.find('.pf-codewithphoto-input').val('').attr('title', '');
                                    $parent.find('img').attr({'title': '', 'src': ''}).on('error', function(){ onUserImgError(this); });
                                }

                                var countBasketList = $('#commonSelectableBasketDataGrid_' + lookupMetaDataId).datagrid('getData').total;
                                
                                if (countBasketList > 0) {
                                    var rows = dataViewSelectedRowsResolver($('#commonSelectableBasketDataGrid_' + lookupMetaDataId).datagrid('getRows'));
                                    var isMetaGroup = true;

                                    if (typeof funcName === 'undefined') {
                                        selectableObjectDataGrid(metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                    } else {
                                        window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                    }
                                    
                                } else if (chooseType === 'single' || chooseType == 'singlealways') {
                                    
                                    var mainGrid = $('#objectdatagrid_' + lookupMetaDataId).datagrid('getSelections');
                                    
                                    if (mainGrid.length > 0) {
                                        
                                        var rows = mainGrid, isMetaGroup = true;

                                        if (typeof funcName === 'undefined') {
                                            selectableObjectDataGrid(metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                        } else {
                                            window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                        }
                                        
                                    } else {
                                        if (typeof funcName !== 'undefined') {
                                            window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                        }
                                    }
                                    
                                } else if (chooseType === 'multi') {
                                    
                                    if (typeof funcName !== 'undefined') {
                                        var isMetaGroup = true;
                                        window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                    }
                                }
                                
                                $dialog.dialog('close');
                                Core.unblockUI();
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-hoki btn-sm',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }
                    ]
                });

            } else {

                $dialog.dialog({
                    cache: false,
                    resizable: false,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    position: { my: 'top', at: 'top+50' },
                    width: 1200,
                    height: "auto",
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        enableScrolling();
                        $dialog.empty().dialog('destroy').remove();
                        
                        var $prevDataGridElem = $('#objectdatagrid-' + lookupMetaDataId);
                        
                        if ($prevDataGridElem.length) {
                            window['objectdatagrid_' + lookupMetaDataId] = $prevDataGridElem;
                        }
                    },
                    buttons: [{
                            text: plang.get('choose_btn'),
                            class: 'btn blue btn-sm datagrid-choose-btn',
                            click: function() {

                                Core.blockUI({message: 'Loading...', boxed: true});

                                var $getFirstHidden = $parent.find("input[type=hidden]:first");
                                var getFirstHiddenId = $getFirstHidden.attr("id");
                                var getFirstHiddenDataPath = $getFirstHidden.attr("data-path");
                                var getFirstHiddenName = $getFirstHidden.attr("name");
                                var getFirstHiddenClass = typeof $getFirstHidden.attr("class") !== 'undefined' ? $getFirstHidden.attr("class") : '';
                                var getFirstHiddenOutParam = typeof $getFirstHidden.attr("data-out-param") !== 'undefined' ? $getFirstHidden.attr("data-out-param") : '';
                                var getFirstHiddenInParam = typeof $getFirstHidden.attr("data-in-param") !== 'undefined' ? $getFirstHidden.attr("data-in-param") : '';
                                var getFirstHiddenOutGroup = typeof $getFirstHidden.attr("data-out-group") !== 'undefined' ? $getFirstHidden.attr("data-out-group") : '';
                                var getFirstHiddenCriteria = typeof $getFirstHidden.attr("data-criteria") !== 'undefined' ? $getFirstHidden.attr("data-criteria") : '';
                                var getFirstHiddenCriteriaParam = typeof $getFirstHidden.attr("data-criteria-param") !== 'undefined' ? $getFirstHidden.attr("data-criteria-param") : '';
                                var getFirstHiddenLookupParam = typeof $getFirstHidden.attr("data-in-lookup-param") !== 'undefined' ? $getFirstHidden.attr("data-in-lookup-param") : '';

                                $parent.find("input[type=hidden]").remove();
                                $parent.find("div.input-group").prepend('<input type="hidden" data-criteria="' + getFirstHiddenCriteria + '" data-criteria-param="' + getFirstHiddenCriteriaParam + '" name="' + getFirstHiddenName + '" id="' + getFirstHiddenId + '" data-path="' + getFirstHiddenDataPath + '" class="' + getFirstHiddenClass + '" data-out-param="' + getFirstHiddenOutParam + '" data-in-param="' + getFirstHiddenInParam + '" data-out-group="' + getFirstHiddenOutGroup + '" data-in-lookup-param="' + getFirstHiddenLookupParam + '">');
                                $parent.find("input[id='" + metaDataCode + "_displayField']").val('').attr('title', '');
                                $parent.find("input[id='" + metaDataCode + "_nameField']").val('').attr('title', '');

                                var countBasketList = window['_selectedRows_' + lookupMetaDataId].length;
                                
                                if (countBasketList > 0) {
                                    var rows = window['_selectedRows_' + lookupMetaDataId];
                                    var isMetaGroup = true;

                                    if (typeof funcName === 'undefined') {
                                        selectableObjectDataGrid(metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                    } else {
                                        window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                    }
                                    
                                } else if (chooseType === 'single' || chooseType == 'singlealways') {
                                    try {
                                        var mainGrid = $('#objectdatagrid-' + lookupMetaDataId).datagrid('getSelections');

                                        if (mainGrid.length > 0) {
                                            var rows = mainGrid, isMetaGroup = true;

                                            if (typeof funcName === 'undefined') {
                                                selectableObjectDataGrid(metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                            } else {
                                                window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                            }
                                        }
                                    } catch (e) {
                                        console.log(e);
                                    }
                                } else if (chooseType === 'multi') {
                                    
                                    if (typeof funcName !== 'undefined') {
                                        var isMetaGroup = true;
                                        window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup);
                                    }
                                }
                                
                                $dialog.dialog('close');
                                Core.unblockUI();
                            }
                        },
                        {
                            text: plang.get('close_btn'),
                            class: 'btn blue-hoki btn-sm',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }
                    ]
                });
            }

            $dialog.dialog('open');
            $dialog.css('overflow-x', 'hidden');
            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    }).done(function() {
        Core.initDVAjax($dialog.find('form'));
    });
}

function dataViewSelectableComboGrid(metaDataCode, processMetaDataId, lookupMetaDataId, chooseType, paramRealPath, elem, funcName) {
    var $this = $(elem), 
        params = '',
        linkedPopup = '',
        isGridShow = 'true',
        chooseType = (chooseType == '') ? 'single' : chooseType, 
        selectedRowData = {}, 
        isWithPopupCombo = $this.hasClass('bp-field-with-popup-combo'), 
        isCodeWithPhoto = $this.hasClass('pf-codewithphoto-popup');

    if ($this.prop('readonly')) return;

    if (!isWithPopupCombo) {
        
        if (isCodeWithPhoto) {
            
            var $parent = $this.closest('.pf-codewithphoto-parent');    
            var $thisHidden = $parent.find('input');
            var selectedRows = $this.serializeArray();

            if ($this.attr('readonly') && $this.val() == '') {
                return;
            } else if ($this.attr('readonly') && $this.val() != '') {
                isGridShow = 'false';
            }

            if ((chooseType == 'single' || chooseType == 'singlealways') &&
                $this.val() != '' &&
                $this.hasAttr('data-row-data') &&
                $this.attr('data-row-data') != '') {

                selectedRowData = dataViewSelectedRowsResolver(JSON.parse($this.attr('data-row-data')));
            }
            
        } else {
            var $parent = $this.closest('div.meta-autocomplete-wrap');    
            var $thisHidden = $parent.find('input[type="hidden"]');
            var selectedRows = $thisHidden.serializeArray();

            if ($parent.find("input[id*='_displayField']").attr('readonly') && $thisHidden.val() == '') {
                return;
            } else if ($parent.find("input[id*='_displayField']").attr('readonly') && $thisHidden.val() != '') {
                isGridShow = 'false';
            }

            if ((chooseType == 'single' || chooseType == 'singlealways') &&
                $thisHidden.val() != '' &&
                $thisHidden.hasAttr('data-row-data') &&
                $thisHidden.attr('data-row-data') != '') {

                selectedRowData = dataViewSelectedRowsResolver(JSON.parse($thisHidden.attr('data-row-data')));
            }
        }
    
    } else {
        
        var $parent = $this.closest('.input-group'), $thisHidden = $this, selectedRows = {};
        var selectedOption = $thisHidden.select2('val');
        
        if (selectedOption) {
            var rowObj = {};
            for (var key in selectedOption) {
                rowObj = {};
                rowObj['value'] = selectedOption[key];
                selectedRows[key] = rowObj;
            }
        }
    }

    if (typeof $thisHidden.attr('data-in-param') !== 'undefined' && $thisHidden.attr('data-in-param') != '' && typeof $thisHidden.attr('data-in-lookup-param') !== 'undefined') {

        var _inputParam = $thisHidden.attr('data-in-param').split('|');
        var _lookupParam = $thisHidden.attr('data-in-lookup-param').split('|');
        var isBPDtlTbl = $this.closest('table').hasClass('bprocess-table-dtl');

        if ($parent.closest('.popup-parent-tag').length) {
            var $parentForm = $parent.closest('.popup-parent-tag');
        } else {
            var $parentForm = $this.closest('form');

            if ($parentForm.attr('id') == 'default-criteria-form') {
                $parentForm = $parentForm.closest('.main-dataview-container').find('form');
            } else if ($parentForm.closest('.selectable-dataview-grid').length) {
                $parentForm = $parentForm.closest('.selectable-dataview-grid').find('form');
            }
        }

        for (var i = 0; i < _inputParam.length; i++) {
            if (isBPDtlTbl) {
                if ($this.closest('tr').find("[data-path='" + _inputParam[i] + "']").length) {
                    var paramsVal = $this.closest('tr').find("[data-path='" + _inputParam[i] + "']");
                } else if ($this.closest('table').closest('tr').find("[data-path='" + _inputParam[i] + "']").length) {
                    var paramsVal = $this.closest('table').closest('tr').find("[data-path='" + _inputParam[i] + "']");
                } else {
                    var paramsVal = $parentForm.find("[data-path='" + _inputParam[i] + "']");
                }
            } else {
                var paramsVal = $parentForm.find("[data-path='" + _inputParam[i] + "']");
            }

            if (paramsVal.length) {
                var paramVal = '';

                if (paramsVal.prop('tagName') == 'SELECT') {
                    if (paramsVal.hasClass('select2')) {
                        paramVal = paramsVal.select2('val');
                    } else {
                        paramVal = paramsVal.val();
                    }
                } else {
                    if (paramsVal.length > 1) {

                        _lookupParam[i] = _lookupParam[i] + '[]';
                        paramVal = paramsVal.map(function() { return this.value; }).get().join(',');

                    } else if (paramsVal.hasClass('bigdecimalInit')) {
                        paramVal = paramsVal.autoNumeric('get');
                    } else {
                        paramVal = paramsVal.val();
                    }
                }

                linkedPopup = 'OK';
                params += _lookupParam[i] + '=' + paramVal + '&';
            }
        }
    }
    if (typeof $thisHidden.attr('data-criteria-param') !== 'undefined' && $thisHidden.attr("data-criteria-param") != '') {
        var paramsPathArr = $thisHidden.attr('data-criteria-param').split('|');
        for (var i = 0; i < paramsPathArr.length; i++) {
            var fieldPathArr = paramsPathArr[i].split('@');
            var fieldPath = fieldPathArr[0];
            var inputPath = fieldPathArr[1];
            var fieldValue = '';

            if ($("[data-path='" + fieldPath + "']", $this.closest('div.xs-form')).length > 0) {
                fieldValue = getBpRowParamNum($this.closest('div.xs-form'), elem, fieldPath);
            } else if ($("[data-path='" + fieldPath + "']", $this.closest('form')).length > 0) {
                fieldValue = getBpRowParamNum($this.closest('form'), elem, fieldPath);
            } else if ($this.closest('.popup-parent-tag').length) {
                fieldValue = getBpRowParamNum($this.closest('.popup-parent-tag'), elem, fieldPath);
            } else {
                var fieldPath2 = fieldPath.split('.')
                var dtlCode = fieldPath2[0].toLowerCase().trim();
                var $table = $this.closest('form').find("table[data-table-path='kpiDmDtl']:eq(0)");
                var $getRow = $table.find("> tbody > tr[data-dtl-code='"+dtlCode+"']");
            
                if ($getRow.length) {
                    var factName = fieldPath2[1].trim();
                    var groupPath = $table.attr('data-group-path');
                    
                    if (groupPath) {
                        fieldValue = $getRow.find('[data-path="'+groupPath+'kpiDmDtl.'+factName+'"]:eq(0)').val();
                    } else {
                        fieldValue = $getRow.find('[data-path="kpiDmDtl.'+factName+'"]:eq(0)').val();
                    }      
                } else {             
                    fieldValue = fieldPath;
                }
            }

            params += inputPath + '=' + fieldValue + '&';
        }
    }
    if (typeof $thisHidden.attr('data-criteria') !== 'undefined' && $thisHidden.attr('data-criteria') != '') {
        params += $thisHidden.attr('data-criteria') + '&';
    }
    if (typeof $this.attr('data-criteria') !== 'undefined' && $this.attr('data-criteria') != '') {
        params += $this.attr('data-criteria') + '&';
    }
    if ($thisHidden.hasAttr('data-idwithcomma') && $thisHidden.attr('data-idwithcomma') == '1') {
        var commaPath = $thisHidden.attr('data-path'), 
            $commaForm = $this.closest('.main-action-meta').find('.dialog-dv-onlysearchform[data-spath="'+commaPath+'"] form');
        if ($commaForm.length) {
            params += $commaForm.serialize() + '&param[autoSearch]=1&';
        }
    }

    if (params != '') {
        linkedPopup = 'OK';
        params = params + 'autoSearch=1';
    }

    var printCopiesParams = '';
    if ($parent.find('input[data-print-copies]').length) {
        $parent.find('input[data-print-copies]').each(function() {
            var $pcField = $(this);
            printCopiesParams += $pcField.val() + '=' + $pcField.attr('data-print-copies') + '&';
        });
    }

    //style="max-width:600px;max-height:300px;"
    var $dialogNameTooltip = 'combogrid-dataview-selectable-' + lookupMetaDataId;
    //var $appendTo = $this.closest('.meta-autocomplete-wrap');
    if (!$("#" + $dialogNameTooltip).length) {
        $('<div class="bp-dataview-tooltip ui-dialog d-none" id="' + $dialogNameTooltip + '"></div>').appendTo('body');
    }
    var $dialogTooltip = $('#' + $dialogNameTooltip);
    if ($this.closest('.ui-dialog').length) {
        $dialogTooltip.css('z-index', 102);
    }
        
    if ($dialogTooltip.is(':visible')) {
        $dialogTooltip.addClass('d-none');
        return;
    }
    $dialogTooltip.addClass('d-none');

    $.ajax({
        type: 'post',
        url: 'mdmetadata/dataViewSelectableGrid',
        data: {
            metaDataId: lookupMetaDataId,
            chooseType: chooseType,
            processMetaDataId: processMetaDataId,
            paramRealPath: paramRealPath,
            selectedRows: selectedRows,
            params: encodeURIComponent(params),
            linkedPopup: linkedPopup,
            isGridShow: isGridShow,
            selectedRowData: selectedRowData,
            printCopiesParams: printCopiesParams,
            isComboGrid: 1
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            $dialogTooltip.empty().append(data.Html+'<div id="bp-dataview-tooltip-arrow"></div>').promise().done(function() {
                Popper.createPopper(elem, $dialogTooltip[0], {
                    modifiers: [{
                        name: 'offset',
                        options: {
                          offset: [150, 4],
                        },
                    }],
                });
            });
            $dialogTooltip.removeClass('d-none');            
            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    }).done(function() {      
        $('.bp-combogrid-jsonrow-'+lookupMetaDataId).on("change", function(){
            var rows = $(this).val();
            if (rows) {
                rows = JSON.parse(rows);
                if (typeof $(this).attr('data-ismulti') === 'undefined') {
                    $dialogTooltip.addClass('d-none');
                }
                if (typeof funcName === 'undefined') {
                    selectableObjectDataGrid(metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, true, true);
                } else {
                    window[funcName](metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, true);
                }
            }
        });        
    });
}

function removeSelectableComboGrid(elem) {
    var $parent = $(elem).closest('.combogrid-between-input');
    $parent.find('.combogridInit').attr("data-row-data", "").val("").trigger('change');
    $parent.find('.combo-grid-autocomplete').val("");
}

function selectableObjectDataGrid(metaDataCode, processMetaDataId, chooseType, elem, rows, paramRealPath, lookupMetaDataId, isMetaGroup, isComboGrid) {
    $.ajax({
        type: 'post',
        url: 'mdmetadata/selectableGroupInputFills',
        data: {
            processMetaDataId: processMetaDataId,
            paramRealPath: paramRealPath,
            lookupMetaDataId: lookupMetaDataId
        },
        dataType: 'json',
        async: false,
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var controlsData;
            var displayField = data.displayField;
            var valueField = data.valueField;
            var codeField = data.codeField;
            var $this = $(elem);

            if (typeof(data.controlsData) !== 'undefined') {
                controlsData = data.controlsData;
            }

            if ($this.closest("div.bp-param-cell").length > 0) {
                var $parentCell = $this.closest("div.bp-param-cell");
                var $parentTable = $this.closest("div.xs-form");
            } else if ($this.closest("div.form-md-line-input").length > 0) {
                var $parentCell = $this.closest("div.form-md-line-input");
                var $parentTable = $this.closest("div.xs-form");
            } else {
                if ($this.closest("div.meta-autocomplete-wrap").length > 0) {
                    var $parentCell = $this.closest("div.meta-autocomplete-wrap");
                } else {
                    var $parentCell = $this.closest("td");
                }

                if ($this.closest("table.bprocess-table-dtl").length > 0) {
                    var $parentTable = $this.closest("tr");
                } else {
                    var $parentTable = $this.closest("form");
                }
            }

            if (chooseType === 'single' || chooseType === 'singlealways') {

                if (controlsData !== undefined) {
                    $.each(controlsData, function(i, v) {
                        if (typeof rows[0][v.FIELD_NAME] !== 'undefined' && metaDataCode !== v.META_DATA_CODE) {
                            var $getPathElement = $parentTable.find("[data-field-name='" + v.META_DATA_CODE + "']");
                            if ($getPathElement.length > 0) {
                                if ($getPathElement.prop("tagName") == 'SELECT') {
                                    if ($getPathElement.hasClass('select2')) {
                                        $getPathElement.trigger("select2-opening", 'notdisabled');
                                        $getPathElement.select2('val', rows[0][v.FIELD_NAME]);
                                    } else {
                                        $getPathElement.trigger('focus');
                                        $getPathElement.val(rows[0][v.FIELD_NAME]);
                                    }
                                } else if ($getPathElement.hasClass('dateInit')) {
                                    $getPathElement.datepicker('update', date('Y-m-d', strtotime(rows[0][v.FIELD_NAME])));
                                } else if ($getPathElement.hasClass('bigdecimalInit')) {
                                    $getPathElement.next("input[type=hidden]").val(setNumberToFixed(rows[0][v.FIELD_NAME]));
                                    $getPathElement.val(rows[0][v.FIELD_NAME]).trigger('change');
                                } else {
                                    $getPathElement.val(rows[0][v.FIELD_NAME]).trigger('change');
                                }
                            }
                        }
                    });
                }
                
                var isCodeWithPhoto = $this.hasClass('pf-codewithphoto-popup');
                
                if (isCodeWithPhoto) {
                    
                    var $parentCell = $this.closest('.pf-codewithphoto-parent');
                    var rowData = rows[0];
                    var $img = $parentCell.find('img');
                    
                    $parentCell.find('input').val(rowData[valueField]).attr({'title': rowData[displayField], 'data-row-data': JSON.stringify(rowData).replace(/&quot;/g, '\\&quot;')}).removeClass('error').trigger('change');
                    $img.attr('title', rowData[displayField]);
                    
                    if (rowData.hasOwnProperty('picture') && rowData.picture) {
                        $img.attr('src', rowData.picture).on('error', function(){ onUserImgError(this); });
                    }
                    
                } else {
                    
                    $parentCell.find("input[id='" + metaDataCode + "_valueField'], input[id='" + metaDataCode + "_displayField'], input[id='" + metaDataCode + "_nameField']").val('').attr('title', '').removeClass('error');

                    var codeFieldValue = rows[0][codeField];
                    if (typeof codeFieldValue !== 'undefined') {
                        $parentCell.find("input[id='" + metaDataCode + "_displayField']").val(codeFieldValue).attr('title', codeFieldValue);
                    } else {
                        $parentCell.find("input[id='" + metaDataCode + "_displayField']").val(rows[0][displayField]).attr('title', rows[0][displayField]);
                    }
                    if ($parentCell.find("input[id='" + metaDataCode + "_valueField']").hasClass('combogridInit')) {
                        $parentCell.find("input[id='" + metaDataCode + "_displayField']").val(rows[0][displayField]).attr('title', rows[0][displayField]);
                    }
                    $parentCell.find("input[id='" + metaDataCode + "_nameField']").val(rows[0][displayField]).attr('title', rows[0][displayField]);
                    $parentCell.find("input[id='" + metaDataCode + "_valueField']").attr('data-row-data', JSON.stringify(rows[0]).replace(/&quot;/g, '\\&quot;'));
                    $parentCell.find("input[id='" + metaDataCode + "_valueField']").val(rows[0][valueField]).trigger('change');

                    /**
                     * 
                     * @description Sidebar үед ашиглаж байгаа
                     * @author  Ulaankhuu Ts
                     */
                    var $selectedTR = $('table.bprocess-table-dtl tbody').find('tr.currentTarget');
                    var fieldPath = $parentCell.attr('data-section-path');
                    if ($selectedTR.find("td:last-child").find("i.input_html").find("div[data-section-path='" + fieldPath + "']").length > 0) {
                        $selectedTR.find("td:last-child").find("i.input_html").find("div[data-section-path='" + fieldPath + "']").empty().append($parentCell.html());
                    }
                }

            } else if (chooseType === 'multi' || chooseType === 'multicomma') {

                var $parent = $this.closest("div.meta-autocomplete-wrap");

                var $getFirstHidden = $parent.find("input[type=hidden]:eq(0)");
                var getFirstHiddenId = $getFirstHidden.attr("id");
                var getFirstHiddenDataPath = $getFirstHidden.attr("data-path");
                var getFirstHiddenName = $getFirstHidden.attr("name");
                var getFirstHiddenClass = $getFirstHidden.attr('class');

                $parent.find("input[id='" + metaDataCode + "_valueField']:eq(0)").val('');
                $parent.find("input[id='" + metaDataCode + "_valueField']:not(:eq(0))").remove();

                $parent.find("input[id='" + metaDataCode + "_displayField'], input[id='" + metaDataCode + "_nameField']").val('').attr('title', '');

                var multi_displayField = '', multi_codeField = '';
                var lastID = rows.length - 1;

                $.each(rows, function(key, row) {
                    
                    var jsonStr = JSON.stringify(rows[key]).replace(/&quot;/g, '\\&quot;');
                    
                    if (key == 0) {
                        
                        if (rows[key].hasOwnProperty('printcopies')) {
                            $parent.find("input[id='" + metaDataCode + "_valueField']:eq(0)").val(rows[key][valueField]).attr({'data-print-copies': rows[key]['printcopies'], 'data-row-data': jsonStr});
                        } else {
                            $parent.find("input[id='" + metaDataCode + "_valueField']:eq(0)").val(rows[key][valueField]).attr('data-row-data', jsonStr);
                        }
                        
                        multi_displayField = rows[key][displayField];
                        
                        if (typeof rows[key][codeField] !== 'undefined') {
                            multi_codeField = rows[key][codeField];
                        } else {
                            multi_codeField = rows[key][displayField];
                        }
                        
                    } else {
                        
                        if (rows[key].hasOwnProperty('printcopies')) {
                            var $html = $('<input type="hidden" name="' + getFirstHiddenName + '" class="' + getFirstHiddenClass + '" id="' + getFirstHiddenId + '" data-path="' + getFirstHiddenDataPath + '" value="' + rows[key][valueField] + '" data-print-copies="' + rows[key]['printcopies'] + '">');
                        } else {
                            var $html = $('<input type="hidden" name="' + getFirstHiddenName + '" class="' + getFirstHiddenClass + '" id="' + getFirstHiddenId + '" data-path="' + getFirstHiddenDataPath + '" value="' + rows[key][valueField] + '">');
                        }
                        
                        $html.attr('data-row-data', jsonStr);
                        
                        $parent.find("input[id='" + metaDataCode + "_valueField']:last").after($html);
                        
                        multi_displayField = multi_displayField + ', ' + rows[key][displayField];
                        if (typeof rows[key][codeField] !== 'undefined') {
                            multi_codeField = multi_codeField + ', ' + rows[key][codeField];
                        } else {
                            multi_codeField = multi_codeField + ', ' + rows[key][displayField];
                        }
                    }
                    
                    if (controlsData !== undefined) {
                        $.each(controlsData, function(i, v) {
                            if (typeof rows[key][v.FIELD_NAME] !== 'undefined' && metaDataCode !== v.META_DATA_CODE) {
                                $parentTable.find("input[data-field-name='" + v.META_DATA_CODE + "']").val(rows[key][v.FIELD_NAME]).trigger('change');
                            }
                        });
                    }

                    if (key == lastID) {
                        $parent.find("input[id='" + metaDataCode + "_displayField']").val(multi_codeField).attr('title', multi_codeField).removeClass('error');
                        $parent.find("input[id='" + metaDataCode + "_nameField']").val(multi_displayField).attr('title', multi_displayField).removeClass('error');
                        if ($parentCell.find("input[id='" + metaDataCode + "_valueField']").hasClass('combogridInit')) {
                            $parentCell.find("input[id='" + metaDataCode + "_displayField']").val(multi_displayField).attr('title', multi_displayField);
                        }                        
                        
                        //if (typeof isComboGrid === 'undefined') {
                            $parent.find("input[id='" + metaDataCode + "_valueField']:eq(0)").trigger('change');
                        //}
                    }
                });
            }
            
            Core.unblockUI();
        }
    });
}

function metaDirectURL(url, target) {
    window.open(url, target);
}

function urlRedirectByDataView(elem, processMetaDataId, url, target, dataViewId, postParams, getParams, selectedRow, wfmStatusParams, openParams) {
    var lowerTarget = target ? target.toLowerCase() : '', _dialogMode = '', _dialogView = '',
        dataType = 'html', processTitle = '';

    if (lowerTarget === '_blank') {
        var openUrl = url;
        
        if (getParams !== null && getParams !== '') {
            
            var getParamsUrl = getParams;
            
            if (typeof selectedRow !== 'undefined') {
                for (var path in selectedRow) {
                    if (selectedRow[path] != null) {
                        getParamsUrl = getParamsUrl.replace('['+path+']', selectedRow[path]);
                    } else {
                        getParamsUrl = getParamsUrl.replace('['+path+']', '');
                    }
                }
            }
            
            openUrl += getParamsUrl;
        }
        
        window.open(openUrl, target);
        
    } else {

        var paramData = [], $dvMainElement = $('#object-value-list-' + dataViewId);

        paramData.push({ name: 'dataViewId', value: dataViewId });
        paramData.push({ name: 'dataViewCode', value: $dvMainElement.attr('data-meta-code') });
        paramData.push({ name: 'folderId', value: $dvMainElement.find("input#treeFolderValue").val() });

        if (postParams !== null && postParams !== '') {
            var postParamsArr = postParams.split('&');

            for (var i = 0; i < postParamsArr.length; i++) {
                var fieldPathArr = postParamsArr[i].split('=');
                var postParam = fieldPathArr[0];
                var inputPath = fieldPathArr[1].toLowerCase();
                var fieldValue = '';

                if (typeof selectedRow !== 'undefined' && typeof inputPath !== 'undefined' && typeof selectedRow[inputPath] !== 'undefined') {
                    fieldValue = selectedRow[inputPath];
                } else if (inputPath.indexOf('[') !== -1) {
                    fieldValue = inputPath.match(/\[(.*?)\]/);
                    fieldValue = fieldValue[1];
                } else {
                    fieldValue = fieldPathArr[1];
                }
                paramData.push({ name: postParam, value: fieldValue });

                if (postParam === 'runSource' && fieldValue === 'popup') {
                    _dialogMode = 'popup';
                    dataType = 'json';
                }
                if (postParam === 'dialogView' && fieldValue === 'fullscreen') {
                    _dialogView = 'fullscreen';
                }
            }
        }
        
        if (getParams !== null && getParams !== '') {
            var getParamsArr = getParams.split('&');

            for (var i = 0; i < getParamsArr.length; i++) {
                var fieldPathArr = getParamsArr[i].split('=');
                var getParam = fieldPathArr[0];
                var inputPath = fieldPathArr[1];

                paramData.push({ name: getParam, value: inputPath });
            }
        }

        var urlLower = url.toLowerCase();
        
        if (urlLower == 'mdgl/clearingtrans' || urlLower == 'mdgl/cashrate' ||
            urlLower == 'mdgl/billrate' || urlLower == 'billratefromgllist' || urlLower == 'mdgl/billrate2') {
            $.ajax({
                url: "assets/custom/addon/plugins/datatables/media/js/jquery.dataTables.min.js",
                dataType: "script",
                cache: true,
                async: false,
                beforeSend: function() {
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.css"/>');
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/datatables/extensions/FixedColumns/css/dataTables.fixedColumns.min.css"/>');
                }
            }).done(function() {
                $.ajax({
                    url: "assets/custom/addon/plugins/datatables/extensions/FixedColumns/js/dataTables.fixedColumns.min.js",
                    dataType: "script",
                    cache: true,
                    async: false
                });
                $.ajax({
                    url: "assets/custom/addon/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js",
                    dataType: "script",
                    cache: true,
                    async: false
                });
                $.ajax({
                    url: "middleware/assets/js/mdgl.js",
                    dataType: "script",
                    cache: true,
                    async: false
                });
            });

        } else if (urlLower == 'connectgeneralledger') {

            var $elem = $(elem);
            if (typeof $elem !== 'undefined' && $elem.parents('.dataViewUseBasketViewWrap').length) {
                var selectedRows = $('#objectdatagrid-' + $elem.parents('.dataViewUseBasketViewWrap').data('basketid')).datagrid('getRows');

                if (!Object.keys(selectedRows[0]).length) {
                    alert(plang.get('msg_pls_list_select'));
                    return;
                }

            } else {
                var selectedRows = getDataViewSelectedRows(dataViewId);
            }
            
            var paramObj = paramDataToObject(paramData);
            
            if (paramObj.hasOwnProperty('connecttype')) {
                selectedRows[0]['connecttype'] = paramObj.connecttype;
            }
            
            popupConnectGeneralLedger(elem, processMetaDataId, dataViewId, selectedRows);
            return;

        } else if (urlLower == 'contentopener') {

            contentOpener(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'htmlcontentopener') {

            htmlContentOpener(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'htmlcontentcreate') {

            htmlContentCreate(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'htmlcontentedit') {

            htmlContentEdit(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'contentupload') {

            contentUpload(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'pfwfmtransition') {
            
            var paramObject = paramDataToObject(paramData);
            pfWfmTransition(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
            return;

        } else if (urlLower == 'rowdatatoencryptredirecturl') {
            
            if (typeof selectedRow !== 'undefined' && selectedRow) {
                PNotify.removeAll();
                
                if (selectedRow.hasOwnProperty('mainurl') && selectedRow.mainurl) {
                    $.ajax({
                        type: 'post',
                        url: 'mdintegration/getRowDataToEncryptHash', 
                        data: {rowData: selectedRow},
                        success: function(data) {
                            if (data) {
                                window.open(selectedRow.mainurl + data, '_blank');
                            } else {
                                new PNotify({
                                    title: 'Info',
                                    text: 'No encrypt data!',
                                    type: 'info',
                                    sticker: false,
                                    addclass: pnotifyPosition
                                });
                            }
                        }
                    });  
                } else {
                    new PNotify({
                        title: 'Info',
                        text: 'mainurl талбар олдсонгүй!',
                        type: 'info',
                        sticker: false,
                        addclass: pnotifyPosition
                    });
                }
            
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            
            return;

        } else if (urlLower == 'pfinvoiceprintbutton') {
            
            var $printBtn = $('#object-value-list-' + dataViewId).find('button[onclick*="dataViewPrintPreview_"]');
            
            if ($printBtn.length) {
                $printBtn.click();
            }
            
            return;

        } else if (urlLower == 'downloadbugfixing') {
            
            var $elem = $(elem);
            if (typeof $elem !== 'undefined' && $elem.parents('.dataViewUseBasketViewWrap').length) {
                var selectedRows = $('#objectdatagrid-' + $elem.parents('.dataViewUseBasketViewWrap').data('basketid')).datagrid('getRows');

                if (!Object.keys(selectedRows[0]).length) {
                    alert(plang.get('msg_pls_list_select'));
                    return;
                }

            } else {
                var selectedRows = getDataViewSelectedRows(dataViewId);
            }
            
            if (typeof isMetaUpgrade === 'undefined') {
                $.getScript('middleware/assets/js/upgrade/script.js').done(function() {
                    downloadBugFixingInit(elem, processMetaDataId, dataViewId, selectedRows);
                });
            } else {
                downloadBugFixingInit(elem, processMetaDataId, dataViewId, selectedRows);
            }
            
            return;

        } else if (urlLower == 'metapatchrollback') {
            
            if (typeof isMetaUpgrade === 'undefined') {
                $.getScript('middleware/assets/js/upgrade/script.js').done(function() {
                    metaPatchRollback(elem, processMetaDataId, dataViewId, selectedRow);
                });
            } else {
                metaPatchRollback(elem, processMetaDataId, dataViewId, selectedRow);
            }
            
            return;

        } else if (urlLower == 'metapatchimport') {
            
            if (typeof isMetaUpgrade === 'undefined') {
                $.getScript('middleware/assets/js/upgrade/script.js').done(function() {
                    metaPatchImport(elem, processMetaDataId, dataViewId, selectedRow);
                });
            } else {
                metaPatchImport(elem, processMetaDataId, dataViewId, selectedRow);
            }
            
            return;

        } else if (urlLower == 'metapatchviewscript') {
            
            if (typeof isMetaUpgrade === 'undefined') {
                $.getScript('middleware/assets/js/upgrade/script.js').done(function() {
                    metaPatchViewScript(elem, processMetaDataId, dataViewId, selectedRow);
                });
            } else {
                metaPatchViewScript(elem, processMetaDataId, dataViewId, selectedRow);
            }
            
            return;

        } else if (urlLower == 'doctopdfupload' || urlLower == 'redoctopdfupload') {
            
            var paramObject = paramDataToObject(paramData);
            if (urlLower == 'redoctopdfupload' && typeof selectedRow['physicalpath'] !== 'undefined' && typeof selectedRow['wordpath'] !== 'undefined') {
                selectedRow['physicalpath'] = selectedRow['wordpath'];
            }
         
            if (typeof selectedRow.physicalpath === 'object') {
                var dataGrid = $('#objectdatagrid_' + dataViewId);
                if ($('#objectdatagrid_' + dataViewId).length === 0) {
                    dataGrid = window['objectdatagrid_' + dataViewId];
                }

                viewWordTemplate(elem, processMetaDataId, dataViewId, selectedRow, 'ntrFingerprintCheck', paramObject);
                return;
            } else {
                ntrFingerprintCheck(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
            }

            return;

        } else if (urlLower == 'consultopdf') {

            var paramObject = paramDataToObject(paramData);
            if (typeof selectedRow !== 'undefined' && selectedRow) {
                if (typeof isProjectAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'projects/assets/custom/js/script.js').done(function() {
                        consulToPdf(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
                    });
                } else {
                    consulToPdf(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            
            return;

        } else if (urlLower == 'consultoarchive') {

            var paramObject = paramDataToObject(paramData);
            if (typeof selectedRow !== 'undefined' && selectedRow) {
                if (typeof isProjectAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'projects/assets/custom/js/script.js').done(function() {
                        consulToPdfArchive(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
                    });
                } else {
                    consulToPdfArchive(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            
            return;

        } else if (urlLower == 'contentverify') {

            contentVerify(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'contentsign') {

            contentSign(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'mddoc/notarypdfsign') {

            notaryContentSign(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'contentrowverify') {

            contentRowVerify(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'contentocr') {

            contentOcr(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'addbptemplate') {

            addBpTemplate(elem, processMetaDataId, dataViewId);
            return;

        } else if (urlLower == 'metaimport') {

            metaImport('main', 'meta');
            return;

        } else if (urlLower == 'editbptemplate') {

            editBpTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'copybptemplate') {

            copyBpTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'contentocrprocess') {

            contentOcrProcess(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'createpivotgrid') {

            createPivotGrid(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'editpivotgrid') {

            editPivotGrid(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'pfkpidatamartrelation2') {
            if (typeof isKpiAddonScript2 === 'undefined') {
                $("head").append('<link rel="stylesheet" type="text/css" href="assets/rappidjs/database/css/styles.css"/>');
                $.getScript(URL_APP + 'middleware/assets/js/addon/kpi2.js').done(function() {
                    kpiDataMartRelationConfig2(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                kpiDataMartRelationConfig2(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }                 
            return;

        } else if (urlLower == 'pfkpidatamartrelation3') {
            if (typeof isKpiAddonScript2 === 'undefined') {
                $("head").append('<link rel="stylesheet" type="text/css" href="assets/rappidjs/database/css/styles.css"/>');
                $.getScript(URL_APP + 'middleware/assets/js/addon/kpi2.js').done(function() {
                    kpiDataMartRelationConfig3(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                kpiDataMartRelationConfig3(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }                 
            return;

        } else if (urlLower == 'kpi_link_bp_run') {
            var getCustomerItems = $.ajax({
                type: "post",
                url: "mdmetadata/getMetaDataDrill/"+metaDataId,
                dataType: "json",
                async: false,
                success: function (data) {
                    Core.unblockUI();
                    return data.result;
                }
            });
            console.log('getCustomerItems.responseJSON.META_TYPE_CODE.toLowerCase() :>> ', getCustomerItems.responseJSON.META_TYPE_CODE.toLowerCase());
            return;
            // if (getCustomerItems.responseJSON.META_TYPE_CODE.toLowerCase() === 'statement') {

            var $dialogName = "dialog-kpi_link_bp_run";
            if (!$("#" + $dialogName).length) {
              $('<div id="' + $dialogName + '" class="display-none"></div>').appendTo(
                "body"
              );
            }
            var $dialog = $("#" + $dialogName);          
          
            $.ajax({
              type: "post",
              url: "mdwebservice/callMethodByMeta",
              data: {
                metaDataId: "1522036719483",
                isDialog: true,
                isSystemMeta: false,
                callerType: "",
                openParams: '{"callerType":""}'
              },
              dataType: "json",
              beforeSend: function () {
                Core.blockUI({
                  message: "Loading...",
                  boxed: true,
                });
              },
              success: function (data) {
                $dialog.empty().append(data.Html);
          
                var processForm = $("#wsForm", "#" + $dialogName);
                var processUniqId = processForm.parent().attr("data-bp-uniq-id");
          
                var buttons = [
                  {
                    text: data.run_btn,
                    class: "btn green-meadow btn-sm bp-btn-save",
                    click: function (e) {
                      if (window["processBeforeSave_" + processUniqId]($(e.target))) {
                        processForm.validate({
                          ignore: "",
                          highlight: function (element) {
                            $(element).addClass("error");
                            $(element).parent().addClass("error");
                            if (
                              processForm.find("div.tab-pane:hidden:has(.error)").length
                            ) {
                              processForm
                                .find("div.tab-pane:hidden:has(.error)")
                                .each(function (index, tab) {
                                  var tabId = $(tab).attr("id");
                                  processForm
                                    .find('a[href="#' + tabId + '"]')
                                    .tab("show");
                                });
                            }
                          },
                          unhighlight: function (element) {
                            $(element).removeClass("error");
                            $(element).parent().removeClass("error");
                          },
                          errorPlacement: function () { },
                        });
          
                        var isValidPattern = initBusinessProcessMaskEvent(processForm);
          
                        if (processForm.valid() && isValidPattern.length === 0) {
                          processForm.ajaxSubmit({
                            type: "post",
                            url: "mdwebservice/runProcess",
                            dataType: "json",
                            beforeSend: function () {
                              Core.blockUI({
                                boxed: true,
                                message: plang.get("POS_0040"),
                              });
                            },
                            success: function (responseData) {
                              if (responseData.status === "success") {
                                var responseParam = responseData.paramData;
                                $("#newCardCustomerJson").val(
                                  JSON.stringify(responseParam)
                                );
                                if (p1) {
                                      new PNotify({
                                          title: 'Success',
                                          text: plang.get('msg_save_success'),
                                          type: 'success',
                                          sticker: false, 
                                          addclass: 'pnotify-center'
                                      });                           
                                }
                                $dialog.dialog("close");
                              }
                              Core.unblockUI();
                            },
                            error: function () {
                              alert("Error");
                            },
                          });
                        }
                      }
                    },
                  },
                  {
                    text: data.close_btn,
                    class: "btn blue-madison btn-sm",
                    click: function () {
                      $dialog.dialog("close");
                    },
                  },
                ];
          
                var dialogWidth = data.dialogWidth,
                  dialogHeight = data.dialogHeight;
          
                if (data.isDialogSize === "auto") {
                  dialogWidth = 1200;
                  dialogHeight = "auto";
                }
          
                $dialog
                  .dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: dialogWidth,
                    height: dialogHeight,
                    modal: true,
                    closeOnEscape:
                      typeof isCloseOnEscape == "undefined" ? true : isCloseOnEscape,
                    close: function () {
                      $dialog.empty().dialog("destroy").remove();
                    },
                    buttons: buttons,
                  })
                  .dialogExtend({
                    closable: true,
                    maximizable: true,
                    minimizable: true,
                    collapsable: true,
                    dblclick: "maximize",
                    minimizeLocation: "left",
                    icons: {
                      close: "ui-icon-circle-close",
                      maximize: "ui-icon-extlink",
                      minimize: "ui-icon-minus",
                      collapse: "ui-icon-triangle-1-s",
                      restore: "ui-icon-newwin",
                    },
                  });
                if (data.dialogSize === "fullscreen") {
                  $dialog.dialogExtend("maximize");
                }
                $dialog.dialog("open");
              },
              error: function () {
                alert("Error");
              },
            }).done(function () {
              Core.initBPAjax($dialog);
              Core.unblockUI();
            });        
            return;

        } else if (urlLower == 'pfkpidatamartrelation4') {
            initPortLocationConfiguration(elem, selectedRow.trgindicatorid, selectedRow.id);
            return;

        } else if (urlLower == 'pfkpidatamartrelation') {
            if (typeof isKpiAddonScript === 'undefined') {
                $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/jsplumb/css/style.v2.css"/>');
                $.getScript('assets/custom/addon/plugins/jsplumb/jsplumb.min.js').done(function() {
                    $.getScript(URL_APP + 'middleware/assets/js/addon/kpi.js').done(function() {
                        kpiDataMartRelationConfig(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                    });
                });
            } else {
                kpiDataMartRelationConfig(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }                 
            return;
        } else if (urlLower == "postalonreturncancel") {
            if (typeof posTalonReturnCancel === "undefined") {
                window.location = "mdpos/returnCancel/" + selectedRow.id;
            } else {
                posTalonReturnCancel(selectedRow, false);
            }
            return;
        } else if (urlLower == "postalonreturncancel2") {
            if (typeof posTalonReturnCancel === "undefined") {
                window.location = "mdpos/returnCancel/" + selectedRow.id;
            } else {
                posTalonReturnCancel2(selectedRow, false);
            }
            return;
        } else if (urlLower == "postalonreturncancel3") {
            if (typeof posTalonReturnCancel === "undefined") {
                window.location = "mdpos/returnCancel/" + selectedRow.id;
            } else {
                posTalonReturnCancel3(selectedRow, false);
            }
            return;
        } else if (urlLower == "posaftersale") {
            posAfterSale(selectedRow);
            return;
        } else if (urlLower == 'postalonreturnreduce') {
            if (typeof posTalonReturnReduce === 'undefined') {
                window.location = 'mdpos/returnReduce/' + selectedRow.id;
            } else {
                posTalonReturnReduce(selectedRow, false);
            }
            return;
        } else if (urlLower == 'postalonreturnchangetype') {
            if (typeof posTalonReturnChangeType === 'undefined') {
                window.location = 'mdpos/returnChangeType/' + selectedRow.id;
            } else {
                posTalonReturnChangeType(selectedRow, false);
            }
            return;
        } else if (urlLower == 'poselectroninvoiceedit') {
            if (typeof posTalonReturnChangeType === 'undefined') {
                alert('Та энэ үйлдлийг Электрон талон цонхоор хийнэ үү!');
            } else {
                posElectronInvoiceEdit(selectedRow);
            }
            return;
        } else if (urlLower == 'posapisenddata') {
            posApiSendDataInit(dataViewId, selectedRow);
            return;
        } else if (urlLower == 'posdiscountdrugimport') {
            posDiscountDrugImportInit(dataViewId);
            return;
        } else if (urlLower == 'postalonnotlotteryprint') {
            posTalonNotLotteryPrintInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'bpmmetadiagramtool') {
            bpmMetaDiagramToolInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'bpmdiagramtool') {
            bpmDiagramToolInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'datamartrelationconfig') {
            dataMartRelationConfigInit(elem, processMetaDataId, dataViewId, paramData);
            return;
        } else if (urlLower == 'metaimportbasketbyexternalserver') {
            metaImportBasketByExternalServer(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'mdpivot/dataviewpivotview') {
            dataViewPivotInit(elem, selectedRow, paramData);
            return;
        } else if (urlLower == 'ecmcontenthtmleditor') {
            ecmContentHtmlEditor(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'electronregisterlegal') {
            electronRegisterLegal(elem, processMetaDataId, dataViewId, selectedRow, paramData, '1');
            return;
        } else if (urlLower == 'elcregisterlegalbook') {
            electronRegisterLegal(elem, processMetaDataId, dataViewId, selectedRow, paramData, '5');
            return;
        } else if (urlLower == 'electronregisterlegalview') {
            electronRegisterLegalView(elem, processMetaDataId, dataViewId, selectedRow, paramData, '1');
            return;
        } else if (urlLower == 'erldirectscan') {
            erlDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '1');
            return;
        } else if (urlLower == 'erldirectscan2') {
            erlDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '3');
            return;
        } else if (urlLower == 'erlredirectscan') {
            erlReDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '1');
            return;
        }  else if (urlLower == 'erlredirectscanreadonly') {
            var addinVariable = '{"key": "old_file_readonly", "value": "1"},';
            erlReDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '1', addinVariable);
            return;
        } else if (urlLower == 'electronregisterlegal_civil') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                electronRegisterLegal(elem, processMetaDataId, dataViewId, selectedRow, paramData, '2');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;
        } else if (urlLower == 'directscancnt') { /* Мэдээлэл хянах, удирдах СКАННЕРДАХ */
            erlDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '4');
            return;
        } else if (urlLower == 'redirectscancnt') { /* Мэдээлэл хянах, удирдах УСТГААД СКАННЕРДАХ */
            erlReDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '4');
            return;
        } else if (urlLower == 'electronregistercnt') { /* Мэдээлэл хянах, удирдах  МЕТА ОРУУЛАХ  */
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                electronRegisterLegal(elem, processMetaDataId, dataViewId, selectedRow, paramData, '4');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'mddoc/documentcomment') {
            _dialogMode = 'newtab';
            processTitle = 'Албан бичиг төлөвлөх';
            paramData = { processMetaDataId: processMetaDataId, dataViewId: dataViewId, selectedRow: selectedRow, dialogMode: _dialogMode };
        } else if (urlLower == 'mddoc/documenteditcomment') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                _dialogMode = 'newtab';
                processTitle = 'Албан бичиг боловсруулалт';
                paramData = { processMetaDataId: processMetaDataId, dataViewId: dataViewId, selectedRow: selectedRow, dialogMode: _dialogMode };
            } else {
                alert(plang.get('msg_pls_list_select'));
                return;
            }
        } else if (urlLower == 'electronviewcnt') { /* Мэдээлэл хянах, удирдах  ХЯНАХ */
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                electronRegisterLegalView(elem, processMetaDataId, dataViewId, selectedRow, paramData, '7');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'mddoc/documentviewer') {
            documentviewer(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'mddoc/documentviewerclean') {
            documentviewerclean(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'mddoc/documentarchiveviewer') {
            documentarchiveviewer(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'ntrreturnbill') {
            if (typeof isGovAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                    ntrReturnBill(elem, processMetaDataId, dataViewId, selectedRow);
                });
            } else {
                ntrReturnBill(elem, processMetaDataId, dataViewId, selectedRow);
            }
            
            return;

        } else if (urlLower == 'evisamore') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                if (typeof isGovAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                        evisamore(elem, dataViewId, selectedRow);
                    });
                } else {
                    evisamore(elem, dataViewId, selectedRow);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;

        } else if (urlLower == 'visreferediff') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                if (typeof isProjectAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'projects/assets/custom/js/script.js').done(function() {
                        visRefereDiff(selectedRow, paramData);
                    });
                } else {
                    visRefereDiff(selectedRow, paramData);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;

        } else if (urlLower == 'chempaymentweblink') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                var paramObj = paramDataToObject(paramData);
                if (typeof isProjectAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'projects/assets/custom/js/script.js').done(function() {
                        callQpay(selectedRow, paramObj);
                    });
                } else {
                    callQpay(selectedRow, paramObj);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;

        } else if (urlLower == 'step1exam') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                if (typeof isGovAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                        step1Exam(elem, dataViewId, selectedRow);
                    });
                } else {
                    step1Exam(elem, dataViewId, selectedRow);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;
        } else if (urlLower == 'step2exam') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                if (typeof isGovAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                        step2exam(elem, dataViewId, selectedRow);
                    });
                } else {
                    step2exam(elem, dataViewId, selectedRow);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;
        } else if (urlLower == 'step3exam') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                if (typeof isGovAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function () {
                        step3Exam(elem, dataViewId, selectedRow);
                    });
                } else {
                    step3Exam(elem, dataViewId, selectedRow);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;
        } else if (urlLower == 'government/lawEditPage') {
            laweditpage(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'mdpos/call') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            callPosLocker(elem, processMetaDataId, dataViewId, selectedRow, paramData);                
            return;
        } else if (urlLower == 'checkposipterminal') {
            if (typeof posConnectBankTerminal === 'function') {
                Core.blockUI({message: 'Loading...', boxed: true});                
                posConnectBankTerminal();
            }
            return;
        } else if (urlLower == 'closeposipterminal') {
            if (typeof checkInitPosJS !== 'undefined') {
                posCloseIpTerminal();   
            }
            return;
        } else if (urlLower == 'vatsp_lottery') {
            if (typeof checkInitPosJS !== 'undefined') {
                if (typeof selectedRow === 'undefined') {
                    alert('Мөрөө сонгоно уу!');
                    return;
                }                
                var selectedRows = getDataViewSelectedRows(dataViewId);
                reLotteryPrint(dataViewId, selectedRows);   
            }
            return;
        } else if (urlLower == 'openposipterminal') {
            if (typeof checkInitPosJS !== 'undefined') {
                posOpenIpTerminal();   
            }
            return;
        } else if (urlLower == 'readlocker') {
            if (typeof isPosAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/pos/addon.js').done(function() {
                    posLockerUnilock(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                posLockerUnilock(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }            
            return;
        } else if (urlLower == 'printsettlement') {            
            if (typeof isPosAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/pos/addon.js').done(function() {
                    posPrintSetlement(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                posPrintSetlement(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }      
            return;
        } else if (urlLower == 'printsettlementtdb') {            
            if (typeof isPosAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/pos/addon.js').done(function() {
                    posPrintSetlementTDB(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                posPrintSetlementTDB(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }      
            return;
        } else if (urlLower == 'elecdirectscan') {
            /* 
            * scanner
            * nemelt scanner
            */
            if (typeof IS_LOAD_ELEC_SCRIPT === 'undefined') {
                $.getScript("assets/custom/addon/scripts/project/elec.js").done(function () {
                    elecDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                elecDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }

            return;
        } else if (urlLower == 'elecredirectscan') {
            /* 
            * ustgaad scanner
            */
            if (typeof IS_LOAD_ELEC_SCRIPT === 'undefined') {
                $.getScript("assets/custom/addon/scripts/project/elec.js").done(function () {
                    elecReDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                elecReDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }

            return;
        } else if (urlLower == 'elecmetaregister') {
            /* 
            * meta oruulah
            */
            if (typeof IS_LOAD_ELEC_SCRIPT === 'undefined') {
                $.getScript("assets/custom/addon/scripts/project/elec.js").done(function () {
                    elecMetaRegister(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                elecMetaRegister(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }

            return;
        } else if (urlLower == 'elecscanview') {
            /* 
            * meta harah
            */
            if (typeof IS_LOAD_ELECVIEW_SCRIPT === 'undefined') {
                $.getScript("assets/custom/addon/scripts/project/elec.js").done(function () {
                    elecScanView(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                elecScanView(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }

            return;
        } else if (urlLower == 'printsocialpaysettlement') {
            if (typeof isPosAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/pos/addon.js').done(function() {
                    posPrintSocialPaySetlement(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                posPrintSocialPaySetlement(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }                 
            return;
        } else if (urlLower == 'cmssubjectweblink') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            callParliament(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        }  else if (urlLower == 'government/lawtree') {
            callLawTree(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'eaobjectweblink') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            callParliament(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'insertfingerzk') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            insertFingerZk(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'finger_reload_zk') {
            if (typeof isCommonAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/addon/common.js').done(function() {
                    customerFingerReloadZk();
                });
            } else {
                customerFingerReloadZk();
            }   
            return;
        } else if (urlLower == 'timemutipleconfig') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }            
            if (typeof tnaBalanceDrillProcess === 'function') {
                var selectedRows = getDataViewSelectedRows(dataViewId);
                tnaBalanceDrillProcess('', 'rows', selectedRows, window['objectdatagrid_' + dataViewId]);
            }
            return;
        } else if (urlLower == 'timemultipledelete') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            if (typeof multiRemoveBalance === 'function') {
                var dialogName = '#dialog-timeBalanceMultiRemove';
                if (!$(dialogName).length) {
                    $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
                }                          
                var selectedRows = getDataViewSelectedRows(dataViewId);

                $(dialogName).empty().html('Статусыг цуцлахдаа итгэлтэй байна уу');
                $(dialogName).dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: 'Сануулга',
                    width: '400',
                    height: 'auto',
                    modal: true,
                    close: function () {
                        $(dialogName).dialog('close');
                    },
                    buttons: [
                        {text: plang.get('yes_btn'), class: 'btn blue-madison btn-sm', click: function () {
                            multiRemoveBalance(selectedRows, window['objectdatagrid_' + dataViewId]);
                            $(dialogName).dialog('close');
                        }},
                        {text: plang.get('close_btn'), class: 'btn blue-madison btn-sm', click: function () {
                            $(dialogName).dialog('close');
                        }}
                    ]
                });
                $(dialogName).dialog('open');              
            }            
            return;
        } else if (urlLower == 'government/omsconferenceaddform') {
            if (typeof isGovAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                    callomsconferenceAddForm(paramData, '', undefined, '', 'dataViewReload', dataViewId);
                });
            } else {
                callomsconferenceAddForm(paramData, '', undefined, '', 'dataViewReload', dataViewId);
            }
            return;
        } else if (urlLower == 'cmsconferenceweblink') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            callParliamentV2(elem, processMetaDataId, dataViewId, selectedRow, paramData);

            $.ajax({
                url: "assets/custom/gov/script.js",
                dataType: "script",
                cache: true,
                async: false,
                beforeSend: function() {
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/gov/goverment.css"/>');
                }
            });
            return;
        } else if (urlLower == 'contentui/attendance' || urlLower == 'contentui/previewatten' || urlLower == 'contentui/subject') {
            attendance(elem, processMetaDataId, dataViewId, selectedRow, paramData, urlLower);
            return;
        } else if (urlLower === 'civil/comparepic') {
            if (typeof isUbegProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/ubeg.js').done(function() {
                    comparePic(selectedRow, dataViewId);
                });
            } else {
                comparePic(selectedRow, dataViewId);
            }
            
            return;
        }  else if (urlLower === 'corp/invoice' || urlLower === 'corp/payload' || urlLower === 'corp/issue') {

            var paramObject = paramDataToObject(paramData);
            if (typeof selectedRow !== 'undefined' && selectedRow) {
                if (typeof isProjectAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'projects/assets/custom/js/script.js').done(function() {
                        corpInvoice(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
                    });
                } else {
                    corpInvoice(elem, processMetaDataId, dataViewId, selectedRow, paramObject);
                }
            } else {
                alert(plang.get('msg_pls_list_select'));
            }
            return;
        } else if (urlLower === 'mddoc/comparepicapprove') {
            if (typeof isUbegProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/ubeg.js').done(function() {
                    comparePicApprove(selectedRow, dataViewId);
                });
            } else {
                comparePicApprove(selectedRow, dataViewId);
            }
            
            return;
        } else if (urlLower === 'diffmatch' || urlLower === 'diffmatch1') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            
            var $tlawDiffType = (urlLower === 'diffmatch') ? '1' : '2';

            if (typeof isLegalProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/legal.js').done(function () {
                    diffmatchLaw(selectedRow, $tlawDiffType);
                });
            } else {
                diffmatchLaw(selectedRow, $tlawDiffType);
            }
            return;
            
        } else if (urlLower === 'government/addonlaw') {
            paramData.push({ name: 'openParams', value: openParams });
            
            if (typeof isLegalProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/legal.js').done(function () {
                    calladdonlaw(urlLower, paramData, dataViewId);
                });
            } else {
                calladdonlaw(urlLower, paramData, dataViewId);
            }
            
            return;
        } else if (urlLower == 'doctohtmlform') {
            if (typeof isLegalProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/legal.js').done(function () {
                    weblinkdoctoHtml(paramData, dataViewId, selectedRow);
                });
            } else {
                weblinkdoctoHtml(paramData, dataViewId, selectedRow);
            }
            
            return;
        } else if (urlLower == 'bodytextcompare') {

            if (typeof isLegalProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/legal.js').done(function () {
                    compareOldData(dataViewId, selectedRow);
                });
            } else {
                compareOldData(dataViewId, selectedRow);
            }
            
            return;
        } else if (urlLower == 'doctohtmlreload') {
            if (typeof isLegalProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/legal.js').done(function () {
                    doctohtmlReload(selectedRow['id'], '1');
                });
            } else {
                doctohtmlReload(selectedRow['id'], '1');
            }
            
            return;
        } else if (urlLower == 'doctohtmlform2') {
            if (typeof isLegalProjectScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/legal.js').done(function () {
                    weblinkdoctoHtml2(paramData, dataViewId, selectedRow);
                });
            } else {
                weblinkdoctoHtml2(paramData, dataViewId, selectedRow);
            }
            
            return;
        } else if (urlLower == 'mddoc/documentassign') {
            documentassign(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'mddoc/adddocument') {
            adddocument(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'electroneditcnt') { /* Мэдээлэл хянах, удирдах  ХЯНАХ */
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                electronRegisterLegalView(elem, processMetaDataId, dataViewId, selectedRow, paramData, '6');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'customerfilterdataview') { /* Мэдээлэл хянах, удирдах  ХЯНАХ */
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                customerFilterDataView(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'electronregisterlegalview_cvl') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                electronRegisterLegalView(elem, processMetaDataId, dataViewId, selectedRow, paramData, '2');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'electroncvlview_cvl') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                electronRegisterLegalView(elem, processMetaDataId, dataViewId, selectedRow, paramData, '3');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'erldirectscancvl') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                erlDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '2');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        }  else if (urlLower == 'erldirectscancvlreadonly') {
            var addinVariable = '{"key": "old_file_readonly", "value": "1"},';
            
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                erlDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '2', addinVariable);
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'erlredirectscancvl') {
            if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
                erlReDirectScan(elem, processMetaDataId, dataViewId, selectedRow, paramData, '2');
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;
        } else if (urlLower == 'bptemplatetoprocess') {
            bpTemplateToProcess(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'pfobjectexport') {
            pfObjectExport(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'mdprocessflow/exportworkflowfull') {
            if (typeof isCommonAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/addon/common.js').done(function() {
                    exportWorkflowFull(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                exportWorkflowFull(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }
            return;
        } else if (urlLower == 'change_visual_wfm') {
            if (typeof isCommonAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/addon/common.js').done(function() {
                    changeVisualWfm(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                changeVisualWfm(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }
            return;
        } else if (urlLower == 'mdprocessflow/importworkflow') {
            importWorkflow(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'dataviewsendmailbyselectionrows') {
            dataViewSendMailBySelectionRowsInit(elem, processMetaDataId, dataViewId, postParams, getParams);
            return;
        } else if (urlLower == 'kpiexport') {
            kpiExportInit(elem, processMetaDataId, dataViewId, paramData);
            return;
        } else if (urlLower == 'kpiimport') {
            kpiImportInit(elem, dataViewId);
            return;
        } else if (urlLower == 'metaexport') {
            metaExportInit(elem, processMetaDataId, dataViewId, postParams);
            return;
        } else if (urlLower == 'lifecyclerender') {
            var selectedRows = getDataViewSelectedRows(dataViewId);
            lifeCycleRender(selectedRows[0]);
            return;
        } else if (urlLower == 'lifecyclerender_v1') {
            var selectedRows = getDataViewSelectedRows(dataViewId);
            lifeCycleRender_v1(selectedRows[0], dataViewId);
            return;
        } else if (urlLower == 'mdcontentui/renderecmcontent') {
            getEcmContentModal(dataViewId);
            return;
        } else if (urlLower == 'mdcontentui/renderfolderaction/1' || urlLower == 'mdcontentui/renderfolderaction/2') {
            var selectedRows = getDataViewSelectedRows(dataViewId);
            renderFolderAction(url, selectedRows[0], dataViewId);
            return;
        } else if (urlLower == 'datepermissioncriteriarender') {
            var selectedRows = getDataViewSelectedRows(dataViewId);
            datePermissionCriteriaRender(selectedRows[0]);
            return;
        } else if (urlLower == 'mdgl/budgetconnectgl') {
            if (typeof IS_LOAD_GL_SCRIPT === 'undefined') {
                $.getScript('middleware/assets/js/mdgl.js').done(function() {
                    budgetConnectGeneralLedger(elem, '', {dataViewId: dataViewId, selectedRow: selectedRow, paramData: paramData});
                });
            } else {
                budgetConnectGeneralLedger(elem, '', {dataViewId: dataViewId, selectedRow: selectedRow, paramData: paramData});
            }
            return;
        } else if (urlLower == 'runtestcase') {
            if (typeof isTestCaseAddonScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/testcase.js').done(function() {
                    runTestCase(elem, processMetaDataId, dataViewId, paramData);
                });
            } else {
                runTestCase(elem, processMetaDataId, dataViewId, paramData);
            }            
            return;
        } else if (urlLower == 'runalltestcase') {
            if (typeof isTestCaseAddonScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/testcase.js').done(function() {
                    runAllTestCase(elem, processMetaDataId, dataViewId, paramData);
                });
            } else {
                runAllTestCase(elem, processMetaDataId, dataViewId, paramData);
            }            
            return;
        } else if (urlLower == 'renderbpbytestcase') {
            if (typeof isTestCaseAddonScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/testcase.js').done(function() {
                    renderBpByTestCase(elem, processMetaDataId, dataViewId, paramData);
                });
            } else {
                renderBpByTestCase(elem, processMetaDataId, dataViewId, paramData);
            }            
            return;
        } else if (urlLower == 'kpiindicatorbprun') {
            if (typeof isKpiAddonScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/kpi.js').done(function() {
                    kpiIndicatorBpRun(elem, processMetaDataId, dataViewId, paramData);
                });
            } else {
                kpiIndicatorBpRun(elem, processMetaDataId, dataViewId, paramData);
            }            
            return;
        } else if (urlLower == 'kpiindicatortemplateconfig') {
            if (typeof isKpiAddonScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/kpi.js').done(function() {
                    kpiIndicatorTemplateConfig(elem, processMetaDataId, dataViewId, selectedRow);
                });
            } else {
                kpiIndicatorTemplateConfig(elem, processMetaDataId, dataViewId, selectedRow);
            } 
            return;
        } else if (urlLower == 'kpiindicatorexcelimport') {
            if (typeof isKpiIndicatorScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/indicator.js').done(function() {
                    kpiIndicatorExcelImport(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                kpiIndicatorExcelImport(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            } 
            return;
        } else if (urlLower == 'mvstructureexcelimport') {
            if (typeof isKpiIndicatorScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/indicator.js').done(function() {
                    createMvStructureFromFileInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                createMvStructureFromFileInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            } 
            return;
        } else if (urlLower == 'createmvstructurefromfile') {
            if (typeof isKpiIndicatorScript === 'undefined') {
                $.getScript('middleware/assets/js/addon/indicator.js').done(function() {
                    createMvStructureFromFile(elem, dataViewId, false);
                });
            } else {
                createMvStructureFromFile(elem, dataViewId, false);
            } 
            return;
        } else if (urlLower == 'downloadfile') {
            var selectedRows = getDataViewSelectedRows(dataViewId);

            if (selectedRows.length != 0) {
                $.each(selectedRows, function(rowIndex, rowValue) {
                    if (typeof rowValue.physicalpath !== 'undefined') {
                        $.fileDownload(URL_APP + 'mdobject/downloadFile?file=' + rowValue.physicalpath + '&fDownload=1', {
                            httpMethod: "POST"
                        });
                    }
                });
            } else {
                alert(plang.get('msg_pls_list_select'));
            }

            return;

        } else if (urlLower == 'mdpreview/ecmcontenthtmldiffviewer') {
            
            if (typeof isEcmContentScript === 'undefined') {
                $.getScript(URL_APP + "middleware/assets/js/ecmcontent/ecmcontent.js").done(function() {
                    ecmContentHtmlDiffViewer(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                ecmContentHtmlDiffViewer(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }
            return;
            
        } else if (urlLower == 'skyclosurereport') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }            
            $.ajax({
                type: 'post',
                url: 'mdpos/closurePrint', 
                data: selectedRow,
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(dataSub) {
                    Core.unblockUI();
                    if (dataSub.hasOwnProperty('report') && dataSub.report) {
                                    
                        var $printPosDiv = 'pos-preview-print';
                        if (!$("." + $printPosDiv).length) {
                            $('<div class="' + $printPosDiv + ' display-none"></div>').appendTo('body');
                        }                        
                        $('div.pos-preview-print').html(dataSub.report).promise().done(function() {
                            $('div.pos-preview-print').printThis({
                                debug: false,
                                importCSS: false,
                                printContainer: false,
                                dataCSS: dataSub.css,
                                removeInline: false
                            });
                        });
                    }
                }
            });  
            return;
        } else if (urlLower == 'amactivity/amactivityduplicate') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            var $dialogName = 'dialog-amactivity-duplicate';
            if (!$($dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo("body");
            }
            $("#" + $dialogName).empty().append('Version number<input type="text" id="amActivityVersionNumber" name="amActivityVersionNumber" class="form-control">');
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: 'Төлөвлөлт хуулах',
                width: 300,
                height: 'auto',
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: plang.get('save_btn'),
                        class: 'btn btn-sm blue',
                        click: function() {
                            var reorderRow = $("#amActivityVersionNumber", "#" + $dialogName).val();
                            if (reorderRow === '') {
                                PNotify.removeAll();
                                new PNotify({
                                    title: 'Warning',
                                    text: 'Version Number оруулна уу!',
                                    type: 'warning',
                                    sticker: false
                                });
                                return;
                            }
                            $.ajax({
                                type: 'post',
                                url: url,
                                data: {
                                    activityKeyId: selectedRow.id,
                                    version: reorderRow
                                },
                                dataType: 'json',
                                success: function(resp) {
                                    if (resp.status === 'success') {
                                        $(".viewer-container #objectdatagrid-" + dataViewId, "#object-value-list-" + dataViewId).datagrid('reload');
                                    }
                                    new PNotify({
                                        type: resp.status,
                                        title: resp.title,
                                        text: resp.text,
                                        sticker: false
                                    });
                                },
                                error: function() {
                                    alert('Error');
                                }
                            });
                            $("#" + $dialogName).dialog('close');
                        }
                    },
                    {
                        text: plang.get('close_btn'),
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $("#" + $dialogName).dialog('close');
                        }
                    }
                ]
            });
            $("#" + $dialogName).dialog('open');

            $.ajax({
                type: 'post',
                url: url,
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    Core.unblockUI();
                }
            });
            return;

        } else if (urlLower == 'amactivity/copytemplate') {

            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            //1461741929085
            var $dialogName = 'dialog-amactivity-duplicate';
            if (!$($dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo("body");
            }
            $("#" + $dialogName).empty().append(
                'Код<input type="text" id="tempCode" name="tempCode" class="form-control form-control-sm" value="' + selectedRow.activitycode + '">' +
                'Тайлбар<textarea id="tempDescription" name="tempDescription" class="form-control">' + selectedRow.description + '</textarea>' +
                'Бүлэг<div class="meta-autocomplete-wrap" data-section-path="">' +
                '<div class="input-group double-between-input">' +
                '<input type="hidden" data-criteria="" data-criteria-param="" name="activityTypeId" id="activityTypeId_valueField" data-path="newDepartmentId" class="popupInit" data-out-param="" data-in-param="" data-out-group="" data-in-lookup-param="" value="">' +
                '<input type="text" name="activityTypeId_displayField" class="form-control form-control-sm meta-autocomplete lookup-code-autocomplete ui-autocomplete-input" data-field-name="" id="activityTypeId_displayField" placeholder="кодоор хайх" autocomplete="off" value="">' +
                '<span class="input-group-btn">' +
                '<button type="button" class="btn default btn-bordered form-control-sm mr0" onclick="dataViewSelectableGrid(\'activityTypeId\', \'1528858041095420\', \'1461741928710\', \'single\', \'activityTypeId\', this);" tabindex="-1"><i class="fa fa-list-ul"></i></button>' +
                '</span>' +
                '<span class="input-group-btn">' +
                '<input type="text" name="activityTypeId_nameField" class="form-control form-control-sm meta-name-autocomplete lookup-name-autocomplete ui-autocomplete-input" data-field-name="activityTypeId" id="activityTypeId_nameField" placeholder="нэрээр хайх" autocomplete="off" value="">' +
                '</span>' +
                '</div>' +
                '</div>'
            );
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: 'Темплейт хуулах',
                width: 350,
                height: 'auto',
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: plang.get('save_btn'),
                        class: 'btn btn-sm blue',
                        click: function() {
                            var tempCode = $("#tempCode", "#" + $dialogName).val();
                            var tempValue = $("#activityTypeId_valueField", "#" + $dialogName).val();
                            var tempDescription = $("#tempDescription", "#" + $dialogName).val();
                            if (tempCode === '') {
                                PNotify.removeAll();
                                new PNotify({
                                    title: 'Warning',
                                    text: 'Кодоо оруулна уу!',
                                    type: 'warning',
                                    sticker: false
                                });
                                return;
                            }
                            if (tempDescription === '') {
                                PNotify.removeAll();
                                new PNotify({
                                    title: 'Warning',
                                    text: 'Тайлбараа оруулна уу!',
                                    type: 'warning',
                                    sticker: false
                                });
                                return;
                            }
                            $.ajax({
                                type: 'post',
                                url: url,
                                data: {
                                    activityKeyId: selectedRow.id,
                                    code: tempCode,
                                    activityTypeId: tempValue,
                                    description: tempDescription
                                },
                                dataType: 'json',
                                success: function(resp) {
                                    if (resp.status === 'success') {
                                        $(".viewer-container #objectdatagrid-" + dataViewId, "#object-value-list-" + dataViewId).datagrid('reload');
                                    }
                                    new PNotify({
                                        type: resp.status,
                                        title: resp.title,
                                        text: resp.text,
                                        sticker: false
                                    });
                                },
                                error: function() {
                                    alert('Error');
                                }
                            });
                            $("#" + $dialogName).dialog('close');
                        }
                    },
                    {
                        text: plang.get('close_btn'),
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $("#" + $dialogName).dialog('close');
                        }
                    }
                ]
            });
            $("#" + $dialogName).dialog('open');

            $.ajax({
                type: 'post',
                url: url,
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    Core.unblockUI();
                }
            });
            return;

        } else if (urlLower == 'wsamactivitysheet') {

            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            
            var budgetUrl = getConfigValue('CONFIG_BUDGET_SERVER_ADDRESS', 'budget');

            appMultiTabByContent({
                'metaDataId': 'amactivity_externalpage_' + dataViewId + '_' + selectedRow.id,
                'title': 'Төсөв',
                'content': '<div class="row"><iframe src="' + budgetUrl + '?reportId=' + selectedRow.id + '&filterUserId=' + selectedRow.userid + '&stageNumber=' + selectedRow.stagenumber + '&isMain=' + selectedRow.ismain + '" frameborder="0" style="width: 100%; height: ' + ($(window).height() - 130) + 'px;" id="sheet_budget_iframe"></iframe></div>'
            });

            return;

        } else if (urlLower == 'wsamactivitytemplatesheet') {

            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            
            var budgetTemplateUrl = getConfigValue('CONFIG_BUDGET_SERVER_ADDRESS', 'template');

            appMultiTabByContent({
                'metaDataId': 'amactivity_externaltemplatepage_' + dataViewId + '_' + selectedRow.id,
                'title': 'Төсөв загвар',
                'content': '<div class="row"><iframe src="' + budgetTemplateUrl + '?reportId=' + selectedRow.id + '" frameborder="0" style="width: 100%; height: ' + ($(window).height() - 130) + 'px;" id="sheet_budget_iframe"></iframe></div>'
            });

            return;

        } else if (urlLower == 'amactivity/duplicatetemplate') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            Core.blockUI({animate: true});
            $.ajax({
                type: 'post',
                url: url,
                data: paramData,
                dataType: 'json',
                success: function(resp) {
                    if (resp.status === 'success') {
                        $(".viewer-container #objectdatagrid-" + dataViewId, "#object-value-list-" + dataViewId).datagrid('reload');
                    }
                    new PNotify({
                        type: resp.status,
                        title: resp.title,
                        text: resp.text,
                        sticker: false
                    });
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
            return;

        } else if (urlLower == 'metaworkflowstatus_add') {
            popupConnectAddWorkFlow(dataViewId);
            return;
        } else if (urlLower == 'subject/subjectflow' || urlLower == 'subject/attendance' || urlLower == 'subject/subjectmark') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            paramData = { selectedRow: selectedRow };
            $.ajax({
                url: "assets/custom/addon/plugins/datatables/media/js/jquery.dataTables.min.js",
                dataType: "script",
                cache: true,
                async: false,
                beforeSend: function() {
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.css"/>');
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/datatables/extensions/FixedColumns/css/dataTables.fixedColumns.min.css"/>');
                }
            }).done(function() {
                $.ajax({
                    url: "assets/custom/addon/plugins/datatables/extensions/FixedColumns/js/dataTables.fixedColumns.min.js",
                    dataType: "script",
                    cache: true,
                    async: false
                });
                $.ajax({
                    url: "assets/custom/addon/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js",
                    dataType: "script",
                    cache: true,
                    async: false
                });
            });
            return;

        } else if (urlLower == 'mddoc/addwordtemplate') {
            addWordTemplate(elem, processMetaDataId, dataViewId, paramData);
            return;
        } else if (urlLower == 'mddoc/configtaxonamytemplate') {
            addWordTemplateTaxonamyConfig(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'mddoc/checkxypntr') {
            checkXypNtr(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'mddoc/configprocessbptemplate') {
            configProcessWordTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'mddoc/viewwordtemplate' || urlLower == 'mddoc/viewwordtemplaterenew') {
            if (typeof selectedRow.getprocesscode === 'object') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: 'Ажиллуулах процессыг тохируулна уу!',
                    type: 'warning',
                    sticker: false
                });
                return;
            }
            var isDeleteContent = (urlLower == 'mddoc/viewwordtemplaterenew') ? '1' : '0';
            viewWordTemplate(elem, processMetaDataId, dataViewId, selectedRow, undefined, undefined, isDeleteContent);
            return;

        } else if (urlLower == 'uploadntrtemplate') {
            if (typeof isGovNotaryAddonScript !== 'undefined') {
                uploadNtrTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            } else {
                $.getScript(URL_APP + 'projects/assets/custom/projects/notary.js').done(function() {
                    uploadNtrTemplate(elem, processMetaDataId, dataViewId, selectedRow);
                });
            }

            return;
        } else if (urlLower == 'downloadntrtemplate') {
            if (typeof isGovNotaryAddonScript !== 'undefined') {
                downloadNtrTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            } else {
                $.getScript(URL_APP + 'projects/assets/custom/projects/notary.js').done(function() {
                    downloadNtrTemplate(elem, processMetaDataId, dataViewId, selectedRow);
                });
            }
            
            return;
        } else if (urlLower == 'mddoc/updatehtmltemplate') {
            configProcessUpdateWordTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'mddoc/editwordtemplate') {
            editWordTemplate(elem, processMetaDataId, dataViewId, selectedRow);
            return;

        } else if (urlLower == 'mddoc/dataviewpdfexport') {
            $.fileDownload(URL_APP + urlLower, {
                httpMethod: "POST",
                data: paramData
            }).done(function() {}).fail(function() {
                alert("File download failed!");
            });
            return;
        } else if (urlLower == 'mddoc/bptaxonomycacheclear') {
            bpTaxonomyCacheClear(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'imagemarkerwithdv') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }            
            if (typeof isCommonAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/addon/common.js').done(function() {
                    customImageMarkerWithDVView(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                customImageMarkerWithDVView(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }
            return;            
        } else if (urlLower == 'mdmeta/customimagemarkerviewctrl' || urlLower == 'mdmeta/customimagemarkerviewreferencectrl') {
            customImageMarkerView(elem, processMetaDataId, dataViewId, selectedRow, paramData, urlLower);
            return;
        } else if (urlLower == 'mddatamodel/importexceltemplate') {
            importExcelTemplate(elem, processMetaDataId, dataViewId, selectedRow, paramData, getParams);
            return;
        } else if (urlLower == 'mddatamodel/importexceltemplateadd') {
            var paramObj = paramDataToObject(paramData);
            importExcelTemplateAdd(elem, processMetaDataId, dataViewId, selectedRow, getParams, paramObj);
            return;
        } else if (urlLower == 'mddatamodel/importexceltemplateedit') {
            importExcelTemplateEdit(elem, processMetaDataId, dataViewId, selectedRow);
            return;
        } else if (urlLower == 'userfingerregistration') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            ntrFingerprintRegister(selectedRow);
            return;

        } else if (urlLower == 'userfingerregister') {
            ntrFingerRegisterUser(selectedRow);
            return;
        } else if (urlLower == 'health/covid19book') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            if (typeof isCovidAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                    covid19Book(paramData, selectedRow, dataViewId);
                });
            } else {
                covid19Book(paramData, selectedRow, dataViewId);
            }  
            return;
        } else if (urlLower == 'importlicense') {
            importLicense(elem, processMetaDataId, dataViewId);
            return;
        } else if (urlLower === 'ntrentrustmentedit') {
            
            alert('Хөгжүүлэлт хийгдэж байна');
            return;
            
        } else if (urlLower === 'mddoc/addbspform') {

            $.ajax({
                type: 'post',
                url: 'mddoc/addBspForm',
                data: { paramData: paramData },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {

                    if (data.Html !== '') {

                        var $btnClass = (typeof data.Btn !== 'undefined' && data.Btn === '0') ? 'hidden' : '';
                        var $dialogName = "divid-addbspform-" + data.uniqId;

                        if (!$($dialogName).length) {
                            $('<div id="' + $dialogName + '"></div>').appendTo("body");
                        }

                        $("#" + $dialogName).empty().append(data.Html);
                        $("#" + $dialogName).dialog({
                            cache: false,
                            resizable: true,
                            bgiframe: true,
                            autoOpen: false,
                            title: data.Title,
                            width: (typeof data.Width !== 'undefined') ? data.Width : 1100,
                            height: (typeof data.Height !== 'undefined') ? data.Height : $(window).height() - 100,
                            modal: true,
                            close: function() {
                                $("#" + $dialogName).empty().dialog('destroy').remove();
                            },
                            buttons: [{
                                    text: data.save_btn,
                                    class: 'btn btn-sm green-meadow ' + $btnClass,
                                    click: function() {

                                        $("#addbsp_report_" + data.uniqId).validate({ errorPlacement: function() {} });

                                        if ($("#addbsp_report_" + data.uniqId).valid()) {
                                            $("#addbsp_report_" + data.uniqId).ajaxSubmit({
                                                type: 'post',
                                                url: "mddoc/saveBspReport",
                                                dataType: 'json',
                                                beforeSend: function() {
                                                    Core.blockUI({message: plang.get('msg_saving_block'), boxed: true});
                                                },
                                                success: function(response) {

                                                    new PNotify({
                                                        title: response.status,
                                                        text: response.message,
                                                        type: response.status,
                                                        sticker: false
                                                    });

                                                    var dataGrid = $('#objectdatagrid_' + dataViewId);
                                                    if ($('#objectdatagrid_' + dataViewId).length === 0) {
                                                        dataGrid = window['objectdatagrid_' + dataViewId];
                                                    }

                                                    dataViewReloadByElement(dataGrid);
                                                    Core.unblockUI();

                                                    if (response.status === 'success') {
                                                        $("#" + $dialogName).dialog('close');
                                                    }

                                                },
                                                error: function(jqXHR, exception) {
                                                    var msg = '';
                                                    if (jqXHR.status === 0) {
                                                        msg = 'Not connect.\n Verify Network.';
                                                    } else if (jqXHR.status == 404) {
                                                        msg = 'Requested page not found. [404]';
                                                    } else if (jqXHR.status == 500) {
                                                        msg = 'Internal Server Error [500].';
                                                    } else if (exception === 'parsererror') {
                                                        msg = 'Requested JSON parse failed.';
                                                    } else if (exception === 'timeout') {
                                                        msg = 'Time out error.';
                                                    } else if (exception === 'abort') {
                                                        msg = 'Ajax request aborted.';
                                                    } else {
                                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                                    }

                                                    PNotify.removeAll();
                                                    new PNotify({
                                                        title: 'Error',
                                                        text: msg,
                                                        type: 'error',
                                                        sticker: false
                                                    });
                                                    Core.unblockUI();
                                                }
                                            });
                                        } else {
                                            PNotify.removeAll();
                                            new PNotify({
                                                title: 'warning',
                                                text: "Шаардлагатай талбаруудыг бөглөнө үү",
                                                type: 'warning',
                                                sticker: false
                                            });
                                        }
                                    }
                                },
                                {
                                    text: data.close_btn,
                                    class: 'btn blue-madison btn-sm ' + $btnClass,
                                    click: function() {
                                        $("#" + $dialogName).dialog('close');
                                        dataViewReloadByElement(dataGrid);
                                    }
                                }
                            ]
                        });
                        $("#" + $dialogName).dialog('open');
                        Core.initAjax($('.bp-window-' + data.uniqId));
                    } else {
                        if (typeof data.message !== 'undefined') {
                            PNotify.removeAll();
                            new PNotify({
                                title: 'warning',
                                text: data.message,
                                type: 'warning',
                                sticker: false
                            });
                        }
                    }
                    Core.unblockUI();
                },
                error: function(jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    PNotify.removeAll();
                    new PNotify({
                        title: 'Error',
                        text: msg,
                        type: 'error',
                        sticker: false
                    });
                    Core.unblockUI();
                }
            });
            return;
            
        } else if (urlLower === 'mddoc/screencapturesms/1' || urlLower === 'mddoc/screencapturesms/2' || urlLower === 'mddoc/screencapturesms/3') {

            $.ajax({
                type: 'post',
                url: url,
                data: { paramData: paramData },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {

                    if (data.Html !== '') {

                        var $btnClass = (typeof data.Btn !== 'undefined' && data.Btn === '0') ? 'hidden' : '';
                        var $dialogName = "divid-addbspform-" + data.uniqId;

                        if (!$($dialogName).length) {
                            $('<div id="' + $dialogName + '"></div>').appendTo("body");
                        }

                        $("#" + $dialogName).empty().append(data.Html);
                        $("#" + $dialogName).dialog({
                            cache: false,
                            resizable: true,
                            bgiframe: true,
                            autoOpen: false,
                            title: data.Title,
                            width: (typeof data.Width !== 'undefined') ? data.Width : 1100,
                            height: (typeof data.Height !== 'undefined') ? data.Height : $(window).height() - 100,
                            modal: true,
                            close: function() {
                                $("#" + $dialogName).empty().dialog('destroy').remove();
                            },
                            buttons: [{
                                    text: data.save_btn,
                                    class: 'btn btn-sm green-meadow ' + $btnClass,
                                    click: function() {

                                        $("#appbp-sc-sms-form-" + data.uniqId).validate({ errorPlacement: function() {} });

                                        if ($("#appbp-sc-sms-form-" + data.uniqId).valid()) {
                                            $("#appbp-sc-sms-form-" + data.uniqId).ajaxSubmit({
                                                type: 'post',
                                                url: "mddoc/saveScSms",
                                                dataType: 'json',
                                                beforeSend: function() {
                                                    Core.blockUI({message: plang.get('msg_saving_block'), boxed: true});
                                                },
                                                success: function(response) {

                                                    new PNotify({
                                                        title: response.status,
                                                        text: response.message,
                                                        type: response.status,
                                                        sticker: false
                                                    });

                                                    var dataGrid = $('#objectdatagrid_' + dataViewId);
                                                    if ($('#objectdatagrid_' + dataViewId).length === 0) {
                                                        dataGrid = window['objectdatagrid_' + dataViewId];
                                                    }

                                                    dataViewReloadByElement(dataGrid);
                                                    Core.unblockUI();

                                                    if (response.status === 'success') {
                                                        $("#" + $dialogName).dialog('close');
                                                    }

                                                },
                                                error: function(jqXHR, exception) {
                                                    var msg = '';
                                                    if (jqXHR.status === 0) {
                                                        msg = 'Not connect.\n Verify Network.';
                                                    } else if (jqXHR.status == 404) {
                                                        msg = 'Requested page not found. [404]';
                                                    } else if (jqXHR.status == 500) {
                                                        msg = 'Internal Server Error [500].';
                                                    } else if (exception === 'parsererror') {
                                                        msg = 'Requested JSON parse failed.';
                                                    } else if (exception === 'timeout') {
                                                        msg = 'Time out error.';
                                                    } else if (exception === 'abort') {
                                                        msg = 'Ajax request aborted.';
                                                    } else {
                                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                                    }

                                                    PNotify.removeAll();
                                                    new PNotify({
                                                        title: 'Error',
                                                        text: msg,
                                                        type: 'error',
                                                        sticker: false
                                                    });
                                                    Core.unblockUI();
                                                }
                                            });
                                        } else {
                                            PNotify.removeAll();
                                            new PNotify({
                                                title: 'warning',
                                                text: "Шаардлагатай талбаруудыг бөглөнө үү",
                                                type: 'warning',
                                                sticker: false
                                            });
                                        }
                                    }
                                },
                                {
                                    text: data.close_btn,
                                    class: 'btn blue-madison btn-sm ' + $btnClass,
                                    click: function() {
                                        $("#" + $dialogName).dialog('close');
                                        dataViewReloadByElement(dataGrid);
                                    }
                                }
                            ]
                        });
                        $("#" + $dialogName).dialog('open');
                        Core.initAjax($('.bp-window-' + data.uniqId));
                    } else {
                        if (typeof data.message !== 'undefined') {
                            PNotify.removeAll();
                            new PNotify({
                                title: 'warning',
                                text: data.message,
                                type: 'warning',
                                sticker: false
                            });
                        }
                    }
                    Core.unblockUI();
                },
                error: function(jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    PNotify.removeAll();
                    new PNotify({
                        title: 'Error',
                        text: msg,
                        type: 'error',
                        sticker: false
                    });
                    Core.unblockUI();
                }
            });
            return;
            
        } else if (urlLower == 'mdlayout/treelayout') {
            
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            treeLayoutContentRender(paramData);
            return;
            
        } else if (urlLower == 'mddoc/previewersfile') {
            
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }

            previewErsFile(paramData, selectedRow);
            return;
            
        } else if (urlLower == 'government/intranet' || urlLower == 'mdintranet/intranet1') {
            
            if (typeof isGovAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() { previewIntranet(paramData); });
            } else {
                previewIntranet(paramData);
            }
            
            return;
        } else if (urlLower == 'mdasset/intranet13' || urlLower == 'mdasset/intranet15') {
            previewIntranet13(urlLower);
            return;
        } else if (urlLower == 'omsconferenceeddform') {
            if (typeof isGovAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                    callomsconferenceAddForm(undefined, undefined, '1', selectedRow.id, 'dataViewReload', dataViewId);
                });
            } else {
                callomsconferenceAddForm(undefined, undefined, '1', selectedRow.id, 'dataViewReload', dataViewId);
            }
            
            return;
        } else if (urlLower == 'subject/viewstudentmark' || urlLower == 'subject/viewstudentyearmark') {

            $.ajax({
                type: 'post',
                url: url,
                data: {
                    selectedRow: selectedRow
                },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(data) {
                    var dialogName = '#dialog-pivot-grid';
                    if (!$(dialogName).length) {
                        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
                    }

                    $(dialogName).empty().append(data.Html);
                    $(dialogName).dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: 950,
                        height: 'auto',
                        modal: true,
                        close: function() {
                            $(dialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm',
                            click: function() {
                                $(dialogName).dialog('close');
                            }
                        }]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    $(dialogName).dialog('open');
                    $(dialogName).dialogExtend("maximize");

                    Core.initDVAjax($(dialogName));
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
            return;
            
        } else if (urlLower == 'school/duplicatesemistersubjectschedule') {

            $.ajax({
                type: 'post',
                url: url,
                data: {selectedRow: selectedRow},
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(data) {
                    var dialogName = '#dialog-duplicate-semister';
                    if (!$(dialogName).length) {
                        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
                    }

                    $(dialogName).empty().append(data.Html);
                    $(dialogName).dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: 950,
                        height: 'auto',
                        modal: true,
                        close: function() {
                            $(dialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: data.save_btn,
                                class: 'btn green-meadow btn-sm ',
                                click: function() {
                                    var $windowSelector = '.bp-window-' + data.uniqId;
                                    var $mainWindowSelector = $($windowSelector);

                                    $.ajax({
                                        type: 'post',
                                        url: 'school/duplicateSemisterData',
                                        dataType: 'json',
                                        data: {
                                            srcSemister: $mainWindowSelector.find('select[data-path="srcSemister"]').val(),
                                            trgSemister: $mainWindowSelector.find('select[data-path="trgSemister"]').val()
                                        },
                                        beforeSend: function() {
                                            Core.blockUI({target: $windowSelector, animate: true});
                                        },
                                        success: function(data) {
                                            PNotify.removeAll();
                                            new PNotify({
                                                title: data.title,
                                                text: data.message,
                                                type: data.status,
                                                sticker: false
                                            });
                                            if (data.status === 'success') {
                                                $(dialogName).dialog('close');
                                            }

                                            Core.unblockUI($windowSelector);
                                        },
                                        error: function(data) {

                                            PNotify.removeAll();
                                            new PNotify({
                                                title: data.title,
                                                text: data.message,
                                                type: data.status,
                                                sticker: false
                                            });
                                            Core.unblockUI($windowSelector);
                                        }
                                    }).done(function() {
                                        Core.initAjax();
                                        Core.unblockUI($windowSelector);
                                    });

                                }
                            },
                            {
                                text: data.close_btn,
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $(dialogName).dialog('close');
                                }
                            }
                        ]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    $(dialogName).dialog('open');

                    Core.initDVAjax($(dialogName));
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
            return;
            
        } else if (urlLower === 'mdasset/renderequipmentinstallationmobi') {
            selectedRow['wfmStatusParams'] = wfmStatusParams;
            renderEquipmentInstallationMobi(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower === 'mdasset/renderequipmentconnectionmobi') {
            renderEquipmentConnectionMobi(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'khanbank/requestform') {

            $.ajax({
                type: 'post',
                url: url,
                data: { dataType: 'json' },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(data) {
                    var dialogName = '#dialog-pivot-grid';
                    if (!$(dialogName).length) {
                        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
                    }

                    $(dialogName).empty().append(data.Html);
                    $(dialogName).dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: 1200,
                        height: 'auto',
                        modal: true,
                        close: function() {
                            $(dialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm',
                            click: function() {
                                $(dialogName).dialog('close');
                            }
                        }]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });

                    $(dialogName).dialog('open');
                    $(dialogName).dialogExtend("maximize");

                    Core.initDVAjax($(dialogName));
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
            return;
            
        } else if (urlLower == 'mdproc/index') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            
            procPageIndex(selectedRow.id, url);
            return;
            
        } else if (urlLower == 'mdproc/edit') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            
            procPageEdit(selectedRow.id, url);
            return;
            
        } else if (urlLower == 'mdproc/view') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            
            procPageView(selectedRow, url, dataViewId);
            return;
            
        } else if (urlLower == 'mdsalary/loadlog') {
            initSalaryLog(url, paramData);
            return;
        } else if (urlLower == 'government/editattendance'){
            selectedRow = dataViewSelectedRowsResolver(selectedRow);
            editGovernmentAttendance(selectedRow);
            return;
        } else if (urlLower == 'addtrainingweblink' || urlLower == 'edittrainingweblink') {
            selectedRow = dataViewSelectedRowsResolver(selectedRow);
            
            if (typeof isGovAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                    govTrainingAction(selectedRow, urlLower, dataViewId);
                });
            } else {
                govTrainingAction(selectedRow, urlLower, dataViewId);
            }
            
            return;
        } else if (urlLower == 'addformpoll_v1' || urlLower == 'editformpoll_v1') {
            selectedRow = dataViewSelectedRowsResolver(selectedRow);
            var _paramData = paramDataToObject(paramData);
            if (typeof isProjecPollAddonScript === 'undefined') {
                $.getScript(URL_APP + 'projects/assets/custom/projects/poll.js').done(function() {
                    pollActionForm(selectedRow, urlLower, dataViewId, _paramData);
                });
            } else {
                pollActionForm(selectedRow, urlLower, dataViewId, _paramData);
            }
            
            return;
        } else if (urlLower == 'addformpoll' || urlLower == 'editformpoll') {
            selectedRow = dataViewSelectedRowsResolver(selectedRow);
            var _paramData = paramDataToObject(paramData);
            if (typeof isGovAddonScript === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                    govPollAction(selectedRow, urlLower, dataViewId, _paramData);
                });
            } else {
                govPollAction(selectedRow, urlLower, dataViewId, _paramData);
            }
            
            return;
        } else if(urlLower == 'government/meetingcalendar') {
            if (typeof isMultiCalendar === 'undefined') {
                $.getScript(URL_APP + 'assets/custom/gov/multiselect.js').done(function() {
                    omsMeetingCalendar();
                });
            } else {
                omsMeetingCalendar();
            }
            
            return;
        } else if (urlLower == 'pfsavedvcriteria') {
            dvSaveCriteriaDialog(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            return;
        } else if (urlLower == 'selectedrowstopdfzip') {
            if (typeof isCommonAddonScript === 'undefined') {
                $.getScript(URL_APP + 'middleware/assets/js/addon/common.js').done(function() {
                    selectedRowsToPdfZip(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                });
            } else {
                selectedRowsToPdfZip(elem, processMetaDataId, dataViewId, selectedRow, paramData);
            }   
            return;
        }

        if (urlLower == 'mdgl/bankcharge') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            paramData = { processMetaDataId: processMetaDataId, dataViewId: dataViewId, selectedRow: selectedRow, dialogMode: _dialogMode };
        }
        
        if (urlLower === 'mdasset/renderconnectionmobi') {
            if (typeof selectedRow === 'undefined') {
                alert('Мөрөө сонгоно уу!');
                return;
            }
            _dialogMode = 'newtab';
            processTitle = 'Тохиргоо';
            $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/css/mobi/style.css"/>');
        }

        if (urlLower == 'billratefromgllist') {

            if ($("#object-value-list-" + dataViewId).find("input[data-path='filterStartDate']").length > 0) {
                paramData.push({ name: 'filterStartDate', value: $("#object-value-list-" + dataViewId).find("input[data-path='filterStartDate']").val() });
                paramData.push({ name: 'filterEndDate', value: $("#object-value-list-" + dataViewId).find("input[data-path='filterEndDate']").val() });
            }
            paramData.push({ name: 'dialogMode', value: _dialogMode });

            url = 'mdgl/billrate';
        }

        if (urlLower == 'mdgl/duplicate_entry') {
            url = 'mdgl/edit_entry';
            paramData.push({ name: 'isglcopy', value: 1 });
        }

        if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab && typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab && urlLower == 'mdgl/entry') {
            var $glTab = $('body').find("a[href='#app_tab_mdglentry']");
            if ($glTab.length > 0) {
                $glTab.tab('show');
                return;
            }
        }

        $.ajax({
            type: 'post',
            dataType: dataType,
            url: url,
            data: paramData,
            beforeSend: function() {
                Core.blockUI({boxed: true, message: 'Loading...'});
            },
            success: function(data) {
                
                if (_dialogMode === 'popup') {
                    
                    var $dialogName = 'dialog-bank-charge';
                    if (typeof data.mainId != 'undefined' && data.mainId != '') {
                        $dialogName = 'dialog-bank-charge-' + data.mainId;
                    }

                    if (!$($dialogName).length) {
                        $('<div id="' + $dialogName + '"></div>').appendTo("body");
                    }
                    $("#" + $dialogName).empty().append(data.Html);
                    $("#" + $dialogName).dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: data.dialogWidth,
                        minWidth: 700,
                        height: "auto",
                        modal: true,
                        close: function() {
                            $("#" + $dialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: data.save_btn,
                                class: 'btn btn-sm blue btn-save',
                                click: function() {

                                    PNotify.removeAll();
                                    $(data.dialogFormName, data.dialogWindowId).validate({ errorPlacement: function() {} });

                                    if ($(data.dialogFormName, data.dialogWindowId).valid()) {
                                        if (typeof data.beforeValidation !== 'undefined') {
                                            var _isUsedGl = $(data.beforeValidationId, data.dialogFormName).val();
                                            if (_isUsedGl == '0') {
                                                new PNotify({
                                                    title: 'Warning',
                                                    text: data.beforeValidationText,
                                                    type: 'warning',
                                                    sticker: false
                                                });
                                                return;
                                            }
                                        }

                                        $(data.dialogFormName, data.dialogWindowId).ajaxSubmit({
                                            type: 'post',
                                            data: {
                                                processMetaDataId: processMetaDataId,
                                                methodId: dataViewId,
                                                selectedRow: selectedRow,
                                                bookTypeId: '45',
                                                param: $(data.dialogFormName, data.dialogWindowId).serialize()
                                            },
                                            url: data.submitUrl,
                                            dataType: 'json',
                                            success: function(data) {
                                                new PNotify({
                                                    title: data.status,
                                                    text: data.message,
                                                    type: data.status,
                                                    sticker: false
                                                });

                                                if (data.status === 'success') {
                                                    $("#" + $dialogName).dialog('close');
                                                    dataViewReload(dataViewId);
                                                }
                                            }
                                        });
                                    }
                                }
                            },
                            {
                                text: data.close_btn,
                                class: 'btn btn-sm blue-hoki',
                                click: function() {
                                    $("#" + $dialogName).dialog('close');
                                    dataViewReload(dataViewId);
                                }
                            }
                        ]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    Core.initAjax($("#" + $dialogName));
                    Core.unblockUI();

                    $("#" + $dialogName).dialog('open');
                    if (_dialogView === 'fullscreen') {
                        $("#" + $dialogName).dialogExtend("maximize");
                    }

                    return true;
                }

                if (dataType.toLowerCase() === 'json') {
                    var jsonObj = JSON.parse(data);
                    if (jsonObj.hasOwnProperty('showNotify')) {
                        PNotify.removeAll();
                        new PNotify({
                            title: jsonObj.status,
                            text: jsonObj.message,
                            type: jsonObj.status,
                            sticker: false
                        });
                    }
                }

                if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab) {

                    if (urlLower == 'billratefromgllist') {

                        appMultiTabByContent({ weburl: 'mdgl/billrate', metaDataId: 'mdglbillrate', title: 'Тооцооны ханшийн тэгшитгэл', type: 'selfurl', content: data });

                    } else {

                        if (urlLower == 'mdgl/entry' && typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab) {

                            appMultiTabByContent({ weburl: 'mdgl/entry', metaDataId: 'mdglentry', title: 'Журнал бичилт', type: 'newprocess', content: data });

                        } else if (urlLower == 'mdgl/edit_entry' && typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab) {

                            appMultiTabByContent({ weburl: 'mdgl/edit_entry', metaDataId: getUniqueId(1), title: 'Журнал бичилт засах', type: 'newprocess', content: data });

                        } else if (urlLower == 'mdgl/duplicate_entry' && typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab) {

                            appMultiTabByContent({ weburl: 'mdgl/edit_entry', metaDataId: getUniqueId(1), title: 'Журнал бичилт хуулах', type: 'newprocess', content: data });

                        } else if (urlLower == 'mdgl/view_entry' && typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab) {

                            appMultiTabByContent({ weburl: 'mdgl/view_entry', metaDataId: getUniqueId(1), title: 'Журнал бичилт харах', type: 'newprocess', content: data });

                        } else if (urlLower == 'mddoc/documentcomment') {

                            appMultiTabByContent({ weburl: urlLower, metaDataId: 'docdocumentplan-' + getUniqueId(1), title: processTitle, type: 'newprocess', content: data });

                        } else if (urlLower == 'mddoc/documenteditcomment') {

                            appMultiTabByContent({ weburl: urlLower, metaDataId: 'docdocumenteditcomment-' + getUniqueId(1), title: processTitle, type: 'newprocess', content: data });

                        } else {
                            if (_dialogMode == 'newtab') {
                                appMultiTabByContent({ weburl: urlLower, metaDataId: getUniqueId(1), title: processTitle, type: 'selfurl', content: data });
                            } else {
                                newContainerAppendByDv(elem, dataViewId, '<div id="editFormGroup">' + data + '</div>');
                            }
                        }
                    }

                } else {
                    newContainerAppend('<div id="editFormGroup">' + data + '</div>');
                }
                
                Core.unblockUI();
            }
        });
    }
}

function addBpTemplate(elem, processMetaDataId, dataViewId) {
    var dialogName = '#dialog-addbptemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    var $dialog = $(dialogName);

    $.cachedScript('assets/custom/addon/plugins/tinymce/tinymce.min.js').done(function() {
        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/css/report_template.css"/>');
        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/tinymce/plugins/mention/autocomplete.css"/>');
        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/tinymce/plugins/mention/rte-content.css"/>');
        $.cachedScript('assets/custom/addon/plugins/tinymce/plugins/mention/plugin.min.js').done(function() {

            $.ajax({
                type: 'post',
                url: 'mddoc/addBpTemplate',
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(data) {
                    $dialog.empty().append(data.html);
                    $dialog.dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.title,
                        width: 1100,
                        height: 'auto',
                        modal: true,
                        close: function() {
                            tinymce.remove('textarea');
                            $dialog.empty().dialog('destroy').remove();
                        },
                        open: function() {
                            var _tinymceHeight = $(window).height() - 300;
                            _tinymceHeight = (_tinymceHeight <= 100) ? '400px' : _tinymceHeight + 'px';
                            tinymce.dom.Event.domLoaded = true;
                            tinymce.baseURL = URL_APP + 'assets/custom/addon/plugins/tinymce';
                            tinymce.suffix = ".min";
                            tinymce.init({
                                selector: 'textarea#tempEditor',
                                height: _tinymceHeight,
                                plugins: [
                                    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                                    'searchreplace wordcount visualblocks visualchars code fullscreen',
                                    'insertdatetime media nonbreaking save table contextmenu directionality',
                                    'emoticons template paste textcolor colorpicker textpattern imagetools moxiemanager mention lineheight'
                                ],
                                toolbar1: 'undo redo | styleselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
                                toolbar2: 'print preview | forecolor backcolor | fontselect | fontsizeselect | lineheightselect | table | fullscreen',
                                fontsize_formats: '8px 9px 10px 11px 12px 13px 14px 16px 18px 20px 24px 36px',
                                image_advtab: true,
                                force_br_newlines: true,
                                force_p_newlines: false,
                                forced_root_block: '',
                                paste_data_images: true,
                                table_toolbar: '',
                                table_class_list: [
                                    { title: 'None', value: '' },
                                    { title: 'No border', value: 'pf-report-table-none' },
                                    { title: 'Dotted', value: 'pf-report-table-dotted' },
                                    { title: 'Dashed', value: 'pf-report-table-dashed' },
                                    { title: 'Solid', value: 'pf-report-table-solid' }
                                ],
                                paste_word_valid_elements: "b,p,br,strong,i,em,h1,h2,h3,h4,ul,li,ol,table,span,div,font",
                                mentions: {
                                    delimiter: '#',
                                    delay: 0,
                                    queryBy: 'META_DATA_CODE',
                                    source: function(query, process, delimiter) {
                                        $.ajax({
                                            type: "post",
                                            url: "mddoc/getAllVariablesByJson",
                                            data: { processId: $(dialogName).find('#metaDataId_valueField').val() },
                                            dataType: 'json',
                                            success: function(data) {
                                                process(data);
                                            }
                                        });
                                    },
                                    render: function(item) {
                                        return '<li>' +
                                            '<a href="javascript:;">' + item.META_DATA_CODE + ' - ' + item.META_DATA_NAME + '</a>' +
                                            '</li>';
                                    },
                                    insert: function(item) {
                                        return '#' + item.meta_data_code + '#';
                                    }
                                },
                                setup: function(editor) {
                                    editor.on('init', function() {
                                        $('textarea#tempEditor').prev('.mce-container').find('.mce-edit-area')
                                            .droppable({
                                                drop: function(event, ui) {
                                                    tinymce.activeEditor.execCommand('mceInsertContent', false, '#' + ui.draggable.text() + '#');
                                                }
                                            });
                                    });
                                    editor.on('keydown', function(evt) {
                                        if (evt.keyCode == 9) {
                                            editor.execCommand('mceInsertContent', false, '&emsp;&emsp;');
                                            evt.preventDefault();
                                            return false;
                                        }
                                    });
                                },
                                document_base_url: URL_APP,
                                content_css: URL_APP + 'assets/custom/css/print/tinymce.css'
                            });
                        },
                        buttons: [{
                                text: data.save_btn,
                                class: 'btn green-meadow btn-sm',
                                click: function() {
                                    $("form#appbp-template-form").validate({ errorPlacement: function() {} });

                                    if ($("form#appbp-template-form").valid()) {
                                        tinymce.triggerSave();

                                        $('form#appbp-template-form', dialogName).ajaxSubmit({
                                            type: 'post',
                                            url: 'mddoc/addBpTemplateSave',
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({message: 'Loading...', boxed: true});
                                            },
                                            success: function(data) {
                                                PNotify.removeAll();
                                                new PNotify({
                                                    title: data.status,
                                                    text: data.message,
                                                    type: data.status,
                                                    sticker: false
                                                });
                                                if (data.status === 'success') {
                                                    $dialog.dialog('close');
                                                    dataViewReload(dataViewId);
                                                }
                                                Core.unblockUI();
                                            }
                                        });
                                    }
                                }
                            },
                            {
                                text: data.close_btn,
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $dialog.dialog('close');
                                }
                            }
                        ]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    $dialog.dialog('open');
                    $dialog.dialogExtend("maximize");
                    $dialog.bind("dialogextendrestore", function() {
                        var _tinymceHeight = $dialog.height() - 200;
                        if (document.getElementsByClassName('mce-edit-area')) {
                            document.getElementsByClassName('mce-edit-area')[0].style.height = _tinymceHeight + "px";
                        }
                    });
                    $dialog.bind("dialogextendmaximize", function() {
                        var _tinymceHeight = $(dialogName).height() - 200;
                        if (document.getElementsByClassName('mce-edit-area')) {
                            document.getElementsByClassName('mce-edit-area')[0].style.height = _tinymceHeight + "px";
                        }
                    });
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            }).done(function() {
                Core.initAjax($dialog);
            });
        });
    });
}

function viewWordTemplate(elem, processMetaDataId, dataViewId, selectedRow, callback, paramData, isDeleteContent) {
    var dialogName = '#dialog-viewwordtemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/viewWordTemplate',
        data: {
            selectedRow: selectedRow,
            dataViewId: dataViewId,
            webLinkId: processMetaDataId,
            isDeleteContent: isDeleteContent,
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'success') {
                if (typeof callback !== 'undefined') {
                    selectedRow['contentid'] = data.contentid;
                    selectedRow['physicalpath'] = data.filepath;

                    ntrFingerprintCheck(elem, processMetaDataId, dataViewId, selectedRow, paramData);
                } else {
                    CheckOut(URL_APP + data.filepath);
                }
            } else {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: data.message,
                    type: 'warning',
                    sticker: false
                });
            }

            dataViewReload(dataViewId);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function viewRePdfTemplate(elem, processMetaDataId, dataViewId, selectedRow, callback) {
    
    $.ajax({
        type: 'post',
        url: 'mddoc/viewWordTemplate',
        data: {
            selectedRow: selectedRow,
            dataViewId: dataViewId,
            webLinkId: processMetaDataId
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'success') {
                if (typeof callback !== 'undefined') {
                    selectedRow['contentid'] = data.contentid;
                    selectedRow['physicalpath'] = data.filepath;

                    ntrFingerprintCheck(elem, processMetaDataId, dataViewId, selectedRow);
                } else {
                    CheckOut(URL_APP + data.filepath);
                }
            } else {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: data.message,
                    type: 'warning',
                    sticker: false
                });
            }

            dataViewReload(dataViewId);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function editWordTemplate(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-editwordtemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    var $dialog = $(dialogName);

    $.ajax({
        type: 'post',
        url: 'mddoc/editWordTemplate',
        data: { selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.html);
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 550,
                height: 'auto',
                modal: true,
                close: function() {
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $("form#appbp-edit-template-form").validate({ errorPlacement: function() {} });

                            if ($("form#appbp-edit-template-form").valid()) {
                                $('form#appbp-edit-template-form', dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mddoc/addWordTemplateUpdate',
                                    dataType: 'json',
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });

                                        if (data.status === 'success') {
                                            $dialog.dialog('close');
                                            dataViewReload(dataViewId);
                                        }
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });

            $dialog.dialog('open');
            $dialog.bind("dialogextendrestore", function() {});
            $dialog.bind("dialogextendmaximize", function() {});
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function bpTaxonomyCacheClear(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-editwordtemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $(dialogName).empty().append('Үүссэн taxonomy cache файл цэвэрлэхдээ итгэлтэй байна уу?');
    $(dialogName).dialog({
        cache: false,
        resizable: true,
        bgiframe: true,
        autoOpen: false,
        title: 'Taxonomy cache цэвэрлэх',
        width: 550,
        height: 'auto',
        modal: true,
        close: function() {
            $(dialogName).empty().dialog('destroy').remove();
        },
        buttons: [{
                text: plang.get('yes_btn'),
                class: 'btn green-meadow btn-sm',
                click: function() {
                    $.ajax({
                        type: 'post',
                        url: 'mddoc/bpTaxonomyCacheClear',
                        dataType: 'json',
                        data: selectedRow,
                        success: function(data) {
                            PNotify.removeAll();
                            new PNotify({
                                title: data.status,
                                text: data.message,
                                type: data.status,
                                sticker: false
                            });
                                
                            if (data.status === 'success') {
                                $(dialogName).dialog('close');
                                dataViewReload(dataViewId);
                            } 

                            Core.unblockUI();
                        }
                    });
                }
            },
            {
                text: plang.get('close_btn'),
                class: 'btn blue-madison btn-sm',
                click: function() {
                    $(dialogName).dialog('close');
                }
            }
        ]
    }).dialogExtend({
        "closable": true,
        "maximizable": false,
        "minimizable": true,
        "collapsable": true,
        "dblclick": "maximize",
        "minimizeLocation": "left",
        "icons": {
            "close": "ui-icon-circle-close",
            "maximize": "ui-icon-extlink",
            "minimize": "ui-icon-minus",
            "collapse": "ui-icon-triangle-1-s",
            "restore": "ui-icon-newwin"
        }
    });
    $(dialogName).dialog('open');
}

function addWordTemplate(elem, processMetaDataId, dataViewId, paramData) {
    var dialogName = '#dialog-addwordtemplate', paramData = paramDataToObject(paramData);
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    var mandatoryCriteriaParams = {};
    if ($("form.mandatory-criteria-form-" + dataViewId).find("input[data-path]").length > 0) {
        $("form.mandatory-criteria-form-" + dataViewId).find("input[data-path]").each(function() {
            var _thisField = $(this);
            mandatoryCriteriaParams[_thisField.attr('data-path')] = _thisField.val();
        });
    }

    if ($("input#cardViewerFieldPath", "#object-value-list-" + dataViewId).val() !== '' &&
        $("input#cardViewerValue", "#object-value-list-" + dataViewId).val() !== '') {
        mandatoryCriteriaParams[$("input#cardViewerFieldPath", "#object-value-list-" + dataViewId).val()] = $("input#cardViewerValue", "#object-value-list-" + dataViewId).val();
    }

    if ($('body').find("input#dataview-criteria-params-" + dataViewId).length > 0 && $('body').find("input#dataview-criteria-params-" + dataViewId).val() != '') {
        var criteriaParams = $('body').find("input#dataview-criteria-params-" + dataViewId).val();
        var paramsPathArr = criteriaParams.split('&');

        for (var i = 0; i < paramsPathArr.length; i++) {
            var fieldPathArr = paramsPathArr[i].split('=');
            mandatoryCriteriaParams[fieldPathArr[0]] = fieldPathArr[1];
        }
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/addWordTemplate',
        data: { addonJsonParam: JSON.stringify(mandatoryCriteriaParams), paramData: paramData},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 550,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $("form#appbp-template-form").validate({ errorPlacement: function() {} });

                            if ($("form#appbp-template-form").valid()) {
                                $('form#appbp-template-form', dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mddoc/addWordTemplateSave',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: 'Loading...', boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });
                                            
                                        if (data.status === 'success') {
                                            $(dialogName).dialog('close');
                                            dataViewReload(dataViewId);
                                        } 
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function configProcessWordTemplate(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-configprocesswordtemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/configProcessBpTemplate',
        data: {
            templateId: selectedRow.templateid
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 550,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $("form#appbp-template-form").validate({ errorPlacement: function() {} });

                            if ($("form#appbp-template-form").valid()) {
                                $('form#appbp-template-form', dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mddoc/configProcessWordTemplateSave',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: 'Loading...', boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });
                                            
                                        if (data.status === 'success') {
                                            $(dialogName).dialog('close');
                                            dataViewReload(dataViewId);
                                        } 
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function configProcessUpdateWordTemplate(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-configProcessUpdateWordTemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/configProcessUpdateWordTemplate',
        data: { selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 550,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $("form#appbp-update-template-form").validate({ errorPlacement: function() {} });

                            if ($("form#appbp-update-template-form").valid()) {
                                $('form#appbp-update-template-form', dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mddoc/configUpdateWordTemplate',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: 'Loading...', boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });
                                        
                                        if (data.status === 'success') {
                                            $(dialogName).dialog('close');
                                            dataViewReload(dataViewId);
                                        } 
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function addWordTemplateTaxonamyConfig(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-configtaxonamytemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    if (typeof selectedRow.templateid === 'undefined') {
        alert('Not Found TemplateId!');
        return;
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/configTaxonamyTemplate',
        data: {
            templateId: selectedRow.templateid
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'success') {
                $(dialogName).empty().append(data.html);
                $(dialogName).dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: 1100,
                    height: 'auto',
                    modal: true,
                    close: function() {
                        $(dialogName).empty().dialog('destroy').remove();
                    },
                    buttons: [{
                            text: data.save_btn,
                            class: 'btn green-meadow btn-sm',
                            click: function() {
                                $("form#appbp-template-form").validate({ errorPlacement: function() {} });

                                if ($("form#appbp-template-form").valid()) {
                                    $('form#appbp-template-form', dialogName).ajaxSubmit({
                                        type: 'post',
                                        url: 'mddoc/configTaxonamySaveTemplate',
                                        dataType: 'json',
                                        beforeSend: function() {
                                            Core.blockUI({message: 'Loading...', boxed: true});
                                        },
                                        success: function(data) {
                                            PNotify.removeAll();
                                            new PNotify({
                                                title: data.status,
                                                text: data.message,
                                                type: data.status,
                                                sticker: false
                                            });
                                                
                                            if (data.status === 'success') {
                                                $(dialogName).dialog('close');
                                                dataViewReload(dataViewId);
                                            } 
                                            Core.unblockUI();
                                        }
                                    });
                                }
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm',
                            click: function() {
                                $(dialogName).dialog('close');
                            }
                        }
                    ]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $(dialogName).dialog('open');
                $(dialogName).dialogExtend("maximize");

            } else {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: data.message,
                    type: 'warning',
                    sticker: false
                });
            }

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function checkXypNtr(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-checkxypntr';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/checkXypNtr',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'success') {
                $(dialogName).empty().append(data.html);
                $(dialogName).dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: 1150,
                    height: 'auto',
                    modal: true,
                    close: function() {
                        $(dialogName).empty().dialog('destroy').remove();
                    },
                    buttons: [
                        {
                            text: data.check_btn,
                            class: 'btn btn-success btn-sm',
                            click: function() {

                                var __dialogName = $(dialogName);
                                var $selectedItem = __dialogName.find('.select-item-' + data.uniqId + '.active');
                                if ($selectedItem.length == 0) {
                                    PNotify.removeAll();
                                    new PNotify({
                                        title: 'Анхааруулга',
                                        text: 'Төрлөө сонгоно уу?',
                                        type: 'warning',
                                        sticker: false
                                    });
                                    return;
                                }

                                var $propertyNumber = __dialogName.find('input[name="temp-propertyNumber"]').val();
                                var $stateRegNumber = __dialogName.find('input[name="temp-stateRegNumber"]').val();
                                var $civilNumber = __dialogName.find('input[name="temp-civilNumber"]').val();
                                var $legalEntityNumber = __dialogName.find('input[name="temp-legalEntityNumber"]').val();

                                switch ($selectedItem.attr('data-id')) {
                                    case '1':
                                    case '2':
                                        if ($stateRegNumber == '' && $civilNumber == '') {
                                            new PNotify({
                                                title: 'Анхааруулга',
                                                text: 'Мэдээлэлээ гүйцэт бөглөнө үү',
                                                type: 'warning',
                                                sticker: false
                                            });
                                            return;
                                        }
                                        break;
                                    case '4':
                                        if ($legalEntityNumber == '') {
                                            new PNotify({
                                                title: 'Анхааруулга',
                                                text: 'Мэдээлэлээ гүйцэт бөглөнө үү',
                                                type: 'warning',
                                                sticker: false
                                            });
                                            return;
                                        }
                                        break;

                                    case '3':
                                        if (($stateRegNumber == '' && $civilNumber == '') || $propertyNumber == '') {
                                            new PNotify({
                                                title: 'Анхааруулга',
                                                text: 'Мэдээлэлээ гүйцэт бөглөнө үү',
                                                type: 'warning',
                                                sticker: false
                                            });
                                            return;
                                        }
                                        break;
                                    default:
                                        new PNotify({
                                            title: 'Анхааруулга',
                                            text: 'Хөгжүүлэлт хийгдэж байна,',
                                            type: 'warning',
                                            sticker: false
                                        });
                                        return;
                                        break;
                                }
                                
                                fingerWithXypData($selectedItem, data.uniqId, $propertyNumber, $stateRegNumber, $legalEntityNumber, $civilNumber);
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm',
                            click: function() {
                                $(dialogName).dialog('close');
                            }
                        }
                    ]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $(dialogName).dialog('open');

            } else {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: data.message,
                    type: 'warning',
                    sticker: false
                });
            }

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function editBpTemplate(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-editbptemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    var $dialog = $(dialogName);

    $.cachedScript('assets/custom/addon/plugins/tinymce/tinymce.min.js').done(function() {    
        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/css/report_template.css"/>');
        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/tinymce/plugins/mention/autocomplete.css"/>');
        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/tinymce/plugins/mention/rte-content.css"/>');
        $.cachedScript('assets/custom/addon/plugins/tinymce/plugins/mention/plugin.min.js').done(function() {   

            $.ajax({
                type: 'post',
                url: 'mddoc/editBpTemplate',
                data: { selectedRow: selectedRow },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(data) {
                    $dialog.empty().append(data.html);
                    $dialog.dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.title,
                        width: 1100,
                        height: 'auto',
                        modal: true,
                        close: function() {
                            tinymce.remove('textarea');
                            $dialog.empty().dialog('destroy').remove();
                        },
                        open: function() {
                            var windowHeight = $(window).height();
                            var _tinymceHeight = windowHeight - 300;
                            _tinymceHeight = (_tinymceHeight <= 100) ? '400px' : _tinymceHeight + 'px';
                            $dialog.find('.report-tags').css({ 'max-height': windowHeight - 160 });
                            tinymce.dom.Event.domLoaded = true;
                            tinymce.baseURL = URL_APP + 'assets/custom/addon/plugins/tinymce';
                            tinymce.suffix = ".min";
                            tinymce.init({
                                selector: 'textarea#tempEditor',
                                height: _tinymceHeight,
                                plugins: [
                                    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                                    'searchreplace wordcount visualblocks visualchars code fullscreen',
                                    'insertdatetime media nonbreaking save table contextmenu directionality importcss codemirror',
                                    'emoticons template paste textcolor colorpicker textpattern imagetools moxiemanager mention lineheight'
                                ],
                                toolbar1: 'undo redo | styleselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
                                toolbar2: 'print preview | forecolor backcolor | fontselect | fontsizeselect | lineheightselect | table | fullscreen | code',
                                fontsize_formats: '8px 9px 10px 11px 12px 13px 14px 16px 18px 20px 24px 36px',
                                image_advtab: true,
                                force_br_newlines: true,
                                force_p_newlines: false,
                                apply_source_formatting: true,
                                remove_linebreaks: false,
                                forced_root_block: '',
                                paste_data_images: true,
                                importcss_append: true,
                                table_toolbar: '',
                                extended_valid_elements: 'script[language|type|src],style[type]',
                                valid_children: "+body[style]",
                                table_class_list: [
                                    { title: 'None', value: '' },
                                    { title: 'No border', value: 'pf-report-table-none' },
                                    { title: 'Dotted', value: 'pf-report-table-dotted' },
                                    { title: 'Dashed', value: 'pf-report-table-dashed' },
                                    { title: 'Solid', value: 'pf-report-table-solid' }
                                ],
                                object_resizing: 'img',
                                paste_word_valid_elements: 'b,p,br,strong,i,em,h1,h2,h3,h4,ul,li,ol,table,span,div,font,page',
                                mentions: {
                                    delimiter: '#',
                                    delay: 0,
                                    queryBy: 'META_DATA_CODE',
                                    source: function(query, process, delimiter) {
                                        $.ajax({
                                            type: "post",
                                            url: "mddoc/getAllVariablesByJson",
                                            data: { processId: $(dialogName).find('#metaDataId_valueField').val() },
                                            dataType: 'json',
                                            success: function(data) {
                                                process(data);
                                            }
                                        });
                                    },
                                    render: function(item) {
                                        return '<li>' +
                                            '<a href="javascript:;">' + item.META_DATA_CODE + ' - ' + item.META_DATA_NAME + '</a>' +
                                            '</li>';
                                    },
                                    insert: function(item) {
                                        return '#' + item.meta_data_code + '#';
                                    }
                                },
                                codemirror: {
                                    indentOnInit: true,
                                    fullscreen: false,
                                    path: 'codemirror',
                                    config: {
                                        mode: 'text/html',
                                        styleActiveLine: true,
                                        lineNumbers: true,
                                        lineWrapping: true,
                                        matchBrackets: true,
                                        autoCloseBrackets: true,
                                        indentUnit: 2,
                                        foldGutter: true,
                                        gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
                                        extraKeys: {
                                            "F11": function(cm) {
                                                cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                                            },
                                            "Esc": function(cm) {
                                                if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                                            },
                                            "Ctrl-Q": function(cm) {
                                                cm.foldCode(cm.getCursor());
                                            },
                                            "Ctrl-Space": "autocomplete"
                                        }
                                    },
                                    width: ($(window).width() - 20),
                                    height: ($(window).height() - 120),
                                    saveCursorPosition: false,
                                    jsFiles: [
                                        'mode/clike/clike.js',
                                        'mode/htmlmixed/htmlmixed.js',
                                        'mode/css/css.js',
                                        'mode/xml/xml.js',
                                        'addon/fold/foldcode.js',
                                        'addon/fold/foldgutter.js',
                                        'addon/fold/brace-fold.js',
                                        'addon/fold/xml-fold.js',
                                        'addon/fold/indent-fold.js',
                                        'addon/fold/comment-fold.js',
                                        'addon/hint/show-hint.js',
                                        'addon/hint/xml-hint.js',
                                        'addon/hint/html-hint.js',
                                        'addon/hint/css-hint.js'
                                    ]
                                },
                                setup: function(editor) {
                                    editor.on('init', function() {
                                        $('textarea#tempEditor').prev('.mce-container').find('.mce-edit-area')
                                            .droppable({
                                                drop: function(event, ui) {
                                                    tinymce.activeEditor.execCommand('mceInsertContent', false, '#' + ui.draggable.text() + '#');
                                                }
                                            });
                                    });
                                    editor.on('keydown', function(evt) {
                                        if (evt.keyCode == 9) {
                                            editor.execCommand('mceInsertContent', false, '&emsp;&emsp;');
                                            evt.preventDefault();
                                            return false;
                                        }
                                    });
                                },
                                document_base_url: URL_APP,
                                content_css: [
                                    URL_APP + 'assets/custom/css/print/tinymce.css',
                                    URL_APP + 'assets/custom/css/components-rounded.css'
                                ]
                            });
                        },
                        buttons: [{
                                text: data.save_btn,
                                class: 'btn green-meadow btn-sm',
                                click: function() {
                                    $("form#editbp-template-form").validate({ errorPlacement: function() {} });

                                    if ($("form#editbp-template-form").valid()) {
                                        tinymce.triggerSave();

                                        $('form#editbp-template-form', dialogName).ajaxSubmit({
                                            type: 'post',
                                            url: 'mddoc/editBpTemplateSave',
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({message: 'Loading...', boxed: true});
                                            },
                                            success: function(data) {
                                                PNotify.removeAll();
                                                new PNotify({
                                                    title: data.status,
                                                    text: data.message,
                                                    type: data.status,
                                                    sticker: false
                                                });
                                                if (data.status === 'success') {
                                                    $dialog.dialog('close');
                                                    dataViewReload(dataViewId);
                                                }
                                                Core.unblockUI();
                                            }
                                        });
                                    }
                                }
                            },
                            {
                                text: data.close_btn,
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $dialog.dialog('close');
                                }
                            }
                        ]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    $dialog.dialog('open');
                    $dialog.dialogExtend("maximize");

                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            }).done(function() {
                Core.initAjax($dialog);
            });
        });
    });
}

function copyBpTemplate(elem, processMetaDataId, dataViewId, selectedRow) {
    var dialogName = '#dialog-copybptemplate';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/copyBpTemplate',
        data: { selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 600,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $("form#copybp-template-form").validate({ errorPlacement: function() {} });

                            if ($("form#copybp-template-form").valid()) {

                                $('form#copybp-template-form', dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mddoc/copyBpTemplateSave',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: 'Loading...', boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });
                                            
                                        if (data.status === 'success') {
                                            $(dialogName).dialog('close');
                                            dataViewReload(dataViewId);
                                        } 
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            });
            $(dialogName).dialog('open');

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}

function htmlContentOpener(elem, processMetaDataId, dataViewId, selectedRow, contentHtmlName, callback) {
    var contentid = selectedRow.contentid;
    $.ajax({
        type: 'post',
        url: 'mdcontentui/contentHtmlRender',
        data: {
            id: contentid,
            contentHtmlName: contentHtmlName,
            dataViewId: dataViewId,
            srcRecordId: selectedRow.id
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            PNotify.removeAll();

            if (typeof callback !== 'function') {
                var config = {
                    title: data.Title,
                    width: data.width,
                    height: data.height,
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn btn-sm blue-madison',
                        click: function() {
                            $('#dialog-contentui').dialog('close');
                        }
                    }]
                };

                Core.initDialog('dialog-contentui', data.html, config, function($dialog) {
                    $dialog.dialogExtend("maximize");
                });
            } else {
                callback(data);
            }

            Core.unblockUI();
        },
        error: function() {
            new PNotify({
                title: 'Error',
                text: 'Error',
                type: 'error',
                sticker: false
            });
        }
    });
}

function htmlContentCreate(elem, processMetaDataId, dataViewId, selectedRow) {
    $.ajax({
        type: 'post',
        url: 'mdcontentui/createContent',
        data: {},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            PNotify.removeAll();

            var config = {
                title: data.title,
                width: data.width,
                height: data.height,
                buttons: [{
                        text: data.save_btn,
                        class: 'btn btn-sm green-meadow',
                        click: function() {
                            saveContentHtml($('#dialog-contentui'));
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $('#dialog-contentui').dialog('close');
                        }
                    }
                ]
            };

            Core.initDialog('dialog-contentui', data.html, config, function($dialog) {
                $dialog.dialogExtend("maximize");
            });
            Core.unblockUI();
        },
        error: function() {
            new PNotify({
                title: 'Error',
                text: 'error',
                type: 'error',
                sticker: false
            });
        }
    }).done(function() {
        if (typeof tinymce !== 'undefined') {
            initTinyMceEditor();
        }
    });
}

function htmlContentEdit(elem, processMetaDataId, dataViewId, selectedRow) {
    var contentid = selectedRow.contentid;
    $.ajax({
        type: 'post',
        url: 'mdcontentui/editContent',
        data: { id: contentid },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            PNotify.removeAll();

            var $dialogName = 'dialog-contentui';
            if (!$("#" + $dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo('body');
            }

            $("#" + $dialogName).empty().append(data.html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: data.width,
                height: data.height,
                maximizable: true,
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('close');
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn btn-sm green-meadow',
                        click: function() {
                            saveContentHtml($('#dialog-contentui'));
                            $("#" + $dialogName).dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $("#" + $dialogName).dialog('close');
                        }
                    },
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialogExtend("maximize");
            $("#" + $dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            new PNotify({
                title: 'Error',
                text: 'Error',
                type: 'error',
                sticker: false
            });
        }
    }).done(function() {
        if (typeof tinymce !== 'undefined') {
            initTinyMceEditor();
        }
    });
}

function contentUpload(elem, processMetaDataId, dataViewId, selectedRow) {
    $.ajax({
        type: 'post',
        url: 'mddoc/contentUpload',
        data: { processMetaDataId: processMetaDataId, dataViewId: dataViewId, selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {

            if (data.status !== 'success') {
                
                new PNotify({
                    title: 'Error',
                    text: data.message,
                    type: 'error',
                    sticker: false
                });
                Core.unblockUI();
                return false;
                
            }

            if (data.hasOwnProperty('status') && data.status === 'success') {
                CheckIn(data.dir, data.fileName, URL_APP + 'mddoceditor/fileUpload');
                dataViewReload(dataViewId);
            }

            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    });
}

function docToPdfUpload(elem, processMetaDataId, dataViewId, selectedRow, paramData, confirmType, callURL, callbackFunction) {
    var submitURL = typeof callURL !== 'undefined' ? callURL : 'mddoc/docToPdfUpload';
    if (selectedRow['physicalpath'] != '' || selectedRow['physicalpath'] != null) {
        if ("WebSocket" in window) {
            var ws = new WebSocket("ws://localhost:58324/socket");

            ws.onopen = function() {
                var currentDateTime = GetCurrentDateTime();
                ws.send('{"command":"word_to_pdf", "dateTime":"' + currentDateTime + '", details: [{"key": "url", "value": "' + URL_APP + selectedRow['physicalpath'] + '"},{"key": "barcode", "value": "' + selectedRow['qrcode'] + '"}]}');
            };

            ws.onmessage = function(evt) {
                var received_msg = evt.data;
                var jsonData = JSON.parse(received_msg);

                if (jsonData.status == 'success') {
                    $.ajax({
                        type: 'post',
                        url: submitURL,
                        data: { 
                            processMetaDataId: processMetaDataId, 
                            dataViewId: dataViewId, 
                            selectedRow: selectedRow, 
                            paramData: paramData, 
                            encodeData: jsonData.details[0].value,
                            serviceBookId: selectedRow.id,
                            confirmType: confirmType, 
                        },
                        dataType: 'json',
                        beforeSend: function() {
                            Core.blockUI({animate: true});
                        },
                        success: function(data) {
                            PNotify.removeAll();
                            if (typeof functionIsWorking !== 'undefined') window.removeEventListener("beforeunload",functionIsWorking);
                            
                            if (typeof callbackFunction !== 'undefined') {
                                callbackFunction();
                            }
                            if (data.hasOwnProperty('status') && data.status === 'success') {
                                if (typeof selectedRow.id !== 'undefined') {
                                    $.ajax({
                                        type: 'post',
                                        url: 'mddoc/ntrBooknumberUpdate',
                                        data: { id: selectedRow.id },
                                        dataType: 'json',
                                        beforeSend: function() {},
                                        success: function(data) {
                                            dataViewReload(dataViewId);
                                        },
                                        error: function() {
                                            dataViewReload(dataViewId);
                                        }
                                    });
                                } else {
                                    dataViewReload(dataViewId);
                                }
                                new PNotify({
                                    title: 'Success',
                                    text: 'Success',
                                    type: 'success',
                                    sticker: false
                                });

                            } else {
                                new PNotify({
                                    title: 'Warning',
                                    text: data.message,
                                    type: 'warning',
                                    sticker: false
                                });
                            }

                            Core.unblockUI();
                        },
                        error: function() {
                            alert('Error');
                        }
                    });
                } else {
                    var resultJson = {
                        Status: 'Error',
                        Error: jsonData.message
                    }
                    Core.unblockUI();
                    console.log(JSON.stringify(resultJson));
                }
            };

            ws.onerror = function(event) {
                var resultJson = {
                    Status: 'Error',
                    Error: plang.get('client_not_working'),
                }
                
                PNotify.removeAll();
                new PNotify({
                    title: 'warning',
                    text: plang.get('client_not_working'),
                    type: 'warning',
                    sticker: false
                });
                Core.unblockUI();
            };

            ws.onclose = function() {
                console.log("Connection is closed...");
            };

        } else {
            var resultJson = {
                Status: 'Error',
                Error: "WebSocket NOT supported by your Browser!"
            }
            console.log(JSON.stringify(resultJson));
            Core.unblockUI();
        }
    } else {
        PNotify.removeAll();
        new PNotify({
            title: 'Warning',
            text: 'Файлын зам хоосон байна!',
            type: 'warning',
            sticker: false
        });
        Core.unblockUI();
    }
}

function contentOpener(elem, processMetaDataId, dataViewId, selectedRow) {
    $.ajax({
        type: 'post',
        url: 'mddoc/contentOpener',
        data: { processMetaDataId: processMetaDataId, dataViewId: dataViewId, selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {

            if (data.status == 'success') {
                CheckOut(URL_APP + selectedRow['physicalpath']);
                dataViewReload(dataViewId);
            }

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function contentVerify(elem, processMetaDataId, dataViewId, selectedRow) {
    if (typeof selectedRow['physicalpath'] !== 'undefined') {
        var refStructureId = $("input#refStructureId", "#object-value-list-" + dataViewId).val();
        signedInfo(dataViewId, refStructureId, selectedRow, URL_APP + selectedRow['physicalpath']);
    } else {
        alert('Файлын зам тодорхойлогдоогүй байна');
    }
}

function contentSign(elem, processMetaDataId, dataViewId, selectedRow) {

    selectedRow = getDataViewSelectedRows(dataViewId);
    selectedRow = selectedRow[0];

    if (typeof selectedRow['physicalpath'] !== 'undefined') {
        var refStructureId = $("input#refStructureId", "#object-value-list-" + dataViewId).val();
        signPdfAndText(dataViewId, refStructureId, selectedRow, selectedRow['physicalpath']);
    } else {
        alert('Файлын зам тодорхойлогдоогүй байна');
    }
}

function notaryContentSign(elem, processMetaDataId, dataViewId, selectedRow) {

    selectedRow = getDataViewSelectedRows(dataViewId);
    selectedRow = selectedRow[0];

    if (typeof selectedRow['physicalpath'] !== 'undefined') {

        var filePath = selectedRow['physicalpath'];
        $.ajax({
            type: 'post',
            url: 'mdpki/getInformationForDocumentSign',
            data: { filePath: filePath },
            dataType: 'json',
            success: function(data) {
                if (data.status === 'success') {
                    signPdfAndTextRun(data, filePath, null, function(data) {
                        if (data.status === 'success') {
                            //window.open(pathStr+data.filename, '_blank');                 
                            $.ajax({
                                type: 'post',
                                url: 'mddoc/updatePathEcmContent',
                                async: false,
                                data: { selectedRow: selectedRow, fileName: data.filename },
                                dataType: 'json',
                                success: function() {}
                            });
                            dataViewReload(dataViewId);
                        }
                    });
                }
            },
            error: function() {}
        });
    } else {
        alert('Файлын зам тодорхойлогдоогүй байна');
    }
}

function contentRowVerify(elem, processMetaDataId, dataViewId, selectedRow) {
    var refStructureId = $("input#refStructureId", "#object-value-list-" + dataViewId).val();

    $.ajax({
        type: 'post',
        url: 'mdpki/rowVerifyDataView',
        data: { refStructureId: refStructureId, selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {

            PNotify.removeAll();

            if (responseData.status === 'success') {

                ShowTokenSignVerifyWin(responseData.guid, responseData.plainText, responseData.cipherText, responseData.certificateSerialNumber);

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false
                });
            }
            Core.unblockUI();
        }
    });
}

function contentOcr(elem, processMetaDataId, dataViewId, selectedRow) {
    var refStructureId = $("input#refStructureId", "#object-value-list-" + dataViewId).val();

    $.ajax({
        type: 'post',
        url: 'mddoc/checkOcr',
        data: { refStructureId: refStructureId, selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();
            new PNotify({
                title: responseData.status,
                text: responseData.message,
                type: responseData.status,
                sticker: false
            });
                
            if (responseData.status === 'success') {
                dataViewReload(dataViewId);
            } 
            Core.unblockUI();
        }
    });
}

function contentOcrProcess(elem, processMetaDataId, dataViewId, selectedRow) {
    $.ajax({
        type: 'post',
        url: 'mddoc/checkOcrProcess',
        data: { selectedRow: selectedRow },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();

            if (responseData.status === 'success') {
                contentOcrProcessByImage(selectedRow, responseData.processList);
            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false
                });
            }
            Core.unblockUI();
        }
    });
}

function contentOcrProcessByImage(selectedRow, processList) {

    $.cachedScript('assets/custom/addon/plugins/jcrop/js/jquery.Jcrop.min.js').done(function() {

        var dialogName = '#dialog-ocr-image-process';
        if (!$(dialogName).length) {
            $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
        }

        $.ajax({
            type: 'post',
            url: 'mddoc/contentOcrProcessByImage',
            data: { selectedRow: selectedRow, processList: processList },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
                $('head').append('<link rel="stylesheet" href="assets/custom/addon/plugins/jcrop/css/jquery.Jcrop.min.css" type="text/css" />');
                $('head').append('<link rel="stylesheet" href="assets/custom/addon/admin/pages/css/image-crop.css" type="text/css" />');
            },
            success: function(data) {
                $(dialogName).empty().append(data.html);
                $(dialogName).dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: 950,
                    height: 'auto',
                    modal: true,
                    close: function() {
                        $(dialogName).empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $(dialogName).dialog('open');
                $(dialogName).dialogExtend("maximize");

                Core.unblockUI();
            },
            error: function() {
                alert('Error');
            }
        });
    });
}

function signInfoViewer(dataViewId, refStructureId, selectedRow, details) {
    var dialogName = '#dialog-signedinfo-' + dataViewId + '-' + selectedRow['id'];
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/signInfoViewer',
        data: { selectedRow: selectedRow, refStructureId: refStructureId, details: details },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 950,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $(dialogName).dialog('close');
                    }
                }]
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function newContainerAppendByDv(elem, dataViewId, htmlContent) {
    var $pageContent = $("#object-value-list-" + dataViewId).closest("div.tab-pane");

    if ($pageContent.find("div.dv-process").length == 0) {
        $pageContent.append('<div class="dv-process"></div>');
    }

    $pageContent.find("div.dv-process").html(htmlContent).promise().done(function() {
        $pageContent.find("div.row:eq(0)").css({ display: 'none' });
        $pageContent.find("div.dv-process").css({ display: '' });
        Core.initAjax($pageContent.find("div.dv-process"));
    });

    $(".scroll-to-top").trigger("click");
}

function bpContainerAppendByDv(elem, dataViewId, htmlContent) {
    var $dataViewList = $("#object-value-list-" + dataViewId);
    var $pageContent = $dataViewList.closest("div.tab-pane");

    if ($pageContent.find("div.dv-process").length == 0) {
        $pageContent.append('<div class="dv-process"></div>');
    }

    $pageContent.find("div.dv-process").html(htmlContent).promise().done(function() {
        $pageContent.find("div.row:eq(0)").css({ display: 'none' });
        $dataViewList.css({ display: 'none' });
        $pageContent.find("div.dv-process").css({ display: '' });
        Core.initBPAjax($pageContent.find("div.dv-process"));
    });

    $(".scroll-to-top").trigger("click");
}

function workSpaceContainerAppendByDv(elem, dataViewId, htmlContent, callback) {
    var $dataViewList = $("#object-value-list-" + dataViewId);
    var $pageContent = $dataViewList.closest("div.tab-pane");

    if ($pageContent.find("div.dv-process").length == 0) {
        $pageContent.append('<div class="dv-process"></div>');
    }

    $pageContent.find("div.dv-process").html(htmlContent).promise().done(function() {
        $pageContent.find("div.row:eq(0)").css({ display: 'none' });
        $pageContent.find("div.dv-process").css({ display: '' });
        Core.initAjax($pageContent.find("div.dv-process"));
        Core.unblockUI();
        if (typeof callback === 'function') {
            callback();
        }
    });

    $(".scroll-to-top").trigger("click");
}

function callContentByMeta(metaDataId) {
    var $dialogName = 'dialog-metacontent';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdlayout/contentRender',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1200,
                minWidth: 700,
                height: "auto",
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($("#" + $dialogName));
        $('.dashboard-container').css('width', 'auto');
        $('.dashboard-container').css('height', 'auto');
    });
}

var googleMapContextMenuOptions = {};
var googleMapContextMenuItems = [];
var googleMapDrawDynamicDataList = [];
var googleMapDrawStaticDataList = [];
var map, myCenter, googleMapDataList, drawingManager, googleMapContextMenu, googleMapSelectedShape, gotoLocation,
    directionStartLatLng = {},
    directionEndLatLng = {},
    directionsService, directionsDisplay;
var strokeOpacity = 0.8;
var strokeWeight = 2;
var fillOpacity = 0.5;
var shapeOptions = {
    strokeColor: '#1e90ff',
    strokeOpacity: strokeOpacity,
    strokeWeight: strokeWeight,
    fillColor: '#1e90ff',
    fillOpacity: fillOpacity,
    editable: true
};
var polylinePathObj = [];

function callGoogleMapByMeta(metaDataId) {
    $.ajax({
        type: 'post',
        url: 'mdmetadata/googleMapView',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $('#viewFormMeta').empty().append(data.Html).show();
            $('#renderMeta').hide();

            $('#viewFormMeta').append('<br /><br />' +
                '<div class="form-actions">' +
                '<div class="row">' +
                '<div class="col-md-offset-2 col-md-10">' +
                '<button type="button" class="btn grey-cascade" onclick="backFormMeta();">Буцах</button>' +
                '</div>' +
                '</div>' +
                '</div>');
            $(".scroll-to-top").trigger("click");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function(data) {
        googleMapToggleBtn();
        googleMapInitialze({ 'result': data.Gmap, 'metaDataId': data.metaDataId });
        Core.initAjax();
    });
}

function setGMapCoordinate(elem) {
    var $this = $(elem);
    var $root = $this.closest('div.gmap-set-coordinate-control'), 
        $coordinate = $root.find("input[type='text']"), 
        coordinateVal = $coordinate.val(), 
        isFixCoordinatePos = $this.hasAttr('data-fix-coordinate-pos'), 
        latitude = '', longitude = '';

    if (coordinateVal != 'undefined' && coordinateVal != '') {
        
        if (coordinateVal.indexOf('|') !== -1) {
            var coordinateValArr = coordinateVal.split('|');
        } else {
            var coordinateValArr = coordinateVal.split(',');
        }
        
        if (isFixCoordinatePos) {
            latitude = coordinateValArr[0];
            longitude = coordinateValArr[1];
        } else {
            latitude = coordinateValArr[1];
            longitude = coordinateValArr[0];
        }
        
        latitude = latitude.trim();
        longitude = longitude.trim();
    }

    var dialogName = '#setGMapCoordinateDialog';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    var $dialog = $(dialogName);

    $.ajax({
        type: 'post',
        url: 'mdmetadata/setGMapCoordinate',
        data: {latitude: latitude, longitude: longitude},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1200,
                height: 600,
                modal: true,
                open: function() {
                    setTimeout(function() {
                        resizeGMapCoordinate(map);
                    }, 500);
                },
                close: function() {
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.insert_btn,
                        class: 'btn btn-sm red-sunglo',
                        click: function() {
                            
                            if (isFixCoordinatePos) {
                                $coordinate.val($("#gMapLatitude").val() + ',' + $("#gMapLongitude").val()).trigger('change');
                            } else {
                                $coordinate.val($("#gMapLongitude").val() + '|' + $("#gMapLatitude").val()).trigger('change');
                            }
                            
                            $dialog.dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $dialog.bind("dialogextendmaximize", function() {
                resizeGMapCoordinate(map);
            });
            $dialog.bind("dialogextendrestore", function() {
                resizeGMapCoordinate(map);
            });
            $dialog.dialog('open');

            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    });
}

function resizeGMapCoordinate(map) {
    var center = map.getCenter();
    google.maps.event.trigger(map, 'resize');
    map.setCenter(center);
}

function setGoogleMapRegion(metaDataId, elem) {
    var $root = $(elem).closest("div.gmap-set-region-control"),
        $region = $root.find("input[type='text']");

    var dialogName = '#setGoogleMapControlDialog';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    var $dialog = $(dialogName);

    $.ajax({
        type: 'post',
        url: 'mdmeta/setGoogleMapRegion',
        data: { region: $region.val(), metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});

            $("link[href='assets/custom/addon/plugins/google-map/googleMap.css']").remove();
            $('head').append('<link rel="stylesheet" href="assets/custom/addon/plugins/google-map/googleMap.css" type="text/css" />');
        },
        success: function(data) {
            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '1200',
                height: '600',
                modal: true,
                open: function() {
                    setTimeout(function() {
                        resizeGMapCoordinate(map);
                    }, 500);
                },
                close: function() {
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.insert_btn,
                        class: 'btn btn-sm red-sunglo',
                        click: function() {
                            $region.val(googleMapDataList).trigger('change');
                            $dialog.dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $dialog.bind("dialogextendmaximize", function() {
                resizeGMapCoordinate(map);
            });
            $dialog.bind("dialogextendrestore", function() {
                resizeGMapCoordinate(map);
            });
            $dialog.dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function(data) {
        $('div#setGoogleMapControlDialog').css('padding', '0');
        $('div[aria-describedby="setGoogleMapControlDialog"]').find('.ui-dialog-buttonpane').css('margin-top', '0');
        if (window.google && google.maps && google.maps.drawing) {
            initializeGoogleMapControl(data);
        } else {
            $.getScript("https://maps.googleapis.com/maps/api/js?key=" + gmapApiKey + "&libraries=drawing&sensor=true&language=mn").done(function() {
                initializeGoogleMapControl(data);
            });
        }
    });
}

function customImageMarker(metaDataId, elem) {
    var root = $(elem).closest("div.gmap-set-region-control");
    var region = root.find("input[type='text']");
    var dialogName = '#customImageMarkerControlDialog',
        id = $(elem).closest('form').find('input[data-path="id"]').val(),
        picturePath = $(elem).closest('form').find('input[data-path="picturePath"]').val();

    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/customImageMarkerCtrl',
        data: {
            region: region.val(),
            id: id,
            picturePath: picturePath
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            if (data.Html == '') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Info',
                    text: 'План зураг оруулаагүй байна.',
                    type: 'info',
                    sticker: false
                });
                Core.unblockUI();
                return;
            }
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '950',
                height: 'auto',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.insert_btn,
                        class: 'btn btn-sm red-sunglo',
                        click: function() {
                            root.children('input:first').val($(dialogName).find('div#jcropDiv').attr('data-imagejsonstring'));
                            $(dialogName).dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            $(dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function customImageMarker2(metaDataId, elem) {
    var root = $(elem).closest("div.gmap-set-region-control");
    var region = root.find("input[type='text']");
    var dialogName = '#customImageMarkerControlDialog2',
        id = $(elem).closest('form').find('input[data-path="warehouseId"]').val(),
        deviceId = $(elem).closest('form').find('input[data-path="id"]').val();

    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/customImageMarkerCtrl2',
        data: { region: region.val(), id: id, deviceId: deviceId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            if (data.Html == '') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Info',
                    text: 'План зураг оруулаагүй байна.',
                    type: 'info',
                    sticker: false
                });
                Core.unblockUI();
                return;
            }
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '950',
                height: 'auto',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.insert_btn,
                        class: 'btn btn-sm red-sunglo',
                        click: function() {
                            root.children('input:first').val($(dialogName).find('div#jcropDiv').attr('data-imagejsonstring'));
                            $(dialogName).dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            $(dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function customImageMarker3(metaDataId, elem) {
    var root = $(elem).closest("div.gmap-set-region-control");
    var region = root.find("input[type='text']");
    var dialogName = '#customImageMarkerControlDialog3',
        id = $(elem).closest('form').find('input[data-path="id"]').val();
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/customImageMarkerCtrl3',
        data: { region: region.val(), id: id },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            if (data.Html == '') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Info',
                    text: 'План зураг оруулаагүй байна.',
                    type: 'info',
                    sticker: false
                });
                Core.unblockUI();
                return;
            }
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '950',
                height: 'auto',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.insert_btn,
                        class: 'btn btn-sm red-sunglo',
                        click: function() {
                            root.children('input:first').val($(dialogName).find('div#jcropDiv').attr('data-imagejsonstring'));
                            $(dialogName).dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            $(dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function customImageMarker4(metaDataId, elem) {
    var root = $(elem).closest("div.gmap-set-region-control");
    var region = root.find("input[type='text']");
    var dialogName = '#customImageMarkerControlDialog4',
        picturePath = $(elem).closest('tbody').find('input[data-path="MOB_LOCATION_DV.picturePath"]').val(),
        id = $(elem).closest('tbody').find('input[data-path="MOB_LOCATION_DV.parentId"]').val();

    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/customImageMarkerCtrl4',
        data: {
            region: region.val(),
            id: id,
            planpicture: picturePath
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            if (data.Html == '') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Info',
                    text: 'План зураг оруулаагүй байна.',
                    type: 'info',
                    sticker: false
                });
                Core.unblockUI();
                return;
            }
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '950',
                height: 'auto',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.insert_btn,
                        class: 'btn btn-sm red-sunglo',
                        click: function() {
                            root.children('input:first').val($(dialogName).find('div#jcropDiv_' + data.uniqId).attr('data-imagejsonstring'));
                            $(dialogName).dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            $(dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function customImageMarkerView(elem, processMetaDataId, dataViewId, selectedRow, paramData, urlLower) {
    $.ajax({
        type: 'post',
        url: urlLower,
        data: paramData,
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(dataHtml) {
            appMultiTabByContent({ metaDataId: 'mdmeta/customimagemarkerviewreferencectrl'.replace('/', '_'), title: 'Байршил зурагаар харах', type: 'content', content: dataHtml });
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function googleMapClearSelection() {
    if (googleMapSelectedShape) {
        googleMapSelectedShape.setEditable(false);
        googleMapSelectedShape = null;
    }
}

function googleMapSetSelection(shape) {
    googleMapClearSelection();
    googleMapSelectedShape = shape;
    shape.setEditable(true);
    googleMapSetShapeColor(shape.get('fillColor') || shape.get('strokeColor'));
}

function googleMapDeleteSelectedShape() {
    if (googleMapSelectedShape) {
        googleMapSelectedShape.setMap(null);
        googleMapDataList = '';
    }
}

function googleMapChangeSelectColor(elem) {
    var _this = $(elem);
    var color = _this.attr('data-color');
    $('.colorPalette li').removeClass('active');
    _this.addClass('active');
    color = '#' + color;
    googleMapSetShapeColor(color);

    if (googleMapDataList != 'undefined') {
        var temp = JSON.parse(googleMapDataList);
        temp.color = color;
        googleMapDataList = JSON.stringify(temp);
    }
}

function googleMapSetShapeColor(color) {

    if (typeof googleMapSelectedShape != 'undefined') {
        googleMapSelectedShape.set('fillColor', color);
        googleMapSelectedShape.set('strokeColor', color);
        googleMapSelectedShape.setMap(map);
    }

    var polylineOptions = drawingManager.get('polylineOptions');
    polylineOptions.strokeColor = color;
    drawingManager.set('polylineOptions', polylineOptions);

    var rectangleOptions = drawingManager.get('rectangleOptions');
    rectangleOptions.fillColor = color;
    drawingManager.set('rectangleOptions', rectangleOptions);

    var circleOptions = drawingManager.get('circleOptions');
    circleOptions.fillColor = color;
    drawingManager.set('circleOptions', circleOptions);

    var polygonOptions = drawingManager.get('polygonOptions');
    polygonOptions.fillColor = color;
    drawingManager.set('polygonOptions', polygonOptions);

    drawingManager.setMap(map);
}

function initializeGoogleMapControl(dataList) {
    map = new google.maps.Map(document.getElementById('md_set_map_canvas'), {
        center: { lat: parseFloat(dataList.lat), lng: parseFloat(dataList.lng) },
        zoom: 13,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true,
        zoomControl: true
    });
    drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode: null,
        drawingControl: true,
        drawingControlOptions: {
            position: google.maps.ControlPosition.TOP_CENTER,
            drawingModes: [
                google.maps.drawing.OverlayType.CIRCLE,
                google.maps.drawing.OverlayType.POLYGON,
                google.maps.drawing.OverlayType.POLYLINE,
                google.maps.drawing.OverlayType.RECTANGLE
            ]
        },
        polylineOptions: shapeOptions,
        rectangleOptions: shapeOptions,
        circleOptions: shapeOptions,
        polygonOptions: shapeOptions
    });
    drawingManager.setMap(map);
    googleMapInitContextMenu();
    google.maps.event.addListener(drawingManager, 'overlaycomplete', function(e) {

        var newShape = e.overlay;
        googleMapSetSelection(newShape);

        if (e.type == 'circle') {
            var option = drawingManager.get('circleOptions');
            googleMapDataList = '{"drawType": "circle", "color": "' + option.strokeColor + '", "center": {"lat": ' + e.overlay.getCenter().lat() + ', "lng": ' + e.overlay.getCenter().lng() + '}, "radius": ' + e.overlay.getRadius() + '}';
        } else if (e.type == 'polygon') {
            var option = drawingManager.get('polygonOptions');
            $.each(e.overlay.getPath().getArray(), function(key, value) {
                if (key == '0') {
                    coordinate = '{"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
                } else {
                    coordinate = coordinate + ', {"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
                }
            });

            googleMapDataList = '{"drawType": "polygon", "color": "' + option.strokeColor + '", "center": {"lat": ' + map.getCenter().lat() + ', "lng": ' + map.getCenter().lng() + '}, "coordinates": [' + coordinate + ']}';
        } else if (e.type == 'polyline') {
            var option = drawingManager.get('polylineOptions');
            $.each(e.overlay.getPath().getArray(), function(key, value) {
                if (key == '0') {
                    coordinate = '{"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
                } else {
                    coordinate = coordinate + ', {"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
                }
            });
            googleMapDataList = '{"drawType": "polyline", "color": "' + option.strokeColor + '", "center": {"lat": ' + map.getCenter().lat() + ', "lng": ' + map.getCenter().lng() + '}, "coordinates": [' + coordinate + ']}';
        } else {
            var option = drawingManager.get('rectangleOptions');
            var ne = e.overlay.getBounds().getNorthEast();
            var sw = e.overlay.getBounds().getSouthWest();
            coordinate = '{"R": ' + e.overlay.getBounds().R.R + ', "j": ' + e.overlay.getBounds().R.j + '}, {"R": ' + e.overlay.getBounds().j.R + ', "j": ' + e.overlay.getBounds().j.j + '}';
            googleMapDataList = '{"drawType": "rectangle", "color": "' + option.strokeColor + '", "center": {"lat": ' + map.getCenter().lat() + ', "lng": ' + map.getCenter().lng() + '}, "coordinates": [' + coordinate + ']}';
        }
        drawingManager.setDrawingMode(null);
        google.maps.event.addListener(e.overlay, 'rightclick', function(mouseEvent) {
            googleMapContextMenu.show(mouseEvent.latLng);
        });
    });
    if (dataList.mode === 'edit') {
        setGoogleMapData(dataList);
    }
}

function setGoogleMapData(dataList) {
    if (!$.isEmptyObject(dataList)) {
        drawingManager.set('strokeColor', dataList.color);
        drawingManager.set('fillColor', dataList.color);
        if (dataList.drawType == 'circle') {
            googleMapSelectedShape = new google.maps.Circle({
                drawingMode: google.maps.drawing.OverlayType.CIRCLE,
                drawingControl: true,
                center: { lat: parseFloat(dataList.lat), lng: parseFloat(dataList.lng) },
                radius: dataList.radius,
                editable: true,
                strokeColor: dataList.color,
                fillColor: dataList.color
            });
            googleMapDataList = '{"drawType": "circle", "color": "' + dataList.color + '", "center": {"lat": ' + dataList.lat + ', "lng": ' + dataList.lng + '}, "radius": ' + dataList.radius + '}';
        } else if (dataList.drawType == 'polygon') {
            googleMapSelectedShape = new google.maps.Polygon({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                paths: dataList.coordinates,
                editable: true,
                strokeColor: dataList.color,
                fillColor: dataList.color
            });
            googleMapDataList = '{"drawType": "polygon", "color": "' + dataList.color + '", "center": {"lat": ' + dataList.lat + ', "lng": ' + dataList.lng + '}, "coordinates": ' + JSON.stringify(dataList.coordinates) + '}';
        } else if (dataList.drawType == 'polyline') {
            googleMapSelectedShape = new google.maps.Polyline({
                drawingMode: google.maps.drawing.OverlayType.POLYLINE,
                drawingControl: true,
                editable: true,
                path: dataList.coordinates,
                geodesic: true,
                strokeColor: dataList.color
            });
            googleMapDataList = '{"drawType": "polyline", "color": "' + dataList.color + '", "center": {"lat": ' + dataList.lat + ', "lng": ' + dataList.lng + '}, "coordinates": ' + JSON.stringify(dataList.coordinates) + '}';
        } else {
            googleMapSelectedShape = new google.maps.Rectangle({
                drawingMode: google.maps.drawing.OverlayType.RECTANGLE,
                drawingControl: true,
                editable: true,
                strokeColor: dataList.color,
                fillColor: dataList.color,
                bounds: new google.maps.LatLngBounds(
                    new google.maps.LatLng(dataList.coordinates[0].j, dataList.coordinates[1].j),
                    new google.maps.LatLng(dataList.coordinates[0].R, dataList.coordinates[1].R)
                )
            });
            googleMapDataList = '{"drawType": "rectangle", "color": "' + dataList.color + '", "center": {"lat": ' + dataList.lat + ', "lng": ' + dataList.lng + '}, "coordinates": ' + JSON.stringify(dataList.coordinates) + '}';
        }

        googleMapSelectedShape.setMap(map);

        if (googleMapSelectedShape.drawingMode == 'circle') {
            google.maps.event.addListener(googleMapSelectedShape, 'radius_changed', function(elem) {
                googleMapDataList = '{"drawType": "' + google.maps.drawing.OverlayType.CIRCLE + '", "color": "' + googleMapSelectedShape.strokeColor + '", "center": {"lat": ' + googleMapSelectedShape.getCenter().lat() + ', "lng": ' + googleMapSelectedShape.getCenter().lng() + '}, "radius": ' + googleMapSelectedShape.getRadius() + '}';
            });
        } else if (googleMapSelectedShape.drawingMode == 'rectangle') {
            google.maps.event.addListener(googleMapSelectedShape, 'bounds_changed', function(elem) {
                coordinate = '{"R": ' + googleMapSelectedShape.getBounds().R.R + ', "j": ' + googleMapSelectedShape.getBounds().R.j + '}, {"R": ' + googleMapSelectedShape.getBounds().j.R + ', "j": ' + googleMapSelectedShape.getBounds().j.j + '}';
                googleMapDataList = '{"drawType": "' + google.maps.drawing.OverlayType.RECTANGLE + '", "color": "' + googleMapSelectedShape.strokeColor + '", "center": {"lat": ' + map.getCenter().lat() + ', "lng": ' + map.getCenter().lng() + '}, "coordinates": [' + coordinate + ']}';
            });
        } else if (googleMapSelectedShape.drawingMode == 'polyline') {
            google.maps.event.addListener(googleMapSelectedShape.getPath(), "insert_at", setGoogleMapPolylineSetDataList);
            google.maps.event.addListener(googleMapSelectedShape.getPath(), "remove_at", setGoogleMapPolylineSetDataList);
            google.maps.event.addListener(googleMapSelectedShape.getPath(), "set_at", setGoogleMapPolylineSetDataList);
        } else {
            google.maps.event.addListener(googleMapSelectedShape.getPath(), "insert_at", setGoogleMapPolygonSetDataList);
            google.maps.event.addListener(googleMapSelectedShape.getPath(), "remove_at", setGoogleMapPolygonSetDataList);
            google.maps.event.addListener(googleMapSelectedShape.getPath(), "set_at", setGoogleMapPolygonSetDataList);
        }

        google.maps.event.addListener(googleMapSelectedShape, 'rightclick', function(mouseEvent) {
            googleMapContextMenu.show(mouseEvent.latLng);
        });
    }
}

function setGoogleMapPolygonSetDataList() {
    var coordinate;
    $.each(googleMapSelectedShape.getPath().getArray(), function(key, value) {
        if (key == '0') {
            coordinate = '{"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
        } else {
            coordinate = coordinate + ', {"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
        }
    });
    googleMapDataList = '{"drawType": "' + google.maps.drawing.OverlayType.POLYGON + '", "color": "' + googleMapSelectedShape.strokeColor + '", "center": {"lat": ' + map.getCenter().lat() + ', "lng": ' + map.getCenter().lng() + '}, "coordinates": [' + coordinate + ']}';
}

function setGoogleMapPolylineSetDataList() {
    var coordinate;
    $.each(googleMapSelectedShape.getPath().getArray(), function(key, value) {
        if (key == '0') {
            coordinate = '{"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
        } else {
            coordinate = coordinate + ', {"lat": ' + this.lat() + ', "lng": ' + this.lng() + '}';
        }
    });
    googleMapDataList = '{"drawType": "' + google.maps.drawing.OverlayType.POLYLINE + '", "color": "' + googleMapSelectedShape.strokeColor + '", "center": {"lat": ' + map.getCenter().lat() + ', "lng": ' + map.getCenter().lng() + '}, "coordinates": [' + coordinate + ']}';
}

function googleMapInitContextMenu() {
    googleMapContextMenuOptions = {};
    googleMapContextMenuItems = [];
    $.getScript(URL_APP + "assets/custom/addon/plugins/google-map/googleContextMenu.js").done(function() {
        googleMapContextMenuOptions.classNames = { menu: 'context_menu', menuSeparator: 'context_menu_separator' };
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'zoom_in_click', label: '<i class="fa fa-search-plus"></i> Zoom in' });
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'zoom_out_click', label: '<i class="fa fa-search-minus"></i> Zoom out' });
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'center_map_click', label: '<i class="fa fa-map-marker"></i> Center map here' });
        googleMapContextMenuItems.push({});
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'delete_shape', label: '<i class="fa fa-trash"></i> Delete shape' });
        googleMapContextMenuOptions.menuItems = googleMapContextMenuItems;

        googleMapContextMenu = new ContextMenu(map, googleMapContextMenuOptions);

        google.maps.event.addListener(googleMapContextMenu, 'menu_item_selected', function(latLng, eventName) {
            switch (eventName) {
                case 'zoom_in_click':
                    {
                        map.setZoom(map.getZoom() + 1);
                    };
                    break;
                case 'zoom_out_click':
                    {
                        map.setZoom(map.getZoom() - 1);
                    };
                    break;
                case 'center_map_click':
                    {
                        map.panTo(latLng);
                    };
                    break;
                case 'delete_shape':
                    {
                        googleMapDeleteSelectedShape();
                    };
                    break;
            }
        });
    });
}

function googleMapInitContextMenu2() {
    googleMapContextMenuOptions = {};
    googleMapContextMenuItems = [];
    $.getScript(URL_APP + "assets/custom/addon/plugins/google-map/googleContextMenu.js").done(function() {
        googleMapContextMenuOptions.classNames = { menu: 'context_menu', menuSeparator: 'context_menu_separator' };
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'get_start_coordinate', id: 'get_start_coordinate_id', label: '<i class="fa fa-map-marker"></i> Эхлэх цэг' });
        googleMapContextMenuItems.push({ className: 'context_menu_item hide', eventName: 'get_end_coordinate', id: 'get_end_coordinate_id', label: '<i class="fa fa-map-marker"></i> Дуусах цэг' });
        googleMapContextMenuItems.push({ className: 'context_menu_item hide', eventName: 'get_startend_coordinate', id: 'get_startend_coordinate_id', label: '<i class="fa fa-trash"></i> Цэвэрлэх' });
        googleMapContextMenuItems.push({})
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'zoom_in_click', label: '<i class="fa fa-search-plus"></i> Zoom in' });
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'zoom_out_click', label: '<i class="fa fa-search-minus"></i> Zoom out' });
        googleMapContextMenuItems.push({ className: 'context_menu_item', eventName: 'center_map_click', label: '<i class="fa fa-map-marker"></i> Center map here' });
        /*googleMapContextMenuItems.push({});
        googleMapContextMenuItems.push({className:'context_menu_item', eventName:'delete_shape', label:'<i class="fa fa-trash"></i> Delete shape'});*/
        googleMapContextMenuOptions.menuItems = googleMapContextMenuItems;

        googleMapContextMenu = new ContextMenu(map, googleMapContextMenuOptions);

        google.maps.event.addListener(googleMapContextMenu, 'menu_item_selected', function(latLng, eventName) {
            switch (eventName) {
                case 'zoom_in_click':
                    {
                        map.setZoom(map.getZoom() + 1);
                    };
                    break;
                case 'zoom_out_click':
                    {
                        map.setZoom(map.getZoom() - 1);
                    };
                    break;
                case 'center_map_click':
                    {
                        map.panTo(latLng);
                    };
                    break;
                case 'get_start_coordinate':
                    {
                        directionStartLatLng = {
                            lat: latLng.lat(),
                            lng: latLng.lng()
                        };
                        document.getElementById('get_start_coordinate_id').style.display = 'none';
                        document.getElementById('get_end_coordinate_id').style.display = 'block';
                    };
                    break;
                case 'get_end_coordinate':
                    {
                        directionEndLatLng = {
                            lat: latLng.lat(),
                            lng: latLng.lng()
                        };
                        googleMapDirectionService();
                        document.getElementById('get_start_coordinate_id').style.display = 'none';
                        document.getElementById('get_end_coordinate_id').style.display = 'none';
                        document.getElementById('get_startend_coordinate_id').style.display = 'block';
                    };
                    break;
                case 'get_startend_coordinate':
                    {
                        directionsDisplay.setMap(null);
                        document.getElementById('get_start_coordinate_id').style.display = 'block';
                        document.getElementById('get_end_coordinate_id').style.display = 'none';
                        document.getElementById('get_startend_coordinate_id').style.display = 'none';
                        document.getElementById('google-map-api-duration-panel').style.display = 'none';
                    };
                    break;
            }
        });
    });
}

function googleMapDirectionService() {
    var selectedMode = document.getElementById('googleMapApiDirectionMode').value;

    directionsDisplay.setMap(map);
    directionsService.route({
        origin: { lat: directionStartLatLng.lat, lng: directionStartLatLng.lng },
        destination: { lat: directionEndLatLng.lat, lng: directionEndLatLng.lng },
        travelMode: selectedMode
    }, function(response, status) {
        if (status === 'OK') {
            directionsDisplay.setDirections(response);

            var directionsResult = directionsDisplay.getDirections();
            var route = directionsResult.routes[0];
            var totalDistance = 0,
                totalDuration = 0;
            var legs = route.legs;
            for (var i = 0; i < legs.length; ++i) {
                totalDistance += legs[i].distance.value;
            }

            for (var i = 0; i < legs.length; ++i) {
                totalDuration += legs[i].duration.value;
            }

            document.getElementById('google-map-api-duration-panel').style.display = 'block';
            if (selectedMode == 'DRIVING') {
                $('#google-map-api-distance-length').empty().append('<center><i class="fa fa-car"></i></center>Зай: <strong>' + (totalDistance / 1000).toFixed(1) + ' км</strong>');
                $('#google-map-api-duration-length').empty().append('Хугацаа: <strong>' + secondsToHms(totalDuration) + '</strong>');
            }
            if (selectedMode == 'WALKING') {
                $('#google-map-api-distance-length').empty().append('<center><i class="fa fa-male"></i></center>Зай: <strong>' + (totalDistance / 1000).toFixed(1) + ' км</strong>');
                $('#google-map-api-duration-length').empty().append('Хугацаа: <strong>' + secondsToHms(totalDuration) + '</strong>');
            }
            if (selectedMode == 'BICYCLING') {
                $('#google-map-api-distance-length').empty().append('<center><i class="fa fa-circle-o"></i></center>Зай: <strong>' + (totalDistance / 1000).toFixed(1) + ' км</strong>');
                $('#google-map-api-duration-length').empty().append('Хугацаа: <strong>' + secondsToHms(totalDuration) + '</strong>');
            }

        } else {
            PNotify.removeAll();
            new PNotify({
                title: 'Info',
                text: 'Харуулах боломжгүй байна',
                type: 'info',
                sticker: false
            });
        }
    });
}

function googleMapShowHideStaticMarker(metaDataId, elem) {
    var _this = $(elem);
    var checkboxList = _this.closest('div.checkbox-list').find('label');
    if (_this.prop("checked")) {
        for (i = 0; i < googleMapDrawStaticDataList.length; i++) {
            if (metaDataId == 'all') {
                if (i == 0) {
                    googleMapCheckBoxCheckAll(checkboxList, true);
                }
                googleMapDrawStaticDataList[i].setVisible(true);
            } else {
                if (googleMapDrawStaticDataList[i].metaDataId == metaDataId) {
                    googleMapDrawStaticDataList[i].setVisible(true);
                }
            }
        }
    } else {

        for (i = 0; i < googleMapDrawStaticDataList.length; i++) {
            if (metaDataId == 'all') {
                if (i == 0) {
                    googleMapCheckBoxCheckAll(checkboxList, false);
                }
                googleMapDrawStaticDataList[i].setVisible(false);
            } else {
                if (googleMapDrawStaticDataList[i].metaDataId == metaDataId) {
                    googleMapDrawStaticDataList[i].setVisible(false);
                }
            }
        }
    }
}

function googleMapMarkerVisibleByIds(formData, lastModified) {
    var assetType = '',
        visibleMarkers = [],
        $mainRowData = [],
        leadCriteria = false;
    var fCityIdValue = '_',
        fNetworkValue = '_',
        fValue = '_',
        fAssetTypeId = '_',
        fCoverageIdValue = '',
        fSiteValue = '_';
    
    for (var pi = 0; pi < polylinePathObj.length; pi++) {
        polylinePathObj[pi].setVisible(false);
    }
                    
    for (var i = 0; i < googleMapDrawStaticDataList.length; i++) {
        var marker = googleMapDrawStaticDataList[i];
        rdata = JSON.parse(googleMapDrawStaticDataList[i].rowData);
        $mainRowData.push(rdata);
        
        marker.setVisible(false);
        marker.setIcon({
            url: marker.getIcon().url,
            scaledSize: new google.maps.Size(42, 42)
        });
    }

    if (formData) {
        
        var $formDataArr = [];
        
        for (var fdata = 0; fdata < formData.length; fdata++) {
            
            var mPath = /param\[([\w.]+)\]/g.exec(formData[fdata].name);
            if (mPath && typeof formData[fdata].value !== 'undefined') {
                
                mPath = mPath[1].toLowerCase();
                
                switch (mPath) {
                    case 'cityid':
                        fCityIdValue += (formData[fdata].value + '_');
                        break;
                    case 'coverage':
                        fCoverageIdValue += ('_' + formData[fdata].value + '_');
                        break;
                    case 'networkcoveragetypeid':
                        fNetworkValue += (formData[fdata].value + '_');
                        break;
                    case 'sitestatusid':
                        fSiteValue += (formData[fdata].value + '_');
                        break;
                    case 'assettypeid':
                        fAssetTypeId += ('_' + formData[fdata].value +'_');
                        break;
                        break;
                    case 'polylinecolor':
                    default:
                        fValue += (formData[fdata].value + '_');
                        break;
                }
                
                $formDataArr.push({path: mPath, value: formData[fdata].value});
            }
            
        }
        
        if (fCoverageIdValue == '_') {
            fCoverageIdValue = '##';
        }
        
        for (var pi = 0; pi < polylinePathObj.length; pi++) {
            if (fValue.indexOf('_' + polylinePathObj[pi]['strokeColor'] + '_') != -1) {
                polylinePathObj[pi].setVisible(true);
            }
        }
        
        $.each($formDataArr, function (index, row) {
            
            mPath = row['path'];
            
            $.each($mainRowData, function (i, rdata) {
                
                var marker = googleMapDrawStaticDataList[i];
                
                if (mPath === 'id') {
                    if (mPath in Object(rdata)) {
                        if (fValue.indexOf('_' + rdata[mPath] + '_') != -1) {
                            marker.setIcon({
                                url: marker.getIcon().url,
                                scaledSize: new google.maps.Size(42, 42)
                            });

                            visibleMarkers.push(marker);
                            leadCriteria = true;
                        }
                    }
                } 
                else {
                    if (fValue.indexOf('_' + rdata[mPath] + '_') != -1) {
                        marker.setIcon({
                            url: marker.getIcon().url,
                            scaledSize: new google.maps.Size(42, 42)
                        });

                        visibleMarkers.push(marker);
                        leadCriteria = true;
                    }
                    if (mPath in Object(rdata)) {

                        if (
                            (
                            fCityIdValue.indexOf('_' + rdata['cityid'] + '_') != -1 && 
                            fSiteValue.indexOf('_' + rdata['sitestatusid'] + '_') != -1 && 
                            fAssetTypeId.indexOf('_' + rdata['assettypeid'] + '_') != -1 ) ||
                            (typeof rdata['coverage'] !== 'undefined' && rdata['coverage'] && rdata['coverage'].indexOf(fCoverageIdValue) != -1 )
                            //fNetworkValue.indexOf('_' + rdata['networkcoveragetypeid'] + '_') != -1
                        ) {
                            
                            marker.setVisible(true);
                            if (!leadCriteria) {
                                visibleMarkers.push(marker);
                            }
                        } else {
                            marker.setVisible(false);
                        }
                    }
                }
            });
        });
    }

    if (visibleMarkers.length) {
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < visibleMarkers.length; i++) {
            bounds.extend(visibleMarkers[i].getPosition());
        }
        
        if (visibleMarkers.length <= 10) {
            map.setCenter(bounds.getCenter());
            map.setZoom(15);
        } else {
            map.fitBounds(bounds);
        }
        
    } else {

        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < googleMapDrawStaticDataList.length; i++) {
            bounds.extend(googleMapDrawStaticDataList[i].getPosition());
        }
        map.fitBounds(bounds);
    }
}

function googleMapShowHideDynamicMarker(metaDataId, elem) {
    var _this = $(elem);
    var checkboxList = _this.closest('div.checkbox-list').find('label');
    if (_this.prop("checked")) {
        for (i = 0; i < googleMapDrawDynamicDataList.length; i++) {
            if (metaDataId == 'all') {
                if (i == 0) {
                    googleMapCheckBoxCheckAll(checkboxList, true);
                }
                googleMapDrawDynamicDataList[i].setVisible(true);
            } else {
                if (googleMapDrawDynamicDataList[i].metaDataId == metaDataId) {
                    googleMapDrawDynamicDataList[i].setVisible(true);
                }
            }
        }
    } else {
        for (i = 0; i < googleMapDrawDynamicDataList.length; i++) {
            if (metaDataId == 'all') {
                if (i == 0) {
                    googleMapCheckBoxCheckAll(checkboxList, false);
                }
                googleMapDrawDynamicDataList[i].setVisible(false);
            } else {
                if (googleMapDrawDynamicDataList[i].metaDataId == metaDataId) {
                    googleMapDrawDynamicDataList[i].setVisible(false);
                }
            }
        }
    }
}

function googleMapCheckBoxCheckAll(checkboxList, checkBoxType) {
    $.each(checkboxList, function() {
        var _item = $(this);
        if (checkBoxType) {
            _item.find('span').addClass("checked");
        } else {
            _item.find('span').removeClass("checked");
        }
    });
}

function googleMapToggleBtn() {
    var mapFilter = $("div.md-map-container div.md-map-filter-panel");
    var leftToggleBtn = $("div.md-map-filter-panel.left .md-map-selector-toggle i.fa");
    var rightToggleBtn = $("div.md-map-filter-panel.right .md-map-selector-toggle i.fa");

    leftToggleBtn.removeClass("fa-angle-double-left").addClass("fa-angle-double-right");
    rightToggleBtn.removeClass("fa-angle-double-right").addClass("fa-angle-double-left");

    $("div.md-map-selector-toggle").on('click', function() {
        var mapToggleBtn = $(this);
        mapFilter.toggleClass("open");
        if (mapToggleBtn.toggleClass("open").hasClass("open")) {
            leftToggleBtn.removeClass("fa-angle-double-right").addClass("fa-angle-double-left");
            rightToggleBtn.removeClass("fa-angle-double-left").addClass("fa-angle-double-right");
        } else {
            leftToggleBtn.removeClass("fa-angle-double-left").addClass("fa-angle-double-right");
            rightToggleBtn.removeClass("fa-angle-double-right").addClass("fa-angle-double-left");
        }
    });
}

function googleMapInitialze(data) {
    if (window.google && google.maps) {
        googleMapViewLoad(data);
    } else {
        $.getScript("https://maps.googleapis.com/maps/api/js?sensor=true&key=" + gmapApiKey + "&language=mn").done(function() {
            googleMapViewLoad(data);
        });
    }
}

function googleMapViewLoad(data) {
    $("link[href='assets/custom/addon/admin/pages/css/todo.css']").remove();
    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/admin/pages/css/todo.css"/>');
    $("link[href='assets/custom/addon/plugins/google-map/googleMap.css']").remove();
    $('head').append('<link rel="stylesheet" href="assets/custom/addon/plugins/google-map/googleMap.css" type="text/css" />');
    $("#md-map-canvas-" + data.metaDataId).parent().append('<div id="md-map-legend-' + data.metaDataId + '" style="margin: 10px;"></div>');       

    var defaultDrawDataList = data.result;
    var mapProp = {
        center: new google.maps.LatLng(47.919128, 106.917609),
        zoom: 6,
        /*mapTypeId: google.maps.MapTypeId.HYBRID, харагдацын тохиргоо*/
        mapTypeControl: true,
        disableDefaultUI: false,
        mapTypeControlOptions: {
            position: google.maps.ControlPosition.TOP_CENTER
        },
        panControl: !0,
        panControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER
        },
        zoomControl: !0,
        zoomControlOptions: {
            style: google.maps.ZoomControlStyle.LARGE,
            position: google.maps.ControlPosition.RIGHT_CENTER
        },
        streetViewControl: !0,
        streetViewControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER
        },
        scaleControl: !0,
        scaleControlOptions: {
            position: google.maps.ControlPosition.RIGHT_BOTTOM
        }
    };
    map = new google.maps.Map(document.getElementById("md-map-canvas-" + data.metaDataId), mapProp);
    var bounds = new google.maps.LatLngBounds();
    directionsService = new google.maps.DirectionsService;
    directionsDisplay = new google.maps.DirectionsRenderer;
    window['_selectedRows_' + data.metaDataId] = [];
    var markerObj = [], clearPolygon = false;

    if (typeof defaultDrawDataList.coordinate != 'undefined') {

        $.each(defaultDrawDataList.coordinate, function(index, row) {
            var _this = row;
            if (_this.IS_DYNAMIC == '0') {
                if (_this.DRAW_TYPE == 'MARKER' || _this.DRAW_TYPE == 'SERVICE') {

                    if (data.metaDataId == '1479901291584' || data.metaDataId == '1479955354923920') {
                        var path = [];
                        $.each(_this.GMAPDATA, function() {
                            var row = this;
                            path.push({ lat: row.lat, lng: row.lng });
                        });
                        var lineSymbol = {
                            path: 'M 0,-1 0,1',
                            strokeOpacity: 1,
                            scale: 4
                        };
                        var regionArray = new google.maps.Polyline({
                            metaDataId: data.metaDataId,
                            path: path,
                            geodesic: true,
                            strokeOpacity: 0,
                            strokeColor: "#50EE30",
                            icons: [{
                                icon: lineSymbol,
                                offset: '0',
                                repeat: '20px'
                            }],
                            //strokeColor: "#" + defaultDrawDataList.coordinate[0].COLOR
                        });
                        googleMapDrawStaticDataList.push(regionArray);
                        regionArray.setMap(map);
                    }

                    var infowindow = new google.maps.InfoWindow();

                    if (data.metaDataId == '1529727324487237' || '1560236224444' == data.metaDataId || data.metaDataId == '1539681311719') {
                        $.each(_this.GMAPDATA, function(key, value) {
                            var row = this;
                            var rowData = JSON.parse(row.rowData);

                            if ('nextpolyline' in Object(rowData) && rowData.nextpolyline) {
                                var coord = rowData.nextpolyline.split('|');
                                var path = [];

                                path.push({ lat: parseFloat(row.lat), lng: parseFloat(row.lng) });
                                path.push({ lat: parseFloat(coord[1]), lng: parseFloat(coord[0]) });

                                var pcolor = ['#00802b', '#00802b', '#00802b'];

                                /*if (key === 0) {                        
                                    
                                    var polylinePath = new google.maps.Polyline({
                                        path: path,
                                        geodesic: true,
                                        strokeOpacity: 0,
                                        strokeColor: '#00802b',
                                        icons: [{
                                            icon: lineSymbol,
                                            offset: '0',
                                            repeat: '20px',
                                            icon: {
                                                path: 'M 0,-1 0,1',
                                                strokeOpacity: 1,
                                                scale: 4                                
                                            }
                                        }]
                                    });
                                    
                                } else {*/

                                var polylinePath = new google.maps.Polyline({
                                    path: path,
                                    geodesic: true,
                                    visible: true,
                                    strokeOpacity: 1,
                                    strokeColor: rowData.polylinecolor,
                                    strokeColorAttr: rowData.polylinecolor,
                                    strokeWeight: 1,
                                    metaDataId: _this.META_DATA_ID,
                                    metaGoogleMapLinkId: row.metaGoogleMapLinkId,
                                    actionMetaDataId: row.actionMetaDataId,
                                    actionMetaTypeId: row.actionMetaTypeId,
                                    metaValueId: row.META_VALUE_ID,
                                    rowData: row.rowData
                                });

                                polylinePathObj.push(polylinePath);
                                //}

                                polylinePath.setMap(map);

                                google.maps.event.addListener(polylinePath, 'mouseover', function() {
                                    polylinePath.setOptions({ strokeWeight: 6 });
                                });

                                google.maps.event.addListener(polylinePath, 'mouseout', function() {
                                    polylinePath.setOptions({ strokeWeight: 1 });
                                });

                                google.maps.event.addListener(polylinePath, 'click', function(event) {
                                    var rowData = JSON.parse(row.rowData);

                                    if ('lineactionmetatypeid' in Object(rowData) && rowData.lineactionmetatypeid == 'popupDataview') {
                                        $.ajax({
                                            type: 'post',
                                            url: 'mddatamodel/renderGmapInfoWindowByDv',
                                            data: { dvId: rowData.lineactionmetadataid, rowData: rowData },
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({
                                                    message: 'Loading...',
                                                    boxed: true
                                                });
                                            },
                                            success: function(data) {
                                                infowindow.setContent(data.html);
                                                infowindow.setPosition(event.latLng);
                                                infowindow.open(map);
                                                Core.unblockUI();
                                            }
                                        });
                                    }
                                });
                            }

                        });

                        /*var legend = document.getElementById("md-map-legend-"+data.metaDataId);
                        var div = document.createElement('div');
                            div.innerHTML = '<div style="width:100px; border-top: 2px dashed #00802b"></div> Агаарын богино долгион <br> <div style="width:100px; border-top: 2px solid #00802b; margin-top: 6px;"></div>Шилэн кабель';
                            legend.appendChild(div);

                        map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend);*/

                        googleMapInitContextMenu2();

                        // document.getElementById('googleMapApiDirectionMode').addEventListener('change', function() {
                        //     googleMapDirectionService();
                        // });                        

                        google.maps.event.addListener(map, 'click', function() {
                            infowindow.close();
                        });

                        /*var lineSymbol = [{
                                icon: lineSymbol,
                                offset: '0',
                                repeat: '20px',
                                icon: {
                                    path: 'M 0,-1 0,1',
                                    strokeOpacity: 1,
                                    scale: 4                                
                                }
                            }];
                        
                        googleMapDrawStaticDataList.push(regionArray);                        
                        */
                    }

                    /**
                     * Walking Human Map
                     */
                    if ($("#md-map-canvas-" + data.metaDataId).hasClass('mapLocationTracking')) {
                        
                        if (_this.isGrouping) {
                            
                            var groupedData = objectGroupBy(_this.GMAPDATA, 'groupField');
                            
                            for (var k in groupedData) {
                                
                                var childData = groupedData[k];
                                var tempMi = 0, tempMi2, mil = childData.length;
                                
                                for (var c in childData) {

                                    var row = childData[c];
                                    var rowData = JSON.parse(row.rowData);
                                    var path = [];
                                    
                                    path.push({ lat: Number(row.lat), lng: Number(row.lng) });
                                    tempMi2 = ++tempMi;
                                    if (tempMi2 < mil) {
                                        path.push({ lat: Number(childData[tempMi2].lat), lng: Number(childData[tempMi2].lng) });
                                    }

                                    var polylinePath = new google.maps.Polyline({
                                        path: path,
                                        geodesic: true,
                                        visible: true,
                                        strokeOpacity: 1,
                                        strokeColor: rowData.polylinecolor,
                                        strokeColorAttr: rowData.polylinecolor,
                                        strokeWeight: rowData.polylinewidth,
                                        metaDataId: _this.META_DATA_ID,
                                        metaValueId: row.META_VALUE_ID,
                                        rowData: row.rowData
                                    });
                                    polylinePathObj.push(polylinePath);

                                    polylinePath.setMap(map);

                                    google.maps.event.addListener(polylinePath, 'click', function(event) {
                                        var rowData = JSON.parse(row.rowData);

                                        if ('lineactionmetatypeid' in Object(rowData) && rowData.lineactionmetatypeid == 'popupDataview') {
                                            $.ajax({
                                                type: 'post',
                                                url: 'mddatamodel/renderGmapInfoWindowByDv',
                                                data: { dvId: rowData.lineactionmetadataid, rowData: rowData },
                                                dataType: 'json',
                                                beforeSend: function() {
                                                    Core.blockUI({message: 'Loading...', boxed: true});
                                                },
                                                success: function(data) {
                                                    infowindow.setContent(data.html);
                                                    infowindow.setPosition(event.latLng);
                                                    infowindow.open(map);
                                                    Core.unblockUI();
                                                }
                                            });
                                        }
                                    });
                                    
                                    var contentString = '<div style="width: 250px;"><div><b>' +
                                        (row.META_VALUE_CODE ? row.META_VALUE_CODE : '') + '</b><br />' 
                                        + (row.META_VALUE_NAME ? row.META_VALUE_NAME : '') + '<br />'
                                        + (rowData.description ? rowData.description : '') + '</div></div>';
                                    
                                    if (c == 0) {
                                        var markerPhoto = 'assets/custom/img/marker-start.png';
                                    } else if (mil == Number(c)+1) {
                                        var markerPhoto = 'assets/custom/img/marker-end.png';
                                    } else {
                                        var markerPhoto = rowData.markerphoto;
                                    }
                                    
                                    var marker = new google.maps.Marker({
                                        position: new google.maps.LatLng(row.lat, row.lng),
                                        icon: {
                                            url: markerPhoto,
                                            scaledSize: new google.maps.Size(28, 28),
                                            anchor: new google.maps.Point(15,16)
                                        },
                                        map: map,
                                        title: (rowData.name ? rowData.name : ''),
                                        metaDataId: _this.META_DATA_ID,
                                        metaValueId: row.META_VALUE_ID,
                                        rowData: row.rowData
                                    });
                                    
                                    googleMapDrawStaticDataList.push(marker);
                                    markerObj.push(marker);
                                    gotoLocation = new google.maps.LatLng(row.lat, row.lng);
                                    bounds.extend(gotoLocation);

                                    marker.addListener('click', (function(marker, contentString) {
                                        return function(event) {
                                            infowindow.setContent(contentString);
                                            infowindow.open(map, marker);
                                        };
                                    })(marker, contentString));

                                    google.maps.event.addListener(marker, 'click', function(event) {
                                        try {
                                            if (event.ub['ctrlKey']) {
                                                if (!$("#checkAll_" + data.metaDataId).length) {
                                                    $("<input type='checkbox' class='d-none' checked id='checkAll_" + data.metaDataId + "'/>").appendTo('body');
                                                }
                                                window['_selectedRows_' + data.metaDataId].push(JSON.parse(marker.rowData));   

                                                marker.setIcon('mdcommon/svgIconByColor/008000');                                                         
                                            }
                                        } catch(e) {}
                                    });
                                }
                            }
                            
                        } else {
                            
                            var mi = 0, mil = _this.GMAPDATA.length, tempMi = 0, tempMi2, routeObj = [];
                            
                            for (mi; mi < mil; mi++) {
                                var row = _this.GMAPDATA[mi];
                                var rowData = JSON.parse(row.rowData);
                                var path = [];

                                path.push({ lat: Number(row.lat), lng: Number(row.lng) });
                                tempMi2 = ++tempMi;
                                if (tempMi2 < mil) {
                                    path.push({ lat: Number(_this.GMAPDATA[tempMi2].lat), lng: Number(_this.GMAPDATA[tempMi2].lng) });
                                }
                                var arrow = {
                                    path: 'M 0,0 2,6 -2,6 0,0 z',
                                    fillColor: 'red',
                                    fillOpacity: 1.0,
                                    strokeColor: 'red',
                                    strokeWeight: 1,
                                };                                

                                var polylinePath = new google.maps.Polyline({
                                    path: path,
                                    geodesic: true,
                                    visible: true,
                                    icons: [{
                                        icon: arrow,
                                        offset: '100%',
                                    }],                                    
                                    strokeOpacity: 1,
                                    strokeColor: rowData.polylinecolor,
                                    strokeColorAttr: rowData.polylinecolor,
                                    strokeWeight: rowData.polylinewidth,
                                    metaDataId: _this.META_DATA_ID,
                                    metaValueId: row.META_VALUE_ID,
                                    rowData: row.rowData
                                });
                                polylinePathObj.push(polylinePath);

                                polylinePath.setMap(map);

                                google.maps.event.addListener(polylinePath, 'click', function(event) {
                                    var rowData = JSON.parse(row.rowData);

                                    if ('lineactionmetatypeid' in Object(rowData) && rowData.lineactionmetatypeid == 'popupDataview') {
                                        $.ajax({
                                            type: 'post',
                                            url: 'mddatamodel/renderGmapInfoWindowByDv',
                                            data: { dvId: rowData.lineactionmetadataid, rowData: rowData },
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({
                                                    message: 'Loading...',
                                                    boxed: true
                                                });
                                            },
                                            success: function(data) {
                                                infowindow.setContent(data.html);
                                                infowindow.setPosition(event.latLng);
                                                infowindow.open(map);
                                                Core.unblockUI();
                                            }
                                        });
                                    }
                                });

                                if (tempMi2 < mil) {
                                    directionsService.route({
                                        origin: { lat: Number(row.lat), lng: Number(row.lng) },
                                        destination: { lat: Number(_this.GMAPDATA[tempMi2].lat), lng: Number(_this.GMAPDATA[tempMi2].lng) },
                                        travelMode: 'DRIVING'
                                    }, function(response, status) {
                                        routeObj.push(new google.maps.DirectionsRenderer({
                                            suppressInfoWindows: true,
                                            suppressMarkers: true,
                                            polylineOptions: {
                                                strokeWeight: 1,
                                                strokeColor: '#ff6c6c'
                                            },                                            
                                            map: map
                                        }));                                        

                                        if (status == google.maps.DirectionsStatus.OK) {
                                            routeObj[routeObj.length - 1].setDirections(response);
                                        }
                                    });            
                                }                    
                            };
                        }

                        googleMapInitContextMenu2();

                        google.maps.event.addListener(map, 'click', function() {
                            infowindow.close();
                        });
                    }
                    
                    if (_this.isGrouping == false) {
                        
                        $.each(_this.GMAPDATA, function() {

                            var row = this, contentString = '';

                            if (typeof row.META_VALUE_CODE != 'undefined') {
                                contentString = '<strong>' + row.META_VALUE_CODE + '</strong><br />' + row.META_VALUE_NAME;
                            }

                            if (data.metaDataId == '1529727324487237' 
                                    || data.metaDataId == '1560236224444' 
                                    || data.metaDataId == '1539681311719' 
                                    || data.metaDataId == '1583477045320' 
                                    || data.metaDataId == '1587615421509') {

                                var rowData = JSON.parse(row.rowData);

                                contentString = '<div style="width: 300px;"><img width="42px" src="' + rowData.profile +
                                    '" align="left" style="margin-right:5px"><div style="padding-left: 85px;"><b style="text-transform:uppercase;">' +
                                    (row.META_VALUE_NAME ? row.META_VALUE_NAME : '') + '</b><br /><br />' + (rowData.description ? rowData.description : '') + '<br><a href="javascript:;" onClick="googleMapMarkerMoreLink(' + _this.META_DATA_ID + ', \'' + encodeURIComponent(row.rowData) + '\')">Дэлгэрэнгүй...</a></div></div>';
                                
                                if (typeof rowData.markerphoto != 'undefined' && rowData.markerphoto) {
                                    var markerphoto = {
                                        url: rowData.markerphoto,
                                        scaledSize: new google.maps.Size(42, 42)
                                    };
                                } else {
                                    var markerphoto = {
                                        url: 'http://mt.googleapis.com/vt/icon/name=icons/spotlight/spotlight-poi.png&scale=1'
                                    };
                                }
                                
                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(row.lat, row.lng),
                                    icon: markerphoto,
                                    animation: google.maps.Animation.DROP,
                                    map: map,
                                    title: (rowData.name ? rowData.name : ''),
                                    metaDataId: _this.META_DATA_ID,
                                    metaGoogleMapLinkId: row.metaGoogleMapLinkId,
                                    actionMetaDataId: row.actionMetaDataId,
                                    actionMetaTypeId: row.actionMetaTypeId,
                                    metaValueId: row.META_VALUE_ID,
                                    rowData: row.rowData
                                });                            

                                google.maps.event.addListener(marker, 'rightclick', function(mouseEvent) {
                                    googleMapContextMenu.show(mouseEvent.latLng);
                                });

                            } else if ($("#md-map-canvas-" + data.metaDataId).hasClass('mapLocationTracking')) {
                                var rowData = JSON.parse(row.rowData);

                                contentString = '<div style="width: 250px;"><div><b>' +
                                    (row.META_VALUE_CODE ? row.META_VALUE_CODE : '') + '</b><br />' 
                                    + (row.META_VALUE_NAME ? row.META_VALUE_NAME : '') + '<br />'
                                    + (rowData.description ? rowData.description : '') + '</div></div>';

                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(row.lat, row.lng),
                                    icon: {
                                        url: rowData.markerphoto,
                                        scaledSize: new google.maps.Size(28, 28),
                                        anchor: new google.maps.Point(15,16)
                                    },
                                    map: map,
                                    title: (rowData.name ? rowData.name : ''),
                                    metaDataId: _this.META_DATA_ID,
                                    metaValueId: row.META_VALUE_ID,
                                    rowData: row.rowData
                                });

                            } else {

                                var rowData = JSON.parse(row.rowData);

                                if (typeof rowData.markerphoto === 'undefined') {
                                    var marker = new google.maps.Marker({
                                        position: new google.maps.LatLng(row.lat, row.lng),
                                        icon: 'mdcommon/svgIconByColor/' + row.markerColor + '/' + _this.ICON,
                                        animation: google.maps.Animation.DROP,
                                        map: map,
                                        metaDataId: _this.META_DATA_ID,
                                        metaGoogleMapLinkId: row.metaGoogleMapLinkId,
                                        actionMetaDataId: row.actionMetaDataId,
                                        actionMetaTypeId: row.actionMetaTypeId,
                                        metaValueId: row.META_VALUE_ID,
                                        rowData: row.rowData,
                                        pid: row.id
                                    });
                                } else {
                                    var marker = new google.maps.Marker({
                                        position: new google.maps.LatLng(row.lat, row.lng),
                                        icon: {
                                            url: rowData.markerphoto,
                                            scaledSize: new google.maps.Size(42, 42)
                                        },
                                        animation: google.maps.Animation.DROP,
                                        map: map,
                                        title: (rowData.name ? rowData.name : ''),
                                        metaDataId: _this.META_DATA_ID,
                                        metaGoogleMapLinkId: row.metaGoogleMapLinkId,
                                        actionMetaDataId: row.actionMetaDataId,
                                        actionMetaTypeId: row.actionMetaTypeId,
                                        metaValueId: row.META_VALUE_ID,
                                        rowData: row.rowData,
                                        pid: row.id
                                    });                                      
                                }
                            }

                            googleMapDrawStaticDataList.push(marker);
                            markerObj.push(marker);
                            gotoLocation = new google.maps.LatLng(row.lat, row.lng);
                            bounds.extend(gotoLocation);

                            marker.addListener('click', (function(marker, contentString) {
                                return function(event) {
                                    infowindow.setContent(contentString);
                                    infowindow.open(map, marker);
                                };
                            })(marker, contentString));

                            google.maps.event.addListener(marker, 'click', function(event) {
                                try {
                                    if (event.ub['ctrlKey']) {
                                        var jodata = JSON.parse(marker.rowData), isTempSave = false;
                                        for (var mii = 0; mii < window['_selectedRows_' + data.metaDataId].length; mii++) {
                                            if (window['_selectedRows_' + data.metaDataId].hasOwnProperty(mii) && window['_selectedRows_' + data.metaDataId][mii]['id'] == jodata['id']) {
                                                isTempSave = mii;
                                            }
                                        }

                                        if (isTempSave !== false) {
                                            delete window['_selectedRows_' + data.metaDataId][isTempSave];   
                                            marker.setIcon('mdcommon/svgIconByColor/FF0000');
                                            var resetKey = 0, resetObj = [];
                                            for (var key in window['_selectedRows_' + data.metaDataId]) {
                                                resetObj[resetKey] = window['_selectedRows_' + data.metaDataId][key];
                                                resetKey++;
                                            }                                            
                                            window['_selectedRows_' + data.metaDataId] = resetObj;
                                        } else {
                                            if (!$("#checkAll_" + data.metaDataId).length) {
                                                $("<input type='checkbox' class='d-none' checked id='checkAll_" + data.metaDataId + "'/>").appendTo('body');
                                            }
                                            window['_selectedRows_' + data.metaDataId].push(jodata); 

                                            marker.setIcon('mdcommon/svgIconByColor/008000');                                                         
                                        }
                                    }
                                } catch(e) {}
                            });

                            /*marker.addListener('click', function() {
                                if (this.metaGoogleMapLinkId) {
                                    var strData = {
                                        "listMetaDataId": this.metaDataId, 
                                        "rowId": this.metaValueId, 
                                        "actionMetaDataId": this.actionMetaDataId, 
                                        "actionMetaTypeId": this.actionMetaTypeId, 
                                        "metaGoogleMapLinkId": this.metaGoogleMapLinkId, 
                                        "rowData": this.rowData
                                    };

                                    /**
                                     * callTransferActionGoogleMap(strData);
                                     * Шууд DV-ээс дуудлаа тохиргоонууд нь ажиллахгүй байсан тул
                                     */
                            /*if (strData.actionMetaTypeId == '200101010000016') {
                                        callDataViewByGoogleMap(strData.actionMetaDataId, null);
                                    } else if (strData.actionMetaTypeId == '200101010000032') {
                                        callDiagramByMeta(strData.actionMetaDataId, 'gmap', row.id);
                                    } else if (strData.actionMetaTypeId == '200101010000034') {
                                        runWorkSpaceWithDataView(this, _this.META_DATA_ID, strData.actionMetaDataId, true, JSON.parse(strData.rowData), false, true);
                                    } else if (strData.actionMetaTypeId == '200101010000036') {
                                        callLayoutByGoogleMap({'metaDataId': row.actionMetaDataId, 'rowId': row.id});
                                    }
                                }


                            });*/

                            /*marker.addListener('mouseover', function() {
                                infowindow.open(map, this);
                            });

                            marker.addListener('mouseout', function() {
                                infowindow.close();
                            });*/

                        });
                    }

                    setTimeout(function() {
                        //legend.style.display = "block";
                        if (document.getElementById('google-map-api-floating-panel')) {
                            document.getElementById('google-map-api-floating-panel').style.display = 'block';
                        }
                    }, 800);
                    //gotoLocation = new google.maps.LatLng(47, 103.5);                

                } else if (_this.DRAW_TYPE == 'REGION') {

                    if (_this.GMAPDATA.length > 1) {
                        for (i = 0; i < _this.GMAPDATA.length; i++) {
                            var row = _this.GMAPDATA[i];
                            if (row.DRAW_TYPE == 'circle') {
                                var regionArray = new google.maps.Circle({
                                    metaDataId: _this.META_DATA_ID,
                                    center: { lat: parseFloat(row.CENTER.lat), lng: parseFloat(row.CENTER.lng) },
                                    radius: row.RADIUS,
                                    strokeColor: '#' + row.COLOR,
                                    fillColor: '#' + row.COLOR
                                });
                                googleMapDrawStaticDataList.push(regionArray);
                                regionArray.setMap(map);
                            } else if (row.DRAW_TYPE == 'polygon') {
                                var regionArray = new google.maps.Polygon({
                                    metaDataId: _this.META_DATA_ID,
                                    paths: row.COORDINATES,
                                    strokeColor: '#' + row.COLOR,
                                    strokeOpacity: 0.8,
                                    strokeWeight: 2,
                                    fillColor: '#' + row.COLOR,
                                    fillOpacity: 0.35
                                });
                                googleMapDrawStaticDataList.push(regionArray);
                                regionArray.setMap(map);
                            } else if (row.DRAW_TYPE == 'polyline') {
                                var regionArray = new google.maps.Polyline({
                                    metaDataId: _this.META_DATA_ID,
                                    path: row.COORDINATES,
                                    geodesic: true,
                                    strokeColor: '#' + row.COLOR
                                });
                                googleMapDrawStaticDataList.push(regionArray);
                                regionArray.setMap(map);
                            } else {
                                var regionArray = new google.maps.Rectangle({
                                    metaDataId: _this.META_DATA_ID,
                                    strokeColor: '#' + row.COLOR,
                                    fillColor: '#' + row.COLOR,
                                    bounds: new google.maps.LatLngBounds(
                                        new google.maps.LatLng(row.COORDINATES[0].j, row.COORDINATES[1].j),
                                        new google.maps.LatLng(row.COORDINATES[0].R, row.COORDINATES[1].R)
                                    )
                                });
                                googleMapDrawStaticDataList.push(regionArray);
                                regionArray.setMap(map);
                            }
                        }
                    }
                }

            } else { 
                callMoveCoordinateByGoogleMap(_this.META_GOOGLE_MAP_LINK_ID, data.metaDataId);
                if (_this.GMAPDATA.length > 0) {
                    for (i = 0; i < _this.GMAPDATA.length; i++) {
                        var row = _this.GMAPDATA[i];
                        var marker = new google.maps.Marker({
                            metaDataId: _this.META_DATA_ID,
                            position: new google.maps.LatLng(row.lat, row.lng),
                            icon: 'mdcommon/svgIconByColor/' + _this.COLOR + '/' + _this.ICON,
                            animation: google.maps.Animation.DROP,
                            map: map
                        });
                        googleMapDrawDynamicDataList.push(marker);
                        marker.setMap(map);
                        gotoLocation = new google.maps.LatLng(row.lat, row.lng);
                    }
                    bounds.extend(gotoLocation);
                }
            }
        });
    }

    if (typeof defaultDrawDataList.region != 'undefined') {
        $.each(defaultDrawDataList.region, function() {
            var _this = this,
                row = _this;

            if (row.drawType == 'circle') {
                var regionArray = new google.maps.Circle({
                    metaDataId: _this.META_DATA_ID,
                    center: { lat: parseFloat(row.center.lat), lng: parseFloat(row.center.lng) },
                    radius: row.radius,
                    strokeColor: row.color,
                    fillColor: row.color
                });

                var infowindow = new google.maps.InfoWindow({
                    content: row.desc
                });

                var marker = new google.maps.Marker({
                    position: { lat: parseFloat(row.center.lat), lng: parseFloat(row.center.lng) },
                    animation: google.maps.Animation.DROP,
                    map: map
                });

                marker.addListener('mouseover', function() {
                    infowindow.open(map, this);
                });

                marker.addListener('mouseout', function() {
                    infowindow.close();
                });

                googleMapDrawStaticDataList.push(regionArray);
                regionArray.setMap(map);

                bounds.extend(new google.maps.LatLng(row.center.lat, row.center.lng));

            } else if (row.drawType == 'polygon') {

                var regionArray = new google.maps.Polygon({
                    metaDataId: _this.META_DATA_ID,
                    paths: row.coordinates,
                    strokeColor: row.color,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: row.color,
                    fillOpacity: 0.35
                });
                googleMapDrawStaticDataList.push(regionArray);
                regionArray.setMap(map);

                for (var i = 0; i < row.coordinates.length; i++) {
                    bounds.extend(new google.maps.LatLng(row.coordinates[i]['lat'], row.coordinates[i]['lng']));
                }

                var infoWindow = new google.maps.InfoWindow({
                    content: row.desc
                });

                var marker = new google.maps.Marker({
                    position: { lat: parseFloat(bounds.getCenter().lat()), lng: parseFloat(bounds.getCenter().lng()) },
                    animation: google.maps.Animation.DROP,
                    map: map
                });

                marker.addListener('mouseover', function() {
                    infoWindow.open(map, this);
                });

                marker.addListener('mouseout', function() {
                    infoWindow.close();
                });

            } else if (row.drawType == 'polyline') {

                var regionArray = new google.maps.Polyline({
                    metaDataId: _this.metaDataId,
                    path: row.coordinates,
                    geodesic: true,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: row.color,
                    strokeColor: row.color,
                    fillOpacity: 0.35
                });

                googleMapDrawStaticDataList.push(regionArray);
                regionArray.setMap(map);

                for (var i = 0; i < row.coordinates.length; i++) {
                    bounds.extend(new google.maps.LatLng(row.coordinates[i]['lat'], row.coordinates[i]['lng']));
                }

                var InfoWindow = new google.maps.InfoWindow({
                    content: row.desc
                });

                var marker = new google.maps.Marker({
                    position: { lat: parseFloat(bounds.getCenter().lat()), lng: parseFloat(bounds.getCenter().lng()) },
                    animation: google.maps.Animation.DROP,
                    map: map
                });

                marker.addListener('mouseover', function() {
                    InfoWindow.open(map, this);
                });

                marker.addListener('mouseout', function() {
                    InfoWindow.close();
                });

            } else {

                var regionArray = new google.maps.Rectangle({
                    metaDataId: data.metaDataId,
                    strokeColor: '#' + row.color,
                    fillColor: '#' + row.color,
                    bounds: new google.maps.LatLngBounds(
                        new google.maps.LatLng(row.coordinates[0].j, row.coordinates[1].j),
                        new google.maps.LatLng(row.coordinates[0].R, row.coordinates[1].R)
                    )
                });

                googleMapDrawStaticDataList.push(regionArray);
                regionArray.setMap(map);

                bounds.extend(new google.maps.LatLng(row.coordinates[0].j, row.coordinates[1].j));
                bounds.extend(new google.maps.LatLng(row.coordinates[0].R, row.coordinates[1].R));
            }
        });
    }

    /**
     * Select Marker using Polygon
     */
    var polygon = new google.maps.Polyline({
        strokeColor: "#1E41AA",
        strokeOpacity: 1.0,
        strokeWeight: 2,
        map: map,
        fillColor: "#2652F2",
        fillOpacity: 0.6
    });

    var poly = polygon.getPath();

    function addPolyPoints(e) {
        if (clearPolygon) {
            polygon = new google.maps.Polyline({
                strokeColor: "#1E41AA",
                strokeOpacity: 1.0,
                strokeWeight: 2,
                map: map,
                fillColor: "#2652F2",
                fillOpacity: 0.6
            });
        
            poly = polygon.getPath();
        }
        try {
            poly.push(e.latLng);            

            for (var i=0; i<markerObj.length; i++) {
                var isAddedChild = false;
                if (google.maps.geometry.poly.containsLocation(markerObj[i].getPosition(), polygon)) {
                    if (!$("#checkAll_" + data.metaDataId).length) {
                        $("<input type='checkbox' class='d-none' checked id='checkAll_" + data.metaDataId + "'/>").appendTo('body');
                    }

                    if (window['_selectedRows_' + data.metaDataId].length) {
                        for (var key in window['_selectedRows_' + data.metaDataId]) {
                            var basketRow = window['_selectedRows_' + data.metaDataId][key], childId = basketRow.id;
                
                            if (markerObj[i]['pid'] == childId) {
                                isAddedChild = true;
                                break;
                            } 
                        }

                        if (!isAddedChild) {
                            window['_selectedRows_' + data.metaDataId].push(JSON.parse(markerObj[i]['rowData']));   
                            markerObj[i].setIcon('mdcommon/svgIconByColor/008000');
                        }                        
                    } else {
                        window['_selectedRows_' + data.metaDataId].push(JSON.parse(markerObj[i]['rowData']));   
                        markerObj[i].setIcon('mdcommon/svgIconByColor/008000');                        
                    }

                } else {

                    for (var key in window['_selectedRows_' + data.metaDataId]) {
                        var basketRow = window['_selectedRows_' + data.metaDataId][key], childId = basketRow.id;
            
                        if (markerObj[i]['pid'] == childId) {
                            delete window['_selectedRows_' + data.metaDataId][key];   
                            markerObj[i].setIcon('mdcommon/svgIconByColor/FF0000');
                        }
                    }               
                }
            }
            clearPolygon = false;
        } catch (e) {}
    }

    google.maps.event.addListener(map, 'click', addPolyPoints);
    
    /**
     * Reset all selection
     */
    google.maps.event.addListener(map, 'rightclick', function(event) {
        clearPolygon = true;
        polygon.setMap(null);
        window['_selectedRows_' + data.metaDataId] = [];
        for (var i=0; i<markerObj.length; i++) {
            markerObj[i].setIcon('mdcommon/svgIconByColor/FF0000');
        }        
    });

    map.setCenter(map.getCenter());
    /*map.setZoom(13); 2020-05-06*/
    map.fitBounds(bounds);
    
    if (data.metaDataId == '1529727324487237' || '1560236224444' == data.metaDataId || data.metaDataId == '1539681311719') {
//        googleMapMarkerVisibleByIds($("div#object-value-list-"+ data.metaDataId +" form#default-criteria-form").serializeArray(), undefined);
    }
    
    //map.fitBounds(bounds);
    //map.panToBounds(bounds);
}

function callMoveCoordinateByGoogleMap(metaGoogleMapLinkId, metaDataId) {
    setInterval(function() {
        $.ajax({
            type: 'post',
            url: 'mdmetadata/googleMapCoordinateList',
            data: { metaDataId: metaDataId, rowId: metaGoogleMapLinkId },
            dataType: 'json',
            async: false,
            success: function(data) {
                $.each(googleMapDrawDynamicDataList, function() {
                    this.setMap(null);
                });
                var data = data['0'];
                googleMapDrawDynamicDataList = [];
                $.each(data.GMAPDATA, function(key, value) {
                    var row = this;
                    var marker = new google.maps.Marker({
                        metaDataId: data.META_DATA_ID,
                        position: new google.maps.LatLng(row.lat, row.lng),
                        icon: 'mdcommon/svgIconByColor/' + data.COLOR + '/' + data.ICON,
                        map: map
                    });
                    googleMapDrawDynamicDataList.push(marker);
                    marker.setMap(map);
                });
            },
            error: function() {}
        });
    }, 100000);
}

function callTransferActionGoogleMap(dataList) {
    $.ajax({
        type: 'post',
        url: 'mdmeta/googleMapTransperAction',
        data: dataList,
        dataType: 'json',
        beforeSend: function() {},
        success: function(data) {
            PNotify.removeAll();
            if (data.status === 'success') {
                var row = data.params;

                if (row.actionMetaTypeId == '200101010000011') {
                    callWebServiceByMeta(row.actionMetaDataId, true, row.id);
                } else if (row.actionMetaTypeId == '200101010000016') {
                    callDataViewByGoogleMap(row.actionMetaDataId, row.id);
                } else if (row.actionMetaTypeId == '200101010000036') {
                    callLayoutByGoogleMap({ "metaDataId": row.actionMetaDataId, "rowId": row.id });
                }

            } else {
                new PNotify({
                    title: 'Error',
                    text: data.message,
                    type: 'error',
                    sticker: false
                });
            }
        },
        error: function() {
            alert('Error');
        }
    });
}

function callLayoutByGoogleMap(data) {
    $.ajax({
        type: 'post',
        url: 'mdlayoutrender/index',
        dataType: 'json',
        data: { metaDataId: data.metaDataId, isDialog: true, rowId: data.rowId, executeType: 'gmap' },
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var dialogName = '#bpChildDialog';
            if (!$(dialogName).length) {
                $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
            }
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '1200',
                height: 'auto',
                modal: true,
                buttons: [{
                    text: plang.get('close_btn'),
                    class: 'btn grey-cascade btn-sm',
                    click: function() {
                        $(dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialogExtend("maximize");
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}
function callDataViewByGoogleMap(metaDataId, recordId) {
    var dialogName = '#googleMapDataViewDialog';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdobject/checkMetaDataType/' + metaDataId,
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: 'Дэлгэрэнгүй',
                width: '800',
                height: '500',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                buttons: [{
                    text: 'Хаах',
                    class: 'btn grey-cascade btn-sm',
                    click: function() {
                        $(dialogName).empty().dialog('destroy').remove();
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        $('#objectdatagrid-' + metaDataId).datagrid({ fitColumns: 'true' });
        Core.initAjax($(dialogName));
    });
}
function callDashboardCardByGoogleMap(metaDataId) {
    var dialogName = '#googleMapDashboardCardDialog';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/cardRenderByPost',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: 'Dataview',
                width: '1000',
                height: 'auto',
                modal: true,
                buttons: [{
                    text: 'Хаах',
                    class: 'btn grey-cascade btn-sm',
                    click: function() {
                        $(dialogName).empty().dialog('destroy').remove();
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($(dialogName));
    });
}
function callBannerByMeta(metaDataId) {
    var $dialogName = 'dialog-metabanner-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/bannerRenderByPost',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 850,
                minWidth: 850,
                height: "auto",
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("restore");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax();
    });
}

function callMenuByMeta(metaDataId) {
    var $dialogName = 'dialog-metamenu-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/menuRenderByPost',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 850,
                minWidth: 850,
                height: "auto",
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("restore");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax();
    });
}

function callCalendarByMeta(metaDataId) {
    var dialogName = 'dialog-metacalendar-' + metaDataId;
    if (!$('#' + dialogName).length) {
        $('<div id="' + dialogName + '"></div>').appendTo('body');
    }

    var $dialog = $('#' + dialogName);

    $.ajax({
        type: 'post',
        url: 'mdcalendar/calendarRenderByPost',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var config = {
                title: data.Title,
                width: data.Width,
                minWidth: data.Width,
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $dialog.dialog('close');
                    }
                }]
            };

            Core.initDialog(dialogName, data.Html, config, function($dialog) {
                $dialog.dialogExtend("restore");
            });
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function callDonutByMeta(metaDataId) {
    var $dialogName = 'dialog-metadonut-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/donutRenderByPost',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: data.Width,
                minWidth: data.Width,
                height: "auto",
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("restore");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax();
    });
}

function callCardByMeta(metaDataId) {
    var $dialogName = 'dialog-metacard-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdmeta/cardRenderByPost',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: data.Width,
                minWidth: data.Width,
                height: "auto",
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("restore");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($("#" + $dialogName));
    });
}

function callContentHtmlByMeta(metaDataId) {
    var $dialogName = 'dialog-metadonut-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdcontentui/contentHtmlRenderByMeta',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: "100%",
                minWidth: "100%",
                height: "700",
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("maximize");
            $("#" + $dialogName).dialogExtend("restore");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($("#" + $dialogName));
    });
}

function callDiagramByMeta(metaDataId, executeType, rowId) {
    var $dialogName = 'dialog-dashboard-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName);
    var executeType = typeof executeType === 'undefined' ? '' : executeType;

    $.ajax({
        type: 'post',
        url: 'mddashboard/diagramRenderByPost',
        data: { metaDataId: metaDataId, executeType: executeType, rowId: rowId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $dialog.empty().append(data.Html);

            var width = data.width;
            if (data.width === null) {
                width = '800';
            }

            var height = data.height;
            if (data.height === null) {
                height = '500';
            }
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                width: '1200',
                height: 'auto',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-madison',
                    click: function() {
                        $dialog.dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $dialog.dialog('open');
            $dialog.dialogExtend("restore");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function callLayoutByMeta(metaDataId, executeType) {
    $.ajax({
        type: 'post',
        url: 'mdlayoutrender/index/' + metaDataId,
        dataType: 'json',
        data: { isDialog: true },
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var dialogName = '#bpChildDialog';
            if (!$(dialogName).length) {
                $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
            }
            $(dialogName).empty().append(data.Html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: '1200',
                height: 'auto',
                modal: true,
                buttons: [{
                    text: 'Хаах',
                    class: 'btn grey-cascade btn-sm',
                    click: function() {
                        $(dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $(dialogName).dialogExtend("maximize");
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function callMetaTypeStatement(metaDataId, executeType) {
    $.ajax({
        type: 'post',
        url: 'mddashboard/callMetaTypeStatement',
        data: { metaDataId: metaDataId },
        dataType: 'json',
        success: function(data) {
            if (data.META_TYPE_ID == '200101010000032')
                callDiagramByMeta(metaDataId, executeType);
            else if (data.META_TYPE_ID == '200101010000036')
                callLayoutByMeta(metaDataId, executeType);
            return;
        },
        error: function() {
            alert('Error');
        }
    });
}

function runBusinessProcess_v1 (elem, dataViewId, uniqId, isEditMode, runMode, callback) {
    
    $ticketValidation = false;
    var _mainSelector = $('div[data-bp-uniq-id="'+ uniqId +'"]');

    if (_mainSelector.find('input[data-path="warningDescription"]').length > 0) { 
        var _yesBtn = typeof _mainSelector.find('input[data-path="yesBtn"]') !== 'undefined' ? _mainSelector.find('input[data-path="yesBtn"]').val() : plang.get('yes_btn');
        var _noBtn = typeof _mainSelector.find('input[data-path="noBtn"]') !== 'undefined' ? _mainSelector.find('input[data-path="noBtn"]').val() : plang.get('no_btn');

        var $cDialogName = '#dialog-ntr-confirm';
        if (!$($cDialogName).length) {
            $('<div id="' + $cDialogName.replace('#', '') + '"></div>').appendTo('body');
        }
        $($cDialogName).empty().append(_mainSelector.find('input[data-path="warningDescription"]').val());

        $($cDialogName).dialog({
            cache: false,
            resizable: false,
            bgiframe: true,
            autoOpen: false,
            title: 'Санамж',
            width: 450,
            height: "auto",
            modal: true,
            close: function() {
                $($cDialogName).empty().dialog('destroy').remove();
            },
            buttons: [{
                    text: _yesBtn,
                    class: 'btn green-meadow btn-sm',
                    click: function() {
                        runBusinessProcess(elem, dataViewId, uniqId, isEditMode, runMode, callback);
                        $($cDialogName).empty().dialog('destroy').remove();
                    }
                },
                {
                    text: _noBtn,
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $($cDialogName).empty().dialog('destroy').remove();
                    }
                }
            ]
        });

        $($cDialogName).dialog('open');
    } else {
        runBusinessProcess(elem, dataViewId, uniqId, isEditMode, runMode, callback);
    }
}

function runBusinessProcess(elem, dataViewId, uniqId, isEditMode, runMode, callback) {
    var $saveBtn = $(elem);
    var $parentForm = $saveBtn.closest('form');
    var runMode = (typeof runMode !== 'undefined') ? runMode : '';

    Core.blockUI({message: 'Loading...', boxed: true});

    $saveBtn.attr({ 'disabled': 'disabled' }).prepend('<i class="fa fa-spinner fa-pulse fa-fw"></i>');

    setTimeout(function() {

        if (window['processBeforeSave_' + uniqId](elem) && bpFormValidate($parentForm)) {

            var $jsonResponse = false;

            $parentForm.ajaxSubmit({
                type: 'post',
                url: 'mdwebservice/runProcess',
                dataType: 'json',
                async: false,
                beforeSend: function() {
                    Core.blockUI({message: 'Loading...', boxed: true});
                },
                success: function(responseData) {

                    if (responseData.hasOwnProperty('Html') && responseData.hasOwnProperty('metaType') && responseData.metaType == 'businessProcess') {

                        var taskFlowId = bpGetOpenParam($parentForm, 'taskFlowId');

                        if (taskFlowId) {
                            var funcArguments = _taskFlowParams[dataViewId + '_' + taskFlowId];

                            backFirstContent(elem);

                            _taskFlowBpOpenData[dataViewId + '_' + taskFlowId + '_' + responseData.metaDataId] = responseData;

                            funcArguments[2] = responseData.metaDataId;

                            window['runBusinessProcessGetDataWithDataView'].apply(null, funcArguments);
                            return;
                        }
                    }
                    
                    var _workSpaceMode = '0', $workSpace = $saveBtn.closest('.ws-area');

                    if ($workSpace.length > 0) {
                        $jsonResponse = true;
                        _workSpaceMode = $workSpace.find('input[name="workSpaceMode"]').val();
                    }

                    if (responseData.isSystemResponse == 'false' || $jsonResponse == true || typeof callback !== 'undefined') {

                        PNotify.removeAll();

                        if (responseData.status == 'error') {
                            new PNotify({
                                title: responseData.status,
                                text: responseData.message,
                                type: responseData.status,
                                sticker: false,
                                hide: true,
                                addclass: pnotifyPosition,
                                delay: 1000000000
                            });
                            $parentForm.find('input[name="windowSessionId"]').val(responseData.uniqId);
                            Core.unblockUI();

                            if (typeof callback !== 'undefined') {
                                callback(responseData, elem, dataViewId);
                                return;
                            }

                        } else {
                            new PNotify({
                                title: responseData.status,
                                text: responseData.message,
                                type: responseData.status,
                                addclass: pnotifyPosition,
                                sticker: false
                            });

                            if (typeof callback !== 'undefined') {
                                if (typeof window[callback + '_' + uniqId] !== 'undefined') {
                                    window[callback + '_' + uniqId](responseData, elem);
                                } else {
                                    callback(responseData, elem);
                                }
                                return;
                            }

                            if (typeof dataViewId !== 'undefined' && dataViewId !== '') {
                                var dataGrid = window['objectdatagrid_' + dataViewId];
                                dataViewReloadByElement(dataGrid);
                            }

                            if (window['isBpOpenParam' + uniqId] == 'is-bp-open-1') {
                                $parentForm.find('input[name="windowSessionId"]').val(responseData.uniqId);
                                bpProcessFieldClear($parentForm, responseData.uniqId);
                                if (runMode == 'saveprint' && responseData.rowId !== '') {
                                    processPrintPreview($saveBtn, responseData.processId, responseData.rowId, $saveBtn.attr('data-get-process-id'), responseData.resultData);
                                }
                                window['processAfterSave_' + uniqId]($saveBtn, responseData.status, responseData);
                                return;
                            }

                            if (_workSpaceMode == '1' && typeof responseData.rowId !== 'undefined') {

                                var _workSpaceIdAttr = $workSpace.attr('id');
                                var _workSpaceIdAttrArr = _workSpaceIdAttr.split('-');
                                var _workSpaceId = _workSpaceIdAttrArr[2];

                                $.ajax({
                                    type: 'post',
                                    url: 'mdworkspace/refreshHeaderParams',
                                    data: { workSpaceId: _workSpaceId, rowId: responseData.rowId },
                                    dataType: 'json',
                                    success: function(dataSub) {
                                        $workSpace.find('[data-position-name=header-position-1]').attr('src', dataSub.headerParam1);
                                        $workSpace.find('[data-position-name=header-position-2]').text(dataSub.headerParam2);
                                        $workSpace.find('[data-position-name=header-position-3]').text(dataSub.headerParam3);
                                        $workSpace.find('[data-position-name=header-position-4]').text(dataSub.headerParam4);
                                        $workSpace.find('[data-position-name=hidden-params]').html(dataSub.hiddenParams);
                                        $workSpace.find('input[name="workSpaceMode"]').val('0');
                                        var nextMenu = $workSpace.find(".page-sidebar-menu li.disabled:eq(0)");
                                        $workSpace.find(".page-sidebar-menu li").removeClass("disabled");
                                        $workSpace.find(".page-sidebar-menu li").removeClass("active");
                                        nextMenu.addClass('active').trigger('click');
                                        nextMenu.find('a').trigger('click');
                                    }
                                });
                            }

                            if ($workSpace.length > 0) {
                                var menuId = $saveBtn.closest("div.workspace-part").attr("data-menu-id");
                                var wsMenu = $workSpace.find("ul.page-sidebar-menu li").find("a[data-menu-id='" + menuId + "']");
                                var workSpaceId = '', workSpaceParams = '';

                                if ($parentForm.closest('div.ws-area').length > 0) {
                                    var wsArea = $parentForm.closest('div.ws-area');
                                    var workSpaceIdAttr = wsArea.attr('id').split('-');
                                    workSpaceId = workSpaceIdAttr[2];
                                    workSpaceParams = $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize();
                                }

                                window['processAfterSave_' + uniqId]($saveBtn, responseData.status, responseData);

                                $.ajax({
                                    type: 'post',
                                    url: 'mdwebservice/callMethodByMeta',
                                    data: {
                                        metaDataId: $parentForm.closest('[data-bp-uniq-id]').attr('data-process-id'),
                                        isDialog: false,
                                        isHeaderName: false,
                                        isSystemMeta: false,
                                        isBackBtnIgnore: 1,
                                        workSpaceId: workSpaceId,
                                        workSpaceParams: workSpaceParams,
                                        dmMetaDataId: dataViewId,
                                        oneSelectedRow: responseData.resultData
                                    },
                                    dataType: 'json',
                                    async: false,
                                    success: function(data) {                                                
                                        var $wsBpWrap = $parentForm.closest('div.row').parent();
                                        $wsBpWrap.empty().append(data.Html).promise().done(function() {
                                            Core.initBPAjax($wsBpWrap);
                                        });
                                    }
                                });

                                if (runMode == 'saveprint' && responseData.rowId !== '') {
                                    processPrintPreview($saveBtn, responseData.processId, responseData.rowId, $saveBtn.attr('data-get-process-id'), responseData.resultData);
                                }

                            } else {

                                if (typeof isEditMode !== 'undefined') {

                                    if (runMode == 'saveadd') {

                                        bpProcessFieldClear($parentForm, responseData.uniqId);

                                    } else if (runMode == 'saveprint') {

                                        if (responseData.rowId !== '') {
                                            processPrintPreview($saveBtn, responseData.processId, responseData.rowId, $saveBtn.attr('data-get-process-id'), responseData.resultData);
                                        }

                                        var openParams = $parentForm.find("input[id='openParams']").val();
                                        openParams = JSON.parse(openParams);
                                        processAlreadyLoad = true;

                                        if (isEditMode && typeof dataViewId !== 'undefined' && dataViewId !== '') {
                                            backFirstContent(elem);
                                        } else if (!isEditMode && typeof dataViewId !== 'undefined' && dataViewId !== '') {
                                            /*
                                            doMainProcess(responseData, 'create');
                                            pivateTransferProcessAction(dataViewId, responseData.processId, '200101010000011', 'toolbar', elem, openParams, dataGrid, false, false, false, responseData.resultData);
                                            */
                                            backFirstContent(elem);
                                        } else {
                                            callWebServiceByMeta(responseData.processId, true, '', 'false', openParams, true);
                                        }

                                    } else if (!isEditMode && runMode == '' && dataViewId == '') {

                                        bpProcessFieldClear($parentForm, responseData.uniqId);

                                    } else {

                                        var openParams = $parentForm.find("input[id='openParams']").val();

                                        if (openParams !== '') {

                                            openParams = JSON.parse(openParams);
                                            processAlreadyLoad = true;

                                            /* Хадгалсаны дараа ямар нэгэн үйлдэл хийгдэхгүй хэвээр байх үед afterSaveNoAction = true */
                                            if (!openParams.hasOwnProperty('afterSaveNoAction') ||
                                                (openParams.hasOwnProperty('afterSaveNoAction') && !openParams.afterSaveNoAction)) {

                                                if (isEditMode && typeof dataViewId !== 'undefined' && dataViewId !== '') {
                                                    backFirstContent(elem);
                                                } else if (!isEditMode && typeof dataViewId !== 'undefined' && dataViewId !== '') {
                                                    /*
                                                    doMainProcess(responseData, 'create');
                                                    privateTransferProcessAction(dataViewId, responseData.processId, '200101010000011', 'toolbar', elem, openParams, dataGrid, false, false, false, responseData.resultData);
                                                    */
                                                    backFirstContent(elem);
                                                } else {
                                                    if (isEditMode && dataViewId == '' && openParams.hasOwnProperty('callerType') && openParams.callerType == 'reloadPackage') {
                                                        bpProcessFieldClear($parentForm, responseData.uniqId);
                                                    } else {
                                                        callWebServiceByMeta(responseData.processId, true, '', 'false', openParams, true);
                                                    }
                                                }
                                            } else if (openParams.hasOwnProperty('afterSaveNoAction') && openParams.afterSaveNoAction) {

                                                $parentForm.find('input[name="windowSessionId"]').val(responseData.uniqId);

                                                if (openParams.hasOwnProperty('afterSaveNoActionFnc') && openParams.afterSaveNoActionFnc) {
                                                    eval(openParams.afterSaveNoActionFnc);
                                                }
                                            }

                                        } else {
                                            Core.unblockUI();
                                        }
                                    }

                                } else {

                                    if (runMode == 'saveadd') {
                                        bpProcessFieldClear($parentForm, responseData.uniqId);
                                    } else {

                                        var openParams = $parentForm.find("input[id='openParams']").val();
                                        openParams = JSON.parse(openParams);
                                        processAlreadyLoad = true;

                                        if (typeof dataViewId !== 'undefined' && dataViewId !== '') {
                                            privateTransferProcessAction(dataViewId, responseData.processId, '200101010000011', 'toolbar', elem, openParams, dataGrid, false, false, false, responseData.resultData);
                                        } else {
                                            callWebServiceByMeta(responseData.processId, true, '', 'false', openParams, true);
                                        }
                                    }
                                }

                                window['processAfterSave_' + uniqId]($saveBtn, responseData.status, responseData);
                                bpIgnoreGroupRemove($parentForm);
                            }
                        }

                    } else {

                        $parentForm.find('input[name="windowSessionId"]').val(responseData.uniqId);

                        window['processAfterSave_' + uniqId]($saveBtn, responseData.status, responseData);
                        bpIgnoreGroupRemove($parentForm);

                        $parentForm.find('#responseMethod').empty().append(responseData.responseMethod);
                        $('html,body').animate({
                            scrollTop: $parentForm.find('#responseMethod').offset().top
                        }, 'slow');
                    }

                    if (responseData.status == 'success' && responseData.hasOwnProperty('resultData')) {

                        var resultData = responseData.resultData;

                        if (resultData.hasOwnProperty('_filecontent') && resultData._filecontent != '' && resultData.hasOwnProperty('_filename')) { 
                            var blob = new Blob([resultData._filecontent]);
                            var link = document.createElement('a');
                            link.href = window.URL_FN.createObjectURL(blob);
                            link.download = resultData._filename + '.txt';
                            link.click();
                        }
                    }

                    if (typeof $saveBtn.attr('callback-fnc') !== 'undefined') {

                        if (typeof $saveBtn.attr('callback-datarow') !== 'undefined') {
                            var $dataRow = JSON.parse($saveBtn.attr('callback-datarow'));
                            window[$saveBtn.attr('callback-fnc')]($dataRow.id, $dataRow.metadataid, $dataRow.name, $saveBtn.attr('callback-datarow'));
                        } else {
                            window[$saveBtn.attr('callback-fnc')](responseData, elem, dataViewId);
                        }
                    }

                    bpIgnoreGroupRemove($parentForm);

                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });

        } else {
            bpIgnoreGroupRemove($parentForm);
        }

        Core.unblockUI();
        $saveBtn.removeAttr('disabled').find('i:eq(0)').remove();

    }, 200);
}

! function(t) {
    "use strict";
    t.widget("ui.autocomplete", t.ui.autocomplete, {
        _resizeMenu: function() {
            var t, e, i, o;
            isNaN(this.options.maxShowItems) || (t = this.menu.element.css({ overflowX: "", overflowY: "", width: "", maxHeight: "" }), e = t.children("li").css("whiteSpace", "nowrap"), e.length > this.options.maxShowItems && (i = t.prop("clientWidth"), t.css({ overflowX: "hidden", overflowY: "auto", maxHeight: e.eq(0).outerHeight() * this.options.maxShowItems + 1 }), o = i - t.prop("clientWidth"), t.width("+=" + o)), t.outerWidth(Math.max(t.outerWidth() + 1, this.element.outerWidth())))
        }
    })
}(jQuery);

function bpProcessFieldClear(mainElement, uniqId) {

    var ignoreFieldClean = '', fieldClean = '';

    if (mainElement.find("input[type=checkbox][data-path='isUsedGl']").is(':checked')) {
        mainElement.find("input[type=checkbox][data-path='isUsedGl']").click();
    }

    if (mainElement.find('button[data-ignore-clean-fields]').length) {

        if (mainElement.find('button[data-ignore-clean-fields]').attr('data-ignore-clean-fields') !== '') {

            var ignoreCleanFields = mainElement.find('button[data-ignore-clean-fields]').attr('data-ignore-clean-fields').split('|');
            ignoreFieldClean += ',';

            for (var i = 0; i < ignoreCleanFields.length; i++) {
                ignoreFieldClean += "[data-path='" + ignoreCleanFields[i] + "'],";
            }

            ignoreFieldClean = rtrim(ignoreFieldClean, ',');
        }

        if (mainElement.find('button[data-clean-fields]').attr('data-clean-fields') !== '') {

            var configCleanFields = mainElement.find('button[data-clean-fields]').attr('data-clean-fields').split('|');
            fieldClean += ',';

            for (var i = 0; i < configCleanFields.length; i++) {
                fieldClean += "[data-path='" + configCleanFields[i] + "'],";
            }

            fieldClean = rtrim(fieldClean, ',');
        }
    }

    var $cleanFields = mainElement.find("[data-isclear='1']" + fieldClean).not("[data-path='isUsedGl']" + ignoreFieldClean);

    if ($cleanFields.length) {
        $cleanFields.each(function() {
            var $this = $(this);
            var tagName = $this.prop('tagName');

            if (tagName == 'INPUT') {
                if ($this.hasClass('booleanInit')) {
                    checkboxCheckerUpdate($this, false);
                } else if ($this.hasClass('radioInit')) {
                    radioButtonCheckerUpdate($this, null);
                } else if ($this.hasClass('popupInit')) {
                    var $parent = $this.closest('.input-group');
                    $this.val('');
                    $this.attr('data-row-data', '');
                    $parent.find('input[type="text"]').val('').attr('title', '');
                } else if ($this.hasClass('bigdecimalInit')) {
                    $this.val('');
                    $this.next("input[type=hidden]").val('');
                } else {
                    $this.val('');
                }
            } else if (tagName == 'SELECT') {
                $this.select2('val', '');
            } else if (tagName == 'TEXTAREA') {
                $this.val('');
            } else if (tagName == 'DIV') {
                if ($this.find('table.table').hasClass('bprocess-table-dtl')) {
                    $this.find('table.table > tbody').empty();
                    $this.find('table.table > tfoot > tr > td').each(function() {
                        var $thisCell = $(this);
                        if ($thisCell.text() !== '') {
                            $thisCell.text('0.00');
                        }
                    });
                } else {
                    $this.find('table.table tbody').find('tr').each(function() {

                        var $thisDiv = $(this);
                        var $thisInput = $thisDiv.find('input');
                        var $thisSelect2 = $thisDiv.find("select.select2");
                        var $thisSelect = $thisDiv.find("select");
                        var $thisTextarea = $thisDiv.find("textarea");

                        if ($thisInput.length) {
                            if ($thisInput.hasClass('booleanInit')) {
                                checkboxCheckerUpdate($thisInput, false);
                            } else if ($thisInput.hasClass('radioInit')) {
                                radioButtonCheckerUpdate($thisInput, null);
                            } else if ($thisInput.hasClass('bigdecimalInit')) {
                                $thisInput.val('');
                                $thisInput.next("input[type=hidden]").val('');
                            } else {
                                $thisInput.val('');
                            }
                        } else if ($thisSelect2.length) {
                            $thisSelect2.select2('val', '');
                        } else if ($thisSelect.length) {
                            $thisSelect.val('');
                        } else if ($thisTextarea.length) {
                            $thisTextarea.val('');
                        }
                    });
                }
            }
        });
    }

    mainElement.find('input[name="windowSessionId"]').val(uniqId);
    mainElement.find('input#saveAddEventInput').trigger('change');
    
    var openParams = mainElement.find("input[id='openParams']").val();
                                                
    if (openParams && openParams !== '') {
        openParams = JSON.parse(openParams);

        if (openParams.hasOwnProperty('afterSaveNoAction') 
            && openParams.afterSaveNoAction 
            && openParams.hasOwnProperty('afterSaveNoActionFnc') 
            && openParams.afterSaveNoActionFnc) {

            eval(openParams.afterSaveNoActionFnc);
        }
    }

    return;
}

function runBusinessProcessWithDataView(dataGrid, mainMetaDataId, processMetaDataId, isDialog, valuePackageId, _elem, params, wfmStatusParams, signerParams, selectedRow, appendPath, appendHtml, callbackFunction) {

    if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab && typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab && !processAlreadyLoad) {
        var $processTab = $('body').find("a[href='#app_tab_" + processMetaDataId + "']");
        if ($processTab.length > 0) {
            $processTab.tab('show');
            return;
        }
    }

    bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] = typeof bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] === 'undefined' ? '0' : bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId];

    if (typeof(isDialog) === 'undefined') {
        isDialog = false;
    }

    var workSpaceParams = '', workSpaceId = '', addonJsonParam = '';

    if (typeof(_elem) !== 'undefined') {
        var _thisElem = $(_elem);
        if (_thisElem.closest("div.ws-area").length > 0) {
            var wsArea = _thisElem.closest("div.ws-area");
            var workSpaceIdAttr = wsArea.attr("id").split("-");
            workSpaceId = workSpaceIdAttr[2];
            workSpaceParams = $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize();

            var menuCriteria = wsArea.find('.ws-menu ul.workspace-menu li.active a[data-criteria]');

            if (menuCriteria.length) {
                workSpaceParams = workSpaceParams + '&' + menuCriteria.attr('data-criteria');
            }
        }
    }

    if (typeof signerParams === 'undefined') {
        var signerParams = '';
    }

    var mandatoryCriteriaParams = {};
    if ($("form.mandatory-criteria-form-" + mainMetaDataId).find("[data-path]").length > 0) {
        $("form.mandatory-criteria-form-" + mainMetaDataId).find("[data-path]").each(function() {
            var $thisField = $(this);
            mandatoryCriteriaParams[$thisField.attr('data-path')] = $thisField.val();
        });
    }

    if ($("input#cardViewerFieldPath", "#object-value-list-" + mainMetaDataId).val() !== '' &&
        $("input#cardViewerValue", "#object-value-list-" + mainMetaDataId).val() !== '') {
        mandatoryCriteriaParams[$("input#cardViewerFieldPath", "#object-value-list-" + mainMetaDataId).val()] = $("input#cardViewerValue", "#object-value-list-" + mainMetaDataId).val();
    }

    if ($('body').find("input#dataview-criteria-params-" + mainMetaDataId).length > 0 && $('body').find("input#dataview-criteria-params-" + mainMetaDataId).val() != '') {
        var criteriaParams = $('body').find("input#dataview-criteria-params-" + mainMetaDataId).val();
        var paramsPathArr = criteriaParams.split('&');

        for (var i = 0; i < paramsPathArr.length; i++) {
            var fieldPathArr = paramsPathArr[i].split('=');
            mandatoryCriteriaParams[fieldPathArr[0]] = fieldPathArr[1];
        }
    }
    
    var $mandatoryCriterias = $('#calendar-searchform-'+mainMetaDataId+', .'+mainMetaDataId+'_default_criteria').find('.mandatory-criteria-param-1');
                
    if ($mandatoryCriterias.length) {
        $mandatoryCriterias.each(function() {
            var $mandatoryCriteriasThis = $(this).find('[data-path]'), mandatoryCriteriasThisVal = $mandatoryCriteriasThis.val();
            if (typeof mandatoryCriteriasThisVal != 'undefined' && mandatoryCriteriasThisVal != '') {
                mandatoryCriteriaParams[$mandatoryCriteriasThis.attr('data-path')] = mandatoryCriteriasThisVal;
            }
        });
    }

    if (dataGrid !== '1') {
        if (typeof mandatoryCriteriaParams !== 'undefined' && Object.keys(mandatoryCriteriaParams).length) {
            addonJsonParam = JSON.stringify(mandatoryCriteriaParams);
        }
    } else {
        addonJsonParam = params;
    }

    var processParam = {
        metaDataId: processMetaDataId,
        isDialog: isDialog,
        valuePackageId: valuePackageId,
        workSpaceId: workSpaceId,
        workSpaceParams: workSpaceParams,
        wfmStatusParams: wfmStatusParams,
        addonJsonParam: addonJsonParam,
        dmMetaDataId: mainMetaDataId,
        signerParams: signerParams,
        openParams: JSON.stringify(params),
        oneSelectedRow: selectedRow,
        isBpOpen: bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId]
    };

    if (Object.keys(_processParam).length > 0) {
        processParam = mergeObjs(processParam, _processParam);
    }
    
    if (Object.keys(_processAddonParam).length > 0) {
        if (processParam.addonJsonParam != '' && _processAddonParam.hasOwnProperty('addonJsonParam') && _processAddonParam.addonJsonParam != '') {
            var processParamAddonJson = JSON.parse(processParam.addonJsonParam);
            var _processAddonParamJson = JSON.parse(_processAddonParam.addonJsonParam);
            processParam['addonJsonParam'] = JSON.stringify(mergeObjs(processParamAddonJson, _processAddonParamJson));
            delete _processAddonParam['addonJsonParam'];
        }
        processParam = mergeObjs(processParam, _processAddonParam);
        _processAddonParam = {};
    }

    if (bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] == '1') {
        processParam.isDialog = false;
    }

    $.ajax({
        type: 'post',
        url: 'mdwebservice/callMethodByMeta',
        data: processParam,
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            
            if (bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] == '1') {
                
                renderProcessPage('dataview', mainMetaDataId, data.Html, _elem);

            } else if (data.saveAddMode === 'testcase') {
                
                if (typeof isTestCaseAddonScript === 'undefined') {
                    $.getScript('middleware/assets/js/addon/testcase.js').done(function() {
                        renderTestCaseProcess(_elem, data);
                    });
                } else {
                    renderTestCaseProcess(_elem, data);
                }            
                
            } else if (data.mode === 'dialog') {
                
                var $dialogName = 'dialog-businessprocess-' + processMetaDataId;

                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '" class="display-none"></div>').appendTo('body');
                } else {
                    $("#" + $dialogName).dialogExtend("restore");
                    Core.unblockUI();
                    return;
                }
                var $dialog = $('#' + $dialogName);

                $dialog.empty().append(data.Html);

                var processUniqId = data.uniqId;
                var hidePrintButton = '', runModeButton = '';

                if (typeof data.save_and_print === 'undefined') {
                    hidePrintButton = ' hide';
                }
                if (data.run_mode === '') {
                    runModeButton = ' hide';
                }

                var buttons = [
                    {
                        text: data.run_mode,
                        class: 'btn green-meadow btn-sm bp-run-btn bp-btn-saveadd ' + runModeButton,
                        click: function(e) {
                            
                            var processForm = $dialog.find('form');
                            var $dialogSaveBtn = $(e.target);
                            
                            $dialogSaveBtn.attr('disabled', 'disabled').prepend('<i class="fa fa-spinner fa-pulse fa-fw"></i>');

                            if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                if (bpFormValidate(processForm)) {

                                    if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                        var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                        var yes_btn = plang.get('yes_btn');
                                        var no_btn = plang.get('no_btn');
                                        var yes_btn_class = '';

                                        if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                            no_btn = plang.get('close_btn');
                                            yes_btn_class = ' d-none';
                                        }
        
                                        $confirmDialog.empty().append(window[processUniqId + '_note']);
                                        $confirmDialog.dialog({
                                            cache: false,
                                            resizable: false,
                                            bgiframe: true,
                                            autoOpen: false,
                                            title: window[processUniqId + '_title'],
                                            width: 370,
                                            height: "auto",
                                            modal: true,
                                            open: function() {
                                                setTimeout(function() {
                                                    $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                }, 100);
                                            },
                                            close: function() {
                                                $confirmDialog.empty().dialog('destroy').remove();
                                                uiDialogOverlayRemove();
                                            },
                                            buttons: [{
                                                    text: yes_btn,
                                                    class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                    click: function() {
                                                        if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                            PNotify.removeAll();
                                                            new PNotify({
                                                                title: window[processUniqId + '_messageType'],
                                                                text: window[processUniqId + '_message'],
                                                                type: window[processUniqId + '_messageType'],
                                                                sticker: false
                                                            });
                                                        }

                                                        runBpFormWithClearFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, e.target);

                                                        $confirmDialog.dialog('close');
                                                    }
                                                },
                                                {
                                                    text: no_btn,
                                                    class: 'btn blue-madison btn-sm',
                                                    click: function() {
                                                        $("#" + $dialogName).dialog('close');
                                                        $confirmDialog.dialog('close');
                                                    }
                                                }
                                            ]
                                        });
                                        $confirmDialog.dialog('open');
                                    } else {
                                        runBpFormWithClearFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, e.target);
                                    }
                                    
                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }

                            } else {
                                bpIgnoreGroupRemove(processForm);
                            }

                            $dialogSaveBtn.removeAttr('disabled').find('i').remove();
                        }
                    },
                    {
                        text: data.run_btn,
                        class: 'btn green-meadow btn-sm bp-run-btn main-run-btn bp-btn-save',
                        click: function(e) {
                            
                            var processForm = $dialog.find('form');
                            var $dialogSaveBtn = $(e.target);
                            
                            $dialogSaveBtn.attr('disabled', 'disabled').prepend('<i class="fa fa-spinner fa-pulse fa-fw"></i>');

                            if (window['processBeforeSave_' + processUniqId]($dialogSaveBtn)) {

                                if (bpFormValidate(processForm)) {

                                    if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                        var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                        var yes_btn = plang.get('yes_btn');
                                        var no_btn = plang.get('no_btn');
                                        var yes_btn_class = '';

                                        if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                            no_btn = plang.get('close_btn');
                                            yes_btn_class = ' d-none';
                                        }
        
                                        $confirmDialog.empty().append(window[processUniqId + '_note']);
                                        $confirmDialog.dialog({
                                            cache: false,
                                            resizable: false,
                                            bgiframe: true,
                                            autoOpen: false,
                                            title: window[processUniqId + '_title'],
                                            width: 370,
                                            height: "auto",
                                            modal: true,
                                            open: function() {
                                                setTimeout(function() {
                                                    $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                }, 100);
                                            },
                                            close: function() {
                                                $confirmDialog.empty().dialog('destroy').remove();
                                                uiDialogOverlayRemove();
                                            },
                                            buttons: [{
                                                    text: yes_btn,
                                                    class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                    click: function() {
                                                        if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                            PNotify.removeAll();
                                                            new PNotify({
                                                                title: window[processUniqId + '_messageType'],
                                                                text: window[processUniqId + '_message'],
                                                                type: window[processUniqId + '_messageType'],
                                                                sticker: false
                                                            });
                                                        }

                                                        runBusinessProcessFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, e.target, callbackFunction, _elem);

                                                        $confirmDialog.dialog('close');
                                                    }
                                                },
                                                {
                                                    text: no_btn,
                                                    class: 'btn blue-madison btn-sm',
                                                    click: function() {
                                                        $("#" + $dialogName).dialog('close');
                                                        $confirmDialog.dialog('close');
                                                    }
                                                }
                                            ]
                                        });
                                        $confirmDialog.dialog('open');

                                    } else {
                                        runBusinessProcessFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, e.target, callbackFunction, _elem);
                                    }
                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }

                            } else {
                                bpIgnoreGroupRemove(processForm);
                            }

                            $dialogSaveBtn.removeAttr('disabled').find('i').remove();
                        }
                    },
                    {
                        text: data.save_and_print,
                        class: 'btn purple-plum btn-sm bp-run-btn bp-btn-saveprint' + hidePrintButton,
                        click: function(e) {
                            
                            var processForm = $dialog.find('form');
                            var $dialogSaveBtn = $(e.target);
                            
                            $dialogSaveBtn.attr('disabled', 'disabled').prepend('<i class="fa fa-spinner fa-pulse fa-fw"></i>');

                            if (window['processBeforeSave_' + processUniqId]($dialogSaveBtn)) {

                                if (bpFormValidate(processForm)) {

                                    if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                        var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                        var yes_btn = plang.get('yes_btn');
                                        var no_btn = plang.get('no_btn');
                                        var yes_btn_class = '';

                                        if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                            no_btn = plang.get('close_btn');
                                            yes_btn_class = ' d-none';
                                        }
        
                                        $confirmDialog.empty().append(window[processUniqId + '_note']);
                                        $confirmDialog.dialog({
                                            cache: false,
                                            resizable: false,
                                            bgiframe: true,
                                            autoOpen: false,
                                            title: window[processUniqId + '_title'],
                                            width: 370,
                                            height: "auto",
                                            modal: true,
                                            open: function() {
                                                setTimeout(function() {
                                                    $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                }, 100);
                                            },
                                            close: function() {
                                                $confirmDialog.empty().dialog('destroy').remove();
                                                uiDialogOverlayRemove();
                                            },
                                            buttons: [{
                                                    text: yes_btn,
                                                    class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                    click: function() {
                                                        if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                            PNotify.removeAll();
                                                            new PNotify({
                                                                title: window[processUniqId + '_messageType'],
                                                                text: window[processUniqId + '_message'],
                                                                type: window[processUniqId + '_messageType'],
                                                                sticker: false
                                                            });
                                                        }
                                                        processFormAndPrintAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, e.target, processMetaDataId, data.get_process_id);
                                                        $confirmDialog.dialog('close');
                                                    }
                                                },
                                                {
                                                    text: no_btn,
                                                    class: 'btn blue-madison btn-sm',
                                                    click: function() {
                                                        $confirmDialog.dialog('close');
                                                    }
                                                }
                                            ]
                                        });
                                        $confirmDialog.dialog('open');
                                    } else {
                                        processFormAndPrintAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, e.target, processMetaDataId, data.get_process_id);
                                    }

                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }

                            } else {
                                bpIgnoreGroupRemove(processForm);
                            }

                            $dialogSaveBtn.removeAttr('disabled').find('i').remove();
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm bp-close-btn bp-btn-close',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ];
                
                if (data.hasOwnProperty('isKnowledge') && data.isKnowledge != '0') {
                    buttons.splice(0, 0, {
                        text: 'Тусламж',
                        class: 'btn btn-info btn-sm float-left bp-btn-help',
                        click: function() {
                            pfHelpDataView(data.metaDataId);
                        }
                    });
                }

                /*if (isTestServer) {
                    buttons.splice(1, 0, {
                        text: 'Тест кэйс хадгалах',
                        class: 'btn btn-danger btn-sm float-left bp-btn-testcase',
                        click: function(e) {
                            var processForm = $dialog.find('form');
                            saveBusinessProcessTestCase($(e.target), processForm);
                        }
                    });
                }*/
                
                if (data.hasOwnProperty('previewReportTemplateCode') && data.previewReportTemplateCode != '' && data.previewReportTemplateCode != null) {
                    buttons.splice(2, 0, {
                        text: 'Preview',
                        class: 'btn btn-sm green-meadow bp-btn-preview',
                        click: function(e) {
                            previewReportTemplateFromBp($(e.target), data.metaDataId, processUniqId, data.previewReportTemplateCode, $dialog.find('form'));
                        }
                    });
                }

                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: data.dialogWidth,
                    height: data.dialogHeight,
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    open: function(event, ui) {
                        enableScrolling();
                        if ($(_elem).closest("div.tabbable-line").find("div#commonSelectableTabBasket").length) {
                            $("tr[data-cell-path='isUsedGl']").hide();
                        }
                    },
                    close: function() {
                        removeHtmlEditorByElement($dialog);
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: buttons
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                if (data.dialogSize === 'fullscreen') {
                    $dialog.dialogExtend('maximize');
                }
                setTimeout(function() {
                    $dialog.dialog('open');
                }, 1);

                if (typeof appendPath !== 'undefined' && typeof appendHtml !== 'undefined' && typeof callbackFunction !== 'undefined') {
                    $(appendPath, "#" + $dialogName).find('tbody').html(appendHtml);
                }

                $dialog.bind('dialogextendminimize', function() {
                    $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').addClass('display-none');
                });
                $dialog.bind('dialogextendmaximize', function() {
                    $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').removeClass('display-none');
                    bpDetailFitHeight($dialog, 'dialog');
                });
                $dialog.bind('dialogextendrestore', function() {
                    $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').removeClass('display-none');
                    bpDetailFitHeightRestore($dialog, 'dialog');
                });

                Core.initBPAjax($dialog);

            } else {
                bpOpenConfigContainer(_elem, mainMetaDataId, processMetaDataId, processUniqId, data.Title, data.Html, false);
            }

            processAlreadyLoad = false;

            Core.unblockUI();
            delete bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId];
        },
        error: function() {
            alert('Error');
        }
    });
}

function runBpFormWithClearFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, etarget) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {

            PNotify.removeAll();

            if (responseData.status === 'success') {

                new PNotify({
                    title: 'Success',
                    text: responseData.message,
                    type: 'success',
                    addclass: pnotifyPosition,
                    sticker: false
                });
                
                dataViewReloadByElement(dataGrid);
                bpProcessFieldClear(processForm, responseData.uniqId);

            } else {
                new PNotify({
                    title: responseData.status,
                    text: responseData.message,
                    type: responseData.status,
                    sticker: false,
                    hide: true,
                    addclass: pnotifyPosition,
                    delay: 1000000000
                });
            }

            window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);

            bpIgnoreGroupRemove(processForm);

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}

function runBusinessProcessFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, etarget, callbackFunction, elem) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
        },
        success: function(responseData) {

            PNotify.removeAll();

            if (responseData.status === 'success') {

                new PNotify({
                    title: 'Success',
                    text: responseData.message,
                    type: 'success',
                    addclass: pnotifyPosition,
                    sticker: false
                });

                if (typeof callbackFunction !== 'undefined') {
                    window[callbackFunction]();
                } else {
                    
                    try {
                        backPrevTab(elem);
                        
                        dataViewReloadByElement(dataGrid);
                        ecommerceReloadFilter(mainMetaDataId);

                        if (typeof dataGrid.selector != 'undefined' && dataGrid.selector) {

                            var uniqId = dataGrid.selector.split('_')[1];

                            if ($("#commonSelectableTabBasket_" + uniqId).length > 0 && responseData.rowId != '') {
                                addRowToBpDvBasket(mainMetaDataId, responseData.rowId, dataGrid);
                                closeDataGridWithBpValue(dataGrid, responseData.rowId);
                            }
                        }

                        dataViewFocusByElement(dataGrid);
                    } catch (e) { console.log(e); }
                }

                window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
                $("#" + $dialogName).dialog('close');

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false,
                    hide: true,
                    addclass: pnotifyPosition,
                    delay: 1000000000
                });
                window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
            }

            bpIgnoreGroupRemove(processForm);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}
function backPrevTab(elem) {
    if (typeof elem !== 'undefined' && elem && $(elem).hasAttr('data-is-maintabclose') && $(elem).attr('data-is-maintabclose') == '1') {
        backFirstContent(elem);
    }
}
function processFormAndPrintAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, etarget, processMetaDataId, processId) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();
            if (responseData.status === 'success') {
                new PNotify({
                    title: 'Success',
                    text: responseData.message,
                    type: 'success',
                    addclass: pnotifyPosition,
                    sticker: false
                });

                if (responseData.rowId !== '') {
                    processPrintPreview(etarget, processMetaDataId, responseData.rowId, processId, responseData.resultData);
                }
                
                dataViewReloadByElement(dataGrid);
                ecommerceReloadFilter(mainMetaDataId);

                if (typeof dataGrid.selector != 'undefined' && dataGrid.selector) {
                    var uniqId = dataGrid.selector.split('_')[1];
                    if ($("#commonSelectableTabBasket_" + uniqId).length > 0) {
                        if (responseData.rowId != '') {
                            addRowToBpDvBasket(mainMetaDataId, responseData.rowId, dataGrid);
                            closeDataGridWithBpValue(dataGrid, responseData.rowId);
                        }
                    }
                }

                window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
                $("#" + $dialogName).dialog('close');

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false,
                    hide: true,
                    addclass: pnotifyPosition,
                    delay: 1000000000
                });
                window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
            }

            bpIgnoreGroupRemove(processForm);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}

function runBpGetRunprocess(dvMetaDataId, processMetaDataId, processUniqId, processForm, dataGrid, $dialogName, $mainWindowProcessId, $mainWindowUniqId, elem, $wfmParams, $newWfmStatusName, $newWfmStatusDescription, dataviewUniqId, nextProcessId, callbackFunction, wfmuseprocesswindow) {

    if (typeof $newWfmStatusDescription !== 'undefined' && typeof $wfmParams !== 'undefined' && typeof $wfmParams['description'] !== 'undefined') {
        $wfmParams['description'] = $newWfmStatusDescription
    }

    if (window['processBeforeSave_' + processUniqId](processForm) && bpFormValidate(processForm)) {

        if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
            var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
            var yes_btn = plang.get('yes_btn');
            var no_btn = plang.get('no_btn');
            var yes_btn_class = '';

            if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                no_btn = plang.get('close_btn');
                yes_btn_class = ' d-none';
            }
        
            $confirmDialog.empty().append(window[processUniqId + '_note']);
            $confirmDialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: window[processUniqId + '_title'],
                width: 370,
                height: 'auto',
                modal: true,
                open: function() {
                    setTimeout(function() {
                        $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                    }, 100);
                },
                close: function() {
                    $("#" + $dialogName).dialog('close');
                    $confirmDialog.empty().dialog('destroy').remove();
                    uiDialogOverlayRemove();
                },
                buttons: [{
                        text: yes_btn,
                        class: 'btn green-meadow btn-sm'+yes_btn_class,
                        click: function() {
                            if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                PNotify.removeAll();
                                new PNotify({
                                    title: window[processUniqId + '_messageType'],
                                    text: window[processUniqId + '_message'],
                                    type: window[processUniqId + '_messageType'],
                                    sticker: false
                                });
                            }
                            runBpAjaxSubmit(dvMetaDataId, processMetaDataId, processUniqId, processForm, dataGrid, $dialogName, $mainWindowProcessId, $mainWindowUniqId, elem, $wfmParams, $newWfmStatusName, dataviewUniqId, nextProcessId, callbackFunction, wfmuseprocesswindow);

                            $confirmDialog.dialog('close');
                        }
                    },
                    {
                        text: no_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $confirmDialog.dialog('close');
                        }
                    }
                ]
            });
            $confirmDialog.dialog('open');
        } else {
            runBpAjaxSubmit(dvMetaDataId, processMetaDataId, processUniqId, processForm, dataGrid, $dialogName, $mainWindowProcessId, $mainWindowUniqId, elem, $wfmParams, $newWfmStatusName, dataviewUniqId, nextProcessId, callbackFunction, wfmuseprocesswindow);
        }

    } else {
        bpIgnoreGroupRemove(processForm);
    }
}

function runBpAjaxSubmit(dvMetaDataId, processMetaDataId, processUniqId, processForm, dataGrid, $dialogName, $mainWindowProcessId, $mainWindowUniqId, elem, $wfmParams, $newWfmStatusName, dataviewUniqId, nextProcessId, callbackFunction, wfmuseprocesswindow) {
    
    if (typeof $wfmParams !== 'undefined' && typeof $wfmParams.description !== 'undefined') {
        var $wsParams = $('input[name="wfmStatusParams"]', 'div[data-bp-uniq-id="' + processUniqId + '"]');
        if ($wsParams.val()) {
            $wsParams.val($wsParams.val() + '&newWfmDescriptionQuick=' + $wfmParams.description);
        }
    }

    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.existsBlockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();
            
            if (responseData.hasOwnProperty('Html') && responseData.hasOwnProperty('metaType') && responseData.metaType == 'businessProcess') {
                
                var taskFlowId = bpGetOpenParam(processForm, 'taskFlowId');
                var funcArguments = _taskFlowParams[dvMetaDataId + '_' + taskFlowId];
                
                $('#' + $dialogName).dialog('close');

                if ($('.dialog-after-save-close').length) {
                    $('.dialog-after-save-close').dialog('close');
                }
                
                _taskFlowBpOpenData[dvMetaDataId + '_' + taskFlowId + '_' + responseData.metaDataId] = responseData;
                
                funcArguments[2] = responseData.metaDataId;
                
                window['runBusinessProcessGetDataWithDataView'].apply(null, funcArguments);
                return;
            }

            var isUnBlockMsg = true;

            if (responseData.status == 'success') {
                
                if (_processReportTemplateArchive.hasOwnProperty(dvMetaDataId + '_' + processMetaDataId)) {
                    var archivePostData = _processReportTemplateArchive[dvMetaDataId + '_' + processMetaDataId];
                    archivePostData.ignoreSetWfmStatusParams = 1;
                    $.ajax({
                        type: 'post',
                        url: 'mdtemplate/toArchiveWfm',
                        data: archivePostData,
                        dataType: 'json',
                        success: function (data) {
                            console.log('bp toArchiveWfm:');
                            console.log(data);
                        }
                    });
                    delete _processReportTemplateArchive[dvMetaDataId + '_' + processMetaDataId];
                }
                
                var isGridReload = true;
                
                if (typeof callbackFunction !== 'undefined') {
                    window[callbackFunction]();
                } else {
                    
                    if (responseData.message) {
                        new PNotify({
                            title: responseData.status,
                            text: responseData.message,
                            type: responseData.status,
                            addclass: pnotifyPosition,
                            sticker: false
                        });
                    }

                    var wfmStatusParams = processForm.find("input[name='wfmStatusParams']").val();

                    if (wfmStatusParams !== '') {
                        var wfmObj = new URLSearchParams(wfmStatusParams);
                        if (wfmObj && wfmObj.get('statusName')) {
                            new PNotify({
                                title: 'Success',
                                text: '<strong>'+wfmObj.get('statusName')+'</strong> төлөвт шилжлээ.',
                                type: 'success',
                                addclass: pnotifyPosition,
                                sticker: false
                            });                        
                        }
                    }                          

                    if (dataviewUniqId) {
                        window['_selectedRows_' + dataviewUniqId] = [];
                        $('.save-database-' + dataviewUniqId).html('0');
                    }

                    if (typeof $mainWindowProcessId !== 'undefined' && $mainWindowProcessId !== '' && typeof $mainWindowUniqId !== 'undefined' && $mainWindowUniqId !== '') {
                        $('.hidden-wfm-status-' + $mainWindowProcessId, 'div[data-bp-uniq-id="' + $mainWindowUniqId + '"]').trigger('click');
                        $('.bpMainSaveButton', 'div[data-bp-uniq-id="' + $mainWindowUniqId + '"]').trigger('click');
                        backFirstContent(elem);
                    }

                    if (typeof $wfmParams !== 'undefined') {

                        backFirstContent(elem);

                        var processResultData = responseData.resultData;
                        $wfmParams.processMetaDataId = processMetaDataId;
                        
                        if (typeof $('input[name="wfmStatusParams"]', 'div[data-bp-uniq-id="' + processUniqId + '"]').val() !== 'undefined' && $('input[name="wfmStatusParams"]', 'div[data-bp-uniq-id="' + processUniqId + '"]').val() != '') {
                            
                            dataViewRowReload(elem, dataGrid, dvMetaDataId, processMetaDataId);
                            dataViewFocusByElement(dataGrid);

                        } else {
                            
                            if (processResultData.hasOwnProperty('autoassignedusers')) {
                                $wfmParams.autoassignedusers = processResultData.autoassignedusers;
                            }
                            
                            if (typeof wfmuseprocesswindow !== 'undefined' && wfmuseprocesswindow !== '1' && typeof nextProcessId !== 'undefined' && nextProcessId !== '') {
                                $wfmParams.nextProcessId = nextProcessId;
                                isGridReload = false;
                                changeWfmStatusAjax($wfmParams, dataGrid, $newWfmStatusName);
                            } else {
                                if (typeof nextProcessId !== 'undefined' && nextProcessId !== '') {

                                    isUnBlockMsg = false;
                                    isGridReload = false;
                                    
                                    var _wfmParams =
                                        'dataViewId=' + $wfmParams.metaDataId +
                                        '&refStructureId=' + $wfmParams.refStructureId +
                                        '&statusId=' + $wfmParams.wfmStatusId +
                                        '&statusName=' + $wfmParams.newWfmStatusName +
                                        '&statusColor=' + $wfmParams.newWfmStatusColor +
                                        '&rowId=' + $wfmParams.dataRow.id + '';

                                    callWebServiceByMeta(nextProcessId, true, '', false, { callerType: $mainWindowProcessId, isWorkFlow: true, wfmStatusId: $wfmParams.wfmStatusId, wfmStatusCode: '' }, '', _wfmParams, undefined, function() {
                                        if (typeof dataGrid !== 'undefined' && dvMetaDataId && processMetaDataId) {
                                            dataViewRowReload(elem, dataGrid, dvMetaDataId, processMetaDataId);
                                        } else {
                                            changeWfmStatusAjax($wfmParams, dataGrid, $newWfmStatusName);
                                        }
                                    }, $wfmParams.dataRow, $wfmParams.metaDataId);

                                } else {
                                    isGridReload = false;
                                    changeWfmStatusAjax($wfmParams, dataGrid, $newWfmStatusName);
                                }
                            }
                            $('.bpMainSaveButton', 'div[data-bp-uniq-id="' + $mainWindowUniqId + '"]').trigger('click');
                        }

                    } else {
                        if (typeof $dialogName == 'undefined') {
                            doMainProcess(responseData, '');
                        }

                        backPrevTab(elem);
                    }
                }

                window['processAfterSave_' + processUniqId](processForm, responseData.status, responseData);
                $("#" + $dialogName).dialog('close');
                
                if (isGridReload) {
                    dataViewRowReload(elem, dataGrid, dvMetaDataId, processMetaDataId);
                    ecommerceReloadFilter(dvMetaDataId);
                }

                if ($('.dialog-after-save-close').length) {
                    $('.dialog-after-save-close').dialog('close');
                }

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false,
                    hide: true,
                    addclass: pnotifyPosition,
                    delay: 10000000000
                });
                window['processAfterSave_' + processUniqId](processForm, responseData.status, responseData);
            }

            bpIgnoreGroupRemove(processForm);

            if (isUnBlockMsg) {
                Core.unblockUI();
            }
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}

function changeWfmStatusAfterNextRow(elem, dataGrid, dvMetaDataId, processMetaDataId) {
    var row = _changeWfmStatusNextRowParams;
    if (Object.keys(row).length && row.mainMetaDataId == dvMetaDataId && row.processMetaDataId == processMetaDataId) {
        selectPrevNext(dvMetaDataId, processMetaDataId, elem, {}, row.dialog, row.parentCaller, '', 1, 1, true);
        _changeWfmStatusNextRowParams = {};
    }
}

function runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, isDialog, rows, isGetConsolidate, _elem, params, wfmStatusParams, signerParams, parentCaller, batchNumber, row, $mainWindowMetaDataId, $mainWindowUniqId, isBasketWindow, dataviewUniqid, callbackFunction) {
    if (typeof(isDialog) === 'undefined') {
        isDialog = false;
    }

    if (typeof(isGetConsolidate) === 'undefined') {
        isGetConsolidate = false;
    }

    var workSpaceParams = '', workSpaceId = '';

    if (typeof _elem !== 'undefined') {
        var _thisElem = $(_elem);

        if (_thisElem.closest("div.ws-area").length > 0) {

            var wsArea = _thisElem.closest("div.ws-area");
            var workSpaceIdAttr = wsArea.attr("id").split("-");
            workSpaceId = workSpaceIdAttr[2];
            workSpaceParams = $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize();

            var menuCriteria = wsArea.find('.ws-menu ul.workspace-menu li.active a[data-criteria]');

            if (menuCriteria.length) {
                workSpaceParams = workSpaceParams + '&' + menuCriteria.attr('data-criteria');
            }
        }
    }

    if (typeof(signerParams) === 'undefined') {
        var signerParams = '';
    }

    if (typeof row !== 'undefined' && (typeof dataviewUniqid === 'undefined' || dataviewUniqid == '' || dataviewUniqid == null)) {
        if (row !== '' && typeof row === 'string') {
            rows = JSON.parse((decodeURIComponent(row)).replace(/(\r\n|\n|\r)/gm, ' '));
        } else {
            rows = row;
        }
    }

    bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] = typeof bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] === 'undefined' ? '0' : bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId];

    var processParam = {
        metaDataId: processMetaDataId,
        isDialog: isDialog,
        dmMetaDataId: mainMetaDataId,
        oneSelectedRow: rows,
        isGetConsolidate: isGetConsolidate,
        workSpaceId: workSpaceId,
        workSpaceParams: workSpaceParams,
        wfmStatusParams: wfmStatusParams,
        signerParams: signerParams,
        batchNumber: batchNumber,
        openParams: JSON.stringify(params),
        isBasketWindow: (isBasketWindow) ? 1 : '',
        dataviewUniqid: dataviewUniqid,
        isBpOpen: bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId]
    };
    var ajaxUrl = 'mdwebservice/callMethodByMeta';

    if (_processPostParam != '' && _processPostParam != null) {
        var postParamsArr = _processPostParam.split('&');

        if (postParamsArr.length > 0) {
            for (var i = 0; i < postParamsArr.length; i++) {
                var fieldPathArr = postParamsArr[i].split('='),
                    postParam = fieldPathArr[0],
                    fieldValue = '';

                if (typeof fieldPathArr[1] !== 'undefined' && fieldPathArr[1]) {
                    var inputPath = fieldPathArr[1].toLowerCase();
                    if (rows.hasOwnProperty(inputPath)) {
                        fieldValue = rows[inputPath];
                    } else {
                        fieldValue = fieldPathArr[1];
                    }
                }

                processParam[postParam] = fieldValue;
            }
        }
    }

    if (bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] == '1') {
        processParam.isDialog = false;
    }
    
    if (params.hasOwnProperty('taskFlowCode') && params.taskFlowCode) {
        
        if (_taskFlowBpOpenData.hasOwnProperty(mainMetaDataId + '_' + params.taskFlowId + '_' + processMetaDataId)) {
            
            ajaxUrl = 'api/getuid';
            
        } else {
            
            processParam.taskFlowCode = params.taskFlowCode;
            ajaxUrl = 'mdprocessflow/callTaskFlow';

            _taskFlowParams[mainMetaDataId + '_' + params.taskFlowId] = arguments;
        }
    }

    $.ajax({
        type: 'post',
        url: ajaxUrl,
        data: processParam,
        dataType: 'json',
        beforeSend: function() {
            Core.existsBlockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $('[closeByNext=yes]').dialog('close');
            
            if (ajaxUrl == 'api/getuid') {
                var data = _taskFlowBpOpenData[mainMetaDataId + '_' + params.taskFlowId + '_' + processMetaDataId];
                delete _taskFlowBpOpenData[mainMetaDataId + '_' + params.taskFlowId + '_' + processMetaDataId];
            }
            
            if (data.hasOwnProperty('status') && data.hasOwnProperty('message') && data.status) {
                Core.unblockUI();
                PNotify.removeAll();
                new PNotify({
                    title: data.status,
                    text: data.message,
                    type: data.status,
                    addclass: pnotifyPosition,
                    sticker: false
                });
                return;
            }

            if (bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] === '1') {
                renderProcessPage('dataview', mainMetaDataId, data.Html, _elem);
            } else if (data.saveAddMode === 'testcase') {
                
                if (typeof isTestCaseAddonScript === 'undefined') {
                    $.getScript('middleware/assets/js/addon/testcase.js').done(function() {
                        renderTestCaseProcess(_elem, data);
                    });
                } else {
                    renderTestCaseProcess(_elem, data);
                }            
                
            } else if (data.mode === 'dialog') {

                var $dialogName = 'dialog-businessprocess-' + processMetaDataId;

                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '" class="display-none"></div>').appendTo('body');
                } else {
                    $("#" + $dialogName).dialogExtend('restore');
                    Core.unblockUI();
                    return;
                }

                var $dialog = $('#' + $dialogName);
                var hidePrintButton = '', hideRunButton = '', runModeButton = '', hideRunSaveAddButton = '';
                var isViewProcess = (data.hasOwnProperty('processActionType') && data.processActionType == 'view') ? true : false;

                if (typeof data.save_and_print === 'undefined') {
                    hidePrintButton = 'hide';
                }
                if (data.run_btn === '' || isViewProcess) {
                    hideRunButton = ' hide';
                }
                if (typeof data.run_mode !== 'undefined') {
                    runModeButton = data.run_mode;
                }
                if ((typeof data.saveAddMode !== 'undefined' && data.saveAddMode === '') || (typeof data.run_mode !== 'undefined' && data.run_mode === '') || isViewProcess) {
                    hideRunSaveAddButton = ' hide';
                }

                $dialog.empty().append(data.Html);

                var processUniqId = data.uniqId;

                var buttons = [{
                        text: 'Өмнөх',
                        class: 'btn btn-info btn-sm float-left bp-btn-prev' + (data.isShowPrevNext !== '1' ? ' d-none' : ''),
                        click: function() {
                            selectPrevNext(mainMetaDataId, processMetaDataId, this, params, $dialog, parentCaller, batchNumber, -1, -1);
                        }
                    },
                    {
                        text: 'Дараах',
                        class: 'btn btn-info btn-sm float-left bp-btn-next' + (data.isShowPrevNext !== '1' ? ' d-none' : ''),
                        click: function() {
                            selectPrevNext(mainMetaDataId, processMetaDataId, this, params, $dialog, parentCaller, batchNumber, 1, 1);
                        }
                    },
                    {
                        text: data.run_mode,
                        class: 'btn green-meadow btn-sm bp-run-btn bp-btn-saveadd ' + runModeButton + ' ' + hideRunSaveAddButton,
                        click: function(e) {
                            
                            var processForm = $dialog.find('form');
                            
                            if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                if (bpFormValidate(processForm)) {

                                    if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                        var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                        var yes_btn = plang.get('yes_btn');
                                        var no_btn = plang.get('no_btn');
                                        var yes_btn_class = '';

                                        if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                            no_btn = plang.get('close_btn');
                                            yes_btn_class = ' d-none';
                                        }
        
                                        $confirmDialog.empty().append(window[processUniqId + '_note']);
                                        $confirmDialog.dialog({
                                            cache: false,
                                            resizable: false,
                                            bgiframe: true,
                                            autoOpen: false,
                                            title: window[processUniqId + '_title'],
                                            width: 370,
                                            height: "auto",
                                            modal: true,
                                            open: function() {
                                                setTimeout(function() {
                                                    $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                }, 100);
                                            },
                                            close: function() {
                                                $confirmDialog.empty().dialog('destroy').remove();
                                                uiDialogOverlayRemove();
                                            },
                                            buttons: [{
                                                    text: yes_btn,
                                                    class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                    click: function() {
                                                        if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                            PNotify.removeAll();
                                                            new PNotify({
                                                                title: window[processUniqId + '_messageType'],
                                                                text: window[processUniqId + '_message'],
                                                                type: window[processUniqId + '_messageType'],
                                                                sticker: false
                                                            });
                                                        }
                                                        callWebServiceByMetaRunMode(processForm, $dialogName, processUniqId, e.target);

                                                        $confirmDialog.dialog('close');
                                                    }
                                                },
                                                {
                                                    text: no_btn,
                                                    class: 'btn blue-madison btn-sm',
                                                    click: function() {
                                                        $confirmDialog.dialog('close');
                                                    }
                                                }
                                            ]
                                        });
                                        $confirmDialog.dialog('open');
                                    } else {
                                        callWebServiceByMetaRunMode(processForm, $dialogName, processUniqId, e.target);
                                    }

                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                                
                            } else {
                                bpIgnoreGroupRemove(processForm);
                            }
                        }
                    },                    
                    {
                        text: data.run_btn,
                        class: 'btn green-meadow btn-sm bp-run-btn bp-btn-save ' + runModeButton + ' ' + hideRunButton,
                        click: function(e) {
                            var processForm = $dialog.find('form');
                            runBpGetRunprocess(mainMetaDataId, processMetaDataId, processUniqId, processForm, dataGrid, $dialogName, $mainWindowMetaDataId, $mainWindowUniqId, _elem, undefined, undefined, dataviewUniqid, undefined, undefined, callbackFunction);
                        }
                    },
                    {
                        text: data.print_btn,
                        class: 'btn yellow-crusta btn-sm bp-run-btn bp-btn-print ' + hidePrintButton,
                        click: function(e) {
                            processPrintPreview(e.target, processMetaDataId, data.oldRowId, data.get_process_id, rows);
                        }
                    },
                    {
                        text: data.save_and_print,
                        class: 'btn purple-plum btn-sm bp-run-btn bp-btn-saveprint ' + hidePrintButton,
                        click: function(e) {
                            
                            var processForm = $dialog.find('form');
                            
                            if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                if (bpFormValidate(processForm)) {

                                    if (typeof window[processUniqId + '_dialog'] !== 'undefined' && typeof window[processUniqId + '_note'] !== 'undefined' || typeof window[processUniqId + '_title'] !== 'undefined') {
                                        var $confirmDialog = $("#" + window[processUniqId + '_dialog']);
                                        var yes_btn = plang.get('yes_btn');
                                        var no_btn = plang.get('no_btn');
                                        var yes_btn_class = '';

                                        if (typeof window[processUniqId + '_type'] !== 'undefined' && window[processUniqId + '_type'] == 'onlyclose') {
                                            no_btn = plang.get('close_btn');
                                            yes_btn_class = ' d-none';
                                        }
        
                                        $confirmDialog.empty().append(window[processUniqId + '_note']);
                                        $confirmDialog.dialog({
                                            cache: false,
                                            resizable: false,
                                            bgiframe: true,
                                            autoOpen: false,
                                            title: window[processUniqId + '_title'],
                                            width: 370,
                                            height: "auto",
                                            modal: true,
                                            open: function() {
                                                setTimeout(function() {
                                                    $confirmDialog.dialog("option", "position", { my: "center", at: "center", of: window });
                                                }, 100);
                                            },
                                            close: function() {
                                                $confirmDialog.empty().dialog('destroy').remove();
                                                uiDialogOverlayRemove();
                                            },
                                            buttons: [{
                                                    text: yes_btn,
                                                    class: 'btn green-meadow btn-sm'+yes_btn_class,
                                                    click: function() {
                                                        if (typeof window[processUniqId + '_message'] !== 'undefined' && typeof window[processUniqId + '_messageType'] !== 'undefined') {
                                                            PNotify.removeAll();
                                                            new PNotify({
                                                                title: window[processUniqId + '_messageType'],
                                                                text: window[processUniqId + '_message'],
                                                                type: window[processUniqId + '_messageType'],
                                                                sticker: false
                                                            });
                                                        }
                                                        runBpGetDataWithDataViewFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, e.target, processMetaDataId, data.get_process_id, callbackFunction);

                                                        $confirmDialog.dialog('close');
                                                    }
                                                },
                                                {
                                                    text: no_btn,
                                                    class: 'btn blue-madison btn-sm',
                                                    click: function() {
                                                        $("#" + $dialogName).dialog('close');
                                                        $confirmDialog.dialog('close');
                                                    }
                                                }
                                            ]
                                        });
                                        $confirmDialog.dialog('open');
                                    } else {
                                        runBpGetDataWithDataViewFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, e.target, processMetaDataId, data.get_process_id, callbackFunction);
                                    }
                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                            } else {
                                bpIgnoreGroupRemove(processForm);
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm bp-close-btn bp-btn-close',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ];
                
                if (data.hasOwnProperty('isKnowledge') && data.isKnowledge != '0') {
                    buttons.splice(0, 0, {
                        text: 'Тусламж',
                        class: 'btn btn-info btn-sm float-left bp-btn-help',
                        click: function() {
                            pfHelpDataView(data.metaDataId);
                        }
                    });
                }

                if (isTestServer && !isViewProcess) {
                    buttons.splice(1, 0, {
                        text: 'Тест кэйс хадгалах',
                        class: 'btn btn-danger btn-sm float-left bp-btn-testcase',
                        click: function(e) {
                            var processForm = $dialog.find('form');
                            saveBusinessProcessTestCase($(e.target), processForm);
                        }
                    });
                }
                
                if (data.hasOwnProperty('previewReportTemplateCode') && data.previewReportTemplateCode != '' && data.previewReportTemplateCode != null) {
                    buttons.splice(2, 0, {
                        text: 'Preview',
                        class: 'btn btn-sm green-meadow bp-btn-preview',
                        click: function(e) {
                            previewReportTemplateFromBp($(e.target), data.metaDataId, processUniqId, data.previewReportTemplateCode, $dialog.find('form'));
                        }
                    });
                }

                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: data.dialogWidth,
                    height: data.dialogHeight,
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    open: function() {
                        enableScrolling();
                    },
                    close: function() {
                        removeHtmlEditorByElement($dialog);
                        $dialog.empty().dialog('destroy').remove();
                        delete _processReportTemplateArchive[mainMetaDataId + '_' + processMetaDataId];
                    },
                    buttons: buttons
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                
                setTimeout(function() {
                    $dialog.dialog('open');
                }, 1);
                
                if (data.dialogSize === 'fullscreen') {
                    $dialog.dialogExtend('maximize');
                }

                $dialog.bind('dialogextendminimize', function() {
                    $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').addClass('display-none');
                });
                $dialog.bind('dialogextendmaximize', function() {
                    $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').removeClass('display-none');
                    bpDetailFitHeight($dialog, 'dialog');
                });
                $dialog.bind('dialogextendrestore', function() {
                    $dialog.closest('.ui-dialog').nextAll('.ui-widget-overlay:first').removeClass('display-none');
                    bpDetailFitHeightRestore($dialog, 'dialog');
                });

                Core.initBPAjax($dialog);

            } else {
                bpOpenConfigContainer(_elem, mainMetaDataId, processMetaDataId, processUniqId, data.Title, data.Html, true, rows);
            }

            Core.unblockUI();
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}

function runBpGetDataWithDataViewFormAjaxSubmit(processForm, dataGrid, $dialogName, processUniqId, mainMetaDataId, etarget, processMetaDataId, processId, callbackFunction) {
    processForm.ajaxSubmit({
        type: 'post',
        url: 'mdwebservice/runProcess',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();

            if (responseData.status === 'success') {
                
                new PNotify({
                    title: responseData.status,
                    text: responseData.message,
                    type: responseData.status,
                    addclass: pnotifyPosition,
                    sticker: false
                });
                
                if (typeof callbackFunction !== 'undefined') {
                    window[callbackFunction]();
                } else {
                    if (responseData.rowId !== '') {
                        processPrintPreview(etarget, processMetaDataId, responseData.rowId, processId, responseData.resultData);
                    }
                    
                    dataViewReloadByElement(dataGrid);
                }

                window['processAfterSave_' + processUniqId]($(etarget), responseData.status, responseData);
                $("#" + $dialogName).dialog('close');

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false,
                    hide: true,
                    addclass: pnotifyPosition,
                    delay: 1000000000
                });
            }

            bpIgnoreGroupRemove(processForm);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}

function createDeleteProcessButton(isDialog, mainSelector, mainMetaDataId, processMetaDataId, processUniqId) {
    var buttonGroup = $('.dv-process-buttons > .btn-group:eq(0)', '#object-value-list-' + mainMetaDataId);
    var deleteProcess = buttonGroup.attr('data-deleteprocess');

    if (typeof deleteProcess !== 'undefined') {
        var processObj = JSON.parse(deleteProcess);

        if (processObj.length) {

            var buttons = '';
            var selectedRows = getDataViewSelectedRows(mainMetaDataId);
            var selectedRow = selectedRows[0];

            if (isDialog == true && typeof selectedRow != 'undefined' && selectedRow.hasOwnProperty('id')) {

                for (var key in processObj) {

                    var evalcriteria = '';
                    var ticket = false;
                    var row = processObj[key];

                    if (typeof row.criteria !== 'undefined' && row.criteria !== '') {

                        var criteriaArr = row.criteria.split('#');
                        evalcriteria = (criteriaArr[0]).toLowerCase();

                        $.each(selectedRow, function(index, crow) {
                            if (evalcriteria.indexOf(index) > -1) {
                                crow = (crow === null) ? '' : crow;
                                var regex = new RegExp('\\b' + index + '\\b', 'g');
                                evalcriteria = evalcriteria.replace(regex, "'" + crow.toString() + "'");
                            }
                        });

                        evalcriteria = evalcriteria.replace('isclosedfiscalperiod', 'isClosedFiscalPeriod');
                        evalcriteria = evalcriteria.replace('checkdatapermission(', 'bpCheckDataPermission(');

                        try {
                            if (eval(evalcriteria)) {
                                ticket = true;
                            }
                        } catch (err) {}
                    } else {
                        ticket = true;
                    }

                    if (ticket) {
                        var icon = (row.icon != '' && row.icon != null) ? '<i class="fa ' + row.icon + '"></i> ' : '';
                        var processName = (row.processName != '' && row.processName != null) ? row.processName : 'Устгах';
                        var onclick = "runDeleteProcessByDv(" + isDialog + ", '" + processMetaDataId + "', '" + mainMetaDataId + "', '" + row.processId + "', '" + selectedRow.id + "', '" + processUniqId + "', this);";
                        buttons += '<button type="button" class="btn btn-danger btn-sm bp-btn-delete float-left" onclick="' + onclick + '">' + icon + processName + '</button>';
                    }
                }

                if (buttons != '') {
                    setTimeout(function() {
                        mainSelector.closest('.ui-dialog').find(".ui-dialog-buttonset button.float-left:last").after(buttons);
                    }, 0);
                }

            } else if (isDialog == false && typeof selectedRow != 'undefined' && selectedRow.hasOwnProperty('id')) {
                var evalcriteria = '';

                for (var key in processObj) {

                    var evalcriteria = '';
                    var ticket = false;
                    var row = processObj[key];

                    if (typeof row.criteria !== 'undefined' && row.criteria !== '') {

                        evalcriteria = (row.criteria).toLowerCase();

                        $.each(selectedRow, function(index, crow) {
                            if (evalcriteria.indexOf(index) > -1) {
                                crow = (crow === null) ? '' : crow;
                                var regex = new RegExp('\\b' + index + '\\b', 'g');
                                evalcriteria = evalcriteria.replace(regex, "'" + crow.toString() + "'");
                            }
                        });

                        evalcriteria = evalcriteria.replace('isclosedfiscalperiod', 'isClosedFiscalPeriod');
                        evalcriteria = evalcriteria.replace('checkdatapermission(', 'bpCheckDataPermission(');

                        try {
                            if (eval(evalcriteria)) {
                                ticket = true;
                            }
                        } catch (err) {}
                    } else {
                        ticket = true;
                    }

                    if (ticket) {
                        var icon = (row.icon != '' && row.icon != null) ? '<i class="fa fa-trash"></i> ' : '';
                        var processName = (row.processName != '' && row.processName != null) ? row.processName : 'Устгах';
                        var onclick = "runDeleteProcessByDv(" + isDialog + ", '" + processMetaDataId + "', '" + mainMetaDataId + "', '" + row.processId + "', '" + selectedRow.id + "', this);";
                        buttons += '<button type="button" class="btn btn-danger btn-sm btn-circle bp-btn-delete mr5" onclick="' + onclick + '" data-dm-id="' + mainMetaDataId + '">' + icon + processName + '</button>';
                    }
                }

                if (buttons != '') {
                    mainSelector.find(".meta-toolbar:eq(0) > div.float-right:eq(0)").prepend(buttons);
                }
            }
        }
    }

    return;
}

function runDeleteProcessByDv(isDialog, srcProcessId, mainMetaDataId, processMetaDataId, rowId, elem) {

    var selectedRows = getDataViewSelectedRows(mainMetaDataId), row = []; row[0] = selectedRows[0];

    $.ajax({
        type: 'post',
        url: 'mddatamodel/checkCriteriaProcessByOneRow',
        data: { mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, selectedRow: row[0] },
        dataType: 'json',
        success: function(data) {
            PNotify.removeAll();

            if (typeof data.processNoAccess !== 'undefined') {
                new PNotify({
                    title: 'Warning',
                    text: data.processName,
                    type: 'warning',
                    sticker: false
                });
                return;
            }

            if (data.status === 'success') {

                var $dialogName = 'dialog-confirm';
                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '"></div>').appendTo('body');
                }
                var $dialog = $('#' + $dialogName);

                $.ajax({
                    type: 'post',
                    url: 'mdobject/isConfirmProcess',
                    data: { mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId },
                    dataType: 'json',
                    beforeSend: function() {
                        Core.blockUI({message: 'Loading...', boxed: true});
                    },
                    success: function(data) {
                        $dialog.empty().append(data.message);
                        $dialog.dialog({
                            cache: false,
                            resizable: false,
                            bgiframe: true,
                            autoOpen: false,
                            title: data.title,
                            width: 370,
                            height: "auto",
                            modal: true,
                            open: function() {
                                var $thisDialogButton = $(this).parent().find('.ui-dialog-buttonpane');
                                $thisDialogButton.on('keydown', 'button', function(e) {
                                    var keyCode = (e.keyCode ? e.keyCode : e.which);
                                    if (keyCode == 39) {
                                        var $thisButton = $(this);
                                        $thisButton.next().focus();
                                    }
                                    if (keyCode == 37) {
                                        var $thisButton = $(this);
                                        $thisButton.prev().focus();
                                    }
                                });
                            },
                            close: function() {
                                $dialog.empty().dialog('close');
                            },
                            buttons: [{
                                    text: data.yes_btn,
                                    class: 'btn green-meadow btn-sm',
                                    click: function() {

                                        $.ajax({
                                            type: 'post',
                                            url: 'mdobject/runConfirmProcess',
                                            data: { mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, selectedRows: row },
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({message: 'Loading...', boxed: true});
                                            },
                                            success: function(dataSub) {
                                                PNotify.removeAll();
                                                new PNotify({
                                                    title: dataSub.status,
                                                    text: dataSub.message,
                                                    type: dataSub.status,
                                                    sticker: false
                                                });

                                                if (dataSub.status === 'success') {
                                                    
                                                    var isDvReload = true;
                                                    
                                                    if (isDialog == true) {
                                                        $('#dialog-businessprocess-' + srcProcessId).dialog('close');
                                                    } else {
                                                        
                                                        var openParams = $(elem).closest('form').find("input[id='openParams']").val();
                                                
                                                        if (openParams !== '') {

                                                            openParams = JSON.parse(openParams);

                                                            if (openParams.hasOwnProperty('afterSaveNoAction') 
                                                                && openParams.afterSaveNoAction 
                                                                && openParams.hasOwnProperty('afterSaveNoActionFnc') 
                                                                && openParams.afterSaveNoActionFnc) {

                                                                eval(openParams.afterSaveNoActionFnc);
                                                                isDvReload = false;
                                                            }
                                                        }
                                                        
                                                        if (isDvReload) {
                                                            backFirstContent(elem);
                                                        }
                                                    }
                                                    
                                                    if (isDvReload) {
                                                        dataViewReload(mainMetaDataId);
                                                        dataViewFocus(mainMetaDataId);
                                                        ecommerceReloadFilter(mainMetaDataId);
                                                    }
                                                }

                                                $dialog.dialog('close');
                                                Core.unblockUI();
                                            },
                                            error: function() {
                                                alert('Error');
                                            }
                                        });
                                    }
                                },
                                {
                                    text: data.no_btn,
                                    class: 'btn blue-madison btn-sm',
                                    click: function() {
                                        $dialog.dialog('close');
                                    }
                                }
                            ]
                        });
                        $dialog.dialog('open');
                        Core.unblockUI();
                    },
                    error: function() {
                        alert('Error');
                    }
                });
            }
        }
    });
}

function doMainProcess(responseData, mode) {
    if (typeof responseData.hasMainProcess !== "undefined" && responseData.hasMainProcess) {
        var $thisActiveAppTab = $("div.card-multi-tab > div.card-body > div.card-multi-tab-content > div.active"),
            mainMetaDataId = $thisActiveAppTab.find('[onclick="backFirstContent(this);"]').attr('data-dm-id'),
            processId = $thisActiveAppTab.find('#bprocessCoreParam').find('input[name="methodId"]').val();

        if (typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab) {
            var $li = $("div.card-multi-tab > div.tabbable-line > ul.card-multi-tab-navtabs").find("a[href='#" + $thisActiveAppTab.attr('id') + "']").closest('li');
            $thisActiveAppTab.remove();
            $li.remove();
        }
        if (mode !== 'create') {
            transferProcessAction('', mainMetaDataId, processId, '200101010000011', 'toolbar', this, false, false, false, responseData.resultData);
        }
    }
}

function runIsMultiBusinessProcess(mainMetaDataId, processMetaDataId, isDialog, rows, callbackFunction) {
    var dataGrid = $('#objectdatagrid_' + mainMetaDataId);
    if ($('#objectdatagrid_' + mainMetaDataId).length === 0) {
        dataGrid = window['objectdatagrid_' + mainMetaDataId];
    }
    var $dialogName = 'dialog-confirm';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdobject/isConfirmProcess',
        data: { mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, rows: rows },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.message);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 400,
                height: "auto",
                modal: true,
                closeOnEscape: isCloseOnEscape,
                open: function() {
                    var $thisDialogButton = $(this).parent().find('.ui-dialog-buttonpane');
                    $thisDialogButton.on('keydown', 'button', function(e) {
                        var keyCode = (e.keyCode ? e.keyCode : e.which);
                        if (keyCode == 39) {
                            var $thisButton = $(this);
                            $thisButton.next().focus();
                        }
                        if (keyCode == 37) {
                            var $thisButton = $(this);
                            $thisButton.prev().focus();
                        }
                    });
                },
                close: function() {
                    $dialog.empty().dialog('close');
                },
                buttons: [{
                        text: data.yes_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $.ajax({
                                type: 'post',
                                url: 'mdobject/runConfirmProcess',
                                data: { mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, selectedRows: rows },
                                dataType: 'json',
                                beforeSend: function() {
                                    Core.blockUI({message: 'Loading...', boxed: true});
                                },
                                success: function(dataSub) {
                                    PNotify.removeAll();
                                    new PNotify({
                                        title: dataSub.status,
                                        text: dataSub.message,
                                        type: dataSub.status,
                                        addclass: pnotifyPosition,
                                        sticker: false
                                    });

                                    if (dataSub.status === 'success') {
                                        if (typeof callbackFunction === 'function') {
                                            callbackFunction();
                                        } else {
                                            if (typeof callbackFunction !== 'undefined') {
                                                window[callbackFunction]();
                                            } else {
                                                dataViewReloadByElement(dataGrid);
                                                dataViewFocusByElement(dataGrid);
                                                ecommerceReloadFilter(mainMetaDataId);
                                            }
                                        }
                                    }
                                    $dialog.dialog('close');
                                    Core.unblockUI();
                                },
                                error: function() {
                                    alert('Error');
                                }
                            });
                        }
                    },
                    {
                        text: data.no_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');
            bpSoundPlay('ring');
            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    });
}

function runIsOneBusinessProcess(mainMetaDataId, processMetaDataId, isDialog, row, callback) {
    var dataGrid = $('#objectdatagrid_' + mainMetaDataId);
    if ($('#objectdatagrid_' + mainMetaDataId).length === 0) {
        dataGrid = window['objectdatagrid_' + mainMetaDataId];
    }
    var $dialogName = 'dialog-confirm';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdobject/isConfirmProcess',
        data: {mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, rows: row},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.message);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 370,
                height: "auto",
                modal: true,
                closeOnEscape: isCloseOnEscape,
                open: function() {
                    var $thisDialogButton = $(this).parent().find('.ui-dialog-buttonpane');
                    $thisDialogButton.on('keydown', 'button', function(e) {
                        var keyCode = (e.keyCode ? e.keyCode : e.which);
                        if (keyCode == 39) {
                            var $thisButton = $(this);
                            $thisButton.next().focus();
                        }
                        if (keyCode == 37) {
                            var $thisButton = $(this);
                            $thisButton.prev().focus();
                        }
                    });
                },
                close: function() {
                    $dialog.empty().dialog('close');
                },
                buttons: [{
                        text: data.yes_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $.ajax({
                                type: 'post',
                                url: 'mdobject/runConfirmOneLoopProcess',
                                data: {mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, selectedRow: row},
                                dataType: 'json',
                                beforeSend: function() {
                                    Core.blockUI({message: 'Loading...', boxed: true});
                                },
                                success: function(dataSub) {
                                    
                                    PNotify.removeAll();
                                    new PNotify({
                                        title: dataSub.status,
                                        text: dataSub.message,
                                        type: dataSub.status,
                                        sticker: false
                                    });
                                    
                                    if (dataSub.status === 'success') {
                                        if (typeof callback === 'function') {
                                            callback();
                                        } else {
                                            dataViewReloadByElement(dataGrid);
                                            dataViewFocusByElement(dataGrid);
                                        }
                                    }
                                    
                                    $dialog.dialog('close');
                                    Core.unblockUI();
                                },
                                error: function() { alert('Error'); }
                            });
                        }
                    },
                    {
                        text: data.no_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');
            bpSoundPlay('ring');
            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    });
}

function runWorkSpaceWithDataView(elem, mainMetaDataId, workspaceId, isDialog, rows, isGetConsolidate, isNewTab) {
    if (typeof rows === 'undefined') {
        alert(plang.get('msg_pls_list_select'));
        return;
    }

    $.ajax({
        type: 'post',
        url: 'mdworkspace/renderWorkSpace',
        data: { metaDataId: workspaceId, dmMetaDataId: mainMetaDataId, selectedRow: rows },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            
            if ($("link[href='middleware/assets/theme/" + data.theme + "/css/main.v6.css']").length == 0) {
                $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/theme/' + data.theme + '/css/main.v6.css"/>');
            }
            
            if (data.theme == 'theme10') {
                $.cachedScript("assets/custom/addon/plugins/jquery-easypiechart/jquery.easypiechart.min.js");
                $.cachedScript("assets/custom/addon/plugins/jquery.sparkline.min.js");
            }
            
            var tabName = '', tabNameReload = false;
            
            if (rows.hasOwnProperty('tabname') && rows.tabname) {
                tabName = rows.tabname;
                tabNameReload = true;
            } else { 
                tabName = data.title + ((typeof rows.templatename !== 'undefined') ? ': ' + rows.activitycode : '');
            }

            if (data.mode == 'dialog') {

                var $dialogName = 'dialog-workspace-' + workspaceId;
                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '"></div>').appendTo('body');
                }
                var $dialog = $("#" + $dialogName);

                $dialog.empty().append(data.html);

                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    position: { my: 'top', at: 'top+50' },
                    title: tabName,
                    width: data.dialogWidth,
                    height: data.dialogHeight,
                    modal: true,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm bp-close-btn',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                if (data.dialogSize == 'fullscreen') {
                    $dialog.dialogExtend('maximize');
                }
                $dialog.dialog('open');
                Core.initAjax($dialog);
                $dialog.css('overflow-x', 'hidden');

            } else {

                if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab) {

                    if (data.mode === 'newtab' || isNewTab === true) {
                        if (tabNameReload) {
                            appMultiTabByContent({ metaDataId: workspaceId, title: tabName, type: 'workspace', content: data.html, tabNameReload: true});
                        } else {
                            appMultiTabByContent({ metaDataId: workspaceId, title: tabName, type: 'workspace', content: data.html });
                        }
                    } else {
                        workSpaceContainerAppendByDv(elem, mainMetaDataId, data.html, function() {
                            if (typeof rows.id !== 'undefined') {
                                $('#workspace-id-' + workspaceId).attr('data-selected-row-id', rows.id);
                            }
                        });
                    }

                    return;
                }

                if (!$("#viewFormMeta").length) {
                    newContainerAppend(data.html);
                } else {
                    $("#viewFormMeta").empty().append(data.html);
                    Core.initAjax($("#viewFormMeta"));
                    $("#renderMeta, #editFormGroup").hide();
                    $("#viewFormMeta").show();
                }
            }
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function transferProcessAction(passPath, mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, wfmStatusParams, drillDownType, mainRow, mainDataGrid, dataviewUniqid, path, appendHTml, callbackFunction) {
    
    var $this = $(elem), _params = '', ticketDataGrid = false, timeoutMseconds = 0, isMainDv = false;

    if (typeof dataviewUniqid !== 'undefined' && dataviewUniqid !== '') {

        var row = rows = getRowsDataView(dataviewUniqid);
        var dataGrid = $('#objectdatagrid-' + dataviewUniqid);
        ticketDataGrid = true;

    } else {

        var dataGrid = $('#objectdatagrid_' + mainMetaDataId), isMainDv = true;

        if (typeof mainDataGrid != 'undefined') {
            dataGrid = $('#objectdatagrid-' + mainDataGrid);
            ticketDataGrid = true;
        }
        
        if (dataGrid.length == 0) {
            if (!ticketDataGrid) {
                dataGrid = window['objectdatagrid_' + mainMetaDataId];
            }
            
            if (typeof dataGrid === 'undefined' && mainMetaDataId.indexOf("_") !== -1) {
                var uniqId = mainMetaDataId.split("_");
                var dataGrid = $('#objectdatagrid_' + uniqId[1]);
                mainMetaDataId = uniqId[0];
            }
        }

        if (typeof isDeleteActionBeforeReload !== 'undefined' && isDeleteActionBeforeReload &&
            $this.hasAttr('data-actiontype') && $this.attr('data-actiontype') == 'delete') {

            if (!dataGrid.hasClass('not-datagrid')) {
                var op = dataGrid.datagrid('options');
                if (op.idField === null) {
                    dataGrid.datagrid('reload');
                } else {
                    var node = dataGrid.treegrid('getSelected');
                    if (node && node.hasOwnProperty('_parentId') && (node._parentId != '' || node._parentId != null)) {
                        dataGrid.treegrid('reload', node._parentId);
                    } else {
                        dataGrid.treegrid('reload');
                    }
                }
                timeoutMseconds = 1000;
            }
        }
    }

    if (typeof wfmStatusParams === 'undefined') {
        var wfmStatusParams = '';
    }

    if (typeof drillDownType === 'undefined') {
        var drillDownType = '';
    }

    var rowsResolveTO = rows;

    if (passPath == '') {
        var $mainUniqId = '', $mainMetaDataId = '', $mainStatusId = '';

        if (wfmStatusParams !== '' && typeof $this.attr('data-mainmetaDataId') !== 'undefined' && typeof $this.attr('data-mainuniqId') !== 'undefined') {
            $mainMetaDataId = $this.attr('data-mainmetaDataId');
            $mainStatusId = $this.attr('data-mainstatusId');
            $mainUniqId = $this.attr('data-mainuniqId');
        }

        setTimeout(function() {
            
            if (typeof window['_selectedRows_' + mainMetaDataId] !== 'undefined' && window['_selectedRows_' + mainMetaDataId].length && $("#checkAll_" + mainMetaDataId).is(":checked")) {

                var rows = window['_selectedRows_' + mainMetaDataId];
                
            } else if (isMainDv && typeof elem !== 'undefined') {

                if (typeof dataGrid == 'undefined') {
                    var rows = getDataViewSelectedRowsByRow(elem);
                    dataGrid = $(elem).closest('div.datagrid-view').children('table');
                } else {
                    var rows = getDataViewSelectedRowsByElement(dataGrid);
                }

                var row = '', passwd = '';

                if (rows.length === 0 && typeof mainRow !== 'undefined') {
                    if (typeof mainRow !== 'object') {
                        rows = [JSON.parse(decodeURIComponent(mainRow))];
                    } else {
                        rows = [mainRow];
                    }
                }

                if (rows.length > 0) {

                    row = rows[0];

                    if (row.hasOwnProperty('pfnextstatuscolumnjson')) {
                        var parameterStr = (row.parameterde).replace(/(?:\r\n|\r|\n)/g, ' ');
                        var rowData = JSON.parse(parameterStr), tempRows = [];

                        for (var key in rowData) {
                            rowData = rowData[key];
                            break;
                        }
                        
                        if (rowData.hasOwnProperty('newWfmStatusId')) {
                            rowData['wfmstatusid'] = rowData.newWfmStatusId;
                            delete rowData.newWfmStatusId;
                        }

                        rowData = pfNextStatusColumnJsonCleanField(rowData);

                        row = rowData;
                        tempRows[0] = row;
                        rows = row;
                        mainRow = row;
                    }
                }

            } else {
                rows = rowsResolveTO;
                if (typeof rows !== 'undefined' && rows.length) {
                    row = rows[0];
                    /**
                     * Sagsnaas consoldate process duudag uyd zorchil uusej bna
                     * Ulaankhuu
                     * if (typeof wfmStatusParams == 'undefined' || wfmStatusParams == '') {
                        mainRow = row;
                     }*/
                }
            }

            privateTransferProcessAction(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType, false, mainRow, $mainStatusId, $mainUniqId, rows, dataviewUniqid, path, appendHTml, callbackFunction);

        }, timeoutMseconds);

    } else {

        if (isMainDv) {
            var rows = getDataViewSelectedRowsByElement(dataGrid), row = '', passwd = '';
            if (rows.length > 0) {
                row = rows[0];
            }
        }

        if (passPath === 'signProcess') {

            beforeSignProcess(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType);
            return;

        } else if (passPath === 'hardSignProcess') {

            beforeHardSignProcess(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType);
            return;

        } else if (passPath === 'pinCode') {

            pinCodeChangeWfmStatusId(elem, {mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, metaTypeId: metaTypeId, whereFrom: whereFrom, params: params, dataGrid: dataGrid, wfmStatusParams: wfmStatusParams, drillDownType: drillDownType});
            return;

        } else if (passPath === 'otp') {

            otpChangeWfmStatusId(elem, {mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, metaTypeId: metaTypeId, whereFrom: whereFrom, params: params, dataGrid: dataGrid, wfmStatusParams: wfmStatusParams, drillDownType: drillDownType});
            return;

        } else {
            $.ajax({
                type: 'post',
                url: 'mdmeta/checkPasswordProcess',
                data: { mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, rowData: row },
                dataType: 'json',
                success: function(passData) {
                    if (passData.status === 'access') {
                        var $dialogName = 'dialog-meta-password';
                        if (!$("#" + $dialogName).length) {
                            $('<div id="' + $dialogName + '"></div>').appendTo('body');
                        }
                        var $dialog = $("#" + $dialogName);
                        $dialog.empty().append(passData.html);
                        $dialog.dialog({
                            cache: false,
                            resizable: true,
                            bgiframe: true,
                            autoOpen: false,
                            title: passData.title,
                            width: 500,
                            height: "auto",
                            modal: true,
                            open: function() {
                                $(this).keypress(function(e) {
                                    if (e.keyCode == $.ui.keyCode.ENTER) {
                                        $(this).parent().find(".ui-dialog-buttonpane button:first").trigger("click");
                                    }
                                });
                            },
                            close: function() {
                                $dialog.empty().dialog('destroy').remove();
                            },
                            buttons: [{
                                    text: passData.login_btn,
                                    class: 'btn btn-sm green-meadow',
                                    click: function() {
                                        $("#metaPasswordForm", "#" + $dialogName).validate({ errorPlacement: function() {} });

                                        if ($("#metaPasswordForm", "#" + $dialogName).valid()) {
                                            $.ajax({
                                                type: 'post',
                                                url: 'mdmeta/loginPasswordProcess',
                                                data: "mainMetaDataId=" + mainMetaDataId + "&processMetaDataId=" + processMetaDataId + "&passwordHash=" + $("#passwordHash").val(),
                                                dataType: 'json',
                                                beforeSend: function() {
                                                    Core.blockUI({animate: true});
                                                },
                                                success: function(dataCheck) {
                                                    Core.unblockUI();
                                                    PNotify.removeAll();

                                                    var objKey = dataCheck.passwordPath.toLowerCase();
                                                    passwd = row[objKey];

                                                    if (passwd === dataCheck.password) {
                                                        privateTransferProcessAction(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType);
                                                        $dialog.dialog('close');
                                                    } else {
                                                        new PNotify({
                                                            title: 'Error',
                                                            text: "Түлхүүр үг буруу байна.",
                                                            type: 'error',
                                                            sticker: false
                                                        });
                                                    }
                                                },
                                                error: function() {
                                                    alert('Error');
                                                }
                                            });
                                            clearConsole();
                                        }
                                    }
                                },
                                {
                                    text: passData.close_btn,
                                    class: 'btn blue-madison btn-sm',
                                    click: function() {
                                        $dialog.dialog('close');
                                    }
                                }
                            ]
                        });
                        $dialog.dialog('open');

                    } else {
                        privateTransferProcessAction(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType);
                    }
                },
                error: function() {
                    alert('Error');
                }
            });
        }
    }
}

function privateTransferProcessAction(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType, signerParams, row, $mainWindowMetaDataId, $mainWindowUniqId, $selectedRows, dataviewUniqid, path, appendHTml, callbackFunction) {
    var selectedRow = '', selectedRowResolve = '', advancedCriteria = '';
    var $elem = $(elem);
    var isBasketWindow = false;
    var _selectedIndex = $elem.closest('tr').attr('datagrid-row-index');

    if (_lastSelectedIndex === '' || _lastSelectedIndex !== _selectedIndex) {
        _lastSelectedIndex = _selectedIndex;
    }

    if (typeof $selectedRows !== 'undefined' && $selectedRows.length !== 0) {
        selectedRow = $selectedRows;
    } else {
        if (whereFrom === 'processCriteria') {
            var rows = getDataViewSelectedRowsByElement(dataGrid);

            if (rows.length > 0) {
                selectedRow = rows[0];
                var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);
                if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                    var rows = getRowsDataViewByElement(dataGrid);
                    selectedRow = rows[_selectedIndex];
                }
            } else {
                if (typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) {
                    alert(plang.get('msg_pls_list_select'));
                    return;
                } else {
                    var rows = getRowsDataViewByElement(dataGrid);
                    var selectedRow = rows[_selectedIndex];
                }
            }
        }
    }

    if (typeof $elem.data('advanced-criteria') !== 'undefined') {
        advancedCriteria = $elem.data('advanced-criteria');
        if (advancedCriteria !== '') {
            if ($("#checkAll_" + mainMetaDataId).is(":checked")) {
                var rows = $selectedRows;
            } else {
                var rows = getDataViewSelectedRowsByElement(dataGrid);
            }
            if (rows.length) {
                selectedRow = rows;
            }
        }
    } else if (_dvAdvancedCriteria !== '') {
        advancedCriteria = _dvAdvancedCriteria;
        _dvAdvancedCriteria = '';
        var rows = getDataViewSelectedRowsByElement(dataGrid);
        if (rows.length) {
            selectedRow = rows;
        }
    }

    selectedRowResolve = selectedRow;

    $.ajax({
        type: 'post',
        url: 'mdobject/transferProcessAction',
        data: {mainMetaDataId: mainMetaDataId, processMetaDataId: processMetaDataId, metaTypeId: metaTypeId, selectedRow: selectedRow, advancedCriteria: advancedCriteria},
        dataType: 'json',
        async: false,
        success: function(data) {
            bpOpenParamObj[mainMetaDataId + '_' + processMetaDataId] = typeof data.isBpOpen !== 'undefined' ? data.isBpOpen : '0';

            if (typeof data.processNoAccess !== 'undefined') {
                var processNoAccessMsg = '';
                if (typeof data.processNoAccessMsg !== 'undefined') {
                    processNoAccessMsg = data.processNoAccessMsg;
                } else {
                    processNoAccessMsg = '(' + data.processName + ') энэ үйлдлийг ажиллуулах эрхгүй байна.';
                }
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: processNoAccessMsg,
                    type: 'warning',
                    addclass: pnotifyPosition,
                    sticker: false
                });
                return;
            }

            if (data.hasOwnProperty('postParam') && (data.postParam != '' && data.postParam != null)) {
                _processPostParam = data.postParam;
            }

            if (typeof data.advancedCriteriaText !== 'undefined') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: data.advancedCriteriaText,
                    type: 'warning',
                    addclass: pnotifyPosition,
                    sticker: false
                });
                return;
            }

            if (typeof data.isTaskFlow !== 'undefined') {
                
                params.taskFlowId = processMetaDataId;
                params.taskFlowCode = $elem.attr('data-dvbtn-processcode');
                    
                if (whereFrom == 'processCriteria' && typeof row === 'undefined' && !$("#checkAll_" + mainMetaDataId).is(":checked")) {
                    var rows = getDataViewSelectedRowsByElement(dataGrid);

                    if (rows.length) {
                        selectedRow = rows[0];

                        var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);
                        if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                            var rows = getRowsDataViewByElement(dataGrid);
                            selectedRow = rows[_selectedIndex];
                        }

                        setBpIsRowReload(data.isRowReload, mainMetaDataId, processMetaDataId, selectedRow);
                        runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);

                    } else {

                        if ((typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) && typeof row === 'undefined') {
                            alert(plang.get('msg_pls_list_select'));
                            return;
                        } else {
                            var rows = getRowsDataViewByElement(dataGrid);
                            var selectedRow = rows[_selectedIndex];

                            runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);
                        }
                    }
                    
                } else {
                    setBpIsRowReload(data.isRowReload, mainMetaDataId, processMetaDataId, row);
                    runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row);
                }
                
            } else if (typeof data.url !== 'undefined') {
                
                if (data.isGetData === false) {
                    
                    var rows = getRowsDataViewByElement(dataGrid);
                    
                    if (rows.length) {
                        selectedRow = rows[0];
                        var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);
                        if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                            selectedRow = rows[_selectedIndex];
                        } else {
                            var rows = getDataViewSelectedRows(mainMetaDataId);
                            selectedRow = rows[0];
                        }
                    }
                    
                } else {

                    if (typeof $elem !== 'undefined' && $elem.parents('.dataViewUseBasketViewWrap').length) {
                        var rows = $('#objectdatagrid-' + $elem.parents('.dataViewUseBasketViewWrap').data('basketid')).datagrid('getRows');

                        if (!Object.keys(rows[0]).length) {
                            alert(plang.get('msg_pls_list_select'));
                            return;
                        }

                    } else {
                        var rows = getDataViewSelectedRowsByElement(dataGrid);
                    }

                    if (rows.length) {
                        selectedRow = rows[0];
                    } else {
                        if (typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) {
                            alert(plang.get('msg_pls_list_select'));
                            return;
                        } else {
                            var rows = getRowsDataViewByElement(dataGrid);
                            var selectedRow = rows[_selectedIndex];
                        }
                    }
                }

                urlRedirectByDataView(elem, processMetaDataId, data.url, data.urlTarget, mainMetaDataId, data.postParam, data.getParam, selectedRow, wfmStatusParams, params);

                return;

            } else if (typeof data.isWorkSpace !== 'undefined') {

                if (data.isGetData === false) {
                    var rows = getDataViewSelectedRowsByElement(dataGrid);
                    if (rows.length) {
                        selectedRow = rows[0];
                        var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);
                        if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                            var rows = getRowsDataViewByElement(dataGrid);
                            selectedRow = rows[_selectedIndex];
                        }
                    }
                    runWorkSpaceWithDataView(elem, mainMetaDataId, processMetaDataId, true, selectedRow, false);

                } else {

                    var rows = getDataViewSelectedRowsByElement(dataGrid);

                    if (rows.length) {
                        selectedRow = rows[0];

                        var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);

                        if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                            var rows = getRowsDataViewByElement(dataGrid);
                            selectedRow = rows[_selectedIndex];
                        }

                        runWorkSpaceWithDataView(elem, mainMetaDataId, processMetaDataId, true, selectedRow, false, true);

                    } else {

                        if (typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) {
                            alert(plang.get('msg_pls_list_select'));
                            return;
                        } else {
                            var rows = getRowsDataViewByElement(dataGrid);
                            var selectedRow = rows[_selectedIndex];

                            runWorkSpaceWithDataView(elem, mainMetaDataId, processMetaDataId, true, selectedRow, false, true);
                        }
                    }
                }
                return;

            } else if (typeof data.isInternalUpdate !== 'undefined') {
                
                if (typeof row === 'undefined' && !$("#checkAll_" + mainMetaDataId).is(":checked")) {
                    var rows = getDataViewSelectedRowsByElement(dataGrid);

                    if (rows.length) {
                        selectedRow = rows[0];

                        var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);
                        if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                            var rows = getRowsDataViewByElement(dataGrid);
                            selectedRow = rows[_selectedIndex];
                        }

                        setBpIsRowReload(data.isRowReload, mainMetaDataId, processMetaDataId, selectedRow);
                        runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);

                    } else {

                        if ((typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) && typeof row === 'undefined') {
                            alert(plang.get('msg_pls_list_select'));
                            return;
                        } else {
                            var rows = getRowsDataViewByElement(dataGrid);
                            var selectedRow = rows[_selectedIndex];

                            runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);
                        }
                    }
                    
                } else {
                    
                    if ((typeof params['isDrillDown'] !== 'undefined' && params['isDrillDown']) && row.length < 1) {
                        row = selectedRowResolve[0];
                    }
                    
                    if (typeof selectedRow === 'undefined') {
                        selectedRow = selectedRowResolve[0];
                    }

                    setBpIsRowReload(data.isRowReload, mainMetaDataId, processMetaDataId, row);
                    runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);
                }
                
                return;

            } else if (typeof data.isGetConsolidate !== 'undefined') {

                if (typeof row === 'undefined' && !$("#checkAll_" + mainMetaDataId).is(":checked")) {

                    if (typeof $selectedRows !== 'undefined' && $selectedRows.length !== 0) {
                        rows = $selectedRows
                    } else {
                        var rows = getDataViewSelectedRowsByElement(dataGrid);
                    }

                    if (rows.length) {
                        if (typeof $selectedRows !== 'undefined' && $selectedRows.length !== 0) {
                            rows = $selectedRows
                            isBasketWindow = true;
                        } else {
                            var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);

                            if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                                var rows = getRowsDataViewByElement(dataGrid);
                                rows = rows[_selectedIndex];
                            }
                        }
                        runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, rows, true, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, isBasketWindow, dataviewUniqid, callbackFunction);

                    } else {
                        if ((typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) && typeof row === 'undefined') {
                            alert(plang.get('msg_pls_list_select'));
                            return;

                        } else {
                            var rows = getRowsDataViewByElement(dataGrid);
                            var selectedRow = rows[_selectedIndex];

                            runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, true, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);
                        }
                    }
                } else {
                    runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRowResolve, true, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);
                }

                return;

            } else if (data.isGetData === false && data.isMulti === false && data.isConfirm === false) {

                if (typeof data.getParam !== 'undefined') {
                    _processParam = qryStrToObj(data.getParam);
                } else {
                    _processParam = {};
                }

                runBusinessProcessWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, '', elem, params, wfmStatusParams, signerParams, $selectedRows, path, appendHTml, callbackFunction);
                return;

            } else if (data.isGetData === true && data.isMulti === false && data.isConfirm === false) {

                if (typeof row === 'undefined') {
                    if ($(elem).closest('table').hasClass('basictable') && $(elem).closest('tr').attr('data-rowdata')) {
                        var rows = JSON.parse($(elem).closest('tr').attr('data-rowdata'));
                    } else {
                        var rows = getDataViewSelectedRowsByElement(dataGrid);
                    }
                    
                    if (rows.length) {
                        
                        selectedRow = rows[0];
                        
                        if (!$(elem).closest('table').hasClass('basictable')) {

                            var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);

                            if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                                var rows = getRowsDataViewByElement(dataGrid);
                                selectedRow = rows[_selectedIndex];
                            }
                        }
                        
                        runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, $mainWindowMetaDataId, $mainWindowUniqId);
                    } else {

                        if ((typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) && typeof row === 'undefined') {
                            alert(plang.get('msg_pls_list_select'));
                            return;
                        } else {

                            if (typeof dataGrid == 'undefined') {
                                var rows = getDataViewSelectedRowsByRow(elem);
                                var selectedRow = rows[0];
                            } else {
                                var rows = getRowsDataViewByElement(dataGrid);
                                var selectedRow = rows[_selectedIndex];
                            }

                            runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, undefined, undefined, undefined, undefined, callbackFunction);
                        }
                    }
                } else {
                    if (typeof row.newwfmstatusid !== 'undefined' && typeof row.wfmstatusid !== 'undefined') {
                        row.wfmstatusid = row.newwfmstatusid;
                    }

                    runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, processMetaDataId, true, selectedRow, false, elem, params, wfmStatusParams, signerParams, 'transferProcessAction', false, row, $mainWindowMetaDataId, $mainWindowUniqId);
                }
                return;

            } else if (data.isGetData === false && data.isMulti === true && data.isConfirm === true) {

                if (typeof row !== 'undefined' && row.length !== 0) {
                    runIsMultiBusinessProcess(mainMetaDataId, processMetaDataId, true, row, callbackFunction);
                    return;
                }
                var rows = getDataViewSelectedRowsByElement(dataGrid);

                if (rows.length) {
                    var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);
                    if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                        var rows = getRowsDataViewByElement(dataGrid);
                        rows = rows[_selectedIndex];
                    }
                    
                    if (typeof wfmStatusParams != 'undefined' && wfmStatusParams != '') {
                        rows[0]['wfmStatusParams'] = wfmStatusParams;
                    }
                    
                    runIsMultiBusinessProcess(mainMetaDataId, processMetaDataId, true, rows, function(){
                        dataViewReloadByElement(dataGrid);
                    });

                } else {
                    if (typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) {
                        alert(plang.get('msg_pls_list_select'));
                        return;
                    } else {
                        var rows = getRowsDataViewByElement(dataGrid);
                        var selectedRow = rows[_selectedIndex];
                        runIsMultiBusinessProcess(mainMetaDataId, processMetaDataId, true, selectedRow);
                    }
                }
                return;

            } else if (data.isGetData === true && data.isMulti === true && data.isConfirm === true) {
                var rows = getDataViewSelectedRowsByElement(dataGrid);

                if (rows.length > 0) {
                    if (typeof wfmStatusParams != 'undefined' && wfmStatusParams != '') {
                        rows[0]['wfmStatusParams'] = wfmStatusParams;
                    }
                    runIsMultiBusinessProcess(mainMetaDataId, processMetaDataId, true, rows);
                } else {
                    alert(plang.get('msg_pls_list_select'));
                }
                return;

            } else if ((data.isGetData === false && data.isMulti === false && data.isConfirm === true) || (data.isGetData === true && data.isMulti === false && data.isConfirm === true)) {
                var rows = getDataViewSelectedRowsByElement(dataGrid);

                if (rows.length) {

                    selectedRow = rows[0];
                    var _rowIndex = getRowIndexDataViewByElement(dataGrid, rows[0]);

                    if (_lastSelectedIndex !== _rowIndex && !isNaN(_lastSelectedIndex)) {
                        var rows = getRowsDataViewByElement(dataGrid);
                        selectedRow = rows[_selectedIndex];
                    }

                    runIsOneBusinessProcess(mainMetaDataId, processMetaDataId, true, selectedRow);

                } else {

                    if (typeof _selectedIndex === 'undefined' || isNaN(_selectedIndex)) {
                        alert(plang.get('msg_pls_list_select'));
                        return;
                    } else {
                        var rows = getRowsDataViewByElement(dataGrid);
                        var selectedRow = rows[_selectedIndex];

                        runIsOneBusinessProcess(mainMetaDataId, processMetaDataId, true, selectedRow);
                    }
                }
            }
        },
        error: function() {
            alert('Error');
        }
    });
}

function transferProcessCriteria(mainMetaDataId, batchNumber, whereFrom, elem, params, dataviewUniqid) {

    Core.blockUI({message: 'Loading...', boxed: true});

    var _params = '', timeoutMseconds = 0, isMainDv = false;

    if (typeof dataviewUniqid !== 'undefined' && dataviewUniqid !== '') {
        var row = getRowsDataView(dataviewUniqid);
        var rows = row;
        timeoutMseconds = 2000;
    } else {

        var $this = $(elem), isMainDv = true;

        if (typeof isDeleteActionBeforeReload !== 'undefined' && isDeleteActionBeforeReload &&
            $this.hasAttr('data-actiontype') && $this.attr('data-actiontype') == 'delete') {

            var dataGrid = window['objectdatagrid_' + mainMetaDataId];

            if (!dataGrid.hasClass('not-datagrid')) {
                var op = dataGrid.datagrid('options');
                if (op.idField === null) {
                    dataGrid.datagrid('reload');
                } else {
                    var node = dataGrid.treegrid('getSelected');
                    if (node && node.hasOwnProperty('_parentId') && (node._parentId != '' || node._parentId != null)) {
                        dataGrid.treegrid('reload', node._parentId);
                    } else {
                        dataGrid.treegrid('reload');
                    }
                }
                timeoutMseconds = 1000;
            }
        }
    }

    setTimeout(function() {

        if (isMainDv) {
            var rows = getDataViewSelectedRows(mainMetaDataId);
            var row = rows[0];
        } else {
            var row = getRowsDataView(dataviewUniqid);
            var rows = row;
        }

        if (rows.length > 0) {
            $.ajax({
                type: 'post',
                url: 'mddatamodel/checkCriteriaProcess',
                data: { mainMetaDataId: mainMetaDataId, batchNumber: batchNumber, selectedrow: rows, params: _params },
                dataType: 'json',
                success: function(data) {
                    PNotify.removeAll();
                    if (typeof data.processNoAccess !== 'undefined') {
                        new PNotify({
                            title: 'Warning',
                            text: data.processName,
                            type: 'warning',
                            addclass: pnotifyPosition,
                            sticker: false
                        });
                        Core.unblockUI();
                        return;
                    }

                    /*if (typeof dataviewUniqid !== 'undefined' && dataviewUniqid !== '') { 
                        row = rows = data.selectedRow;
                    }*/

                    if (data.status === 'success') {

                        var dataGrid = $('#objectdatagrid_' + mainMetaDataId);
                        if ($('#objectdatagrid_' + mainMetaDataId).length === 0) {
                            dataGrid = window['objectdatagrid_' + mainMetaDataId];
                        }

                        if (data.metaTypeId === '200101010000011') {
                            bpOpenParamObj[mainMetaDataId + '_' + data.processMetaDataId] = typeof data.isBpOpen !== 'undefined' ? data.isBpOpen : '0';

                            if (typeof data.isInternalUpdate !== 'undefined') {
                                runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, data.processMetaDataId, true, row, false, elem, params, undefined, undefined, 'transferProcessCriteria', batchNumber);
                                return;
                            }

                            if (typeof data.isGetConsolidate !== 'undefined') {
                                runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, data.processMetaDataId, true, rows, true, elem, params, undefined, undefined, 'transferProcessCriteria', batchNumber);
                                return;
                            }

                            if (data.isGetData === false && data.isMulti === false && data.isConfirm === false) {
                                runBusinessProcessWithDataView(dataGrid, mainMetaDataId, data.processMetaDataId, true, '', elem, params);
                                return;
                            }

                            if (data.isGetData === true && data.isMulti === false && data.isConfirm === false) {
                                runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, data.processMetaDataId, true, row, false, elem, params, undefined, undefined, 'transferProcessCriteria', batchNumber);
                                return;
                            }

                            if (data.isGetData === false && data.isMulti === true && data.isConfirm === true) {
                                runIsMultiBusinessProcess(mainMetaDataId, data.processMetaDataId, true, rows);
                                return;
                            }

                            if (data.isGetData === false && data.isMulti === false && data.isConfirm === true) {
                                runIsOneBusinessProcess(mainMetaDataId, data.processMetaDataId, true, row);
                                return;
                            }

                            runBusinessProcessGetDataWithDataView(dataGrid, mainMetaDataId, data.processMetaDataId, true, row, false, elem, params, undefined, undefined, 'transferProcessCriteria', batchNumber);
                        } else if (data.metaTypeId === '200101010000034') {
                            runWorkSpaceWithDataView(elem, mainMetaDataId, data.processMetaDataId, true, row, false, true);
                        } else if (data.metaTypeId === '200101010000010') {
                            urlRedirectByDataView(elem, data.processMetaDataId, data.url, data.urlTarget, mainMetaDataId, data.postParam, data.getParam, row);
                        }

                    } else {
                        new PNotify({
                            title: 'Error',
                            text: data.message,
                            type: 'error',
                            addclass: pnotifyPosition,
                            sticker: false
                        });
                    }
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                    Core.unblockUI();
                }
            });
        } else {
            alert(plang.get('msg_pls_list_select'));
            Core.unblockUI();
        }
    }, timeoutMseconds);
}

function transferLifeCycleAction(mainMetaDataId, whereFrom, elem) {
    var rows = window['objectdatagrid_' + mainMetaDataId].datagrid('getSelections');

    if (rows.length > 0) {
        var row = rows[0];
        $.ajax({
            type: 'post',
            url: 'mdobject/transferLifeCycleAction',
            data: { mainMetaDataId: mainMetaDataId, selectedrow: rows[0] },
            dataType: 'json',
            success: function(data) {
                PNotify.removeAll();
                if (data.status === 'success') {
                    redirectLifeCycleForm(mainMetaDataId, data.id, row.id);
                } else {
                    new PNotify({
                        title: 'Error',
                        text: data.message,
                        type: 'error',
                        sticker: false
                    });
                }
            },
            error: function() {
                alert('Error');
            }
        });
    } else {
        alert(plang.get('msg_pls_list_select'));
    }
}

function redirectLifeCycleForm(dataModelId, lcBookId, sourceId) {
    var $dialogName = 'dialog-taskflow-list';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mdtaskflow/drawTaskFlowListHtml',
        data: { dataModelId: dataModelId, lcBookId: lcBookId, sourceId: sourceId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 900,
                height: "auto",
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('close');
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn blue-hoki btn-sm',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            });
            $("#" + $dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax();
    });
}

function processPrintPreview(elem, methodId, rowId, getProcessId, processResult, templateId) {

    if (typeof processResult === 'undefined') {
        var $this = $(elem);
        if ($this.closest('.ui-dialog-buttonset').length == 0) {
            var $form = $this.closest('form');
        } else {
            var $form = $this.closest('.ui-dialog').find('form');
        }
        
        var processResult = $form.find('input, select').not('.bprocess-table-dtl input, .bprocess-table-dtl select, .bprocess-table-row input, .bprocess-table-row select').serialize();
        processResult += '&param[printbutton]=direct';
    }

    if (typeof templateId === 'undefined') {
        templateId = '';
    }

    $.ajax({
        type: 'post',
        url: 'mdtemplate/checkCriteria',
        data: {metaDataId: methodId, dataRow: processResult, isProcess: true, templateId: templateId},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(response) {
            
            PNotify.removeAll();
            
            if (response.hasOwnProperty('status') && response.status != 'success') {
                Core.unblockUI();
                new PNotify({
                    title: response.status,
                    text: response.message,
                    type: response.status,
                    addclass: pnotifyPosition,
                    sticker: false
                });
                return;
            }
                    
            if (typeof response.isSettingsDialog !== 'undefined' && response.isSettingsDialog === '1') {
                var print_options = {
                    numberOfCopies: response.numberOfCopies,
                    isPrintNewPage: response.isPrintNewPage,
                    isSettingsDialog: response.isSettingsDialog,
                    isShowPreview: response.isShowPreview,
                    isPrintPageBottom: response.isPrintPageBottom,
                    isPrintPageRight: response.isPrintPageRight,
                    isPrintSaveTemplate: response.isPrintSaveTemplate,
                    pageOrientation: response.pageOrientation,
                    paperInput: response.paperInput,
                    pageSize: response.pageSize,
                    printType: response.printType,
                    templates: response.templates,
                    templateMetaId: typeof response.templateMetaId !== 'undefined' ? response.templateMetaId : '',
                    templateIds: response.templateIds,
                    marginConfig: typeof response.marginConfig !== 'undefined' ? response.marginConfig : '',
                    top: typeof response.top !== 'undefined' ? response.top : '',
                    left: typeof response.left !== 'undefined' ? response.left : '',
                    bottom: typeof response.bottom !== 'undefined' ? response.bottom : '',
                    right: typeof response.right !== 'undefined' ? response.right : '',
                };

                if (response.numberOfCopies != '' && response.numberOfCopies != '0' && response.templates != null) {
                    callProcessTemplate(methodId, processResult, print_options, getProcessId);
                } else {
                    new PNotify({
                        title: 'Warning',
                        text: 'Тохиргооны мэдээлэлийг бүрэн бөглөнө үү!',
                        type: 'warning',
                        addclass: pnotifyPosition,
                        sticker: false
                    });
                }
            } else {
                
                var $dialogName = 'dialog-printSettings-' + methodId;
                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '"></div>').appendTo('body');
                }
                var $dialog = $('#' + $dialogName);
            
                $dialog.empty().append(response.html);
                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: plang.get('MET_99990001'),
                    width: 500,
                    minWidth: 400,
                    height: "auto",
                    modal: false,
                    open: function(){
                        Core.initAjax($dialog);
                    },
                    close: function() {
                        PNotify.removeAll();
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                            text: plang.get('print_btn'),
                            class: 'btn btn-sm blue',
                            click: function() {
                                
                                PNotify.removeAll();
                                
                                var numberOfCopies = $("#numberOfCopies", "#" + $dialogName).val();
                                var isPrintNewPage = $("#isPrintNewPage", "#" + $dialogName).val();
                                var isShowPreview = $("#isShowPreview", "#" + $dialogName).val();
                                var isPrintPageBottom = $("#isPrintPageBottom").is(':checked') ? '1' : '0';
                                var isSettingsDialog = $("#isSettingsDialog").is(':checked') ? '1' : '0';
                                var isPrintPageRight = $("#isPrintPageRight").is(':checked') ? '1' : '0';
                                var isPrintSaveTemplate = $("#isPrintSaveTemplate").is(':checked') ? '1' : '0';
                                var pageOrientation = $("#pageOrientation", "#" + $dialogName).val();
                                var paperInput = $("#paperInput", "#" + $dialogName).val();
                                var pageSize = $("#pageSize", "#" + $dialogName).val();
                                var printType = $("#printType", "#" + $dialogName).val();
                                var templates = $("#printTemplate", "#" + $dialogName).val();
                                var templateIds = $("#rtTemplateIds", "#" + $dialogName).val();
                                var templateMetaIds = $("#templateMetaIds", "#" + $dialogName).val();

                                var print_options = {
                                    numberOfCopies: numberOfCopies,
                                    isPrintNewPage: isPrintNewPage,
                                    isShowPreview: isShowPreview,
                                    isPrintPageBottom: isPrintPageBottom,
                                    isSettingsDialog: isSettingsDialog,
                                    templateMetaIds: templateMetaIds,
                                    isPrintPageRight: isPrintPageRight,
                                    isPrintSaveTemplate: isPrintSaveTemplate,
                                    pageOrientation: pageOrientation,
                                    paperInput: paperInput,
                                    pageSize: pageSize,
                                    printType: printType,
                                    templates: templates,
                                    templateIds: templateIds,
                                    marginConfig: typeof response.marginConfig !== 'undefined' ? response.marginConfig : '',
                                    top: typeof response.top !== 'undefined' ? response.top : '',
                                    left: typeof response.left !== 'undefined' ? response.left : '',
                                    bottom: typeof response.bottom !== 'undefined' ? response.bottom : '',
                                    right: typeof response.right !== 'undefined' ? response.right : '',
                                };

                                if (numberOfCopies != '' && numberOfCopies != '0' 
                                    && (
                                        (typeof templates === 'object' && templates.length) 
                                        || 
                                        (typeof templates !== 'object' && templates)
                                        )
                                    ) {
                                    
                                    $dialog.dialog('close');
                                    callProcessTemplate(methodId, processResult, print_options, getProcessId);
                                } else {
                                    new PNotify({
                                        title: 'Warning',
                                        text: plang.getDefault('PRINT_0019', 'Тохиргооны мэдээлэлийг бүрэн бөглөнө үү!'),
                                        type: 'warning',
                                        sticker: false
                                    });
                                }
                            }
                        },
                        {
                            text: plang.get('close_btn'),
                            class: 'btn btn-sm blue-hoki',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }
                    ]
                });
                $dialog.dialog('open');
            }
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}

function callProcessTemplate(methodId, processData, print_options, getProcessId) {
    $.ajax({
        type: 'post',
        url: 'mdtemplate/printByProcess',
        data: { dataRow: processData, metaDataId: methodId, print_options: print_options, processId: getProcessId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            if (print_options.isShowPreview === '1') {

                var dialogWidth = 900;
                if (print_options['pageOrientation'] == 'landscape') {
                    dialogWidth = 1380;
                }

                var $dialogName = 'dialog-printProcess-' + methodId;
                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '"></div>').appendTo('body');
                }
                var $dialog = $('#' + $dialogName);

                $dialog.empty().append(data.Html);
                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: dialogWidth,
                    minWidth: dialogWidth,
                    height: 800,
                    dialogClass: 'no-padding-dialog',
                    modal: false,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $dialog.dialog('open');

                Core.initAjax($dialog);

            } else {
                var copies = print_options.numberOfCopies;
                var isNewPage = print_options.isPrintNewPage;

                $.each(data.Html, function(key, value) {
                    $("body").append('<page size="A4" class="hide"><div id="externalContent">' + value + '</div></page>');
                });
                $("body").append('<div id="contentRepeat" class="hide"></div>');

                if (copies >= 1) {
                    $("page").each(function(j) {
                        for (var i = 0; i < copies; i++) {
                            if (isNewPage == '1') {
                                $("#contentRepeat").append($(this).find("#externalContent").get(0).outerHTML);
                                $("#contentRepeat").find("#externalContent").attr('style', 'page-break-after: always;');
                            } else {
                                $("#contentRepeat").append($(this).find("#externalContent").get(0).outerHTML);
                            }
                        }
                        $("#contentRepeat").find("#externalContent").last().attr('style', 'page-break-after: always;');
                    });
                    $("div#contentRepeat").find("#externalContent").last().removeAttr('style');

                    var css = URL_APP + "assets/custom/css/print/reportPrint.css";
                    if (print_options['pageOrientation'] == 'landscape') {
                        css = URL_APP + "assets/custom/css/print/print.css";
                    }

                    $("div#contentRepeat").promise().done(function() {
                        $("#contentRepeat").printThis({
                            debug: false,
                            importCSS: (typeof data['print_options'] !== 'undefined' && typeof data['print_options']['importCss'] !== 'undefined' && print_options['importCss'] === '1') ? true : false,
                            printContainer: false,
                            loadCSS: css,
                            removeInline: false
                        });
                    });

                    if (typeof print_options.marginConfig !== 'undefined' && print_options.marginConfig === '1') {
                        $.ajax({
                            type: 'post',
                            url: 'mdtemplate/printCss',
                            data: {
                                orientation: print_options.pageOrientation,
                                isPrintNewPage: print_options.isPrintNewPage,
                                size: print_options.pageSize,
                                top: typeof print_options.top !== 'undefined' ? print_options.top : '0',
                                left: typeof print_options.left !== 'undefined' ? print_options.left : '0',
                                bottom: typeof print_options.bottom !== 'undefined' ? print_options.bottom : '0',
                                right: typeof print_options.right !== 'undefined' ? print_options.right : '0',
                            },
                            beforeSend: function () {
                                Core.blockUI({ boxed: true, message: 'Printing...' });
                            },
                            success: function (dataReportCss) {
                                $("div#contentRepeat").promise().done(function () {
                                    $("#contentRepeat").printThis({
                                        debug: false,
                                        importCSS: false,
                                        printContainer: false,
                                        loadCSS: [],
                                        dataCSS: dataReportCss,
                                        removeInline: false
                                    });
                                });
                                
                                if ($("body").find("#contentRepeat").length > 0) {
                                    $("body").find("#contentRepeat").remove();
                                    $("body").find("page").remove();
                                }
                            },
                            error: function () {
                                alert('Error');
                            }

                        }).done(function () {
                            Core.unblockUI();
                        });
                    } else {
                        $("div#contentRepeat").promise().done(function () {
                            $("#contentRepeat").printThis({
                                debug: false,
                                importCSS: (typeof data['print_options'] !== 'undefined' && typeof data['print_options']['importCss'] !== 'undefined' && print_options['importCss'] === '1') ? true : false,
                                printContainer: false,
                                loadCSS: css,
                                removeInline: false
                            });
                        });
                    }
                }
                if (typeof print_options.marginConfig !== 'undefined' && print_options.marginConfig === '1') {}
                else {
                    if ($("body").find("#contentRepeat").length > 0) {
                        $("body").find("#contentRepeat").remove();
                        $("body").find("page").remove();
                    }
                }
            }

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}

function renderAddModeBpTab(uniqId, refStructureId, tabType, elem, selectedDataRow, dmMetadataId) {
    var bpContainer = $('div[data-bp-uniq-id="' + uniqId + '"]').find('form:eq(0)');
    if (tabType === 'photo') {
        var bp_photo_tab_length = $.trim(bpContainer.find("div#bp_photo_tab_" + uniqId).html()).length;
        if (bp_photo_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderAddModeBpPhotoTab',
                data: {
                    uniqId: uniqId,
                    refStructureId: refStructureId,
                    dmMetadataId: dmMetadataId,
                    selectedRow: selectedDataRow,
                },
                beforeSend: function() {
                    if (!$("link[href='assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css']").length) {
                        $("head").prepend('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css"/>');
                    }
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_photo_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'file') {
        var bp_file_tab_length = $.trim(bpContainer.find("div#bp_file_tab_" + uniqId).html()).length;
        if (bp_file_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderAddModeBpFileTab',
                data: {uniqId: uniqId},
                beforeSend: function() {
                    if (!$("link[href='assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css']").length) {
                        $("head").prepend('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css"/>');
                    }
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_file_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'comment') {
        var bp_comment_tab_length = $.trim(bpContainer.find("div#bp_comment_tab_" + uniqId).html()).length;
        if (bp_comment_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderAddModeBpCommentTab',
                data: { uniqId: uniqId },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_comment_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'commentbtm') {
        $.ajax({
            type: 'post',
            url: 'mdwebservice/renderAddModeBpCommentTab',
            data: { uniqId: uniqId },
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {
                $('.bp_comment_tab_' + uniqId).empty().append(data);
                Core.unblockUI();
            },
            error: function() { alert('Error'); }
        });
    } else if (tabType === 'relation') {
        var bp_relation_tab_length = $.trim(bpContainer.find("div#bp_relation_tab_" + uniqId).html()).length;
        if (bp_relation_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderAddModeBpRelationTab',
                data: {
                    uniqId: uniqId,
                    refStructureId: refStructureId,
                    processId: bpContainer.parent().data('process-id')
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_relation_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'mv_relation') {
        var bp_relation_tab_length = $.trim(bpContainer.find("div#bp_mv_relation_tab_" + uniqId).html()).length;
        if (bp_relation_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdform/renderMetaProcessRelationTab',
                data: {
                    uniqId: uniqId,
                    refStructureId: refStructureId,
                    processId: bpContainer.parent().data('process-id')
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_mv_relation_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'wfmlog') {
        var bp_wfmlog_tab_length = $.trim(bpContainer.find("div#bp_wfmlog_tab_" + uniqId).html()).length;
        if (bp_wfmlog_tab_length == 0) {
            var _metadataId = bpContainer.find("div#bp_main_tab_" + uniqId).find('input[name="dmMetaDataId"]').val();
            var _selectedRowData = $(elem).attr('data-selectedrow');
            $.ajax({
                type: 'post',
                dataType: 'json',
                url: 'mdobject/getRowWfmStatusForm',
                data: {
                    uniqId: uniqId,
                    metaDataId: _metadataId,
                    refStructureId: refStructureId,
                    processId: bpContainer.parent().data('process-id'),
                    selectedRowData: _selectedRowData,
                    isSee: true,
                    form: false
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_wfmlog_tab_" + uniqId).empty().append(data.Html);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'wfmlogBtm') {
        $.ajax({
            type: 'post',
            dataType: 'json',
            url: 'mdobject/getRowWfmStatusForm',
            data: {
                uniqId: uniqId,
                metaDataId: dmMetadataId,
                refStructureId: refStructureId,
                processId: bpContainer.parent().data('process-id'),
                selectedRowData: selectedDataRow,
                isSee: true,
                form: false
            },
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {
                $('.bp_wfmlogs_tab_' + uniqId).empty().append(data.Html);
                Core.unblockUI();
            },
            error: function() { alert('Error'); }
        });
    } else if (tabType === 'mv_addon_info') {
        var $tab = bpContainer.find("div#bp_mv_addoninfo_tab_" + uniqId);
        if ($tab.children().length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdform/renderProcessAddonInfo',
                data: {uniqId: uniqId, processId: bpContainer.parent().data('process-id')},
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    $tab.append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    }
}
function renderEditModeBpTab(uniqId, refStructureId, sourceId, tabType, elem, dmMetadataId) {
    var $this = $(elem);
    var bpContainer = $this.closest('form');

    if (tabType === 'photo') {
        var bp_photo_tab_length = $.trim(bpContainer.find("div#bp_photo_tab_" + uniqId).html()).length;
        if (bp_photo_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderEditModeBpPhotoTab',
                data: {uniqId: uniqId, refStructureId: refStructureId, sourceId: sourceId, actionType: $this.attr('data-actiontype')},
                beforeSend: function() {
                    if (!$("link[href='assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css']").length) {
                        $("head").prepend('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css"/>');
                    }
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_photo_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() {
                    alert("Error photo loading...");
                }
            }).done(function() {
                Core.initFancybox(bpContainer.find("div#bp_photo_tab_" + uniqId));
            });
        }
    } else if (tabType === 'file') {
        var bp_file_tab_length = $.trim(bpContainer.find("div#bp_file_tab_" + uniqId).html()).length;
        if (bp_file_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderEditModeBpFileTab',
                data: {uniqId: uniqId, refStructureId: refStructureId, sourceId: sourceId, actionType: $this.attr('data-actiontype')},
                beforeSend: function() {
                    if (!$("link[href='assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css']").length) {
                        $("head").prepend('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/jquery-file-upload/css/jquery.fileupload.css"/>');
                    }
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_file_tab_" + uniqId).empty().append(data).promise().done(function() {
                        Core.initFancybox(bpContainer.find("div#bp_file_tab_" + uniqId));
                        Core.unblockUI();
                    });
                },
                error: function() {
                    alert("Error file loading...");
                }
            });
        }
    } else if (tabType === 'comment') {
        var bp_comment_tab_length = $.trim(bpContainer.find("div#bp_comment_tab_" + uniqId).html()).length;
        if (bp_comment_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderEditModeBpCommentTab',
                data: {uniqId: uniqId, refStructureId: refStructureId, sourceId: sourceId},
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_comment_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() {
                    alert("Error comment loading...");
                }
            });
        }
    } else if (tabType === 'commentbtm') {
        $.ajax({
            type: 'post',
            url: 'mdwebservice/renderEditModeBpCommentTab',
            data: {uniqId: uniqId, refStructureId: refStructureId, sourceId: sourceId},
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {
                $('.bp_comment_tab_' + uniqId).empty().append(data);
                Core.unblockUI();
            },
            error: function() {
                alert('Error');
            }
        });
    } else if (tabType === 'relation') {
        var bp_relation_tab_length = $.trim(bpContainer.find("div#bp_relation_tab_" + uniqId).html()).length;
        if (bp_relation_tab_length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdwebservice/renderEditModeBpRelationTab',
                data: {
                    uniqId: uniqId,
                    refStructureId: refStructureId,
                    sourceId: sourceId,
                    processId: bpContainer.parent().data('process-id')
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_relation_tab_" + uniqId).empty().append(data);
                    Core.unblockUI();
                },
                error: function() {
                    alert("Error relation loading...");
                }
            });
        }
    } else if (tabType === 'mv_relation') {
        var $tab = bpContainer.find("div#bp_mv_relation_tab_" + uniqId);
        if ($tab.children().length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdform/renderMetaProcessRelationTab',
                data: {
                    uniqId: uniqId,
                    refStructureId: refStructureId,
                    sourceId: sourceId,
                    processId: bpContainer.parent().data('process-id')
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    $tab.append(data);
                    Core.unblockUI();
                },
                error: function() {
                    alert("Error");
                }
            });
        }
    } else if (tabType === 'mv_addon_info') {
        var $tab = bpContainer.find("div#bp_mv_addoninfo_tab_" + uniqId);
        if ($tab.children().length == 0) {
            $.ajax({
                type: 'post',
                url: 'mdform/renderProcessAddonInfo',
                data: {uniqId: uniqId, processId: bpContainer.parent().data('process-id'), sourceId: sourceId},
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    $tab.append(data);
                    Core.unblockUI();
                },
                error: function() { alert('Error'); }
            });
        }
    } else if (tabType === 'wfmlog') {
        var bp_wfmlog_tab_length = $.trim(bpContainer.find("div#bp_wfmlog_tab_" + uniqId).html()).length;
        if (bp_wfmlog_tab_length == 0) {
            var _metadataId = dmMetadataId;
            var _selectedRowData = $(elem).attr('data-selectedrow');
            $.ajax({
                type: 'post',
                dataType: 'json',
                url: 'mdobject/getRowWfmStatusForm',
                data: {
                    uniqId: uniqId,
                    metaDataId: dmMetadataId,
                    refStructureId: refStructureId,
                    processId: bpContainer.parent().data('process-id'),
                    selectedRowData: _selectedRowData,
                    isSee: true,
                    form: false
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    bpContainer.find("div#bp_wfmlog_tab_" + uniqId).empty().append(data.Html);
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
        }
    } else if (tabType === 'wfmlogBtm') {
        var _metadataId = dmMetadataId;
        $.ajax({
            type: 'post',
            dataType: 'json',
            url: 'mdobject/getRowWfmStatusForm',
            data: {
                uniqId: uniqId,
                metaDataId: _metadataId,
                refStructureId: refStructureId,
                processId: bpContainer.parent().data('process-id'),
                selectedRowData: _selectedRowData,
                isSee: true,
                form: false
            },
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {
                $(".bp_wfmlogs_tab_" + uniqId).empty().append(data.Html);
                Core.unblockUI();
            },
            error: function() {
                alert('Error');
            }
        });
    } else if (tabType === 'bpmntool') {
        var bp_photo_tab_length = $.trim(bpContainer.find("div#bp_bpmntool_tab_" + uniqId).html()).length;
        if (bp_photo_tab_length == 0) {
            var _metadataId = dmMetadataId;
            
            Core.blockUI({animate: true});
            $.cachedScript('https://unpkg.com/bpmn-js@8.9.1/dist/bpmn-modeler.development.js').done(function() { 
                var uniqId = $(elem).closest('div.main-action-meta').attr('data-bp-uniq-id');
                var domainbp = $('div[data-bp-uniq-id="'+uniqId+'"]').find('input[data-path="id"]').val();
                $.ajax({
                    type: 'post',
                    url: 'mdbpmn/bpmn2/'+domainbp,
                    data: {
                        bpUniqId: uniqId
                    },
                    dataType: 'json',
                    beforeSend: function() {
                        if ($("link[href='https://unpkg.com/bpmn-js@8.9.1/dist/assets/diagram-js.css']").length == 0) {
                            $('head').append('<link rel="stylesheet" type="text/css" href="https://unpkg.com/bpmn-js@8.9.1/dist/assets/diagram-js.css"/>');
                        }                
                        if ($("link[href='https://unpkg.com/bpmn-js@8.9.1/dist/assets/bpmn-font/css/bpmn.css']").length == 0) {
                            $('head').append('<link rel="stylesheet" type="text/css" href="https://unpkg.com/bpmn-js@8.9.1/dist/assets/bpmn-font/css/bpmn.css"/>');
                        }                
                    },
                    success: function(data) {
                        var bpcode = $("[data-path=\"code\"]", 'div[data-bp-uniq-id="' + uniqId + '"]').length ? $("[data-path=\"code\"]", 'div[data-bp-uniq-id="' + uniqId + '"]').val() : "";
                        var bpname = $("[data-path=\"name\"]", 'div[data-bp-uniq-id="' + uniqId + '"]') ? $("[data-path=\"name\"]", 'div[data-bp-uniq-id="' + uniqId + '"]').val() : "";
                        $("#bp_bpmntool_tab_" + uniqId).empty().append(data.html);
                        $("#bp_bpmntool_tab_" + uniqId).find(".bpmn-header-title").text(bpcode+' '+bpname);
                        Core.initSelect2($("#bp_bpmntool_tab_" + uniqId));                    
                        Core.unblockUI();
                    }
                });
            });
        }
    }
}

function packageRenderType(metaDataId, metaTypeId, elem, packageId, realPackageId, showType, drillDownDefaultCriteria, rerender, uriParams) {
    var _this = $(elem);
    var _container = _this.attr('href');
    var renderType = _this.hasAttr('data-rendertype') ? _this.attr('data-rendertype') : '';

    if (typeof realPackageId !== 'undefined') {
        var package_tab_length = $.trim($("div#package-meta-" + realPackageId).find("div" + _container).html()).length;
    } else {
        var package_tab_length = $.trim($("body").find("div" + _container).html()).length;
    }
    
    if ($(elem).closest('.sidebar-content').find('#default-criteria-form')) {
        $(elem).closest('.sidebar-content').find('#default-criteria-form > .pack_default_criteria').addClass('d-none');
        $(elem).closest('.sidebar-content').find('#default-criteria-form > .pack_default_criteria.'+ metaDataId +'_default_criteria').removeClass('d-none');
    }
    
    if (package_tab_length == 0 || (typeof rerender !== 'undefined' && rerender === '1')) {

        if (metaTypeId == '200101010000016') {
            var workSpaceData = [];

            if (_this.closest("div.ws-area").length > 0) {
                var wsArea = _this.closest("div.ws-area");
                var workSpaceIdAttr = wsArea.attr("id").split("-");
                workSpaceData.push({
                    name: 'workSpaceId',
                    value: workSpaceIdAttr[2]
                }, {
                    name: 'workSpaceParams',
                    value: $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize()
                }, {
                    name: 'runSrcMetaId',
                    value: wsArea.attr('data-dm-id')
                });
            }

            if (!workSpaceData) {
                workSpaceData = [];
                workSpaceData.push({
                    name: 'workSpaceId',
                    value: packageId
                }, {
                    name: 'runSrcMetaId',
                    value: packageId
                });
            }

            workSpaceData.push({name: 'callerType', value: 'package'});
            
            if (typeof drillDownDefaultCriteria !== 'undefined') {
                workSpaceData.push({
                    name: 'drillDownDefaultCriteria',
                    value: drillDownDefaultCriteria
                });
            }
            
            if (renderType) {
                workSpaceData.push({name: 'packageRenderType', value: renderType});
            }

            if (typeof uriParams !== 'undefined' && uriParams) {
                workSpaceData.push({name: 'uriParams', value: uriParams});
            }

            $.ajax({
                type: 'post',
                url: 'mdobject/dataview/' + metaDataId,
                data: workSpaceData,
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    $("body").find("div" + _container).empty().append(data).promise().done(function() {
                        $('#object-value-list-' + metaDataId).parent().addClass('margin-none-ws15');
                    });
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                    Core.unblockUI();
                }
            });

        } else if (metaTypeId == '200101010000011') {

            var packageCode = _this.attr('data-packagecode');
            var workSpaceId = '', dmMetaDataId = '', workSpaceParams = '';

            if (_this.closest("div.ws-area").length > 0) {
                var wsArea = _this.closest("div.ws-area");
                var workSpaceIdAttr = wsArea.attr("id").split("-");

                workSpaceId = workSpaceIdAttr[2];
                workSpaceParams = $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize();
                dmMetaDataId = wsArea.attr("data-dm-id");
            }
            $.ajax({
                type: 'post',
                url: 'mdwebservice/callMethodByMeta',
                data: {
                    metaDataId: metaDataId,
                    dmMetaDataId: dmMetaDataId,
                    isDialog: 'false',
                    isHeaderName: false,
                    workSpaceId: workSpaceId,
                    isBackBtnIgnore: '1',
                    workSpaceParams: workSpaceParams,
                    openParams: '{"callerType":"' + packageCode + '"}'
                },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    $("body").find("div" + _container).empty().append(data.Html).promise().done(function () {
                        if (typeof showType !== 'undefined' && showType === 'hide') {
                            $('.package-meta').find('div' + _container).hide();
                        }
                        $('div[id="package-tab-1560304933910650"]').show();
                    });
                    
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });

        } else if (metaTypeId == '200101010000035') {
            $.ajax({
                type: 'post',
                url: 'mdstatement/index/' + metaDataId,
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(dataHtml) {
                    $("body").find("div" + _container).empty().append(dataHtml);
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });

        } else if (metaTypeId == '200101010000036') {
            var workSpaceData = [];

            if (_this.closest("div.ws-area").length > 0) {
                var wsArea = _this.closest("div.ws-area");
                var workSpaceIdAttr = wsArea.attr("id").split("-");
                workSpaceData.push({
                    name: 'workSpaceId',
                    value: workSpaceIdAttr[2]
                }, {
                    name: 'workSpaceParams',
                    value: $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize()
                });
            }

            if (!workSpaceData) {
                var workSpaceData = [];
                workSpaceData.push({
                    name: 'workSpaceId',
                    value: packageId
                });
            }
            workSpaceData.push({
                name: 'callerType',
                value: 'package'
            });

            $.ajax({
                type: 'post',
                url: 'mdlayoutrender/index/' + metaDataId,
                data: workSpaceData,
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(dataHtml) {
                    $('body').find('div' + _container).empty().append(dataHtml.Html);
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });

        } else if (metaTypeId == '200101010000027') {
            $.ajax({
                type: 'post',
                data: { metaDataId: metaDataId },
                url: 'mdcalendar/calendarRenderByPost',
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(dataHtml) {
                    $('body').find('div' + _container).empty().append(dataHtml.Html);
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
        } else if (metaTypeId == '200101010000010') {
            
            var packageCode = _this.attr('data-packagecode');
            var metaDataCode = _this.attr('data-metadatacode');
            var workSpaceId = '', dmMetaDataId = '', workSpaceParams = '';

            if (_this.closest("div.ws-area").length > 0) {
                var wsArea = _this.closest("div.ws-area");
                var workSpaceIdAttr = wsArea.attr("id").split("-");

                workSpaceId = workSpaceIdAttr[2];
                workSpaceParams = wsArea.find("div.ws-hidden-params input[type=hidden]").serialize();
                dmMetaDataId = wsArea.attr("data-dm-id");
            }
            
            if (metaDataCode == 'dataMartRelationView') {
                
                dataMartRelationConfigViewInit(elem, metaDataId, dmMetaDataId, {id: wsArea.find('div.ws-hidden-params input[name="workSpaceParam[id]"]').val()}, $('body').find('div' + _container));
                
            } else if (metaDataId == '16427298047481') {
                
                var workSpaceData = [];

                if (_this.closest("div.ws-area").length > 0) {
                    var wsArea = _this.closest("div.ws-area");
                    var workSpaceIdAttr = wsArea.attr("id").split("-");
                    workSpaceData.push({
                        name: 'workSpaceId',
                        value: workSpaceIdAttr[2]
                    }, {
                        name: 'workSpaceParams',
                        value: $("div.ws-hidden-params", wsArea).find("input[type=hidden]").serialize()
                    }, {
                        name: 'runSrcMetaId',
                        value: wsArea.attr('data-dm-id')
                    }, {
                        name: 'isWorkFlow', 
                        value: '1'
                    });
                }

                if (!workSpaceData) {
                    workSpaceData = [];
                    workSpaceData.push({
                        name: 'workSpaceId',
                        value: packageId
                    }, {
                        name: 'runSrcMetaId',
                        value: packageId
                    });
                }

                workSpaceData.push({name: 'callerType', value: 'package'});
                workSpaceData.push({name: 'isIgnoreTitle', value: '1'});
            
                $.ajax({
                    type: 'post',
                    data: workSpaceData,
                    url: 'mdform/indicatorList',
                    success: function(dataHtml) {
                        $('div' + _container).empty().append(dataHtml);
                    },
                    error: function() { alert('Error'); }
                });
                
            } else {

                $.ajax({
                    type: 'post',
                    data: { metaDataId: metaDataId, workSpaceParams: workSpaceParams },
                    url: 'mdmetadata/weblink',
                    dataType: 'json',
                    success: function(dataHtml) {
                        if (dataHtml.hasOwnProperty('Html')) {
                            $('body').find('div' + _container).empty().append(dataHtml.Html);
                        } else {
                            $('body').find('div' + _container).empty().append(dataHtml.html);
                        }
                    },
                    error: function() { alert('Error'); }
                });
            }
            
        } else if (metaTypeId == '200101010000033') {
            $.ajax({
                type: 'post',
                url: 'mdobject/package/' + metaDataId,
                success: function(dataHtml) {
                    $("body").find("div" + _container).empty().append(dataHtml);
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
        } 
    }
    
    _this.on('shown.bs.tab', function(e) {
        $(window).trigger('resize');
    });
}

function runProcessByWorkSpace(processMetaDataId, workSpaceId, elem, openType) {
    var $this = $(elem);
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = $this.attr("data-menu-id");
    var prevMenuId = $this.closest("ul").find("li.active a").attr("data-menu-id");
    var prevWorkspacePart = $this.closest("div.ws-area").find("div.ws-page-content-wrapper").find("div[data-menu-id='" + prevMenuId + "']");
    var wsDmMetaDataId = workSpaceContainer.attr('data-dm-id');
    var $menuUl = $this.closest('.workspace-menu');
    var isLastVisitMenu = $menuUl.attr('data-islastvisitmenu');

    if (typeof $this.attr("data-next-clickedmenu-copy") == 'undefined') {
        $this.closest("ul").find("li.active a").attr("data-next-clickedmenu", menuId);
    }

    if (isLastVisitMenu == '1') {
        $.cookie('ws_last_menu_' + workSpaceId + '_' + wsDmMetaDataId + '_' + workSpaceContainer.find('input[name="workSpaceParam[id]"]').val(), menuId, { expires: 30, path: '/' });
    }
    
    if ($('.main-container-' + workSpaceId).find("input[data-path='ws_check_modified_catch']").val() == '1' && typeof $this.attr("data-main-savebtn") == 'undefined') {
        var dialogName = '#workspace-save-confirm';
        if (!$(dialogName).length) {
            $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
        }
        $(dialogName).empty().append('Та өөрчлөлт оруулсан байна хадгалах уу?');
        $(dialogName).dialog({
            cache: false,
            resizable: true,
            bgiframe: true,
            autoOpen: false,
            title: 'Сануулах',
            width: '350',
            height: 'auto',
            modal: true,
            buttons: [{
                    text: plang.get('yes_btn'),
                    class: 'btn green-meadow btn-sm',
                    click: function() {
                        $('.main-container-' + workSpaceId).find("input[data-path='ws_check_modified_catch']").val("0");
                        prevWorkspacePart.find("div[id^='bp-window-']").find("button.bpMainSaveButton").attr("data-trigger-save-wsmenu", "ok").trigger("click");
                        $(dialogName).dialog('close');
                    }
                },
                {
                    text: plang.get('no_btn'),
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $('.main-container-' + workSpaceId).find("input[data-path='ws_check_modified_catch']").val("0");
                        $this.closest("ul").children().find("a[data-menu-id='" + prevMenuId + "']").attr("data-next-clickedmenu", $this.closest("ul").children().find("a[data-menu-id='" + prevMenuId + "']").attr("data-next-clickedmenu")).attr("data-next-clickedmenu-copy", "ok");
                        $this.closest("ul").children().find("a[data-menu-id='" + prevMenuId + "']").attr("data-reload", "ok").trigger("click");
                        $(dialogName).dialog('close');
                    }
                }
            ]
        });
        $(dialogName).dialog('open');

    } else {

        if (typeof openType !== 'undefined') {
            _thisTagElement = elem;
            callWebServiceByMeta(processMetaDataId, true, '', false, { callerType: 'workspace' });
            return;
        }

        var mainContainer = $("div.workspace-main-container", workSpaceContainer);

        mainContainer.find("div.workspace-part").hide();
        $this.closest("ul").children().removeClass("active");
        $this.parent().addClass("active");

        if (typeof $this.attr("data-reload") !== "undefined") {
            mainContainer.find("div[class='workspace-part'][data-menu-id=" + menuId + "]").remove();
        }

        if (mainContainer.find("div[class='workspace-part'][data-menu-id=" + menuId + "]").length === 0 && typeof $this.attr('data-wsload') === 'undefined') {
            $this.attr('data-wsload', '1');

            $.ajax({
                type: 'post',
                url: 'mdwebservice/callMethodByMeta',
                data: {
                    metaDataId: processMetaDataId,
                    isDialog: false,
                    isHeaderName: false,
                    isSystemMeta: false,
                    isBackBtnIgnore: 1,
                    oneSelectedRow: wsOneSelectedRow,
                    dmMetaDataId: wsDmMetaDataId,
                    workSpaceId: workSpaceId,
                    workSpaceParams: $("div.ws-hidden-params", workSpaceContainer).find("input[type=hidden]").serialize(),
                    openParams: '{"callerType":"' + menuId + '"}'
                },
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                    
                    $("div#dialog-workspace").css("padding", "0px");
                },
                success: function(data) {
                    var $containerHtml = '';
                    if (typeof checkModifiedCatch !== 'undefined' && checkModifiedCatch === '1') {
                        $containerHtml += '<div class="workspace-part" data-menu-id="' + menuId + '">';
                            $containerHtml += data.Html;
                        $containerHtml += '</div>';
                    } else {
                        $containerHtml += '<div class="workspace-part" data-menu-id="' + menuId + '">' + data.Html;
                            $containerHtml += '<input type="hidden" data-path="ws_check_modified_catch" value="0">';
                        $containerHtml += ' <script type="text/javascript"> ';
                            $containerHtml += '     var wsChange = $("div.ws-area").find("div[data-menu-id=\'' + menuId + '\']"); ';
                            $containerHtml += '     wsChange.on("change", "input, select, textarea", function () { ';
                            $containerHtml += '     $(this).closest(".workspace-part").find("input[data-path=\'ws_check_modified_catch\']").val("1"); ';
                        $containerHtml += ' });</script></div>';
                    }
                    
                    mainContainer.append($containerHtml).promise().done(function() {
                        //$('.left-side').height($('.workspace-main-container').height()-290); ws left-side height
                        mainContainer.find("div.workspace-part").find('a.bp-btn-back').remove();
                        
                        Core.initBPAjax(mainContainer.find("div.workspace-part"));
                        Core.unblockUI();
                    });
                },
                error: function() {
                    alert('Error');
                }
            }).done(function() {
                if ($this.attr("data-next-clickedmenu") !== $this.attr("data-menu-id")) {
                    $this.closest("ul").children().find("a[data-menu-id='" + $this.attr("data-next-clickedmenu") + "']").trigger("click");
                    $this.removeAttr("data-next-clickedmenu");
                }

                var isFlow = $this.closest("div.ws-area").find("#isFlow").val();
                if (isFlow === '1' && typeof prevWorkspacePart.find("div[id^='bp-window-']").find("button.bpMainSaveButton").attr("data-trigger-save-wsmenu") === 'undefined' && typeof $this.attr("data-main-savebtn") !== "undefined") {
                    var NextMenuNumber = parseInt($this.closest("div.ws-area").find(".page-sidebar-menu li.active").attr('data-auto-number')) + 1;
                    $this.closest("div.ws-area").find(".page-sidebar-menu li").removeClass("active");
                    $this.closest("div.ws-area").find(".page-sidebar-menu li[data-auto-number='" + NextMenuNumber + "']").addClass("active").find('a').trigger('click');
                }

                $this.removeAttr("data-reload");
                $this.removeAttr("data-main-savebtn");
                $this.removeAttr("data-next-clickedmenu-copy");
            });
        } else {
            mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").show();
        }
    }
}

function packageByWorkSpace(processMetaDataId, workSpaceId, elem, renderType) {
    var _this = $(elem);
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = _this.attr("data-menu-id");
    var mainContainer = $("div.workspace-main-container", workSpaceContainer);
    var wsDmMetaDataId = workSpaceContainer.attr('data-dm-id');
    var $menuUl = _this.closest('.workspace-menu');
    var isLastVisitMenu = $menuUl.attr('data-islastvisitmenu');

    mainContainer.find("div.workspace-part").hide();
    _this.closest("ul").children().removeClass("active");
    _this.parent().addClass("active");

    if (isLastVisitMenu == '1') {
        $.cookie('ws_last_menu_' + workSpaceId + '_' + wsDmMetaDataId + '_' + workSpaceContainer.find('input[name="workSpaceParam[id]"]').val(), menuId, { expires: 30, path: '/' });
    }

    if (mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").length === 0 || renderType === 'dialog') {
        _this.closest('ul').find('li:eq(0) > figure > a').trigger('click');

        $.ajax({
            type: 'post',
            url: 'mdobject/package/' + processMetaDataId,
            data: { dataGridDefaultHeight: 400, workSpaceId: workSpaceId },
            beforeSend: function() {
                Core.blockUI({animate: true});
            },            
            success: function(data) {
                if (renderType === 'dialog') {
                    var $dialogName = 'dialog-package-by-workspace';
                    if (!$("#" + $dialogName).length) {
                        _this.closest('div.ws-area').append('<div id="' + $dialogName + '"></div>');
                    }
                    var $dialog = $('#' + $dialogName);

                    $dialog.empty().append(data);
                    $dialog.dialog({
                        cache: false,
                        resizable: false,
                        bgiframe: true,
                        autoOpen: false,
                        title: 'More',
                        width: 1200,
                        height: $(window).height() - 60,
                        modal: true,
                        position: { my: 'top', at: 'top+50' },
                        closeOnEscape: isCloseOnEscape,
                        close: function() {
                            $dialog.empty().dialog('destroy').remove();
                        },
                        buttons: [{
                            text: plang.get('close_btn'),
                            class: 'btn blue-hoki btn-sm',
                            click: function() {
                                $dialog.empty().dialog('destroy').remove();
                            }
                        }]
                    });
                    $dialog.dialog('open');
                } else {
                    mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + data + '</div>');
                }
                Core.unblockUI();
            },
            error: function() {
                alert('Error');
            }
        }).done(function() {
            Core.initBPAjax(mainContainer.find("div.workspace-part"));
        });
    } else {
        mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").show();
    }
}

function dataViewByWorkSpace(processMetaDataId, workSpaceId, elem) {
    var _this = $(elem);
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = _this.attr("data-menu-id");
    var mainContainer = $("div.workspace-main-container", workSpaceContainer);
    var wsDmMetaDataId = workSpaceContainer.attr('data-dm-id');
    var $menuUl = _this.closest('.workspace-menu');
    var isLastVisitMenu = $menuUl.attr('data-islastvisitmenu');
    var _menuAnchor = '';
    
    if (_this.closest('.ws-page-content-wrapper').hasClass('wizard')) {
        var _parent = _this.closest('.ws-page-content-wrapper'),
            _selectorId = _this.attr('id');
            _splitObj = _selectorId.split('-');
        
        if (_splitObj.length == 4) {
            _selectorId = _splitObj[0]+ '-' + _splitObj[1] + '-p-' + _splitObj[3];
            mainContainer = _parent.find('section#' + _selectorId);
        }
    }

    workSpaceContainer.attr('data-previous-menu-id', processMetaDataId);

    mainContainer.find("div.workspace-part").hide();

    _this.closest("ul").children().removeClass("active");
    _this.parent().addClass("active");

    var $wsHiddenParams = $("div.ws-hidden-params", workSpaceContainer);

    if ($wsHiddenParams.length == 0) {
        $wsHiddenParams = workSpaceContainer.closest('.tab-pane').find('div.ws-hidden-params');
    }

    var workSpaceParams = $wsHiddenParams.find("input[type=hidden]").serialize();

    if (_this.hasAttr('data-criteria')) {
        workSpaceParams = workSpaceParams + '&' + _this.attr('data-criteria');
    }

    if (isLastVisitMenu == '1') {
        $.cookie('ws_last_menu_' + workSpaceId + '_' + wsDmMetaDataId + '_' + workSpaceContainer.find('input[name="workSpaceParam[id]"]').val(), menuId, { expires: 30, path: '/' });
    }

    if (mainContainer.find("div[class=workspace-part][data-menu-id=" + processMetaDataId + "]").length === 0) {
        if (typeof _this.attr('menu-data-link-id') !== 'undefined') {
            var _menuLinkId = _this.attr('menu-data-link-id');
            var _menuId = _this.attr('data-menu-id');
            var _selectedRowEncode = _this.attr('selectedrow-encode');
            var _parentMenuId = (typeof _this.attr('data-parent-menuid') !== 'undefined') ? _this.attr('data-parent-menuid') : '';

            $.ajax({
                type: 'post',
                dataType: 'json',
                url: 'mdworkspace/submenuRender',
                data: {
                    workSpaceId: workSpaceId,
                    menuLinkId: _menuLinkId,
                    menuId: _menuId,
                    parentMenuId: _parentMenuId,
                    selectedRow: _selectedRowEncode
                },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    _menuAnchor = data.menuAnchor;
                    $.ajax({
                        type: 'post',
                        url: 'mdobject/dataview/' + processMetaDataId,
                        data: {
                            workSpaceId: workSpaceId,
                            workSpaceParams: workSpaceParams,
                            dataGridDefaultHeight: getWorkSpaceMenuHeight(workSpaceContainer)
                        },
                        beforeSend: function(xhr, settings) {
                            Core.blockUI({animate: true});
                            settings.data += '&moreinfo=MoreData';
                        },
                        success: function(data) {
                            var _appendClass = '';
                            mainContainer.append('<div class="workspace-part" data-menu-id="' + processMetaDataId + '">' + _menuAnchor + '<div class="col-md-12">' + data + '</div></div>');

                            $('.workspace-main-container li').removeClass('activeMenu');
                            $('#ws-menu-id-' + menuId, '.workspace-main-container').addClass('activeMenu');

                            Core.unblockUI();
                        },
                        error: function() {
                            alert('Error');
                        }
                    }).done(function() {
                        if ($('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').length > 0) {
                            $('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').removeClass('active');
                            $('div[data-menu-id="' + processMetaDataId + '"]').find('.activeMenu').removeClass('activeMenu');

                            $(elem).closest('figure').addClass('active');
                            $(elem).closest('li').addClass('activeMenu');
                        } else {
                            $('div[data-menu-id="' + processMetaDataId + '"]').find('ul#main-item-container > li').each(function(indexM, rowM) {
                                if (indexM === 0)
                                    $(rowM).addClass('activeMenu');
                            });
                        }
                        $('div[data-menu-id="' + processMetaDataId + '"]').find('.position-absolute').removeClass('position-absolute');
                    });
                },
                error: function() {
                    alert('Error');
                }
            });
        } else {
            $.ajax({
                type: 'post',
                url: 'mdobject/dataview/' + processMetaDataId,
                data: {
                    workSpaceId: workSpaceId,
                    workSpaceParams: workSpaceParams,
                    runSrcMetaId: wsDmMetaDataId
                        /*dataGridDefaultHeight: getWorkSpaceMenuHeight(workSpaceContainer) Ulaankhuu Ts*/
                },
                beforeSend: function(xhr, settings) {
                    Core.blockUI({animate: true});
                    settings.data += '&moreinfo=MoreData';
                },
                success: function(data) {
                    var _appendClass = '';
                    mainContainer.append('<div class="workspace-part" data-menu-id="' + processMetaDataId + '">' + _menuAnchor + '<div class="col-md-12">' + data + '</div><div class="clearfix w-100"></div></div>');

                    if ($('.dropdown-clicked', '.vr-workspace-theme10').children().hasClass('sub-menu')) {
                        $('.actived', '.vr-workspace-theme10').removeClass('actived');
                        if ($('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().children().hasClass('sub-menu')) {
                            $('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().children().find('li:first').addClass('actived');
                        } else {
                            if ($('a[data-menu-id="' + processMetaDataId + '"]', '.vr-workspace-theme10').parent().parent().hasClass('sub-menu')) {
                                $('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().addClass('actived');
                            }
                        }
                        $('div[data-menu-id="' + processMetaDataId + '"]', '.vr-workspace-theme10').addClass('mt35');
                    }
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            }).done(function() {
                if ($('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').length > 0) {
                    $('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').removeClass('active');
                    $('div[data-menu-id="' + processMetaDataId + '"]').find('.activeMenu').removeClass('activeMenu');

                    $(elem).closest('figure').addClass('active');
                    $(elem).closest('li').addClass('activeMenu');
                } else {
                    $('div[data-menu-id="' + processMetaDataId + '"]').find('ul#main-item-container > li').each(function(indexM, rowM) {
                        if (indexM === 0)
                            $(rowM).addClass('activeMenu');
                    });
                }
                setTimeout(function() {
                    $('div[data-menu-id="' + processMetaDataId + '"]').find('.position-absolute').removeClass('position-absolute');
                }, 1500);
            });
        }
    } else {

        mainContainer.find("div[class=workspace-part][data-menu-id=" + processMetaDataId + "]").show();

        $('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').removeClass('active');
        $('div[data-menu-id="' + processMetaDataId + '"]').find('.activeMenu').removeClass('activeMenu');
        if (!$('div[data-menu-id="' + processMetaDataId + '"]').find('.dataview-search-filter').hasClass('display-none') && $('div[data-menu-id="' + processMetaDataId + '"]').find('.dataview-search-filter').find('li.nav-item').length) {            
            setTimeout(function(){
                $('div[data-menu-id="' + processMetaDataId + '"]').find('.dataview-search-filter').find('li.nav-item > a:first-child').tab('show');
            }, 300);            
        }

        $('a[data-menu-id="' + $(elem).attr('data-menu-id') + '"]').closest('figure').addClass('active');
        $('a[data-menu-id="' + $(elem).attr('data-menu-id') + '"]').closest('li').addClass('activeMenu');

        dataViewReload(processMetaDataId);
    }
}

function layoutViewByWorkSpace(processMetaDataId, workSpaceId, elem) {
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = $(elem).attr("data-menu-id");
    var mainContainer = $("div.workspace-main-container", workSpaceContainer);
    var _this = $(elem);

    if (_this.closest('.ws-page-content-wrapper').hasClass('wizard')) {
        var _parent = _this.closest('.ws-page-content-wrapper'),
            _selectorId = _this.attr('id');
            _splitObj = _selectorId.split('-');
        
        if (_splitObj.length == 4) {
            _selectorId = _splitObj[0]+ '-' + _splitObj[1] + '-p-' + _splitObj[3];
            mainContainer = _parent.find('section#' + _selectorId);
        }
    }
    
    mainContainer.find("div.workspace-part").hide();
    _this.closest("ul").children().removeClass("active");
    _this.parent().addClass("active");

    if (mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").length === 0) {
        $.ajax({
            type: 'post',
            url: 'mdlayoutrender/index/' + processMetaDataId,
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
                $.cachedScript('assets/custom/addon/plugins/amcharts/amcharts/amChartMinify.js');
                $.cachedScript('middleware/assets/js/dashboard/charts_amcharts.js');
                $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/amcharts/amcharts/plugins/export/export.css"/>');
            },
            success: function(data) {
                var jsonObj = JSON.parse(data);
                if ('Html' in Object(jsonObj)) {
                    mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + jsonObj.Html + '</div>');
                } else {
                    mainContainer.empty().append(jsonObj.Html + '<div class="clearfix w-100"/>');
                }
            }
        }).done(function() {
            Core.unblockUI();
        });
    } else {
        mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").show();
    }
}

function subdataViewByWorkSpace(processMetaDataId, workSpaceId, elem, type, parentMetaDataId) {
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = $(elem).attr("data-menu-id");
    var mainContainer = $("div.workspace-main-container", workSpaceContainer);
    var _this = $(elem);

    mainContainer.find("div.workspace-part").hide();
    _this.closest("ul").children().removeClass("active");
    _this.parent().addClass("active");
    var _sendParams = {
        workSpaceId: workSpaceId,
        workSpaceParams: $("div.ws-hidden-params", workSpaceContainer).find("input[type=hidden]").serialize(),
        dataGridDefaultHeight: getWorkSpaceMenuHeight(workSpaceContainer)
    };
    if (typeof type != 'undefined' && type != 'undefined') {
        _sendParams = {
            workSpaceId: workSpaceId,
            workSpaceParams: $("div.ws-hidden-params", workSpaceContainer).find("input[type=hidden]").serialize(),
            dataGridDefaultHeight: getWorkSpaceMenuHeight(workSpaceContainer),
            subMenu: type,
            parentMetaDataId: parentMetaDataId
        };
    }

    $.ajax({
        type: 'post',
        url: 'mdobject/dataview/' + processMetaDataId,
        data: _sendParams,
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $('.col-md-right-dynamic').empty().append(data);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
    return;

    if (mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").length) {
        mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").show();
    }
}

function getWorkSpaceMenuHeight(workSpaceContainer) {
    var _height = workSpaceContainer.find('.page-sidebar-menu').height() - 85;
    return (_height < 400 ? 400 : _height);
}

function workSpaceDirectURL(url, target, parameter, urlType, windowId, metaDataId, workSpaceId, elem) {
    var $this = $(elem);
    var $workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = $this.attr("data-menu-id");
    var $mainContainer = $("div.workspace-main-container", $workSpaceContainer);
    var _selectedRow = $this.attr('data-selected-row');

    $mainContainer.find("div.workspace-part").hide();
    $this.closest("ul").children().removeClass("active");
    $this.parent().addClass("active");

    if ($mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").length == 0 || target == '_blank') {

        if (urlType == 'internal') {

            $.ajax({
                type: 'post',
                url: 'mdworkspace/paramsToUrl',
                data: { workSpaceId: workSpaceId, metaDataId: metaDataId, selectedRow: _selectedRow },
                dataType: 'json',
                async: false,
                beforeSend: function() {
                    var splitUrl = url.split('/');
                    if (typeof splitUrl[0] !== 'undefined' && typeof splitUrl[1] !== 'undefined' && splitUrl[0].toLowerCase() == 'appmenu' && splitUrl[1].toLowerCase() == 'sub') {
                        $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/css/vr-card-menu.css"/>');
                    }
                },
                success: function(paramData) {

                    var paramResolveData = [];
                    var urlLower = url.toLowerCase();
                    
                    paramResolveData.push(
                        {name: 'metaDataId', value: metaDataId}, 
                        {name: 'workSpaceId', value: workSpaceId}, 
                        {name: 'isWorkFlow', value: '1'}, 
                        {name: 'selectedRow', value: _selectedRow}, 
                        {name: 'workSpaceParams', value: $workSpaceContainer.find('div.ws-hidden-params input[type=hidden]').serialize()}
                    );

                    $.each(paramData, function(i, v) {
                        if ($("input[name='workSpaceParam[" + v.FIELD_PATH + "]']", windowId).length > 0) {
                            paramResolveData.push({
                                name: v.PARAM_PATH,
                                value: $("input[name='workSpaceParam[" + v.FIELD_PATH + "]']", windowId).val()
                            });
                        } else if (v.FIELD_PATH == null && v.PARAM_PATH != null) {

                            var customParam = v.PARAM_PATH;

                            if (customParam.indexOf('@customParam&') !== -1) {
                                customParam = customParam.replace('@customParam&', '');
                                var customParamArr = customParam.split('&');

                                for (var j = 0; j < customParamArr.length; j++) {

                                    var customParamPath = customParamArr[j].split('=');

                                    paramResolveData.push({
                                        name: customParamPath[0],
                                        value: customParamPath[1]
                                    });
                                }
                            }
                        }
                    });

                    if (urlLower == 'mdasset/renderconnectionmobi') {
                        $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/css/mobi/style.css"/>');
                        $.ajax({
                            type: 'post',
                            url: url,
                            data: { dataType: 'json', selectedRow: _selectedRow },
                            async: false,
                            dataType: 'json',
                            beforeSend: function() {
                                Core.blockUI({animate: true});
                            },
                            success: function(response) {
                                $mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + response.Html + '<div class="clearfix w-100"></div></div>');
                                Core.unblockUI();
                            },
                            error: function() {
                                alert('Error');
                            }
                        }).done(function() {
                            Core.initAjax($mainContainer);
                        });
                    } else if (urlLower == 'ntrentrustmentedit') {
                        $.ajax({
                            type: 'post',
                            url: 'mddoc/ntrEntrustmentEditForm',
                            data: { selectedRow: _selectedRow },
                            async: false,
                            dataType: 'json',
                            beforeSend: function() {
                                Core.blockUI({animate: true});
                            },
                            success: function(response) {
                                $mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + response.html + '<div class="clearfix w-100"></div></div>');
                                Core.unblockUI();
                            },
                            error: function(jqXHR, exception) {
                                var msg = '';
                                if (jqXHR.status === 0) {
                                    msg = 'Not connect.\n Verify Network.';
                                } else if (jqXHR.status == 404) {
                                    msg = 'Requested page not found. [404]';
                                } else if (jqXHR.status == 500) {
                                    msg = 'Internal Server Error [500].';
                                } else if (exception === 'parsererror') {
                                    msg = 'Requested JSON parse failed.';
                                } else if (exception === 'timeout') {
                                    msg = 'Time out error.';
                                } else if (exception === 'abort') {
                                    msg = 'Ajax request aborted.';
                                } else {
                                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                }

                                PNotify.removeAll();
                                new PNotify({
                                    title: 'Error',
                                    text: msg,
                                    type: 'error',
                                    sticker: false
                                });
                                Core.unblockUI();
                            }
                        }).done(function() {
                            Core.initAjax($mainContainer);
                        });
                    } else if (urlLower == 'government/omsmeeting') {
                        if (typeof isMultiCalendar === 'undefined') {
                            $.getScript(URL_APP + 'assets/custom/gov/multiselect.js').done(function() {
                                $.ajax({
                                    type: 'post',
                                    url: 'government/omsMeeting',
                                    data: { selectedRow: _selectedRow },
                                    async: false,
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({animate: true});
                                    },
                                    success: function(response) {
                                        $mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + response.Html + '<div class="clearfix w-100"></div></div>');
                                        Core.unblockUI();
                                    },
                                    error: function(jqXHR, exception) {
                                        var msg = '';
                                        if (jqXHR.status === 0) {
                                            msg = 'Not connect.\n Verify Network.';
                                        } else if (jqXHR.status == 404) {
                                            msg = 'Requested page not found. [404]';
                                        } else if (jqXHR.status == 500) {
                                            msg = 'Internal Server Error [500].';
                                        } else if (exception === 'parsererror') {
                                            msg = 'Requested JSON parse failed.';
                                        } else if (exception === 'timeout') {
                                            msg = 'Time out error.';
                                        } else if (exception === 'abort') {
                                            msg = 'Ajax request aborted.';
                                        } else {
                                            msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                        }

                                        PNotify.removeAll();
                                        new PNotify({
                                            title: 'Error',
                                            text: msg,
                                            type: 'error',
                                            sticker: false
                                        });
                                        Core.unblockUI();
                                    }
                                }).done(function() {
                                    Core.initAjax($mainContainer);
                                });
                            });
                        } else {
                            $.ajax({
                                type: 'post',
                                url: 'government/omsMeeting',
                                data: { selectedRow: _selectedRow },
                                async: false,
                                dataType: 'json',
                                beforeSend: function() {
                                    Core.blockUI({animate: true});
                                },
                                success: function(response) {
                                    $mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + response.Html + '<div class="clearfix w-100"></div></div>');
                                    Core.unblockUI();
                                },
                                error: function(jqXHR, exception) {
                                    var msg = '';
                                    if (jqXHR.status === 0) {
                                        msg = 'Not connect.\n Verify Network.';
                                    } else if (jqXHR.status == 404) {
                                        msg = 'Requested page not found. [404]';
                                    } else if (jqXHR.status == 500) {
                                        msg = 'Internal Server Error [500].';
                                    } else if (exception === 'parsererror') {
                                        msg = 'Requested JSON parse failed.';
                                    } else if (exception === 'timeout') {
                                        msg = 'Time out error.';
                                    } else if (exception === 'abort') {
                                        msg = 'Ajax request aborted.';
                                    } else {
                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                    }

                                    PNotify.removeAll();
                                    new PNotify({
                                        title: 'Error',
                                        text: msg,
                                        type: 'error',
                                        sticker: false
                                    });
                                    Core.unblockUI();
                                }
                            }).done(function() {
                                Core.initAjax($mainContainer);
                            });
                        }
                        
                    } else if (urlLower == 'datamartrelationconfig') {
                        
                        var $appendElement = $('<div class="workspace-part" data-menu-id="' + menuId + '"></div>').appendTo($mainContainer);
                        dataMartRelationConfigInit(elem, metaDataId, metaDataId, paramResolveData, $appendElement);
                        
                    } else if (urlLower == 'erdconfig') {
                        
                        var $appendElement = $('<div class="workspace-part" data-menu-id="' + menuId + '"></div>').appendTo($mainContainer);
                        erdConfigInit(elem, metaDataId, metaDataId, paramResolveData, $appendElement);
                        
                    } else if (urlLower == 'easervicedatalistview') {
                        
                        var $appendElement = $('<div class="workspace-part" data-menu-id="' + menuId + '"></div>').appendTo($mainContainer);
                        eaServiceMetaRenderInit(elem, workSpaceId, metaDataId, paramResolveData, $appendElement);
                        
                    } else if (urlLower == 'easervicedataviewpivotview') {
                        
                        var $appendElement = $('<div class="workspace-part" data-menu-id="' + menuId + '"></div>').appendTo($mainContainer);
                        eaServicePivotRenderInit(elem, workSpaceId, metaDataId, paramResolveData, $appendElement);

                    } else if (urlLower === 'mdform/renderrelationkpi') {

                        $.ajax({
                            type: 'post',
                            url: 'mdform/renderRelationKpi',
                            data: { selectedRow: _selectedRow },
                            async: false,
                            dataType: 'json',
                            beforeSend: function() {
                                Core.blockUI({animate: true});
                            },
                            success: function(response) {
                                $mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + response.html + '</div>');
                                Core.unblockUI();
                            },
                            error: function(jqXHR, exception) {
                                Core.unblockUI();
                            }
                        }).done(function() {
                            Core.initAjax($mainContainer);
                        });                        
                    } else if (urlLower === 'mdbpmn/bpmn2') {
                        //alert("Энэ боломжоор ажиллахгүй болсон.");return;

                        var $appendElement = $('<div class="workspace-part" data-menu-id="' + menuId + '"></div>').appendTo($mainContainer);
                        Core.blockUI({animate: true});
                        $.cachedScript('https://unpkg.com/bpmn-js@8.9.1/dist/bpmn-modeler.development.js').done(function() { 
                            var uniqId = $(elem).closest('.workspace-main').find('div.main-action-meta').attr('data-bp-uniq-id');
                            var domainbp = $('div[data-bp-uniq-id="'+uniqId+'"]').find('input[data-path="id"]').val();
                            $.ajax({
                                type: 'post',
                                url: 'mdbpmn/bpmn2/'+domainbp,
                                data: {
                                    bpUniqId: uniqId
                                },
                                dataType: 'json',
                                beforeSend: function() {
                                    if ($("link[href='https://unpkg.com/bpmn-js@8.9.1/dist/assets/diagram-js.css']").length == 0) {
                                        $('head').append('<link rel="stylesheet" type="text/css" href="https://unpkg.com/bpmn-js@8.9.1/dist/assets/diagram-js.css"/>');
                                    }                
                                    if ($("link[href='https://unpkg.com/bpmn-js@8.9.1/dist/assets/bpmn-font/css/bpmn.css']").length == 0) {
                                        $('head').append('<link rel="stylesheet" type="text/css" href="https://unpkg.com/bpmn-js@8.9.1/dist/assets/bpmn-font/css/bpmn.css"/>');
                                    }                
                                },
                                success: function(data) {
                                    var bpcode = $("[data-path=\"code\"]", 'div[data-bp-uniq-id="' + uniqId + '"]').length ? $("[data-path=\"code\"]", 'div[data-bp-uniq-id="' + uniqId + '"]').val() : "";
                                    var bpname = $("[data-path=\"name\"]", 'div[data-bp-uniq-id="' + uniqId + '"]') ? $("[data-path=\"name\"]", 'div[data-bp-uniq-id="' + uniqId + '"]').val() : "";
                                    $appendElement.empty().append(data.html);
                                    $appendElement.find(".bpmn-header-title").text(bpcode+' '+bpname);
                                    Core.initSelect2($appendElement);                    
                                    Core.unblockUI();
                                }
                            });
                        });
                        
                    } /*else if (urlLower == 'mdprocessflow/renderworkflow') {
                        
                        var $appendElement = $('<div class="workspace-part" data-menu-id="' + menuId + '"></div>').appendTo($mainContainer);
                        renderWorkFlowInit(elem, workSpaceId, metaDataId, paramResolveData, $appendElement);

                    }*/ else {
                        
                        var dataType = 'html';
                        
                        if (urlLower.indexOf('mdpivot/dataviewpivotview') !== -1 || urlLower.indexOf('mdprocessflow/renderworkflow') !== -1) {
                            dataType = 'json';
                        }
                        
                        $.ajax({
                            type: 'post',
                            url: url,
                            data: paramResolveData,
                            dataType: dataType, 
                            async: false,
                            beforeSend: function() {
                                Core.blockUI({animate: true});
                            },
                            success: function(response) {
                                
                                if (dataType == 'json') {
                                    if (response.hasOwnProperty('html')) {
                                        var responseHtml = response.html;
                                    } else if (response.hasOwnProperty('Html')) {
                                        var responseHtml = response.Html;
                                    }
                                } else {
                                    var responseHtml = response;
                                }
                                
                                $mainContainer.append('<div class="workspace-part" data-menu-id="' + menuId + '">' + responseHtml + '<div class="clearfix w-100"></div></div>');
                                Core.unblockUI();
                            },
                            error: function() { alert('Error'); }
                            
                        }).done(function() { Core.initAjax($mainContainer); });
                    }
                },
                error: function() {
                    alert('Error');
                }
            });
        } else {
            $mainContainer.empty().append("<iframe id='iframeWindowDirectUrl' policy='ALLOW-FROM SAMEDOMAIN' src='" + url + "' width='100%' frameborder='0' scrolling='no' style='min-height:" + $(windowId).parent("div").height() + "px; overflow: hidden;' allowfullscreen></iframe>");
        }
    } else {
        $mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").show();
        $(window).trigger('resize');
    }
}

function redirectWorkSpaceByMeta(metaDataId, url, elem) {
    $.ajax({
        type: 'post',
        url: 'mdworkspace/checkWindowType',
        dataType: 'json',
        data: { metaDataId: metaDataId },
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var $dialogName = 'dialog-workspace';
            if (!$("#" + $dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo('body');
            }
            var $dialog = $("#" + $dialogName);
            var renderWindowType = data['WINDOW_TYPE'];

            $.ajax({
                type: 'post',
                url: 'mdworkspace/renderWorkSpace',
                dataType: 'json',
                data: { metaDataId: metaDataId },
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    
                    if ($("link[href='middleware/assets/theme/" + data.theme + "/css/main.v6.css']").length == 0) {
                        $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/theme/' + data.theme + '/css/main.v6.css"/>');
                    }
                    
                    if (data.theme == 'theme10') {
                        $.cachedScript("assets/custom/addon/plugins/jquery-easypiechart/jquery.easypiechart.min.js");
                        $.cachedScript("assets/custom/addon/plugins/jquery.sparkline.min.js");
                    }

                    if (renderWindowType == 'main') {

                        appMultiTabByContent({ metaDataId: metaDataId, title: data.title, type: 'workspace', content: data.html });
                        
                    } else {                

                        $dialog.empty().append(data.html);
                        $dialog.dialog({
                            cache: false,
                            resizable: true,
                            bgiframe: true,
                            autoOpen: false,
                            title: data.title,
                            width: data.dialogWidth,
                            height: data.dialogHeight,
                            modal: true,
                            close: function() {
                                $dialog.empty().dialog('destroy').remove();
                            },
                            buttons: [{
                                text: data.close_btn,
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $dialog.dialog('close');
                                }
                            }]
                        }).dialogExtend({
                            "closable": true,
                            "maximizable": true,
                            "minimizable": true,
                            "collapsable": true,
                            "dblclick": "maximize",
                            "minimizeLocation": "left",
                            "icons": {
                                "close": "ui-icon-circle-close",
                                "maximize": "ui-icon-extlink",
                                "minimize": "ui-icon-minus",
                                "collapse": "ui-icon-triangle-1-s",
                                "restore": "ui-icon-newwin"
                            }
                        });
                        $dialog.dialog('open');
                    }
                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            }).done(function() {
                Core.initAjax($dialog);
            });
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function dataViewCustomSelectableGrid(metaDataCode, chooseType, funcName, params, elem, filter, useMandatory, fillData, selected) {
    var $this = $(elem);
    var $parent = $this.closest("div.input-group");
    var accountFilter = (filter != '' ? filter : '');
    var $dialogName = 'dialog-dataview-custom-selectable';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);
    var selectedRows = $parent.find("input[type=hidden]").serializeArray();
    if (typeof selected !== 'undefined') {
        selectedRows = selected;
    }

    $.ajax({
        type: 'post',
        url: 'mdmetadata/dataViewCustomSelectableGrid',
        data: {
            metaDataCode: metaDataCode,
            chooseType: chooseType,
            params: encodeURIComponent(params),
            selectedRows: selectedRows,
            accountGlFilter: accountFilter,
            useMandatory: useMandatory,
            fillData: (typeof fillData !== 'undefined') ? fillData : ''
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {

            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1100,
                height: "auto",
                modal: true,
                closeOnEscape: isCloseOnEscape,
                close: function() {
                    $dialog.empty().dialog('close');
                },
                buttons: [{
                        text: data.addbasket_btn,
                        class: 'btn green-meadow btn-sm float-left',
                        click: function() {
                            window['basketCommonSelectableDataGrid_' + data.metaDataId]();
                        }
                    },
                    {
                        text: data.choose_btn,
                        class: 'btn blue btn-sm datagrid-choose-btn',
                        click: function() {
                            var countBasketList = $('#commonSelectableBasketDataGrid_' + data.metaDataId).datagrid('getData').total;
                            if (countBasketList > 0) {
                                var rows = $('#commonSelectableBasketDataGrid_' + data.metaDataId).datagrid('getRows');
                                var $rows = [];
                                $.each(rows, function($index, $row) {
                                    $row = dataViewSelectedRowsResolver($row);
                                    $rows.push($row);
                                });

                                window[funcName](metaDataCode, chooseType, elem, $rows);
                            }
                            $dialog.dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initDVAjax($dialog);
    });
}

function dataViewCustomGlSelectableGrid(metaDataCode, chooseType, funcName, params, elem, filter, useMandatory, fillData, uniqId) {
    var $this = $(elem);
    var $parent = $this.closest("div.input-group");
    var accountFilter = (filter != '' ? filter : '');
    var $dialogName = 'dialog-dataview-custom-selectable';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);

    var bookDate = $("input[name='glbookDate']", '#glEntryWindow_' + uniqId).val();
    if (typeof bookDate === 'undefined') {
        bookDate = $("input[name='hidden_glbookDate']", '#glEntryWindow_' + uniqId).val();
    }
    if (typeof bookDate === 'undefined') {
            bookDate = $("input[name='hidden_glbookDate']", '#glTemplateSectionProcess_' + uniqId).val();
    }    
    params = 'param[bookdate]=' + bookDate;

    $.ajax({
        type: 'post',
        url: 'mdmetadata/dataViewCustomSelectableGrid',
        data: {
            metaDataCode: metaDataCode,
            chooseType: chooseType,
            params: encodeURIComponent(params),
            selectedRows: $parent.find("input[type=hidden]").serializeArray(),
            accountGlFilter: accountFilter,
            useMandatory: useMandatory,
            fillData: (typeof fillData !== 'undefined') ? fillData : ''
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {

            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1100,
                height: "auto",
                modal: true,
                closeOnEscape: isCloseOnEscape,
                close: function() {
                    $dialog.empty().dialog('close');
                },
                buttons: [{
                        text: data.addbasket_btn,
                        class: 'btn green-meadow btn-sm float-left',
                        click: function() {
                            window['basketCommonSelectableDataGrid_' + data.metaDataId]();
                        }
                    },
                    {
                        text: data.choose_btn,
                        class: 'btn blue btn-sm datagrid-choose-btn',
                        click: function() {
                            var countBasketList = $('#commonSelectableBasketDataGrid_' + data.metaDataId).datagrid('getData').total;
                            if (countBasketList > 0) {
                                var rows = $('#commonSelectableBasketDataGrid_' + data.metaDataId).datagrid('getRows');
                                window[funcName](metaDataCode, chooseType, elem, rows);
                            }
                            $dialog.dialog('close');
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initDVAjax($dialog);
    });
}

$(document).on('click', function(e) {
    if($(e.target).hasClass('l-btn-icon pagination-next') || $(e.target).hasClass('l-btn-icon pagination-prev')) return;
    if (!$(e.target).closest('.bp-dataview-tooltip').length && $('.bp-dataview-tooltip').is(':visible')) {
        $('.bp-dataview-tooltip').addClass('d-none');
    }
});
$(document).on('click', '.combogrid-between-input', function(e) {
    if ($(e.target)[0].nodeName === 'DIV') {
        $(e.target).find('.combo-grid-autocomplete').trigger('click');
    }
});
$(document).on('select2-opening', 'select.select2', function(e, isTrigger) {
    var $this = $(this),
        isDisabledAttr = false,
        isDisabled = true,
        $relateElement = $this.prev('.select2-container:eq(0)'), 
        isCriteriaParam = (typeof $this.attr('data-criteria-param') !== 'undefined') ? true : false;

    if (typeof isTrigger === "undefined") {
        if ($relateElement.hasClass("select2-container-disabled")) {
            isDisabled = false;
        }
    } else {
        if ((isTrigger === 'notdisabled' || isTrigger == true) && $relateElement.hasClass('select2-container-disabled')) {
            isDisabledAttr = true;
        }
    }

    if ((!$this.hasClass("data-combo-set") || isCriteriaParam) && typeof $this.attr("data-row-data") !== "undefined" && isDisabled) {
        var select2 = $this.data('select2');
        var attrToJson = JSON.parse($this.attr("data-row-data"));
        var $parentForm = $this.closest('form');
        var requestType = '', _inParams = '';
        var isWithPopupCombo = $this.hasClass('bp-field-with-popup-combo');

        if (typeof $this.attr("data-in-param") !== "undefined" && $this.attr("data-in-param") != '') {
            requestType = 'linkedCombo';

            if ($this.closest("table").hasClass("bprocess-table-subdtl")) {
                var _inParam = $this.attr("data-in-param");
                var $thisChildRow = $this.closest("tr");
                var _inParamSplit = _inParam.split("|");
                var _inputLookupParam = $this.attr("data-in-lookup-param").split("|");

                for (var j = 0; j < _inParamSplit.length; j++) {
                    var _lastCombo = $thisChildRow.find("[data-path='" + _inParamSplit[j] + "']");
                    var _lastComboParent = $thisChildRow.closest("table").closest("tr").find("[data-path='" + _inParamSplit[j] + "']");
                    if (_lastCombo.length && _lastCombo.val() !== '') {
                        _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                    } else if (_lastComboParent.length && _lastComboParent.val() !== '') {
                        _inParams += _inputLookupParam[j] + '=' + _lastComboParent.val() + '&';
                    } else {
                        var _lastCombo = $parentForm.find("[data-path='" + _inParamSplit[j] + "']");
                        if (_lastCombo.length && _lastCombo.val() !== '') {
                            _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                        }
                    }
                }                
            } else if ($this.closest("table").hasClass("bprocess-table-dtl")) {
                var _inParam = $this.attr("data-in-param");
                var $thisChildRow = $this.closest("tr");
                var _inParamSplit = _inParam.split("|");
                var _inputLookupParam = $this.attr("data-in-lookup-param").split("|");

                for (var j = 0; j < _inParamSplit.length; j++) {
                    var _lastCombo = $thisChildRow.find("[data-path='" + _inParamSplit[j] + "']");
                    if (_lastCombo.length && _lastCombo.val() !== '') {
                        _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                    } else {
                        var _lastCombo = $parentForm.find("[data-path='" + _inParamSplit[j] + "']");
                        if (_lastCombo.length && _lastCombo.val() !== '') {
                            _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                        }
                    }
                }
            } else {
                var _inParam = $this.attr("data-in-param");
                var _inParamSplit = _inParam.split("|");
                var _inputLookupParam = $this.attr("data-in-lookup-param").split("|");
                for (var j = 0; j < _inParamSplit.length; j++) {
                    var _lastCombo = $parentForm.find("[data-path='" + _inParamSplit[j] + "']");
                    if (_lastCombo.length && _lastCombo.val() !== '') {
                        _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                    }
                }
            }
        }

        if (isCriteriaParam && $this.attr('data-criteria-param') != '') {
            requestType = 'linkedCombo';
            var _inParam = $this.attr('data-criteria-param');
            var _inParamSplit = _inParam.split('|');

            for (var j = 0; j < _inParamSplit.length; j++) {
                var fieldPathArr = _inParamSplit[j].split('@');
                var fieldPath = fieldPathArr[0];
                var inputPath = fieldPathArr[1];
                var fieldValue = '';

                if ($parentForm.find("[data-path='" + fieldPath + "']").length > 0) {
                    fieldValue = getBpRowParamNum($parentForm, $this, fieldPath);
                } else {
                    fieldValue = fieldPath;
                }

                _inParams += inputPath + '=' + fieldValue + '&';
            }
        }

        if (typeof $this.attr('data-criteria') !== 'undefined' && $this.attr('data-criteria') != '') {
            requestType = 'linkedCombo';
            _inParams += $this.attr('data-criteria');
        }

        $this.addClass('data-combo-set');
        
        Core.blockUI({target: $relateElement, animate: false, icon2Only: true});

        var comboDatas = [], isFixedGroupName = false, templateGreyField = '';

        $.ajax({
            type: 'post',
            async: false,
            url: 'mdwebservice/comboDataSet',
            data: {
                jsonAttr: attrToJson,
                requestType: requestType,
                inputParams: encodeURIComponent(_inParams), 
                isResponseObj: 1 
            },
            dataType: 'json',
            success: function(dataObj) {
                
                if (typeof dataObj.emptyCombo === 'undefined') {
                    
                    var data = dataObj.hasOwnProperty('list') ? dataObj.list : dataObj;
                    
                    if (isWithPopupCombo) {
                        var prevSelectedData = $this.select2('data');
                    }

                    var isMulti = $this.prop('multiple'), editVal = [];

                    if ($this.val() != '' && $this.val() != null &&
                        typeof $this.attr('data-edit-value') !== 'undefined' && $this.attr('data-edit-value') !== '') {

                        if (isMulti) {
                            editVal = $this.val();
                        } else {
                            editVal = [$this.val()];
                        }
                    }
                    
                    if (!isWithPopupCombo || isCriteriaParam) {
                        $this.empty();
                    }

                    if (!isMulti) {
                        $this.append($('<option />').val('').text(plang.get('choose')));
                    }
                    
                    if (dataObj.hasOwnProperty('isFixedGroupName')) {
                        isFixedGroupName = true;   
                    }
                    
                    if (dataObj.hasOwnProperty('templateGreyField')) {
                        templateGreyField = dataObj.templateGreyField;   
                    }
                        
                    if (isWithPopupCombo && prevSelectedData) {
                        
                        $.each(data, function() {
                            
                            var isAppend = true;
                            
                            for (var key in prevSelectedData) {
                                if (prevSelectedData[key]['id'] == this.META_VALUE_ID) {
                                    isAppend = false;
                                }
                            }
                            
                            if (isCriteriaParam && isAppend == true && $this.find('option[value="' + this.META_VALUE_ID + '"]').length) {
                                isAppend = false;
                            }
                            
                            if (isAppend) {
                                
                                if ($.inArray(this.META_VALUE_ID, editVal) != -1) {
                                    $this.append($("<option />")
                                        .val(this.META_VALUE_ID)
                                        .text(this.META_VALUE_NAME)
                                        .attr({ 'selected': 'selected', 'data-row-data': JSON.stringify(this.ROW_DATA) }));
                                } else {
                                    $this.append($("<option />")
                                        .val(this.META_VALUE_ID)
                                        .text(this.META_VALUE_NAME)
                                        .attr('data-row-data', JSON.stringify(this.ROW_DATA)));
                                }
                                comboDatas.push({
                                    id: this.META_VALUE_ID,
                                    text: this.META_VALUE_NAME
                                });
                            }
                        });
                        
                    } else {
                        
                        var isAppend = true;
                            
                        $.each(data, function() {
                            
                            isAppend = true;
                            
                            if (isCriteriaParam && $this.find('option[value="' + this.META_VALUE_ID + '"]').length) {
                                isAppend = false;
                            }
                            
                            if (isAppend) {
                                if ($.inArray(this.META_VALUE_ID, editVal) != -1) {
                                    $this.append($("<option />")
                                        .val(this.META_VALUE_ID)
                                        .text(this.META_VALUE_NAME)
                                        .attr({'selected': 'selected', 'data-row-data': JSON.stringify(this.ROW_DATA)}));
                                } else {
                                    $this.append($("<option />")
                                        .val(this.META_VALUE_ID)
                                        .text(this.META_VALUE_NAME)
                                        .attr('data-row-data', JSON.stringify(this.ROW_DATA)));
                                }
                                comboDatas.push({
                                    id: this.META_VALUE_ID,
                                    text: this.META_VALUE_NAME
                                });
                            }
                        });
                    }
                }
            },
            error: function() {
                alert("Ajax Error!");
            }
        }).done(function() {

            Core.unblockUI($relateElement);

            if (isCriteriaParam) {
                return;
            }
            
            if (isFixedGroupName) {
                $this.addClass('data-fixedgroup-combo');
            }

            if (typeof $this.attr('data-autowidth') !== 'undefined' && $this.attr('data-autowidth')) {

                $this.select2({
                    results: comboDatas,
                    allowClear: true,
                    dropdownAutoWidth: true,
                    escapeMarkup: function(markup) {
                        return markup;
                    }
                });
                $this.select2('open');

            } else {
                
                $this.select2({ 
                    results: comboDatas, 
                    closeOnSelect: false, 
                    formatResult: function(state) {
                        
                        if (templateGreyField != '') {
                            
                            var rowData = $(state.element).data('row-data');
                            
                            if (typeof rowData !== 'undefined') {
                                
                                if (typeof rowData === 'string' && rowData.indexOf('&quot;rightgreyfield') !== -1) {
                                    rowData = JSON.parse(html_entity_decode(rowData, 'ENT_QUOTES'));
                                }

                                return '<div class="d-flex flex-row"><span class="mr-1" style="white-space: nowrap;">'+state.text+'</span><span class="mr-1 text-gray"><i class="icon-price-tag2 font-size-11"></i></span><span class="text-gray overflow-hidden text-truncate" style="white-space: nowrap;">'+rowData[templateGreyField]+'</span></div>';
                            } 
                            
                        } else {
                            return state.text;
                        }
                    },
                    escapeMarkup: function(markup) {
                        return markup;
                    }, 
                    formatNoMatches: function(term) {
                        var $searchInput = $this.select2('container').find('.select2-input');
                            
                        $searchInput.off('keyup').on('keyup', function(e) {
                            
                            var noResultsLength = $('body').find('.select2-no-results:visible').length;
                            
                            $this.attr({'data-snoresult-keyup': term, 'data-snoresult-length': noResultsLength});
                            
                            if (e.keyCode == 13 && noResultsLength) {

                                $this.attr('data-snoresult-text', term);
                                $this.removeAttr('data-snoresult-keyup data-snoresult-length');
                                
                                $searchInput.val('');
                                
                                $this.find('option[value="-0"]').remove();
                                $this.append('<option value="-0">' + term + '</option>');
                                
                                var $parentDiv = $this.closest('.input-group'), 
                                    chooseType = $parentDiv.find('button[data-choosetype]').attr('data-choosetype');
                                
                                if (chooseType == 'single') {
                                    $this.select2('val', '-0'); 
                                } else {
                                    var selectedItems = $this.select2('val');
                                    selectedItems.push('-0');
                                    $this.select2('val', selectedItems); 
                                }

                                $this.trigger('searchNoResult');

                                $this.select2('close');

                                var $tbl = $this.closest('table');
                                var $tblInput = $tbl.find('tbody:eq(0) > tr > td:visible input:not([data-isdisabled], [readonly="readonly"], [readonly], readonly, [disabled="disabled"], [disabled], disabled, input.meta-name-autocomplete, input.meta-autocomplete[value!=""], .select2-focusser):visible, tbody:eq(0) > tr > td:visible select:not([readonly="readonly"], [readonly], readonly, [disabled="disabled"], [disabled], disabled):visible');
                                var cellIndex = $tblInput.index($this);

                                $tblInput.eq(cellIndex + 1).focus().select();
                            }
                        });
                        
                        return plang.get('msg_no_record_found');
                    }
                });
                
                var isTouch = (typeof isTouchEnabled === 'undefined') ? false : isTouchEnabled;
                
                if (typeof isTrigger === 'undefined' && !select2.opened() && !isTouch) {
                    $this.select2('open');
                }
            }

            if (isDisabledAttr) {
                if ($this.hasAttr('data-in-param') && $this.val()) {
                    setBpHeaderParamEnable($parentForm, $this.attr('data-path'));
                } else {
                    $this.select2('readonly', true);
                }
            }
        });
    }
});
$(document).on('select2-close', 'select.bp-field-with-popup-combo', function(e) {
    var $this = $(this);
    var $parent = $this.closest('.input-group');
    var $button = $parent.find('button');
    
    if ($this.hasAttr('data-snoresult-keyup') && $this.attr('data-snoresult-length') != '0') {

        var term = $this.attr('data-snoresult-keyup');
        var chooseType = $button.attr('data-choosetype');
        
        $this.removeAttr('data-snoresult-keyup data-snoresult-length');
        $this.attr('data-snoresult-text', term);
        
        $this.find('option[value="-0"]').remove();
        $this.append('<option value="-0">' + term + '</option>');
        
        if (chooseType == 'single') {
            $this.select2('val', '-0'); 
        } else {
            var selectedItems = $this.select2('val');
            selectedItems.push('-0');
            $this.select2('val', selectedItems); 
        }
        
        $this.trigger('searchNoResult');
    }
    
    if (typeof $this.find('option:selected') !== 'undefined') {
        var $thisParam = JSON.parse($this.attr('data-row-data'));
        if (typeof window['_selectedRows_' + $thisParam['META_DATA_ID']] === 'undefined') {
            window['_selectedRows_' +  $thisParam['META_DATA_ID']] = [];
        }
        
        $.each($this.find('option:selected'), function (oindex, orow) {
            _rowData = JSON.parse($(orow).attr('data-row-data'));
            window['_selectedRows_' + $thisParam['META_DATA_ID']].push(_rowData);
        });
    }
    
    $button.text($this.select2('data').length);
    $parent.find('button.removebtn').html('<i class="fa fa-trash"></i>');
    
    if ($this.select2('data').length > 0) {
        $parent.find('button.removebtn').show();
        $parent.find('ul.select2-choices').get(0).scrollLeft = 1000000;
    } else {
        $parent.find('button.removebtn').hide();
    }
});
$(document).on('select2-removed', 'select.bp-field-with-popup-combo', function(e) {
    var $this = $(this);
    var $parent = $this.closest('.input-group');
    var $button = $parent.find('button');
    var dataLength = $this.select2('data').length;
    
    if (dataLength) {
        $button.text(dataLength);
    } else {
        if ($button.hasAttr('data-buttontext')) {
            $button.text($button.attr('data-buttontext'));
        } else {
            $button.text('..');
        }
    }
    
    $parent.find('button.removebtn').html('<i class="fa fa-trash"></i>');
    
    if ($this.select2('data').length > 0) {
        $parent.find('button.removebtn').show();
    } else {
        $parent.find('button.removebtn').hide();
    }
    
});
$(document).on('select2-selecting', 'select.bp-field-with-popup-combo', function(e) {
    
    var $this = $(this);
    var $parent = $this.closest('.input-group');
    var $button = $parent.find('button');
    var chooseType = $button.data('choosetype');
    
    setTimeout(function() {
        $parent.find('ul.select2-choices').get(0).scrollLeft = 1000000;
    }, 1);
    
    if (chooseType == 'single') {
        $this.val('').trigger('change');
        $this.select2('close');
        $button.text(1);
        
        setTimeout(function() {
            var $tbl = $this.closest('table');
            var $tblInput = $tbl.find('tbody:eq(0) > tr > td:visible input:not([data-isdisabled], [readonly="readonly"], [readonly], readonly, [disabled="disabled"], [disabled], disabled, input.meta-name-autocomplete, input.meta-autocomplete[value!=""], .select2-focusser):visible, tbody:eq(0) > tr > td:visible select:not([readonly="readonly"], [readonly], readonly, [disabled="disabled"], [disabled], disabled):visible');
            var cellIndex = $tblInput.index($this);

            $tblInput.eq(cellIndex + 1).focus().select();
        }, 10);
    }
});
$(document).on('select2-open', 'select.data-fixedgroup-combo', function(e) { 
    var $this = $(this);
    var $filteredOpts = $this.find('option[data-row-data]').filter(function() {
        return $(this).attr('data-row-data').indexOf('"fixedgroupname":null') == -1;
    });
    
    if ($filteredOpts.length) {
        
        var fixedGroupName = [];
        var $results = $this.data('select2').results;
        var $parent = $results.parent();

        $filteredOpts.each(function(){
            var rowObj = JSON.parse($(this).attr('data-row-data'));
            var fixedGroupNameArr = (typeof rowObj.fixedgroupname !== 'undefined') ? (rowObj.fixedgroupname).split('|') : [];

            for (var i in fixedGroupNameArr) {

                if (fixedGroupNameArr[i]) {

                    if (fixedGroupName.hasOwnProperty(fixedGroupNameArr[i])) {
                        fixedGroupName[fixedGroupNameArr[i]] += 1;
                    } else {
                        fixedGroupName[fixedGroupNameArr[i]] = 1;
                    }
                }
            }
        });

        if ($parent.find('.select2-grouping-results').length == 0) {
            var addOption = '';

            for (var k in fixedGroupName) {
                addOption += '<li data-group="'+k+'" onclick="comboOptionByGroupName(this);"><i class="icon-users"></i> '+k+' ('+fixedGroupName[k]+')</li>';
            }

            $parent.append('<ul class="select2-grouping-results">'+addOption+'</ul>');
        }
    }
});
$(document).on('focus blur', 'select:not(.select2)', function() {
    var $this = $(this);

    if (!$this.hasClass("data-combo-set") && !$this.prop("disabled") && typeof $this.attr("data-row-data") !== "undefined") {
        var attrToJson = JSON.parse($this.attr("data-row-data"));
        var $parent = $this.parent();
        var $parentForm = $this.closest('form');
        var requestType = '', _inParams = '';
        $this.addClass("data-combo-set");
        
        if (typeof $this.attr("data-in-param") !== "undefined" && $this.attr("data-in-param") != '') {
            requestType = 'linkedCombo';

            if ($this.closest("table").hasClass("bprocess-table-dtl")) {
                var _inParam = $this.attr("data-in-param");
                var $thisChildRow = $this.closest("tr");
                var $parentRow = $this.parents('.bp-detail-row');
                var _inParamSplit = _inParam.split("|");
                var _inputLookupParam = $this.attr("data-in-lookup-param").split("|");

                for (var j = 0; j < _inParamSplit.length; j++) {
                    var _lastCombo = $thisChildRow.find("[data-path='" + _inParamSplit[j] + "']");
                    if (_lastCombo.length && _lastCombo.val() !== '') {
                        _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                    } else {
                        var $parentPath = $parentRow.find("[data-path='" + _inParamSplit[j] + "']");
                        if ($parentPath.length) {
                            if ($parentPath.val() !== '') {
                                _inParams += _inputLookupParam[j] + '=' + $parentPath.val() + '&';
                            }
                        } else {
                            var _lastCombo = $parentForm.find("[data-path='" + _inParamSplit[j] + "']");
                            if (_lastCombo.length && _lastCombo.val() !== '') {
                                _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                            }
                        }
                    }
                }
            } else {
                var _inParam = $this.attr("data-in-param");
                var _inParamSplit = _inParam.split("|");
                var _inputLookupParam = $this.attr("data-in-lookup-param").split("|");
                for (var j = 0; j < _inParamSplit.length; j++) {
                    var _lastCombo = $parentForm.find("[data-path='" + _inParamSplit[j] + "']");
                    if (_lastCombo.length && _lastCombo.val() !== '') {
                        _inParams += _inputLookupParam[j] + '=' + _lastCombo.val() + '&';
                    }
                }
            }
        }

        Core.blockUI({
            target: $parent,
            animate: false,
            icon2Only: true
        });

        var dropDownHtml = "<option value=''>- Сонгох -</option>";
        $.ajax({
            type: 'post',
            async: false,
            url: 'mdwebservice/comboDataSet',
            data: {jsonAttr: attrToJson, requestType: requestType, inputParams: encodeURIComponent(_inParams), isResponseObj: 1},
            dataType: 'json',
            success: function(data) {
                if (typeof data.emptyCombo === "undefined") {
                    $this.empty();
                    var editVal = $this.attr("data-edit-value");
                    
                    var data = data.hasOwnProperty('list') ? data.list : data;

                    $.each(data, function() {
                        if (editVal == this.META_VALUE_ID)
                            dropDownHtml += "<option selected='selected' value='" + this.META_VALUE_ID + "' data-row-data='" + JSON.stringify(this.ROW_DATA) + "'>" + this.META_VALUE_NAME + "</option>";
                        else
                            dropDownHtml += "<option value='" + this.META_VALUE_ID + "' data-row-data='" + JSON.stringify(this.ROW_DATA) + "'>" + this.META_VALUE_NAME + "</option>";
                    });
                }
            },
            error: function(xhr, status, error) {
                alert("Ajax Error!");
            }
        }).done(function() {
            $this.html(dropDownHtml);
            Core.unblockUI($parent);
        });
    }
});
function checkPassPathDataViewProcessMap(mainMetaDataId, processMetaDataId, rows, fncArguments) {
    var $dialogName = 'dialog-meta-password';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName), html = [];
    
    html.push('<div class="col-md-12 xs-form">');
        html.push('<form class="form-horizontal" id="metaPasswordForm" method="post" autocomplete="off">');
            html.push('<input type="password" autocomplete="password" style="display:none"/>');
            html.push('<input type="password" autocomplete="username" style="display:none"/>');
            html.push('<div class="form-group row">');
                html.push('<label class="col-form-label col-md-3" for="passwordHash">'+plang.get('META_00094')+'</label>');
                html.push('<div class="col-md-9">');
                    html.push('<div class="input-group">');
                        html.push('<input type="password" id="passwordHash" name="passwordHash" class="form-control form-control-sm" autocomplete="off" required="required"/>');
                        html.push('<span class="input-group-btn">');
                            html.push('<button class="btn default btn-sm mr0" type="button" onclick="metaPasswordShow(this);"><i class="fa fa-eye"></i></button>');
                        html.push('</span>');
                    html.push('</div>');
                html.push('</div>');
            html.push('</div>');
        html.push('</form>');
    html.push('</div>');
    
    $dialog.empty().append(html.join(''));
    $dialog.dialog({
        cache: false,
        resizable: true,
        bgiframe: true,
        autoOpen: false,
        title: plang.get('login_btn'),
        width: 500,
        height: "auto",
        modal: true,
        open: function() {
            $(this).keypress(function(e) {
                if (e.keyCode == $.ui.keyCode.ENTER) {
                    $(this).parent().find(".ui-dialog-buttonpane button:first").trigger("click");
                }
            });
        },
        close: function() {
            $dialog.empty().dialog('destroy').remove();
        },
        buttons: [{
                text: plang.get('login_btn'),
                class: 'btn btn-sm green-meadow',
                click: function() {
                    
                    $("#metaPasswordForm", "#" + $dialogName).validate({ errorPlacement: function() {} });

                    if ($("#metaPasswordForm", "#" + $dialogName).valid()) {
                        $.ajax({
                            type: 'post',
                            url: 'mdmeta/checkPassPathDataViewProcessMap',
                            data: {
                                mainMetaDataId: mainMetaDataId, 
                                processMetaDataId: processMetaDataId, 
                                passwordHash: $("#passwordHash").val(), 
                                rows: rows
                            },
                            dataType: 'json',
                            beforeSend: function() {
                                Core.blockUI({message: 'Loading...', boxed: true});
                            },
                            success: function(dataCheck) {
                                
                                PNotify.removeAll();

                                if (dataCheck.status == 'success') {
                                    
                                    $dialog.dialog('close');
                                    
                                    var fncElem = fncArguments[0];
                                    $(fncElem).removeAttr('data-p-path');
                                    
                                    window['gridDrillDownLink'].apply(null, fncArguments);
                                    
                                } else {
                                    new PNotify({
                                        title: dataCheck.status,
                                        text: dataCheck.message,
                                        type: dataCheck.status,
                                        addclass: pnotifyPosition,
                                        sticker: false
                                    });
                                }
                                
                                Core.unblockUI();
                            },
                            error: function() { alert('Error'); }
                        });
                        clearConsole();
                    }
                }
            },
            {
                text: plang.get('close_btn'),
                class: 'btn blue-madison btn-sm',
                click: function() {
                    $dialog.dialog('close');
                }
            }
        ]
    });
    $dialog.dialog('open');
}
function gridDrillDownLink(elem, metaDataCode, metaTypeCode, clinkMetaData, criteria, metaDataId, fieldPath, linkMetaDataId, drillDownDefaultCriteria, isNewTab, isThisRowData, dialogWidth, dialogHeight) {
    var _mainMetaDataId = metaDataId;
    var mainMetaTypeCode = metaTypeCode;
    var fncArguments = arguments;
    
    setTimeout(function() {
        var drillMetaDataId = linkMetaDataId;
        var drillDvMetaDataId = _mainMetaDataId;
        var isDrillMainMetaDataId = '1';
        var selectDvId = metaDataId;
        var $this = $(elem);
        var isElemRowData = (typeof isThisRowData == 'undefined' ? false : true);
        var selectedRow = [];
        var isPassPath = false;
        var passPath = '';

        if ($this.closest('div[data-path-uniqid]').length && $this.closest('div[data-path-uniqid]').attr('data-path-uniqid') != '') {
            selectDvId = $this.closest('div[data-path-uniqid]').attr('data-path-uniqid');
        }

        if (!isElemRowData) {
            var rows = getDataViewSelectedRows(selectDvId);
            if (rows.length < 1 && typeof $this.attr('data-rowdata') !== 'undefined') {
                rows[0] = JSON.parse($this.attr('data-rowdata'));
                selectedRow = rows[0];
            }
            
        } else {
            var rows = [];
            rows[0] = JSON.parse($this.attr('data-row'));
        }

        if (selectedRow.length < 1 && rows.hasOwnProperty(0)) {
            selectedRow = rows[0];
        }
        
        if (typeof criteria !== 'undefined' && criteria != '' && parseInt(clinkMetaData) > 0) {
            
            var doNotMatchMessage = 'Нөхцөл тохирохгүй байна.';
            var ticketCriteria = true;
            
            selectedRow = rows;

            if (parseInt(clinkMetaData) > 1) {
                
                var drillDownDefaultCriteriaObj = drillDownDefaultCriteria.split(',');
                var evalcriteriaRoot = criteria.toString().split(',');
                
                linkMetaDataId = linkMetaDataId.split(',');
                metaTypeCode = metaTypeCode.split(',');

                if (typeof selectedRow != 'undefined') {
                    ticketCriteria = false;
                    selectedRow = selectedRow[0];

                    $.each(evalcriteriaRoot, function(cindex, evalcriteria) {
                        evalcriteria = evalcriteria.toLowerCase();

                        $.each(selectedRow, function(index, row) {
                            if (evalcriteria.indexOf(index) > -1) {
                                row = (row === null) ? '' : row;
                                var regex = new RegExp('\\b' + index + '\\b', 'g');
                                evalcriteria = evalcriteria.replace(regex, "'" + row.toString().toLowerCase() + "'");
                            }
                        });

                        try {
                            if (eval(evalcriteria)) {
                                drillMetaDataId = linkMetaDataId[cindex];
                                drillDvMetaDataId = linkMetaDataId[cindex];
                                drillDownDefaultCriteria = drillDownDefaultCriteriaObj[cindex];
                                
                                metaTypeCode = (typeof metaTypeCode[cindex] !== 'undefined') ? metaTypeCode[cindex] : ((typeof metaTypeCode[0] !== 'undefined') ? metaTypeCode[0] : metaTypeCode);
                                mainMetaTypeCode = metaTypeCode;
                                isDrillMainMetaDataId = '2';
                                ticketCriteria = true;
                                return false;
                            }
                        } catch (err) {}
                    });
                }
                
            } else {
                
                var evalcriteria = criteria.toString();
                
                if (evalcriteria.indexOf('#') !== -1) {
                    var criteriaArr = evalcriteria.split('#');
                    evalcriteria = (criteriaArr[0]).trim();
                    
                    if (criteriaArr.hasOwnProperty(1) && (criteriaArr[1]).trim()) {
                        doNotMatchMessage = plang.get((criteriaArr[1]).trim());
                    }
                }
                
                if (typeof selectedRow != 'undefined') {
                    selectedRow = selectedRow[0];
                    evalcriteria = evalcriteria.toLowerCase();
                    
                    $.each(selectedRow, function(index, row) {
                        if (evalcriteria.indexOf(index) > -1) {
                            row = (row === null) ? '' : row;
                            var regex = new RegExp('\\b' + index + '\\b', 'g');
                            evalcriteria = evalcriteria.replace(regex, "'" + row.toString().toLowerCase() + "'");
                        }
                    });
                }
                
                if ($this.hasAttr('data-p-path') && $this.attr('data-p-path') != '') {
                    isPassPath = true;
                    passPath = $this.attr('data-p-path');
                }
                
                try {
                    if (!eval(evalcriteria)) {
                        ticketCriteria = false;
                    }
                } catch (err) {}
            }

            if (!ticketCriteria) {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: doNotMatchMessage,
                    type: 'warning',
                    addclass: pnotifyPosition,
                    sticker: false
                });
                return;
            }
            
        } else {
            
            drillDvMetaDataId = linkMetaDataId;
            isDrillMainMetaDataId = '0';
            
            if ($this.hasAttr('data-p-path') && $this.attr('data-p-path') != '') {
                isPassPath = true;
                passPath = $this.attr('data-p-path');
            }
        }
        
        if (isPassPath) {
            checkPassPathDataViewProcessMap(metaDataId, drillMetaDataId, rows, fncArguments);
            return;
        }
        
        if (mainMetaTypeCode == 'workspace') {

            var selectedRow = [];

            if (rows.hasOwnProperty(0)) {
                selectedRow = rows[0];
            } else {
                var rowIndex = $(elem).closest('tr').attr('datagrid-row-index');
                selectedRow = rows[rowIndex];
            }

            runWorkSpaceWithDataView(elem, metaDataId, drillMetaDataId, true, selectedRow, false, true);

            return;
        }

        if (mainMetaTypeCode == 'bookmark') {

            var selectedRow = rows, firstRow = selectedRow[0], criteriaUrl = criteria;
            criteria = (criteria != '') ? criteria.toLowerCase() : '';

            if (metaDataId == '1563516220358') {
                var $rowIndex = parseInt($(elem).closest('tr').attr('datagrid-row-index')) + 1;
                selectedRow[0]['rowNumber'] = $rowIndex;
            }

            if (criteria == 'contenthtml') {

                var contentHtmlName = '';

                if (typeof firstRow[fieldPath] !== 'undefined') {
                    contentHtmlName = firstRow[fieldPath];
                }

                if (typeof isAppMultiTab !== 'undefined' && isAppMultiTab) {
                    var tabMainContainer = $("div.card-multi-tab > div.tabbable-line > ul.card-multi-tab-navtabs");
                    if (tabMainContainer.find("a[href='#app_tab_" + firstRow.contentid + "']").length > 0) {
                        tabMainContainer.find("a[href='#app_tab_" + firstRow.contentid + "']").tab('show');
                        Core.unblockUI();
                    } else {
                        htmlContentOpener(elem, 1, metaDataId, firstRow, contentHtmlName, function(dataHtml) {
                            appMultiTabByContent({ metaDataId: dataHtml.contentId, title: (dataHtml.Title !== '' ? dataHtml.Title : contentHtmlName), type: 'content', content: '<div id="contenthtml-tab-' + dataHtml.contentId + '">' + dataHtml.html + '</div>' });
                        });
                    }
                } else {
                    htmlContentOpener(elem, 1, metaDataId, firstRow, contentHtmlName);
                }

                return;
            } else if (criteria == 'datapermission') {
                umDataPermissionRender(firstRow);
                return;
            } else if (criteria == 'editgeneralledger') {
                urlRedirectByDataView(elem, drillMetaDataId, 'mdgl/edit_entry', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'viewgeneralledger') {
                urlRedirectByDataView(elem, drillMetaDataId, 'mdgl/view_entry', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'documentviewer') {
                urlRedirectByDataView(elem, drillMetaDataId, 'mddoc/documentviewer', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'documentviewerclean') {
                urlRedirectByDataView(elem, drillMetaDataId, 'mddoc/documentviewerclean', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'documentarchiveviewer') {
                urlRedirectByDataView(elem, drillMetaDataId, 'mddoc/documentarchiveviewer', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'laweditviewer') {
                
                if (typeof isGovAddonScript !== 'undefined') {
                    weblinkdoctoHtml(firstRow.id, _mainMetaDataId, firstRow, drillDownDefaultCriteria);
                } else {
                    $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                        weblinkdoctoHtml(firstRow.id, _mainMetaDataId, firstRow, drillDownDefaultCriteria);
                    });
                }
                
                return;
            } else if (criteria == 'cmssubjectweblink') {
                urlRedirectByDataView(elem, drillMetaDataId, 'cmssubjectweblink', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'eaobjectweblink') {
                urlRedirectByDataView(elem, drillMetaDataId, 'eaobjectweblink', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'attendance') {
                urlRedirectByDataView(elem, drillMetaDataId, 'contentui/attendance', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            }  else if (criteria == 'subject') {
                urlRedirectByDataView(elem, drillMetaDataId, 'contentui/subject', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'mdproc/view') {
                urlRedirectByDataView(elem, drillMetaDataId, 'mdproc/view', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                return;
            } else if (criteria == 'corp/invoice') {
                var paramObject = qryStrToObj(drillDownDefaultCriteria);
                if (typeof isProjectAddonScript === 'undefined') {
                    $.getScript(URL_APP + 'projects/assets/custom/js/script.js').done(function() {
                        corpInvoice(elem, _mainMetaDataId, _mainMetaDataId, firstRow, paramObject);
                    });
                } else {
                    corpInvoice(elem, _mainMetaDataId, _mainMetaDataId, firstRow, paramObject);
                }
                return;
            } else {
                if (drillMetaDataId == '1545472009546823') {
                    urlRedirectByDataView(elem, drillMetaDataId, 'mddoc/documentviewer', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                } else if (drillMetaDataId == '1565418788121288') {
                    urlRedirectByDataView(elem, drillMetaDataId, 'mddoc/previewersfile', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                } else if (drillMetaDataId == '1570170226232110') {
                    urlRedirectByDataView(elem, drillMetaDataId, 'mdpivot/dataViewPivotView', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                } else if (drillMetaDataId == '1571207004844') {
                    urlRedirectByDataView(elem, drillMetaDataId, 'mdgl/budgetConnectGL', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                } else if (drillMetaDataId == '1674665006194021') {
                    urlRedirectByDataView(elem, drillMetaDataId, 'mdpreview/ecmContentHtmlDiffViewer', '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                } else if (drillMetaDataId == '1564724056094919') {
                    treeLayoutContentRender({selectedRow: JSON.stringify(firstRow)});
                } else if (drillMetaDataId == '16184521851581') {
                    var paramObject = qryStrToObj(drillDownDefaultCriteria);
                    pfWfmTransition(elem, drillMetaDataId, drillMetaDataId, firstRow, paramObject);
                } else {
                    urlRedirectByDataView(elem, drillMetaDataId, criteriaUrl, '_self', _mainMetaDataId, drillDownDefaultCriteria, '', firstRow);
                }
                return;
            }
        }

        var mandatoryCriteriaParams = {}, defaultCriteriaParams = {};

        if ($("form.mandatory-criteria-form-" + metaDataId + ":not(.dv-notshowcriteria-form)").find("input[data-path]").length) {
            $("form.mandatory-criteria-form-" + metaDataId + ":not(.dv-notshowcriteria-form)").find("input[data-path]").each(function() {
                var $thisField = $(this);
                mandatoryCriteriaParams[$thisField.attr('data-path')] = $thisField.val();
            });
        }

        if ($("form#default-criteria-form", 'div#object-value-list-' + metaDataId).find("input[data-path]").length) {
            $("form#default-criteria-form", 'div#object-value-list-' + metaDataId).find("input[data-path]").each(function() {
                var $thisField = $(this);
                defaultCriteriaParams[$thisField.attr('data-path')] = $thisField.val();
            });
        }

        switch (mainMetaTypeCode) {

            case 'process':
                drillDownTransferProcessAction('transferProcessAction', '1', '', '', _mainMetaDataId, drillMetaDataId, 'processCriteria', '', elem, { callerType: metaDataCode, isDrillDown: true }, undefined, undefined, selectedRow);
                return;
                break;

            case 'report_template':

                var selectedRow = [];
                var rows = getDataViewSelectedRowsByRow(elem);

                if (rows.hasOwnProperty(0)) {
                    selectedRow = rows[0];
                } else {
                    var rowIndex = $(elem).closest('tr').attr('datagrid-row-index');
                    selectedRow = rows[rowIndex];
                }

                var selectedRows = [];
                selectedRows[0] = selectedRow;

                var print_options = {
                    numberOfCopies: '1',
                    isPrintNewPage: '1',
                    isShowPreview: '1',
                    isPrintPageBottom: '0',
                    isSettingsDialog: '0',
                    isPrintPageRight: '0',
                    isPrintSaveTemplate: '0',
                    pageOrientation: 'portrait',
                    paperInput: 'portrait',
                    pageSize: 'letter',
                    printType: '1col',
                    templateMetaId: drillMetaDataId,
                    queryStrCriteria: drillDownDefaultCriteria
                };
                callTemplate(selectedRows, metaDataId, print_options);

                return;
                break;

            case 'statement':

                var $dialogName = 'dialog-dv-statement-' + getUniqueId(1);
                if (!$("#" + $dialogName).length) {
                    $('<div id="' + $dialogName + '"></div>').appendTo('body');
                }
                var $dialog = $('#' + $dialogName);
                var $detachedChildren = $dialog.children().detach();
                
                var widthDialog = (typeof dialogWidth !== 'undefined' && dialogWidth) ? "'" + dialogWidth + "'" : $(window).width() - 20; 
                var heightDialog = (typeof dialogHeight !== 'undefined' && dialogHeight) ? "'" + dialogHeight + "'" : $(window).height() - 10;

                $dialog.dialog({
                    cache: false,
                    resizable: false,
                    draggable: false,
                    bgiframe: true,
                    autoOpen: false,
                    title: '',
                    width: widthDialog,
                    height: heightDialog,
                    modal: true,
                    position: { my: 'top', at: 'top+0' },
                    closeOnEscape: isCloseOnEscape,
                    open: function() {
                        $detachedChildren.appendTo($dialog);

                        $.ajax({
                            type: 'post',
                            url: 'mdstatement/fromDvToDrilldown',
                            data: {
                                statementId: drillMetaDataId,
                                params: drillDownDefaultCriteria
                            },
                            dataType: 'json',
                            beforeSend: function() {
                                Core.blockUI({message: 'Loading...', boxed: true});
                            },
                            success: function(data) {
                                if (data.status == 'success') {
                                    $dialog.dialog('option', 'title', data.title);
                                    $dialog.empty().append(data.html);
                                } else {
                                    $dialog.dialog('close');
                                    PNotify.removeAll();
                                    new PNotify({
                                        title: data.status,
                                        text: data.message,
                                        type: data.status,
                                        sticker: false
                                    });
                                }
                            }
                        }).done(function() {
                            Core.initDVAjax($dialog);
                            Core.unblockUI();
                        });
                    },
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: plang.get('close_btn'),
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                });
                $dialog.dialog('open');

                return;
                break;
            
            case 'package' : 
                var queryParams = {
                    metaDataId: drillDvMetaDataId,
                    fieldPath: fieldPath,
                    isDrillMainMetaDataId: isDrillMainMetaDataId,
                    defaultCriteriaParams: JSON.stringify(defaultCriteriaParams),
                    drillDownDefaultCriteria: drillDownDefaultCriteria,
                    addonJsonParam: JSON.stringify(mandatoryCriteriaParams),
                    uriParams: JSON.stringify(mandatoryCriteriaParams),
                    rowData: (!isElemRowData) ? getDataViewSelectedRowByIndex(metaDataId) : rows[0]
                };
                
                $.ajax({
                    type: 'post',
                    url: 'mdobject/package/' + drillMetaDataId + '/json',
                    data: queryParams,
                    dataType: 'json',
                    beforeSend: function() {
                        Core.blockUI({message: 'Loading...', boxed: true});
                    },
                    success: function(dataHtml) {

                        if (typeof isNewTab !== 'undefined' && (isNewTab === true || isNewTab == 'newrender')) {

                            appMultiTabByContent({ metaDataId: drillMetaDataId, title: (typeof dataHtml.title !== 'undefined') ? dataHtml.title : dataHtml.Title, type: 'package', content: (typeof dataHtml.html !== 'undefined') ? dataHtml.html : dataHtml.Html });

                        } else {

                            var $dialogName = 'dialog-drilldown-dataview-' + dataHtml.metaDataId;
                            if (!$("#" + $dialogName).length) {
                                $('<div id="' + $dialogName + '"></div>').appendTo('body');
                            }
                            var $dialog = $('#' + $dialogName);
                            
                            var widthDialog = (typeof dialogWidth !== 'undefined' && dialogWidth) ? dialogWidth : 1200; 
                            var heightDialog = (typeof dialogHeight !== 'undefined' && dialogHeight) ? dialogHeight : ($('#object-value-list-' + metaDataId).height() > 200) ? 'auto' : 500;
                            
                            $dialog.empty().append('<div class="col-md-12" id="object-value-list-' + linkMetaDataId + '">' + dataHtml.Html + '</div>');
                            $dialog.dialog({
                                cache: false,
                                resizable: true,
                                bgiframe: true,
                                autoOpen: false,
                                title: dataHtml.Title,
                                height: heightDialog,
                                width: widthDialog,
                                maxHeight: heightDialog,
                                modal: true,
                                position: { my: 'top', at: 'top+50' },
                                close: function() {
                                    $dialog.empty().dialog('destroy').remove();
                                },
                                buttons: [{
                                    text: dataHtml.close_btn,
                                    class: 'btn blue-madison btn-sm',
                                    click: function() {
                                        $dialog.dialog('close');
                                    }
                                }]
                            }).dialogExtend({
                                "closable": true,
                                "maximizable": true,
                                "minimizable": true,
                                "collapsable": true,
                                "dblclick": "maximize",
                                "minimizeLocation": "left",
                                "icons": {
                                    "close": "ui-icon-circle-close",
                                    "maximize": "ui-icon-extlink",
                                    "minimize": "ui-icon-minus",
                                    "collapse": "ui-icon-triangle-1-s",
                                    "restore": "ui-icon-newwin"
                                },
                                maximize: function() {
                                    $('#objectdatagrid-' + dataHtml.metaDataId).datagrid('resize');
                                },
                                restore: function() {
                                    $('#objectdatagrid-' + dataHtml.metaDataId).datagrid('resize');
                                }
                            });

                            Core.initAjax($dialog);
                            $dialog.dialog('open');

                            $dialog.find('.div-objectdatagrid-' + linkMetaDataId).addClass('pl0 pr0');
                            $dialog.find('#object-value-list-' + linkMetaDataId).addClass('pl0 pr0');
                        }

                        Core.unblockUI();
                    },
                    error: function() { alert('Error'); }
                });
                break;
            
            default:

                var dataGridLink = window['objectdatagrid_' + drillMetaDataId];

                if (typeof dataGridLink !== 'undefined' && (typeof isNewTab !== 'undefined' && isNewTab !== 'newrender')) {
                
                    try {
                            
                        var opts = dataGridLink.datagrid('options');
                        var dvSearchParam = opts.queryParams;
                        
                        dvSearchParam['drillDownDefaultCriteria'] = JSON.stringify(qryStrToObj(drillDownDefaultCriteria));

                        appMultiTabOpenTab(drillMetaDataId);
                        dataViewLoadByElement(dataGridLink, dvSearchParam);
                        
                        var offsetTop = $('#object-value-list-' + drillMetaDataId).offset().top;
                        
                        if (offsetTop > 300) {
                            $('html, body').animate({
                                scrollTop: offsetTop
                            }, 500);
                        }
                        
                        return;
                        
                    } catch (e) { console.log(e); }
                }
                
                var isMainTab = false;
                var dvPostData = {
                    metaDataId: drillDvMetaDataId,
                    fieldPath: fieldPath,
                    isDrillMainMetaDataId: isDrillMainMetaDataId,
                    defaultCriteriaParams: JSON.stringify(defaultCriteriaParams),
                    drillDownDefaultCriteria: drillDownDefaultCriteria,
                    addonJsonParam: JSON.stringify(mandatoryCriteriaParams),
                    uriParams: JSON.stringify(mandatoryCriteriaParams),
                    rowData: (!isElemRowData) ? getDataViewSelectedRowByIndex(metaDataId) : rows[0], 
                    runSrcMetaId: metaDataId
                };
                
                if (typeof isNewTab !== 'undefined' && (isNewTab === true || isNewTab == 'newrender')) {
                    isMainTab = true;
                } else {
                    dvPostData['isIgnoreTitle'] = 1;
                    
                    var widthDialog = (typeof dialogWidth !== 'undefined' && dialogWidth) ? dialogWidth : 1200; 
                    var heightDialog = ($('#object-value-list-' + metaDataId).height() > 200) ? 'auto' : 500;
                    
                    if (typeof dialogHeight !== 'undefined' && dialogHeight && dialogHeight != 'auto') {
                        heightDialog = parseInt(dialogHeight);
                    }
                    
                    if (!isNumeric(widthDialog)) {
                        widthDialog = 1200;
                    }
                    
                    if (heightDialog == 'auto') {
                        dvPostData['dataGridDefaultHeight'] = 'auto';
                    }
                }

                $.ajax({
                    type: 'post',
                    url: 'mdobject/dataview/' + drillDvMetaDataId + '/0/json',
                    data: dvPostData,
                    dataType: 'json',
                    beforeSend: function() {
                        Core.blockUI({message: 'Loading...', boxed: true});
                    },
                    success: function(dataHtml) {

                        if (isMainTab) {

                            appMultiTabByContent({ metaDataId: dataHtml.metaDataId, title: typeof dataHtml.title !== 'undefined' ? dataHtml.title : dataHtml.Title, type: 'dataview', content: typeof dataHtml.html !== 'undefined' ? dataHtml.html : dataHtml.Html });

                        } else {

                            var $dialogName = 'dialog-drilldown-dataview-' + dataHtml.metaDataId;
                            if (!$("#" + $dialogName).length) {
                                $('<div id="' + $dialogName + '"></div>').appendTo('body');
                            }
                            var $dialog = $('#' + $dialogName);
                            
                            $dialog.empty().append('<div class="col-md-12" id="object-value-list-' + linkMetaDataId + '">' + dataHtml.Html + '</div>');
                            $dialog.dialog({
                                cache: false,
                                resizable: true,
                                bgiframe: true,
                                autoOpen: false,
                                title: dataHtml.Title,
                                width: widthDialog,
                                height: heightDialog,
                                modal: true,
                                position: { my: 'top', at: 'top+30' },
                                /*open: function() {
                                    setTimeout(function() {
                                        $dialog.dialog("option", "position", {my: "center", at: "center", of: window});
                                    }, 10);
                                },*/ 
                                close: function() {
                                    $dialog.empty().dialog('destroy').remove();
                                },
                                buttons: [{
                                    text: dataHtml.close_btn,
                                    class: 'btn blue-madison btn-sm',
                                    click: function() {
                                        $dialog.dialog('close');
                                    }
                                }]
                            }).dialogExtend({
                                "closable": true,
                                "maximizable": true,
                                "minimizable": true,
                                "collapsable": true,
                                "dblclick": "maximize",
                                "minimizeLocation": "left",
                                "icons": {
                                    "close": "ui-icon-circle-close",
                                    "maximize": "ui-icon-extlink",
                                    "minimize": "ui-icon-minus",
                                    "collapse": "ui-icon-triangle-1-s",
                                    "restore": "ui-icon-newwin"
                                },
                                maximize: function() {
                                    $('#objectdatagrid-' + dataHtml.metaDataId).datagrid('resize');
                                },
                                restore: function() {
                                    $('#objectdatagrid-' + dataHtml.metaDataId).datagrid('resize');
                                }
                            });

                            Core.initAjax($dialog);
                            $dialog.dialog('open');

                            //$dialog.find('#object-value-list-' + linkMetaDataId).addClass('pl0 pr0');
                        }

                        Core.unblockUI();
                    },
                    error: function() { alert('Error'); }
                });
            break;
        }
    }, 2);
}

function changeWfmStatusAjax($wfmParams, dataGrid, newWfmStatusName, isMany, elem, closeTab, isCallNextFunction) {
    
    $.ajax({
        type: 'post',
        url: 'mdobject/setRowWfmStatus',
        dataType: 'json',
        data: $wfmParams,
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            PNotify.removeAll();
            
            if (data.status === 'success') {

                if (typeof newWfmStatusName !== 'undefined' && newWfmStatusName !== '') {
                    data.message = '<strong>' + newWfmStatusName + '</strong> төлөвт шилжлээ.';
                }
                
                if ($wfmParams.hasOwnProperty('basketDvId') && $wfmParams.basketDvId) {
                    bpClearBasketByDvId($wfmParams.metaDataId);
                }
                
                if ($wfmParams.hasOwnProperty('processMetaDataId')) {
                    changeWfmStatusAfterNextRow(elem, dataGrid, $wfmParams.metaDataId, $wfmParams.processMetaDataId);
                }
                
                if (typeof dataGrid !== 'undefined' && dataGrid) {
                    dataViewReloadByElement(dataGrid);
                } else {
                    dataViewReloadByRowElement(elem);
                }
                
                ecommerceReloadFilter($wfmParams.metaDataId);

                if ($('#objectDataView_' + $wfmParams.metaDataId).find('#md-bp-left-' + $wfmParams.metaDataId).length) { } else {
                    if (typeof closeTab !== 'undefined' && closeTab !== '') {
                        if ($(elem).closest('.ui-dialog-content').length) {
                            $(elem).closest('.ui-dialog-content').dialog('close');
                        } else {
                            bpWorkSpaceClose($(elem), 'confirm');
                            backFirstContent(elem);
                        }
                    }
                }

                if (typeof customWfmStatusChangeCallback === "function") {
                    customWfmStatusChangeCallback();
                }
                
                if (typeof isCallNextFunction === "function") {
                    isCallNextFunction();
                }
            }
            new PNotify({
                title: data.status,
                text: data.message,
                type: data.status,
                sticker: false
            });

            Core.unblockUI();
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}

function changeWfmStatusAjaxSubmit($wfmParams, dataGrid, newWfmStatusName, isMany, elem, closeTab, formId) {
    $(formId).ajaxSubmit({
        type: 'post',
        url: 'mdobject/setRowWfmStatus',
        dataType: 'json',
        data: $wfmParams,
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'success') {

                if (typeof newWfmStatusName !== 'undefined' && newWfmStatusName !== '') {
                    data.message = '<strong>' + newWfmStatusName + '</strong> төлөвт шилжлээ.';
                }
                
                if ($wfmParams.hasOwnProperty('basketDvId') && $wfmParams.basketDvId) {
                    bpClearBasketByDvId($wfmParams.metaDataId);
                }

                if (typeof dataGrid !== 'undefined' && dataGrid) {
                    
                    dataViewReloadByElement(dataGrid);
                    var getDVid = formId.split('_');
                    ecommerceReloadFilter(getDVid[1]);
                    
                } else {
                    
                    var $elem = $(elem);
                    
                    if ($elem.hasAttr('data-row-element-id')) {
                        
                        var $elemParent = $elem.closest('.dropdown');
                        var $nameElement = $elemParent.find('.dropdown-toggle[data-current-status-id]');
                        
                        $nameElement.css('background-color', $wfmParams.newWfmStatusColor).html(newWfmStatusName).attr('data-current-status-id', $wfmParams.newWfmStatusid);
                        
                    } else {
                        dataViewReloadByRowElement(elem);
                    }
                }

                if (typeof closeTab !== 'undefined' && closeTab !== '') {
                    if ($(elem).closest('.ui-dialog-content').length) {
                        $(elem).closest('.ui-dialog-content').dialog('close');
                    } else {
                        backFirstContent(elem);
                    }
                }
            }
            new PNotify({
                title: data.status,
                text: data.message,
                type: data.status,
                sticker: false
            });

            Core.unblockUI();
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}

function changeWfmStatusId(element, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName, signerParams, changeAssign, directlyChangeStatus, $uniqId, processMetaDataId, isMany, isProcessCall, nextProcessId, isdescrequired, closeTab, isActivity, wfmuseprocesswindow, isCallNextFunction, wfmFormNotSubmit, wfmIsDesc, isNotConfirm) {
    
    /**
     * @description Nomin-Erdenii shaardlagaar hiiw.
     * @author Ulaankhuu Ts
     * @date 2019-05-30 17:47
     */
    if (wfmStatusId == '9584811') {
        dataViewCustomSelectableGrid('sysUmUserListWFM', 'multi', 'changeDirectWfmAssign_' + metaDataId, '', this, '', '1', 'wfmRuleId=1');
        return;
    }

    Core.blockUI({message: 'Loading...', boxed: true});
    
    if (typeof signerParams === 'undefined') {
        signerParams = '';
    }

    if (typeof isNotConfirm === 'undefined') {
        var isNotConfirm = '';
    }
    
    var $element = $(element);
    
    _changeWfmStatusNextRow = {};
    
    if ($element.hasAttr('data-isshowprevnext') && $element.attr('data-isshowprevnext') == '1') {
        var $bpParent = $element.closest('[data-process-id]');
        _changeWfmStatusNextRowParams = {
            mainMetaDataId: metaDataId, 
            processMetaDataId: $bpParent.attr('data-process-id'), 
            element: element, 
            params: '', 
            dialog: $bpParent.closest('.ui-dialog-content'), 
            parentCaller: 'transferProcessAction', 
            batchNumber: ''
        };
    } 
        
    setTimeout(function() {
        
        var $dialogName = 'dialog-changeWfmStatus-' + metaDataId, basketDvId = null;
            
        if ($element.hasAttr('data-basketdvid') && $element.attr('data-basketdvid')) {
            basketDvId = $element.attr('data-basketdvid');
            var rows = getRowsDataView(basketDvId);  
        } else {
            if ($element.hasAttr('data-row-element-id')) {
                var rows = {};
                rows[0] = {
                    id: $element.attr('data-row-element-id'), 
                    wfmstatusid: $element.attr('data-current-status-id')
                };
            } else {
                var rows = getDataViewSelectedRows(metaDataId);  
            }
        }
        
        if (!rows.hasOwnProperty(0)) {
            var rows = getDataViewSelectedRowsByRow(element);
            if (!rows.hasOwnProperty(0)) {
                if ($(element).attr('data-rowdata') !== 'undefined' && $(element).attr('data-rowdata')) {
                    rows[0] = JSON.parse(decodeURIComponent($(element).attr('data-rowdata')));
                } else {
                    rows[0] = JSON.parse(decodeURIComponent($(element).closest('tr').attr('data-rowdata')));
                }
            } else {
                var rowIndex = $(element).closest('tr').attr('datagrid-row-index');
                rows[0] = rows[rowIndex];
            }
        }
        var row = rows[0];

        if (row && row.hasOwnProperty('pfnextstatuscolumnjson')) {
            var parameterStr = (row.parameterde).replace(/(?:\r\n|\r|\n)/g, ' ');
            var rowData = JSON.parse(parameterStr);

            for (var key in rowData) {
                row = rowData[key];
                break;
            }
            
            if (row.hasOwnProperty('newWfmStatusId')) {
                row['wfmstatusid'] = row.newWfmStatusId;
                delete row.newWfmStatusId;
            }

            row = pfNextStatusColumnJsonCleanField(row);
        }

        if (typeof isMany !== 'undefined' && isMany !== '') {
            row = rows;
        } else if (rows.length > 1) {
            isMany = '1';
            row = rows;
        }

        var newWfmStatusId = $element.attr('id');

        if (!$("#" + $dialogName).length) {
            $('<div id="' + $dialogName + '"></div>').appendTo('body');
        }

        if ((typeof wfmFormNotSubmit !== 'undefined' && wfmFormNotSubmit == '1') 
            || ($element.hasAttr('data-is-maintabclose') && $element.attr('data-is-maintabclose') == '1')) {
            closeTab = 1;
        }

        if (typeof directlyChangeStatus !== 'undefined' && directlyChangeStatus != 1) {
            var _wfmParams = {
                metaDataId: metaDataId,
                refStructureId: refStructureId,
                dataRow: row,
                description: '',
                wfmStatusId: wfmStatusId,
                newWfmStatusid: wfmStatusId,
                signerParams: signerParams,
                newWfmStatusName: newWfmStatusName,
                newWfmStatusColor: newWfmStatusColor,
                isMany: isMany, 
                processMetaDataId: (typeof processMetaDataId !== 'undefined' && processMetaDataId != null) ? processMetaDataId : null
            };
            
            if (typeof changeAssign === 'undefined') {
                changeAssign = '';
            }

            if (typeof $uniqId !== 'undefined' && wfmFormNotSubmit != '1') {
                
                _wfmParams = {
                    metaDataId: metaDataId,
                    refStructureId: refStructureId,
                    dataRow: row,
                    description: '',
                    wfmStatusId: wfmStatusId,
                    newWfmStatusid: wfmStatusId,
                    signerParams: signerParams,
                    newWfmStatusName: newWfmStatusName,
                    newWfmStatusColor: newWfmStatusColor,
                    isMany: isMany
                };

                var processForm = $("#wsForm", 'div[data-bp-uniq-id="' + $uniqId + '"]'), $thisButton = $(element);
                $thisButton.attr('data-savebuttoncode', 'changeStatus');
                
                if (window['processBeforeSave_' + $uniqId]($thisButton) && bpFormValidate(processForm)) {

                    PNotify.removeAll();

                    var $wfmDialogName = 'dialog-confirm-status-' + processMetaDataId;
                    if (!$("#" + $wfmDialogName).length) {
                        $('<div id="' + $wfmDialogName + '"></div>').appendTo('body');
                    }
                    var $wfmDialog = $("#" + $wfmDialogName);
                    var _saveBtn = plang.get('yes_btn'), _title = 'Санамж';

                    if (directlyChangeStatus == '' && ((typeof wfmIsDesc !== 'undefined' && wfmIsDesc == '1') || (typeof isdescrequired !== 'undefined' && isdescrequired == '1'))) {
                        _saveBtn = plang.get('save_btn');
                        _title = 'Тайлбар бичнэ үү';
                        $wfmDialog.empty().append('<textarea name="newWfmStatusDescription" class="form-control" style="width:100%; height:100px;" id="newWfmStatusDescription-' + $uniqId + '"></textarea>');
                    } else {
                        $wfmDialog.empty().append("Та <strong>" + newWfmStatusName + "</strong> төлөвт шилжүүлэхдээ итгэлтэй байна уу?");
                    }

                    if (typeof wfmIsDesc !== 'undefined' && wfmIsDesc == '0' && typeof isdescrequired !== 'undefined' && isdescrequired == '0' && typeof nextProcessId !== 'undefined' && nextProcessId !== '') {
                        
                        runBpGetRunprocess(metaDataId, processMetaDataId, $uniqId, processForm, window['objectdatagrid_' + metaDataId], 'dialog-businessprocess-' + processMetaDataId, '', '', element, _wfmParams, newWfmStatusName, $('#newWfmStatusDescription-' + $uniqId).val(), undefined, nextProcessId, undefined, wfmuseprocesswindow);
                        $wfmDialog.empty().remove();
                        
                    } else if (!isNotConfirm) {
                        $wfmDialog.dialog({
                            cache: false,
                            resizable: false,
                            bgiframe: true,
                            autoOpen: false,
                            title: _title,
                            width: 370,
                            height: "auto",
                            modal: true,
                            close: function() {
                                $wfmDialog.empty().dialog('destroy').remove();
                            },
                            buttons: [{
                                text: _saveBtn,
                                class: 'btn green-meadow btn-sm',
                                click: function() {
                                    if (processMetaDataId == nextProcessId) {
                                        nextProcessId = '';
                                    }

                                    if (directlyChangeStatus == '' && typeof isdescrequired !== 'undefined' && isdescrequired == '1' && $('#newWfmStatusDescription-' + $uniqId).val() == '') {
                                        $('#newWfmStatusDescription-' + $uniqId).addClass('error');
                                        return;
                                    }

                                    runBpGetRunprocess(metaDataId, processMetaDataId, $uniqId, processForm, window['objectdatagrid_' + metaDataId], 'dialog-businessprocess-' + processMetaDataId, '', '', element, _wfmParams, newWfmStatusName, $('#newWfmStatusDescription-' + $uniqId).val(), undefined, nextProcessId);
                                    $wfmDialog.dialog('close');
                                }
                            },
                            {
                                text: plang.get('no_btn'),
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $wfmDialog.dialog('close');
                                }
                            }]
                        });
                        $wfmDialog.dialog('open');
                        
                    } else {
                        runBpGetRunprocess(metaDataId, processMetaDataId, $uniqId, processForm, window['objectdatagrid_' + metaDataId], 'dialog-businessprocess-' + processMetaDataId, '', '', element, _wfmParams, newWfmStatusName, undefined, undefined, nextProcessId);
                        $wfmDialog.remove();
                    }
                } else {
                    bpIgnoreGroupRemove(processForm);
                }

                Core.unblockUI();

            } else {
                PNotify.removeAll();

                var $wfmDialogName = 'dialog-confirm-status-' + processMetaDataId;
                if (!$("#" + $wfmDialogName).length) {
                    $('<div id="' + $wfmDialogName + '"></div>').appendTo('body');
                }
                var _saveBtn = plang.get('yes_btn');
                var _title = 'Санамж';

                if (typeof isdescrequired !== 'undefined' && isdescrequired == '1') {
                    _saveBtn = 'Хадгалах';
                    _title = 'Тайлбар бичнэ үү';
                    $("#" + $wfmDialogName).empty().append('<textarea name="newWfmStatusDescription" style="width:100%; height:100px;" class="form-control" id="newWfmStatusDescription-' + $uniqId + '"></textarea>');

                    $("#" + $wfmDialogName).dialog({
                        cache: false,
                        resizable: false,
                        bgiframe: true,
                        autoOpen: false,
                        title: _title,
                        width: 370,
                        height: "auto",
                        modal: true,
                        close: function() {
                            $("#" + $wfmDialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: _saveBtn,
                                class: 'btn green-meadow btn-sm',
                                click: function() {

                                    if ($('#newWfmStatusDescription-' + $uniqId).val() == '') {
                                        $('#newWfmStatusDescription-' + $uniqId).addClass('error');
                                        return;
                                    }

                                    _wfmParams['description'] = $('#newWfmStatusDescription-' + $uniqId).val();
                                    changeWfmStatusAjax(_wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab);
                                    $("#" + $wfmDialogName).empty().dialog('destroy').remove();
                                }
                            },
                            {
                                text: plang.get('no_btn'),
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $("#" + $wfmDialogName).empty().dialog('destroy').remove();
                                }
                            }
                        ]
                    });
                    $("#" + $wfmDialogName).dialog('open');

                    Core.unblockUI();

                } else {

                    if (typeof isActivity !== 'undefined') {
                        var processForm = $("#activityInfoForm", '#workspace-id-' + closeTab);
                        PNotify.removeAll();

                        if (typeof nextProcessId !== 'undefined' && nextProcessId !== '') {

                            var $wfmParams =
                                'dataViewId=' + _wfmParams.metaDataId +
                                '&refStructureId=' + _wfmParams.refStructureId +
                                '&statusId=' + _wfmParams.wfmStatusId +
                                '&statusName=' + _wfmParams.newWfmStatusName +
                                '&statusColor=' + _wfmParams.newWfmStatusColor +
                                '&rowId=' + _wfmParams.dataRow.id + '';

                            callWebServiceByMeta(nextProcessId, true, '', false, _wfmParams.dataRow, '', $wfmParams, undefined, function() {
                                if (typeof isCallNextFunction !== 'undefinded' && isCallNextFunction !== '' && isCallNextFunction === '1') {
                                    changeWfmStatusAjax(_wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab);
                                } else {
                                    if (typeof closeTab !== 'undefined' && closeTab !== '') {
                                        backFirstContent(elem);
                                    }
                                }
                            }, _wfmParams.dataRow, _wfmParams.metaDataId);
                        } else {
                            if (typeof nextProcessId !== 'undefined' && nextProcessId !== '') {
                                _wfmParams = {
                                    metaDataId: metaDataId,
                                    refStructureId: refStructureId,
                                    dataRow: row,
                                    description: '',
                                    wfmStatusId: wfmStatusId,
                                    newWfmStatusid: wfmStatusId,
                                    signerParams: signerParams,
                                    newWfmStatusName: newWfmStatusName,
                                    newWfmStatusColor: newWfmStatusColor,
                                    isMany: isMany,
                                    nextProcessId: nextProcessId
                                };
                            }

                            changeWfmStatusAjax(_wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab, isCallNextFunction);
                        }
                        
                    } else if (!isNotConfirm) {
                        var $dialog = $("#" + $dialogName);
                        $dialog.empty().append('Та <strong>'+newWfmStatusName+'</strong> төлөвт шилжүүлэхэд итгэлтэй байна уу?');
                        $dialog.dialog({
                            cache: false,
                            resizable: false,
                            bgiframe: true,
                            autoOpen: false,
                            title: plang.get('msg_title_confirm'),
                            width: 370,
                            height: 'auto',
                            modal: true,
                            close: function() {
                                $dialog.empty().dialog('destroy').remove();
                            },
                            buttons: [{
                                    text: plang.get('yes_btn'),
                                    class: 'btn green-meadow btn-sm',
                                    click: function() {

                                        if (typeof nextProcessId !== 'undefined' && nextProcessId !== '') {
                                            _wfmParams = {
                                                metaDataId: metaDataId,
                                                refStructureId: refStructureId,
                                                dataRow: row,
                                                description: '',
                                                wfmStatusId: wfmStatusId,
                                                newWfmStatusid: wfmStatusId,
                                                signerParams: signerParams,
                                                newWfmStatusName: newWfmStatusName,
                                                newWfmStatusColor: newWfmStatusColor,
                                                isMany: isMany,
                                                nextProcessId: nextProcessId
                                            };
                                        }

                                        changeWfmStatusAjax(_wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab, isCallNextFunction);
                                        $dialog.dialog('close');
                                    }
                                },
                                {
                                    text: plang.get('no_btn'),
                                    class: 'btn blue-madison btn-sm',
                                    click: function() {
                                        $dialog.dialog('close');
                                    }
                                }
                            ]
                        });
                        $dialog.dialog('open');
                        
                    } else {
                        
                        if (typeof nextProcessId !== 'undefined' && nextProcessId !== '') {
                            _wfmParams = {
                                metaDataId: metaDataId,
                                refStructureId: refStructureId,
                                dataRow: row,
                                description: '',
                                wfmStatusId: wfmStatusId,
                                newWfmStatusid: wfmStatusId,
                                signerParams: signerParams,
                                newWfmStatusName: newWfmStatusName,
                                newWfmStatusColor: newWfmStatusColor,
                                isMany: isMany,
                                nextProcessId: nextProcessId
                            };
                        }

                        changeWfmStatusAjax(_wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab, isCallNextFunction);
                        $('#dialog-confirm-status-' + processMetaDataId).remove();
                        $('#dialog-changeWfmStatus-' + metaDataId).remove();
                    }

                    Core.unblockUI();
                }
            }
            return;
        }

        $.ajax({
            type: 'post',
            url: 'mdobject/getRowWfmStatusForm',
            dataType: 'json',
            data: {
                metaDataId: metaDataId,
                refStructureId: refStructureId,
                wfmStatusId: wfmStatusId,
                newWfmStatusColor: newWfmStatusColor,
                newWfmStatusName: $element.text() ? $element.text() : newWfmStatusName,
                dataRow: row,
                isSee: false,
                isMany: isMany,
                changeAssign: changeAssign
            },
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
                
                if ($("link[href='assets/custom/addon/plugins/bootstrap-switch/css/bootstrap-switch.min.css']").length == 0) {
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/bootstrap-switch/css/bootstrap-switch.min.css"/>');
                }
            
                $.cachedScript("assets/custom/addon/plugins/bootstrap-switch/js/bootstrap-switch.min.js");
            },
            success: function(data) {
                if (typeof data.processMetaDataId === 'undefined') {
                    var $dialog = $('#' + $dialogName);
                    $dialog.empty().append(data.Html);
                    $dialog.dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: data.fullscreen == 1 ? $(window).width() : ((typeof data.Width !== 'undefined') ? data.Width : 800),
                        height: data.fullscreen == 1 ? $(window).height() : 'auto',
                        modal: true,
                        close: function() {
                            $dialog.empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: data.save_btn,
                                class: 'btn btn-sm green-meadow wfmstatus-btn-save',
                                click: function() {

                                    $("#changeWfmStatusForm_" + metaDataId).validate({ errorPlacement: function() {} });

                                    if ($("#changeWfmStatusForm_" + metaDataId).valid()) {

                                        var $wfmParams = {
                                            dataRow: row,
                                            metaDataId: metaDataId,
                                            refStructureId: refStructureId,
                                            newWfmStatusName: newWfmStatusName,
                                            newWfmStatusColor: newWfmStatusColor,
                                            newWfmStatusid: wfmStatusId,
                                            wfmStatusId: wfmStatusId,
                                            description: $("#description", "#changeWfmStatusForm_" + metaDataId).val(),
                                            signerParams: signerParams,
                                            isMany: isMany, 
                                            basketDvId: basketDvId
                                        };
                                        
                                        if ($element.hasAttr('data-isindicator')) {
                                            $wfmParams.isIndicator = 1;
                                        }

                                        if (typeof isMany !== 'undefined' && isMany !== '') {
                                            changeWfmStatusAjax($wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab, isCallNextFunction);

                                            $dialog.dialog('close');

                                            if ($element.closest('.modal-after-save-close').length) {
                                                $element.closest('.modal-after-save-close').modal('hide');
                                            } else if ($element.closest('.dialog-after-save-close').length) {
                                                $element.closest('.dialog-after-save-close').dialog('close');
                                            }

                                            dataViewFirstColumnFocus(metaDataId);
                                            
                                            if ($('#dv-search-' + metaDataId).find('input[data-path="filterregisternumber"]').length > 0) {
                                                $('#dv-search-' + metaDataId).find('input[data-path="filterregisternumber"]').focus();
                                            }

                                        } else {
                                            if (typeof $uniqId !== 'undefined') {
                                                runBpGetRunprocess(metaDataId, processMetaDataId, $uniqId, processForm, window['objectdatagrid_' + metaDataId], 'dialog-businessprocess-' + processMetaDataId, '', '', element, $wfmParams, newWfmStatusName, undefined, undefined, nextProcessId);
                                            } else {
                                                changeWfmStatusAjaxSubmit($wfmParams, window['objectdatagrid_' + metaDataId], newWfmStatusName, isMany, element, closeTab, "#changeWfmStatusForm_" + metaDataId);
                                                $dialog.dialog('close');

                                                if ($element.closest('.modal-after-save-close').length) {
                                                    $element.closest('.modal-after-save-close').modal('hide');
                                                } else if ($element.closest('.dialog-after-save-close').length) {
                                                    $element.closest('.dialog-after-save-close').dialog('close');
                                                }

                                                dataViewFirstColumnFocus(metaDataId);
                                                
                                                if ($('#dv-search-' + metaDataId).find('input[data-path="filterregisternumber"]').length > 0) {
                                                    $('#dv-search-' + metaDataId).find('input[data-path="filterregisternumber"]').focus();
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                text: data.close_btn,
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $dialog.dialog('close');
                                }
                            }
                        ]
                    });
                    $dialog.dialog('open');

                } else {

                    _thisTagElement = element;
                    callWebServiceByMeta(data.processMetaDataId, true, '', false, '', '', 'dataViewId=' + metaDataId + '&refStructureId=' + refStructureId + '&statusId=' + wfmStatusId + '&statusName=' +
                        newWfmStatusName + '&statusColor=' + newWfmStatusColor + '&rowId=' + row.id + '', undefined,
                        function() {
                            dataViewReloadByRowElement(element);
                        }
                    );
                }

                Core.unblockUI();
            },
            error: function() { alert('Error'); Core.unblockUI(); }
        });
    }, 500);
}

function beforeSignProcess(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType) {

    var rows = getDataViewSelectedRows(mainMetaDataId);

    $.ajax({
        type: 'post',
        url: 'mdpki/generateHashFromFileByDataView',
        data: { selectedRow: rows[0] },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();

            if (responseData.status === 'success') {

                var funcArguments = [mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType];
                callSign(responseData.hash, responseData.guid, elem, 'privateTransferProcessAction', funcArguments);

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false
                });
            }
            Core.unblockUI();
        }
    });
}

function beforeHardSignProcess(mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType) {
    var rows = getDataViewSelectedRows(mainMetaDataId);
    var row = rows[0];

    $.ajax({
        type: 'post',
        url: 'mdpki/generateHashFromFileByDataView',
        data: { selectedRow: row },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();

            if (responseData.status === 'success') {

                var funcArguments = [mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, dataGrid, wfmStatusParams, drillDownType];

                if (typeof row.physicalpath !== 'undefined') {
                    var physicalpath = row.physicalpath;

                    if (physicalpath.split('.').pop().toLowerCase() === 'pdf') {
                        var contentId = null;
                        
                        if (row.hasOwnProperty('contentid')) {
                            contentId = row.contentid;
                        }
                        
                        hardSign(URL_APP + row.physicalpath, contentId, URL_APP + 'mddoceditor/fileUpload', 'privateTransferProcessAction', funcArguments);
                    } else {
                        callSign(responseData.hash, responseData.guid, elem, 'privateTransferProcessAction', funcArguments);
                    }
                } else {
                    callSign(responseData.hash, responseData.guid, elem, 'privateTransferProcessAction', funcArguments);
                }

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false
                });
            }
            Core.unblockUI();
        }
    });
}

function beforeSignChangeWfmStatusId(elem, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName) {
    var rows = getDataViewSelectedRows(metaDataId),
        row = rows[0];

    $.ajax({
        type: 'post',
        url: 'mdpki/generateHashFromFileByDataView',
        data: { selectedRow: rows[0] },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();

            if (responseData.status === 'success') {

                var funcArguments = [elem, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName];

                if (typeof row.physicalpath !== 'undefined' && row.physicalpath) {
                    var physicalpath = row.physicalpath;

                    if (physicalpath.split('.').pop().toLowerCase() === 'pdf') {
                        var contentId = null;
                        
                        if (row.hasOwnProperty('contentid')) {
                            contentId = row.contentid;
                        }
                        
                        hardSign(URL_APP + row.physicalpath, contentId, URL_APP + 'mddoceditor/fileUpload', 'changeWfmStatusId', funcArguments, row);
                    } else {
                        callSign(responseData.hash, responseData.guid, elem, 'changeWfmStatusId', funcArguments);
                    }
                } else {
                    callSign(responseData.hash, responseData.guid, elem, 'changeWfmStatusId', funcArguments);
                }

            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false
                });
            }
            Core.unblockUI();
        }
    });
}

window.addEventListener('message', function(message) {
    if (message.data.type == 'eventFromCanvas_HardSignWindow') {
        signPdfWithCoordinate(message.data.value);
    }
});
var signPdfWithCoordinate = function (a) { console.log(a); };

function beforeHardSignChangeWfmStatusId(elem, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName) {
    
    signPdfWithCoordinate = function signPdfWithCoordinate(coordinate){
        $('#callIframeCanvasHardSign').empty().dialog('destroy').remove();

        var rows = getDataViewSelectedRows(metaDataId);
        var row = rows[0];
        $.ajax({
            type: 'post',
            url: 'mdpki/generateHashFromFileByDataView',
            data: { selectedRow: row },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(responseData) {
                PNotify.removeAll();

                if (responseData.guid !== 'null' && responseData.guid !== null) {
                    // if (responseData.status === 'success') {
                        if (responseData.status === 'success') {
                            var funcArguments = [elem, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName];
                            console.log(funcArguments);
                            console.log(row);
                            if (typeof row.physicalpath !== 'undefined') {
                                var physicalpath = row.physicalpath;
                                if (physicalpath.split('.').pop().toLowerCase() === 'pdf') {
                                    var contentId = null;
                                    if (row.hasOwnProperty('contentid')) {
                                        contentId = row.contentid;
                                    }
                                    // hardSign(URL_APP + row.physicalpath, contentId, URL_APP + 'mddoceditor/fileUpload', 'changeWfmStatusId', funcArguments);
                                    var fileName = URL_APP + row.physicalpath;
                                    var server = URL_APP + 'mddoceditor/fileUpload';
                                    var funcName = 'changeWfmStatusId';
                                    // function hardSign(fileName, contentId, server, funcName, funcArguments) {
                                    var pdfPath = fileName.replace(URL_APP, '');
                                    $.ajax({
                                        type: 'post',
                                        url: 'mdpki/getInformationForDocumentSign',
                                        data: {filePath: pdfPath},
                                        dataType: 'json',
                                        success: function (data) {
                                            signPdfAndTextRun(data, pdfPath, contentId, function (t) {
                                                if (t.status === 'success') {
                                                    setTimeout(function(){ window[funcName].apply(null, funcArguments); }, 2000);
                                                }   
                                            }, Math.floor(1.33333333* coordinate.x), Math.floor(1.33333333 * (573-coordinate.y)), coordinate.pageNum, null, 1);
                                        }
                                    });
                                } else {
                                    callSign(responseData.hash, responseData.guid, elem, 'changeWfmStatusId', funcArguments);
                                }
                            } else {
                                callSign(responseData.hash, responseData.guid, elem, 'changeWfmStatusId', funcArguments);
                            }

                        } else {
                            new PNotify({
                                title: 'Error',
                                text: responseData.message,
                                type: 'error',
                                sticker: false
                            });
                        }
                        Core.unblockUI();
                    // }
                } else {
                    new PNotify({
                        title: 'Error',
                        text: 'Хэрэглэгчид токен бүртгүүлээгүй байна!',
                        type: 'error',
                        sticker: false
                    });
                }
            }
        });
    };

    var rows = getDataViewSelectedRows(metaDataId);
    var row = rows[0];
    var pdfPath = row.physicalpath;

    var filename = pdfPath.replace(/^.*[\\\/]/, '');
    iframe = '<iframe id="frameStampPos" src="mddoc/canvasStampPos?uniqid=HardSignWindow&pdfPath='+pdfPath+'" height="100%" width="100%" frameBorder="0" ></iframe>';
    if(! $('#callIframeCanvasHardSign').length ){
    var div = document.createElement("div");
    div.id = 'callIframeCanvasHardSign';
    div.style = 'display: none';
    document.body.appendChild(div);
    }

    $('#callIframeCanvasHardSign').empty();
    $('#callIframeCanvasHardSign').append(iframe);

    $("#callIframeCanvasHardSign").dialog({
          cache: false,
          resizable: false,
          bgiframe: true,
          autoOpen: false,
          title: 'Тамганы байршил',
          width: 500-9,
          height: 750-40,
          modal: false,
            open: function (event, ui) {
                $('#callIframeCanvasHardSign').css('overflow', 'hidden'); 
              },
          close: function () {
              $('#callIframeCanvasHardSign').empty().dialog('destroy').remove();
          },
          buttons: [{text: 'Сонгох', class: 'btn blue-madison btn-sm', click: function () {
          var frame = $('#frameStampPos')[0];
          frame.contentWindow.postMessage({call:'canvasClickSendValue_HardSignWindow', 
            value: {'pdfPath': pdfPath}})
        }}]
    });

  $("#callIframeCanvasHardSign").dialog('open');
}

function dialogOpenFunction(metaDataId, mainMetaDataId, dataHtml, title, closeBtn) {
    if (!$('#dialog-drilldown-dataview-' + metaDataId).length) {
        $("<div id='dialog-drilldown-dataview-" + metaDataId + "'></div>").appendTo('body');
    }
    var $dialog = $('#dialog-drilldown-dataview-' + metaDataId), 
        $dvContainer = $('#object-value-list-' + metaDataId), 
        dialogHeight = 500;

    if ($dvContainer.length && $dvContainer.height() > 200) {
        dialogHeight = 'auto';
    }

    $dialog.empty().append("<div class='col-md-12'>" + dataHtml + "</div>");
    $dialog.dialog({
        cache: false,
        resizable: true,
        bgiframe: true,
        autoOpen: false,
        title: title,
        height: dialogHeight,
        width: 1000,
        modal: false,
        closeOnEscape: isCloseOnEscape,
        open: function() {
            $dialog.scrollTop(0);
        },
        close: function() {
            $dialog.empty().dialog('destroy').remove();
        },
        buttons: [{
            text: closeBtn,
            class: 'btn blue-madison btn-sm',
            click: function() {
                $dialog.dialog('close');
            }
        }]
    }).dialogExtend({
        'closable': true,
        'maximizable': true,
        'minimizable': true,
        'collapsable': true,
        'dblclick': 'maximize',
        'minimizeLocation': 'left',
        'icons': {
            'close': 'ui-icon-circle-close',
            'maximize': 'ui-icon-extlink',
            'minimize': 'ui-icon-minus',
            'collapse': 'ui-icon-triangle-1-s',
            'restore': 'ui-icon-newwin'
        }
    });
}

function seeWfmStatusForm(element, metaDataId) {
    var $dialogName = 'dialog-seeWfmStatus-' + metaDataId;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName);
    var rows = getDataViewSelectedRows(metaDataId);
    var row = rows[0];
    var postData = {metaDataId: metaDataId, dataRow: row, isSee: true};
    
    if ($(element).hasAttr('data-isindicator')) {
        postData.isIndicator = 1;
    }

    $.ajax({
        type: 'post',
        url: 'mdobject/getRowWfmStatusForm',
        dataType: 'json',
        data: postData,
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1400,
                height: 'auto',
                maxHeight: $(window).height() - 50,
                modal: true,
                open: function() {
                    $dialog.parent().css('background', '#F0F0F0');
                    disableScrolling();
                },
                close: function() {
                    enableScrolling();
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: [
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            Core.initFancybox($dialog);
            $dialog.dialog('open');
            Core.unblockUI();
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}

function addRowToBpDvBasket(mainMetaDataId, rowId, dataGrid) {
    try {
        var basketDataGrid = typeof dataGrid.selector !== 'undefined' ? dataGrid.selector.replace("objectdatagrid", "commonSelectableBasketDataGrid") :  dataGrid[0].id.replace("objectdatagrid", "commonSelectableBasketDataGrid");
        var uniqId = basketDataGrid.split('_')[1];
        $.ajax({
            type: 'post',
            url: 'mdmetadata/getBpDvRowData',
            dataType: 'json',
            async: false,
            data: { metaDataId: mainMetaDataId, rowId: rowId },
            success: function(data) {
                if (data) {
                    window['basketAppendRow_' + uniqId](data);
                }
            },
            error: function() {
                alert('Error');
            }
        });
    } catch (err) {
        console.log(err);
    }
}

function updateRowToBpDvBasket(mainMetaDataId, rowId, dataGrid) {
    var basketDataGrid = dataGrid.selector.replace("objectdatagrid", "commonSelectableBasketDataGrid");
    var uniqId = basketDataGrid.split('_')[1];
    var rows = $(basketDataGrid).datagrid("getRows");
    var updatedRow;
    for (var i = 0; i < rows.length; i++) {
        if (rows[i].id == rowId) {
            updatedRow = rows[i];
        }
    }
    var rowIndex = $(basketDataGrid).datagrid("getRowIndex", updatedRow);
    $.ajax({
        type: 'post',
        url: 'mdmetadata/getBpDvRowData',
        dataType: 'json',
        async: false,
        data: { metaDataId: mainMetaDataId, rowId: rowId },
        success: function(data) {
            if (data) {
                window['basketUpdateRow_' + uniqId](data, rowIndex);
            }
        },
        error: function() {
            alert('Error');
        }
    });
}

function closeDataGridWithBpValue(dataGrid, bookId) {
    PNotify.removeAll();
    try {
        var basketDataGrid = typeof dataGrid.selector !== 'undefined' ? dataGrid.selector.replace("objectdatagrid", "commonSelectableBasketDataGrid") :  dataGrid[0].id.replace("objectdatagrid", "commonSelectableBasketDataGrid");    
        if ($(basketDataGrid).closest('table#glDtl').length > 0) {
        if ($(basketDataGrid).closest('tr').length > 0) {
            var tr = $(basketDataGrid).closest('tr');
            var $dialogName = "dialog-expandedGlDtl";
            var accountid = $(tr).find("input[name='gl_accountId[]']").val();
            if ($("#" + $dialogName, tr).length > 0) {
                var validDtl = true;
                $("#" + $dialogName, tr).find('input,textarea,select').filter('[required="required"]').removeClass('error');
                $("#" + $dialogName, tr).find('input,textarea,select').filter('[required="required"]').each(function() {
                    if (($(this).attr('id') != 'accountId_displayField' && $(this).attr('id') != 'accountId_nameField') && $(this).val() == '') {
                        $(this).addClass('error');
                        validDtl = false;
                    }
                });
                if (validDtl) {
                    if ($("#" + $dialogName, tr).find("input[name='gl_invoiceBookId[]']").length > 0) {
                        if (($("#glPayable", tr).length == 0 && $("#glReceivable", tr).length == 0) && ($("#bookGrid", tr).find("div:first").length > 0)) {
                            var dataViewClass = $("#bookGrid", tr).find("div:first").attr('class');
                            var dataViewId = dataViewClass.split("-");
                            var rows = $('#commonSelectableBasketDataGrid_' + dataViewId[1]).datagrid('getRows');
                            if (rows.length > 0) {
                                invoiceSelectabledGrid(dataViewId[1]);
                                var newDebit = $("#" + $dialogName, tr).find("input[name='book_debitamount[" + accountid + "]']").val();
                                var newCredit = $("#" + $dialogName, tr).find("input[name='book_creditamount[" + accountid + "]']").val();
                                var newDebitBase = $("#" + $dialogName, tr).find("input[name='book_debitamountbase[" + accountid + "]']").val();
                                var newCreditBase = $("#" + $dialogName, tr).find("input[name='book_creditamountbase[" + accountid + "]']").val();
                                var newRate = $("#" + $dialogName, tr).find("input[name='book_rate[" + accountid + "]']").val();
                                var newDescription = $("#" + $dialogName, tr).find("input[name='book_desc[" + accountid + "]']").val();
                                $(tr).find("input[name='invoiceBookValue[]']").val($("#" + $dialogName, tr).find("input[name='gl_invoiceBookId[]']").val());
                                $(tr).find("input[name='gl_debitAmount[]']").val(newDebit);
                                $(tr).find("input[name='gl_creditAmount[]']").val(newCredit);
                                $(tr).find("input[name='gl_debitAmountBase[]']").val(newDebitBase);
                                $(tr).find("input[name='gl_creditAmountBase[]']").val(newCreditBase);
                                $(tr).find("input[data-input-name='debitAmount']").autoNumeric('set', newDebit);
                                $(tr).find("input[data-input-name='creditAmount']").autoNumeric('set', newCredit);
                                $(tr).find("input[data-input-name='debitAmountBase']").autoNumeric('set', newDebitBase);
                                $(tr).find("input[data-input-name='creditAmountBase']").autoNumeric('set', newCreditBase);
                                $(tr).find("input[name='gl_rate[]']").autoNumeric('set', newRate);
                                $(tr).find("input[name='gl_rowdescription[]']").val(newDescription);
                                $(tr).find("input[name='gl_isdebit[]']").val('1');
                                if (newCredit > newDebit) {
                                    $(tr).find("input[name='gl_isdebit[]']").val('0');
                                }
                                checkIsUseDetail($(tr).find("input[name='gl_useDetailBook[]']").val(), tr);
                                calculateFooterSum();
                                $("#" + $dialogName, tr).dialog('close');
                            } else {
                                new PNotify({
                                    title: 'Warning',
                                    text: 'Баримт сонгогдоогүй байна',
                                    type: 'warning',
                                    sticker: false
                                });
                            }
                        }
                    } else {
                        $("#" + $dialogName, tr).dialog('close');
                    }
                } else {
                    new PNotify({
                        title: 'Warning',
                        text: 'Дэлгэрэнгүй үзүүлэлтийг бүрэн бөглөнө үү',
                        type: 'warning',
                        sticker: false
                    });
                }
            }
        }
    }
    } catch (err) {
        console.log(err);
    }    
}

function comboSingleDataSet(elem, val) {

    if (val != '' && val != null && val != 'null') {
        var $this = elem, comboDatas = [];

        if (typeof $this.attr("data-row-data") !== "undefined") {

            var attrToJson = JSON.parse($this.attr("data-row-data"));
            var params = '';

            $this.attr("data-edit-value", val);

            if (typeof $this.attr("data-in-param") !== "undefined") {

                var _inputParam = $this.attr("data-in-param").split("|");
                var _inputLookupParam = $this.attr("data-in-lookup-param").split("|");
                var $parentForm = $this.closest("form");

                for (var i = 0; i < _inputParam.length; i++) {
                    var paramsVal = $parentForm.find("[data-path='" + _inputParam[i] + "']");
                    if (paramsVal.length > 0) {
                        var paramVal = '';
                        if (paramsVal.prop("tagName") == 'SELECT') {
                            if (paramsVal.hasClass('select2')) {
                                paramVal = paramsVal.select2('val');
                            } else {
                                paramVal = paramsVal.val();
                            }
                        } else {
                            paramVal = paramsVal.val();
                        }

                        params += _inputLookupParam[i] + "=" + paramVal + "&";
                    }
                }
            }

            if (typeof $this.attr('data-criteria-param') !== 'undefined' && $this.attr('data-criteria-param') != '') {

                var _inParam = $this.attr('data-criteria-param');
                var _inParamSplit = _inParam.split('|');
                var $parentForm = $this.closest('form');

                for (var j = 0; j < _inParamSplit.length; j++) {
                    var fieldPathArr = _inParamSplit[j].split('@');
                    var fieldPath = fieldPathArr[0];
                    var inputPath = fieldPathArr[1];
                    var fieldValue = '';

                    if ($("[data-path='" + fieldPath + "']", $parentForm).length > 0) {
                        fieldValue = getBpRowParamNum($parentForm, $this, fieldPath);
                    } else {
                        fieldValue = fieldPath;
                    }

                    params += inputPath + '=' + fieldValue + '&';
                }
            }

            $.ajax({
                type: "post",
                async: false,
                url: 'mdwebservice/comboSingleDataSetCtrl',
                data: { jsonAttr: attrToJson, getId: val, params: params },
                dataType: "json",
                success: function(data) {
                    
                    if (typeof data.emptyCombo === 'undefined') {
                        
                        $this.empty();
                        
                        if (!$this.is('[multiple]')) {
                            $this.append($("<option />").val('').text('- '+plang.get('select_btn')+' -'));
                        }

                        $this.append($("<option />")
                            .val(data.META_VALUE_ID)
                            .text(data.META_VALUE_NAME)
                            .attr({ "selected": "selected", 'data-row-data': data.rowData })
                        );
                        comboDatas.push({
                            id: data.META_VALUE_ID,
                            text: data.META_VALUE_NAME
                        });
                    }
                },
                error: function() {
                    alert('Error');
                }
            }).done(function() {
                if (comboDatas.length > 0) {
                    var comboIsDisable = false,
                        $comboSelect2 = $this.parent().find("div[data-s-path='" + $this.attr("data-path") + "']");

                    if ($comboSelect2.hasClass("select2-container-disabled")) {
                        comboIsDisable = true;
                    }

                    $this.select2({ results: comboDatas });

                    if (comboIsDisable) {
                        $this.parent().find("div[data-s-path='" + $this.attr("data-path") + "']").addClass("select2-container-disabled");
                    }
                    if (typeof $this.attr("data-in-param") !== "undefined") {
                        $this.select2('enable');
                    }
                }
            });
        }
    }
}

function comboSingleDataSetView(elem, val) {

    if (val != '' && val != null && val != 'null') {
        var _this = elem;

        if (typeof _this.attr("data-row-data") !== "undefined") {
            var attrToJson = JSON.parse(_this.attr("data-row-data"));
            var params = '';

            $.ajax({
                type: "post",
                async: false,
                url: 'mdwebservice/comboSingleDataSetCtrl',
                data: { jsonAttr: attrToJson, getId: val, params: params },
                dataType: "json",
                success: function(data) {
                    if (typeof data.emptyCombo === "undefined") {
                        _this.text(data.META_VALUE_NAME);
                    }
                },
                error: function() {
                    alert('Error');
                }
            });
        }
    }
}

function checkMetaDataTypeFunction(metaDataId, mainMetaDataId, title, saveBtn, closeBtn, postData, showType, uriParams, elem) {

    var $ticket = true, $isDialog = false;
    if (typeof showType !== 'undefined' && showType === 'popup') {
        $ticket = false;
        $isDialog = true;
    }

    $.ajax({
        type: 'post',
        url: 'mdobject/checkMetaDataType',
        dataType: 'json',
        data: { metaDataId: metaDataId, mainMetaDataId: mainMetaDataId, postData: postData, uriParams: uriParams, isDialog: $isDialog },
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            
            title = plang.get(title);
            
            if (typeof uriParams != 'undefined' && uriParams && data.hasOwnProperty('Html') && data.Html) {
                var uriParamsObj = qryStrToObj(uriParams);
                if (uriParamsObj.hasOwnProperty('headerDescription') && uriParamsObj.headerDescription) {
                    data.Html = '<div class="row"><div class="alert alert-warning alert-styled-left p-1" style="background-color: #ffc10726;border-color: #FFEB3B;">'+uriParamsObj.headerDescription+'</div></div>' + data.Html;
                }
            }
        
            if (typeof showType !== 'undefined' && showType === 'tab') {
                appMultiTabByContent({ metaDataId: metaDataId, title: title, type: 'lifecycle', content: data.Html });
            } else {
                
                if (data.hasOwnProperty('webservice') && data.webservice && $isDialog) {
                    var dataGrid = $('#objectdatagrid_' + mainMetaDataId);
                    if ($('#objectdatagrid_' + mainMetaDataId).length === 0) {
                        dataGrid = window['objectdatagrid_' + mainMetaDataId];
                    }
                    var $selectedRow = getRowsDataView(mainMetaDataId);
                    if (!$selectedRow.length || typeof elem !== 'undefined') {
                        $selectedRow = $(elem).parent().data('row-data');
                    }
                    runBusinessProcessWithDataView(dataGrid, mainMetaDataId, metaDataId, $isDialog, '', this, '', '', '', $selectedRow);
                    return;
                }
                
                if (!data.hasOwnProperty('Html')) {
                    Core.unblockUI();
                    return;
                }

                dialogOpenFunction(metaDataId, mainMetaDataId, data.Html, title, closeBtn);
                var $dialogId = $('#dialog-drilldown-dataview-' + metaDataId);

                $dialogId.dialog('open');

                if ((data.fullscreen && $ticket) || (typeof showType !== 'undefined' && showType === 'fullscreen')) {
                    $dialogId.dialogExtend('maximize');
                }
                
                $dialogId.bind('dialogextendminimize', function() {
                    $dialogId.dialog('option', 'modal', false);
                });
                
                Core.initAjax($dialogId);
                Core.unblockUI();
            }
        },
        error: function() { alert('Error'); Core.unblockUI(); }
    });
}

function amactivityForm(activityKeyId, title, saveBtn, closeBtn) {
    $.ajax({
        type: 'post',
        url: 'Amactivity/activityView/' + activityKeyId,
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var $dialogName = 'dialog-drilldown-dataview-' + activityKeyId;
            if (!$("#" + $dialogName).length) {
                $("<div id='dialog-drilldown-dataview-" + activityKeyId + "'></div>").appendTo('body');
            }

            $("#" + $dialogName).empty().append("<div class='col-md-12'>" + data.Html + "</div>");
            $("#" + $dialogName).find('.saveActivitySheetBtn').remove();
            $("#" + $dialogName).find('.backFromActivitySheet').remove();

            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: title,
                height: 500,
                width: 1000,
                modal: false,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: saveBtn,
                        class: 'btn btn-sm green-meadow',
                        click: function() {
                            var datas = $('#objectdatagrid_' + activityKeyId).datagrid('getData').rows;
                            if (datas.length === 0) {
                                PNotify.removeAll();
                                new PNotify({
                                    title: 'Алдаа',
                                    text: 'Хадгалах өгөгдөл алдсангүй.',
                                    type: 'error',
                                    sticker: false
                                });
                                return false;
                            }
                            actionBudgetFunction(datas, 'actionActivitySheet');
                        }
                    },
                    {
                        text: closeBtn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $("#" + $dialogName).empty().dialog('destroy').remove();
                        }
                    }
                ]
            }).dialogExtend({
                'closable': true,
                'maximizable': true,
                'minimizable': true,
                'collapsable': true,
                'dblclick': 'maximize',
                'minimizeLocation': 'left',
                'icons': {
                    'close': 'ui-icon-circle-close',
                    'maximize': 'ui-icon-extlink',
                    'minimize': 'ui-icon-minus',
                    'collapse': 'ui-icon-triangle-1-s',
                    'restore': 'ui-icon-newwin'
                }
            });

            $("#" + $dialogName).dialog('open');
            $("#" + $dialogName).dialogExtend("maximize");
            $("#" + $dialogName).bind("dialogextendminimize", function() {
                $dialogName.dialog('option', 'modal', false);
            });
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        $.getScript("middleware/assets/js/amactivity.js");
    });
}

function bpAddPhotoFromWebcam(elem, metaDataId, metaValueId) {
    var _this = $(elem);

    var dialogName = '#dialog-bp-photo-webcam';
    if (!$(dialogName).length) {
        $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mdprocess/bpAddPhotoFromWebcam',
        data: { metaDataId: metaDataId, metaValueId: metaValueId },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            $(dialogName).empty().append(data.html);
            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 1300,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            $('form#bpWebcam-form').ajaxSubmit({
                                type: 'post',
                                url: 'mdprocess/savePhotoFromWebcam',
                                dataType: 'json',
                                beforeSend: function() {
                                    Core.blockUI({animate: true});
                                },
                                success: function(data) {
                                    PNotify.removeAll();
                                    new PNotify({
                                        title: data.status,
                                        text: data.message,
                                        type: data.status,
                                        sticker: false
                                    });
                                    if (data.status === 'success') {
                                        var li = '';

                                        if (metaDataId !== '' && metaValueId !== '') {
                                            li += '<li class="shadow" data-attach-id="' + data.attachId + '">';
                                            li += '<a href="' + data.photoPath + '" class="fancybox-button main" data-rel="fancybox-button">';
                                            li += '<img src="' + data.photoThumbPath + '"/>';
                                            li += '</a>';
                                            li += '<div class="btn-group float-right padding-5">';
                                            li += '<button aria-expanded="false" class="btn default btn-xs dropdown-toggle" type="button" data-toggle="dropdown">';
                                            li += '</button>';
                                            li += '<ul class="dropdown-menu float-right" role="menu">';
                                            li += '<li>';
                                            li += '<a href="javascript:;" onclick="deleteBpTabPhoto(this)"><i class="fa fa-trash"></i> Устгах</a>';
                                            li += '</li>';
                                            li += '</ul>';
                                            li += '</div>';
                                            li += '<div class="title-photo"></div>';
                                            li += '</li>';
                                        } else {
                                            li += '<li class="shadow">';
                                            li += '<a href="data:' + data.mimeType + ';base64,' + data.origBase64Data + '" class="fancybox-button main" data-rel="fancybox-button">';
                                            li += '<img src="data:' + data.mimeType + ';base64,' + data.thumbBase64Data + '"/>';
                                            li += '</a>';
                                            li += '<div class="btn-group float-right padding-5">';
                                            li += '<button aria-expanded="false" class="btn default btn-xs dropdown-toggle" type="button" data-toggle="dropdown">';
                                            li += '<i class="fa fa-angle-down"></i>';
                                            li += '</button>';
                                            li += '<ul class="dropdown-menu float-right" role="menu">';
                                            li += '<li>';
                                            li += '<a href="javascript:;" onclick="deleteAddBpPhoto(this);"><i class="fa fa-trash"></i> Устгах</a>';
                                            li += '</li>';
                                            li += '</ul>';
                                            li += '</div>';
                                            li += '<div class="title-photo"></div>';
                                            li += '<input type="hidden" name="bp_photo_orig_data[]" value="' + data.origBase64Data + '"/>';
                                            li += '<input type="hidden" name="bp_photo_thumb_data[]" value="' + data.thumbBase64Data + '"/>';
                                            li += '<input type="hidden" name="bp_photo_extension[]" value="' + data.extension + '"/>';
                                            li += '<input type="hidden" name="bp_photo_name[]" value=""/>';
                                            li += '</li>';
                                        }

                                        var viewPhotoElement = _this.closest('.main-bp-photo-container').find('.list-view-photo');
                                        viewPhotoElement.append(li);
                                        Core.initFancybox(viewPhotoElement);

                                        $(dialogName).dialog('close');
                                    }
                                    Core.unblockUI();
                                }
                            });
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogName).dialog('close');
                        }
                    }
                ]
            });
            $(dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function drillDownStatement(elem, rowStr) {
    var $this = $(elem);
    var statementMode = ''; 
    
    if (typeof rowStr !== 'undefined') {

        var rowData = qryStrToObj(rowStr);
        var statementId = rowData['CLICK_DRILL_LAYOUT_ID'];
        var columnName = (rowData['CLICK_DRILL_FIELD_NAME']).toLowerCase();
        var rId = 'iframe', uniqId = '';
        var glbookid = '', glbookRecordType = '';
        var filterParams = $('#dataview-statement-search-' + statementId + ' form:eq(0)').serialize();

    } else {

        var rowData = $this.attr('data-row-data').split('|');
        var rowNum = rowData[0];
        var statementId = rowData[1];
        var rId = rowData[2];
        var uniqId = rowData[3];
        var columnName = (rowData[4]).toLowerCase();
        var glbookid = typeof $this.attr('data-glbookid') !== 'undefined' ? $this.attr('data-glbookid') : '';
        var glbookRecordType = typeof $this.attr('data-glbook-recordType') !== 'undefined' ? $this.attr('data-glbook-recordType') : '';
        var filterParams = '';
        
        if (rowData.hasOwnProperty(5) && rowData[5] != '') {
            statementMode = rowData[5];
        }
    }

    var $dialogName = 'dialog-drilldown-' + statementId + '-' + rowNum;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdstatement/drilldown',
        data: {
            statementId: statementId,
            columnName: columnName,
            rowData: rowData,
            rId: rId,
            uniqId: uniqId,
            glbookid_nextprev: glbookid,
            glbookRecordType: glbookRecordType,
            filterParams: filterParams, 
            statementMode: statementMode
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            if (data.metaType === 'statement') {

                $dialog.empty().append(data.html);
                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: 1100,
                    height: "auto",
                    modal: false,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $dialog.dialog('open');
                $dialog.dialogExtend("maximize");

            } else if (data.metaType === 'businessProcess') {

                var linkMetaId = data.metaDataId;
                var hidePrintButton = '';
                if (typeof data.save_and_print === 'undefined') {
                    hidePrintButton = ' hide';
                }

                $dialog.empty().append(data.Html);

                var processForm = $dialog.find('form');
                var processUniqId = processForm.parent().attr('data-bp-uniq-id');

                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: 1100,
                    height: "auto",
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                            text: data.run_btn,
                            class: 'btn green-meadow btn-sm bp-btn-save',
                            click: function(e) {

                                if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                    if (bpFormValidate(processForm)) {

                                        processForm.ajaxSubmit({
                                            type: 'post',
                                            url: 'mdwebservice/runProcess',
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
                                            },
                                            success: function(responseData) {

                                                PNotify.removeAll();

                                                if (responseData.status === 'success') {
                                                    new PNotify({
                                                        title: 'Success',
                                                        text: responseData.message + '<br />Та шүүлтийг дахин ажиллуулж сэргээнэ үү.',
                                                        type: 'success',
                                                        insert_brs: false,
                                                        addclass: pnotifyPosition,
                                                        sticker: false
                                                    });
                                                    $dialog.dialog('close');
                                                } else {
                                                    new PNotify({
                                                        title: 'Error',
                                                        text: responseData.message,
                                                        type: 'error',
                                                        sticker: false,
                                                        hide: true,
                                                        addclass: pnotifyPosition,
                                                        delay: 1000000000
                                                    });
                                                }

                                                bpIgnoreGroupRemove(processForm);

                                                Core.unblockUI();
                                            },
                                            error: function() {
                                                alert('Error');
                                            }
                                        });
                                    } else {
                                        bpIgnoreGroupRemove(processForm);
                                    }
                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                            }
                        },
                        {
                            text: data.print_btn,
                            class: 'btn yellow-crusta btn-sm bp-run-btn bp-btn-print' + hidePrintButton,
                            click: function(e) {
                                processPrintPreview(e.target, linkMetaId, data.oldRowId, data.get_process_id);
                            }
                        },
                        {
                            text: data.save_and_print,
                            class: 'btn purple-plum btn-sm bp-run-btn bp-btn-saveprint ' + hidePrintButton,
                            click: function(e) {

                                if (window['processBeforeSave_' + processUniqId]($(e.target))) {

                                    if (bpFormValidate(processForm)) {

                                        processForm.ajaxSubmit({
                                            type: 'post',
                                            url: 'mdwebservice/runProcess',
                                            dataType: 'json',
                                            beforeSend: function() {
                                                Core.blockUI({message: 'Түр хүлээнэ үү', boxed: true});
                                            },
                                            success: function(responseData) {

                                                PNotify.removeAll();

                                                if (responseData.status === 'success') {
                                                    new PNotify({
                                                        title: 'Success',
                                                        text: responseData.message,
                                                        type: 'success',
                                                        addclass: pnotifyPosition,
                                                        sticker: false
                                                    });
                                                    if (responseData.rowId !== '') {
                                                        processPrintPreview(e.target, linkMetaId, responseData.rowId, data.get_process_id, responseData.resultData);
                                                    }
                                                    $dialog.dialog('close');

                                                } else {
                                                    new PNotify({
                                                        title: 'Error',
                                                        text: responseData.message,
                                                        type: 'error',
                                                        sticker: false,
                                                        hide: true,
                                                        addclass: pnotifyPosition,
                                                        delay: 1000000000
                                                    });
                                                }

                                                bpIgnoreGroupRemove(processForm);

                                                Core.unblockUI();
                                            },
                                            error: function() {
                                                alert('Error');
                                            }
                                        });
                                        
                                    } else {
                                        bpIgnoreGroupRemove(processForm);
                                    }

                                } else {
                                    bpIgnoreGroupRemove(processForm);
                                }
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-hoki btn-sm bp-btn-close',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }
                    ]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $dialog.dialog('open');

            } else if (data.metaType === 'edit_gl') {

                var hidePrintBtn = ' hide', dialogWidth = 1350, windowWidth = $(window).width();
                if (data.isPrint == true) {
                    hidePrintBtn = '';
                }
                
                if (dialogWidth > windowWidth) {
                    dialogWidth = windowWidth - 10;
                }

                $dialog.empty().append(data.html);
                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: dialogWidth, 
                    height: 'auto',
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                            text: data.print_btn,
                            class: 'btn btn-sm purple-plum bp-btn-print' + hidePrintBtn,
                            click: function() {
                                window['glPrintPreview_' + data.uniqId](data.glMainDvId, this);
                            }
                        },
                        {
                            text: data.save_btn,
                            class: 'btn green-meadow btn-sm bp-btn-save',
                            click: function() {
                                $('form#glEntryForm', '#' + $dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mdgl/updateGlEntry',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: 'Loading...', boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();

                                        if (data.status == 'success') {
                                            new PNotify({
                                                title: 'Success',
                                                text: data.message,
                                                type: 'success',
                                                sticker: false
                                            });
                                            $dialog.dialog('close');
                                        } else {
                                            new PNotify({
                                                title: data.status,
                                                text: data.message,
                                                type: data.status,
                                                sticker: false,
                                                hide: true,
                                                addclass: pnotifyPosition,
                                                delay: 1000000000
                                            });
                                        }
                                        Core.unblockUI();
                                    }
                                });
                            }
                        },
                        {
                            text: 'Тооцооны ханш',
                            class: 'btn btn-sm bg-yellow-gold',
                            click: function() {
                                window['bankChargeORBillRateFromGL_' + data.uniqId]('billrate');
                            }
                        },
                        {
                            text: 'Bank charge',
                            class: 'btn btn-sm bg-yellow-gold',
                            click: function() {
                                window['bankChargeORBillRateFromGL_' + data.uniqId]('bankcharge');
                            }
                        },
                        {
                            text: 'Устгах /Баримт үлдэнэ/',
                            class: 'btn btn-sm btn-danger',
                            click: function() {
                                window['deleteGlRecord_' + data.uniqId]('withoutdoc', $dialogName);
                            }
                        },
                        {
                            text: 'Устгах /Баримт үлдэхгүй/',
                            class: 'btn btn-sm btn-danger',
                            click: function() {
                                window['deleteGlRecord_' + data.uniqId]('withdoc', $dialogName);
                            }
                        },
                        {
                            text: 'Өмнөх',
                            class: 'btn btn-sm btn-primary',
                            click: function() {
                                var _glBookId = $('input[name="glbookId"]', "#" + $dialogName).val();
                                $this.attr({ 'data-glbookid': _glBookId, 'data-glbook-recordType': 'prev' }).trigger('click');
                            }
                        },
                        {
                            text: 'Дараах',
                            class: 'btn btn-sm btn-primary',
                            click: function() {
                                var _glBookId = $('input[name="glbookId"]', "#" + $dialogName).val();
                                $this.attr({ 'data-glbookid': _glBookId, 'data-glbook-recordType': 'next' }).trigger('click');
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm bp-btn-close',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }
                    ]
                });
                $dialog.dialog('open');

                Core.unblockUI();

            } else if (data.metaType === 'view_gl') {

                var hidePrintBtn = ' hide', dialogWidth = 1350, windowWidth = $(window).width();
                if (data.isPrint == true) {
                    hidePrintBtn = '';
                }
                
                if (dialogWidth > windowWidth) {
                    dialogWidth = windowWidth - 10;
                }

                $dialog.empty().append(data.html);
                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: dialogWidth,
                    height: 'auto',
                    modal: true,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                            text: data.print_btn,
                            class: 'btn btn-sm purple-plum bp-btn-print' + hidePrintBtn,
                            click: function() {
                                window['glPrintPreview_' + data.uniqId](data.glMainDvId, this);
                            }
                        },
                        {
                            text: data.close_btn,
                            class: 'btn blue-madison btn-sm bp-btn-close',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }
                    ]
                });
                $dialog.dialog('open');

                Core.unblockUI();

            } else if (data.metaType === 'meta_group') {

                $dialog.empty().append('<div class="col-md-12 main-dataview-container pl0 pr0" id="object-value-list-' + data.linkMetaDataId + '">' + data.Html + '</div>');

                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: 1100,
                    height: "auto",
                    modal: false,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $dialog.dialog('open');
                $dialog.dialogExtend('maximize');

            } else if (data.metaType === 'kpi_dataview') {

                $dialog.empty().append(data.html);

                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.title,
                    width: 1100,
                    height: "auto",
                    modal: false,
                    closeOnEscape: isCloseOnEscape,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: plang.get('close_btn'),
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $dialog.dialog('open');
                $dialog.dialogExtend('maximize');

            } else if (data.metaType === 'error') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: (data.hasOwnProperty('message') ? data.message : 'Нөхцөл тохирохгүй байна'),
                    type: 'warning',
                    sticker: false
                });
            }

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function addDataViewCriteria(elem) {
    var _this = $(elem);
    var _parent = _this.parent().parent();

    var controlParent = _parent.find('div.dataview-criteria-control:first');
    var control = controlParent.html();

    var html = '<div class="dataview-criteria-control" style="float: left; width: 91%">' + control + '</div>';
    html += '<div style="float: right; width: 9%; text-align: right"><a href="javascript:;" class="btn btn-sm grey-cascade mt1" onclick="removeDataViewCriteria(this);" title="Хасах"><i class="fa fa-minus"></i></a></div>';

    _parent.append(html);
    _parent.find('div.dataview-criteria-control:last').find('input').val('').attr('title', '').attr('data-row-data', '');

    _parent.find("input[name*='param[']:not([name*='[]'])").each(function() {
        var _thisInput = $(this);
        var _thisInputName = _thisInput.attr('name');
        _thisInput.attr('name', _thisInputName + '[]');
    });

    Core.initAccountCodeMask(_parent);
    Core.initNumberInput(_parent);
    Core.initLongInput(_parent);
}
function removeDataViewCriteria(elem) {
    $(elem).closest('div').prev().remove();
    $(elem).closest('div').remove();
}
function addMdDataViewCriteria(elem) {
    var _this = $(elem);
    var _parent = _this.parent().parent().parent();

    var controlParent = _parent.find('div.input-group-criteria:first');
    var control = controlParent.html();

    var html = '<div class="input-group input-group-criteria mt5">' + control + '</div>';

    _parent.append(html);
    var parentLastHtml = _parent.find('div.input-group-criteria:last');
    parentLastHtml.find('input').val('').attr('title', '').attr('data-row-data', '');

    parentLastHtml.find('.mdDataViewCriteria').attr('onclick', 'removeMdDataViewCriteria(this);').html('<i class="fa fa-minus"></i></a>');

    _parent.find("input[name*='param[']:not([name*='[]'])").each(function() {
        var _thisInput = $(this);
        var _thisInputName = _thisInput.attr('name');
        _thisInput.attr('name', _thisInputName + '[]');
    });

    _parent.find("input[name*='criteriaCondition[']:not([name*='[]'])").each(function() {
        var _thisInput = $(this);
        var _thisInputName = _thisInput.attr('name');
        _thisInput.attr('name', _thisInputName + '[]');
    });

    Core.initAccountCodeMask(_parent);
    Core.initNumberInput(_parent);
    Core.initLongInput(_parent);
}
function removeMdDataViewCriteria(elem) {
    $(elem).closest('.input-group').remove();
}

function getDataViewSelectedRowsByRow(rowElement) {
    var rows = [];
    var dataGrid = $(rowElement).closest('div.datagrid-view').children('table');

    if (typeof dataGrid !== 'undefined' && dataGrid.length) {
        if (dataGrid.hasClass('not-datagrid')) {
            if (dataGrid.find('li.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('li.selected-row');
                var selectedRowData = selectedRowElem.find('.selected-row-link').attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);
            } else if (dataGrid.find('div.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('div.selected-row');
                var selectedRowData = selectedRowElem.attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);
            } else if (dataGrid.find('.dv-twocol-f-selected').length > 0) {
                var selectedRowElem = dataGrid.find('.dv-twocol-f-selected');
                var selectedRowData = selectedRowElem.attr('data-rowdata');
                rows[0] = JSON.parse(selectedRowData);
            }
        } else {
            rows = dataGrid.datagrid('getSelections');
        }

        rows = dataViewSelectedRowsResolver(rows);
    }

    return rows;
}

function getDataViewSelectedRows(dataViewId) {
    var rows = [];
    var dataGrid = window['objectdatagrid_' + dataViewId];

    if (typeof dataGrid !== 'undefined') {
        if (dataGrid.hasClass('not-datagrid')) {
            if (dataGrid.find('li.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('li.selected-row');
                var selectedRowData = selectedRowElem.find('.selected-row-link').attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);
            } else if (dataGrid.find('div.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('div.selected-row');
                var selectedRowData = selectedRowElem.attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);
            } else if (dataGrid.find('.paneldv-selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('.paneldv-selected-row');
                rows[0] = selectedRowElem.data('rowdata');
            } else {
                rows[0] = {'id': $(dataGrid).val()}; 
            }
        } else if (dataGrid.hasClass('jstree')) {
            
            var $selectedRow = dataGrid.find('.dv-twocol-f-selected');
            
            if ($selectedRow.length) {
                rows[0] = $selectedRow.data('rowdata');
            } else {
                var $selectedRow = dataGrid.find('.jstree-clicked span[data-rowdata]');
                if ($selectedRow.length) {
                    rows[0] = $selectedRow.data('rowdata');
                }
            }
            
        } else {
            rows = dataGrid.datagrid('getSelections');
        }

        rows = dataViewSelectedRowsResolver(rows);
    }

    return rows;
}

function getDataViewSelectedRowByIndex(dataViewId, elem) {
    var row = [];
    var dataGrid = window['objectdatagrid_' + dataViewId];

    if (typeof dataGrid !== 'undefined') {
        if (dataGrid.hasClass('not-datagrid')) {
            if (dataGrid.find('li.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('li.selected-row');
                var selectedRowData = selectedRowElem.find('.selected-row-link').attr('data-row-data');
                row = JSON.parse(selectedRowData);
            } else if (dataGrid.find('div.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('div.selected-row');
                var selectedRowData = selectedRowElem.attr('data-row-data');
                row = JSON.parse(selectedRowData);
            } else if (dataGrid.find('.paneldv-selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('.paneldv-selected-row');
                row = selectedRowElem.data('rowdata');
            }
        } else {
            var index = $("#currentSelectedRowIndex", "#object-value-list-" + dataViewId).val();

            if (typeof elem !== 'undefined' && typeof $(elem).closest('tr').attr('datagrid-row-index') !== 'undefined') {
                index = $(elem).closest('tr').attr('datagrid-row-index');
                $("#currentSelectedRowIndex", "#object-value-list-" + dataViewId).val(index);
            }

            row = dataGrid.datagrid('getRows')[index];
        }

        row = dataViewSelectedRowsResolver(row);
    }

    return row;
}

function getDataViewSelectedRowsByElement(dataGrid, element) {
    var rows = [];
    if (typeof dataGrid !== 'undefined') {
        if (dataGrid.hasClass('not-datagrid')) {
            if (dataGrid.find('li.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('li.selected-row');
                var selectedRowData = selectedRowElem.find('.selected-row-link').attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);
            } else if (dataGrid.find('div.selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('div.selected-row');
                var selectedRowData = selectedRowElem.attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);
            } else if (dataGrid.find('.paneldv-selected-row').length > 0) {
                var selectedRowElem = dataGrid.find('.paneldv-selected-row');
                rows[0] = selectedRowElem.data('rowdata');
            } else {
                rows[0] = {'id': $(dataGrid).val()}; 
            }
        } else if (dataGrid.hasClass('jstree')) {
            
            var $selectedRow = dataGrid.find('.dv-twocol-f-selected');
            
            if ($selectedRow.length) {
                rows[0] = $selectedRow.data('rowdata');
            } else {
                var $selectedRow = dataGrid.find('.jstree-clicked span[data-rowdata]');
                if ($selectedRow.length) {
                    rows[0] = $selectedRow.data('rowdata');
                }
            }
            
        } else {
            if (typeof element == 'undefined') {
                rows = dataGrid.datagrid('getSelections');
            } else {
                if ($(element).closest('table').hasClass('basictable') && $(element).closest('tr').attr('data-rowdata')) {
                    rows = JSON.parse($(element).closest('tr').attr('data-rowdata'));
                } else {
                    var _datagridRowIndex = $(element).closest('tr').attr('datagrid-row-index');
                    var getRows = dataGrid.datagrid('getRows');
                    rows = getRows[_datagridRowIndex];
                }
            }
        }

        rows = dataViewSelectedRowsResolver(rows);
    }

    return rows;
}

function dataViewReload(dataViewId, nocheck, afterReload) {
    var dataGrid = window['objectdatagrid_' + dataViewId];
    
    if (typeof dataGrid !== 'undefined') {
        if (typeof afterReload !== 'undefined' && afterReload === '1' && typeof nocheck === 'undefined' && !dataGrid.parents('div.tab-pane').last().hasClass('active') && dataGrid.parents('div.tab-pane').last().attr('id').substring(0, 4) == 'app_') {
            dataGrid.parents('div.tab-pane').last().attr('of-call-function', 'dataViewReload').attr('of-call-function-element', dataViewId);
            return;
        }
        
        try {
            
            _isRunAfterProcessSave = true;
            
            if (dataGrid.hasClass('not-datagrid')) {
                window['explorerRefresh_' + dataViewId](this);
            } else {
                var op = dataGrid.datagrid('options');
                if (op.idField === null) {
                    dataGrid.datagrid('reload');
                } else {
                    var node = dataGrid.treegrid('getSelected');
                    if (node && node.hasOwnProperty('_parentId') && (node._parentId != '' || node._parentId != null)) {
                        dataGrid.treegrid('reload', node._parentId);
                    } else {
                        dataGrid.treegrid('reload');
                    }
                }
            }
        
        } catch (err) {}
    }
    return;
}

function dataViewReloadByElement(dataGrid) {
    
    if (typeof dataGrid !== 'undefined') {
        
        if (!dataGrid.parents('div.tab-pane').last().hasClass('active') && typeof dataGrid.parents('div.tab-pane').last().attr('id') !== 'undefined' && dataGrid.parents('div.tab-pane').last().attr('id').substring(0, 4) === 'app_') {
            var dgridSplit = dataGrid.attr('id').split('-');
            if (dgridSplit.length) {
                dataGrid.parents('div.tab-pane').last().attr('of-call-function', 'dataViewReload').attr('of-call-function-element', dgridSplit[dgridSplit.length - 1]);
                return;
            }
        }
        
        _isRunAfterProcessSave = true;
        
        if (dataGrid.hasClass('data-tree-view-grid')) {
            var id = dataGrid.attr('id').split('-');
            window['drawTreeView_' + id[1]]();
        } else if (dataGrid.hasClass('not-datagrid')) {
            var id = dataGrid.attr('id').split('-');
            window['explorerRefresh_' + id[1]](this);
        } else if (dataGrid.hasClass('dv-twocol-panel-tree')) {
            var uniqId = dataGrid.closest('.pf-paneltype-dataview').attr('data-uniqid');
            panelDvRefreshSecondList(uniqId);
        } else if (typeof dataGrid.data('datagrid') != 'undefined') {
            var op = dataGrid.datagrid('options');
            if (op.idField === null) {
                dataGrid.datagrid('reload');
            } else {
                var node = dataGrid.treegrid('getSelected');
                if (node && node.hasOwnProperty('_parentId') && (node._parentId != '' || node._parentId != null)) {
                    dataGrid.treegrid('reload', node._parentId);
                } else {
                    dataGrid.treegrid('reload');
                }
            }
        }
    }
    return;
}

function dataTreeViewReload(dataGrid) {
    if (typeof window['drawTreeView_' + dataGrid] === 'function') {
        window['drawTreeView_' + dataGrid]();
    }
    return;
}

function dataViewReloadByRowElement(rowElement) {
    var dataGrid = $(rowElement).closest('div.datagrid-view').children('table');

    if (typeof dataGrid !== 'undefined') {
        
        if (!dataGrid.parents('div.tab-pane').last().hasClass('active') && dataGrid.parents('div.tab-pane').last().attr('id').substring(0, 4) === 'app_') {
            var dgridSplit = dataGrid.attr('id').split('-'); 
            if (dgridSplit.length) {
                dataGrid.parents('div.tab-pane').last().attr('of-call-function', 'dataViewReload').attr('of-call-function-element', dgridSplit[dgridSplit.length - 1]);
                return;
            }
        }
        
        _isRunAfterProcessSave = true;
        
        var op = dataGrid.datagrid('options');
        if (op.idField === null) {
            dataGrid.datagrid('reload');
        } else {
            var node = dataGrid.treegrid('getSelected');
            if (node && node.hasOwnProperty('_parentId') && (node._parentId != '' || node._parentId != null)) {
                dataGrid.treegrid('reload', node._parentId);
            } else {
                dataGrid.treegrid('reload');
            }
        }
    }
    return;
}

function getRowIndexDataViewByElement(dataGrid, row) {
    if (dataGrid.hasClass('not-datagrid')) {
        if (dataGrid.find('li.selected-row').length > 0) {
            return dataGrid.find('li.selected-row').index();
        } else if (dataGrid.find('div.selected-row').length > 0) {
            return dataGrid.find('div.selected-row').index();
        } else if (dataGrid.find('.paneldv-selected-row').length > 0) {
            return dataGrid.find('.paneldv-selected-row').index();
        }
    } else if (dataGrid.hasClass('jstree')) { 
        var $selectedRow = dataGrid.find('.dv-twocol-f-selected');
        if ($selectedRow.length) {
            return $selectedRow.index();
        } else {
            return null;
        }
    } else {
        return dataGrid.datagrid('getRowIndex', row);
    }
}

function getRowsDataViewByElement(dataGrid) {
    
    var rows = [];
    
    if (dataGrid.hasClass('not-datagrid')) {

        if (dataGrid.find('li.selected-row').length > 0) {
            var selectedRowElem = dataGrid.find('li.selected-row');
            var selectedRowData = selectedRowElem.find('.selected-row-link').attr('data-row-data');
            rows[0] = JSON.parse(selectedRowData);
        } else if (dataGrid.find('div.selected-row').length > 0) {
            var selectedRowElem = dataGrid.find('div.selected-row');
            var selectedRowData = selectedRowElem.attr('data-row-data');
            rows[0] = JSON.parse(selectedRowData);
        } else if (dataGrid.find('.paneldv-selected-row').length > 0) {
            var selectedRowElem = dataGrid.find('.paneldv-selected-row');
            rows[0] = selectedRowElem.data('rowdata');
        }
        
    } else if (dataGrid.hasClass('jstree')) {
            
        var $selectedRow = dataGrid.find('.dv-twocol-f-selected');

        if ($selectedRow.length) {
            rows[0] = $selectedRow.data('rowdata');
        } else {
            var $selectedRow = dataGrid.find('.jstree-clicked span[data-rowdata]');
            if ($selectedRow.length) {
                rows[0] = $selectedRow.data('rowdata');
            }
        }

    } else {
        var op = dataGrid.datagrid('options');

        if (op.idField === null) {
            rows = dataGrid.datagrid('getRows');
        } else {
            rows = dataGrid.treegrid('getData');
        }
    }
    
    rows = dataViewSelectedRowsResolver(rows);
    return rows;
}

function getRowsDataView(dataViewId) {

    var dataGrid = window['objectdatagrid_' + dataViewId];
    var rows = [];

    if (typeof dataGrid !== 'undefined') {
        if (dataGrid.hasClass('not-datagrid')) {

            if (dataGrid.find('li.selected-row').length > 0) {

                var selectedRowElem = dataGrid.find('li.selected-row');
                var selectedRowData = selectedRowElem.find('.selected-row-link').attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);

            } else if (dataGrid.find('div.selected-row').length > 0) {

                var selectedRowElem = dataGrid.find('div.selected-row');
                var selectedRowData = selectedRowElem.attr('data-row-data');
                rows[0] = JSON.parse(selectedRowData);

            } else if (dataGrid.find('.paneldv-selected-row').length > 0) {
                
                var selectedRowElem = dataGrid.find('.paneldv-selected-row');
                rows[0] = selectedRowElem.data('rowdata');
                
            } else {
                var selectedRowsElem = dataGrid.find('[data-row-data]');

                selectedRowsElem.each(function(i, k) {
                    var selectedRowElem = $(this);
                    var selectedRowData = selectedRowElem.attr('data-row-data');
                    rows[i] = JSON.parse(selectedRowData);
                });
            }

        } else {
            
            var op = dataGrid.datagrid('options');
            if (op.idField === null) {
                rows = dataGrid.datagrid('getRows');
            } else {
                rows = dataGrid.treegrid('getData');
            }
        }

        rows = dataViewSelectedRowsResolver(rows);
    }

    return rows;
}

function dataViewLoadByElement(dataGrid, dvSearchParam) {
    if (dataGrid.hasClass('not-datagrid')) {
        var id = dataGrid.attr('id').split('-');
        window['explorerRefresh_' + id[1]](this, dvSearchParam);
    } else {
        var op = dataGrid.datagrid('options');
        if (op.idField === null) {
            dataGrid.datagrid('load', dvSearchParam);
        } else {
            dataGrid.treegrid('load', dvSearchParam);
        }
    }
}

function getDataViewFilterRules(dataViewId, isQryStr) {
    var dataGrid = window['objectdatagrid_' + dataViewId];
    var rules = '';

    if (typeof dataGrid !== 'undefined' && !dataGrid.hasClass('not-datagrid')) {

        var opts = dataGrid.datagrid('options');

        /*if (typeof opts.hasOwnProperty('filterOnlyEnterKey') == 'undefined' || (typeof opts.hasOwnProperty('filterOnlyEnterKey') !== 'undefined' && !opts.filterOnlyEnterKey)) {*/
        if (false) {

            var filterRules = opts.filterRules;

            if (filterRules.length) {
                if (filterRules.hasOwnProperty(0)) {
                    for (var i = 0; i < filterRules.length; i++) {
                        rules += '{"field":"' + filterRules[i].field + '","op":"' + filterRules[i].op + '","value":"' + filterRules[i].value + '"},';
                    }
                } else {
                    rules = '{"field":"' + filterRules.field + '","op":"' + filterRules.op + '","value":"' + filterRules.value + '"},';
                }

                rules = rtrim(rules, ',');

                if (isQryStr) {
                    rules = '&filterRules=[' + rules + ']';
                } else {
                    rules = '[' + rules + ']';
                }
            }

        } else {

            var hdr = dataGrid.datagrid('getPanel').find('div.datagrid-header');
            var filterRules = hdr.find('.datagrid-filter');

            if (filterRules.length) {

                var defaultOperand = opts.defaultFilterOperator;

                filterRules.each(function() {
                    var $this = $(this), v = $this.val();
                    if (v != '') {
                        rules += '{"field":"' + $this.attr('name') + '","op":"' + defaultOperand + '","value":"' + v + '"},';
                        dataGrid.datagrid('addFilterRule', { field: $this.attr('name'), op: defaultOperand, value: v });
                    } else {
                        dataGrid.datagrid('removeFilterRule', $this.attr('name'));
                    }
                });

                rules = rtrim(rules, ',');

                if (isQryStr) {
                    rules = '&filterRules=[' + rules + ']';
                } else {
                    rules = '[' + rules + ']';
                }
            }
        }
    }

    return rules;
}

function dataViewFocus(dataViewId) {
    setTimeout(function() {
        var dataGrid = window['objectdatagrid_' + dataViewId];

        if (typeof dataGrid !== 'undefined' && !dataGrid.hasClass('not-datagrid')) {
            var op = dataGrid.datagrid('options');
            if (op.idField === null) {
                dataGrid.datagrid('getPanel').find('div.datagrid-view > .datagrid-view2 > .datagrid-body').focus();
            } else {
                dataGrid.treegrid('getPanel').find('div.datagrid-view > .datagrid-view2 > .datagrid-body').focus();
            }
        }
    }, 1);
    return;
}

function dataViewFocusByElement(dataGrid) {
    setTimeout(function() {
        if (typeof dataGrid !== 'undefined' && !dataGrid.hasClass('not-datagrid')) {
            var op = dataGrid.datagrid('options');
            if (op.idField === null) {
                dataGrid.datagrid('getPanel').find('div.datagrid-view > .datagrid-view2 > .datagrid-body').focus();
            } else {
                dataGrid.treegrid('getPanel').find('div.datagrid-view > .datagrid-view2 > .datagrid-body').focus();
            }
        }
    }, 1);
    return;
}

function filePreview(rowData, element) {
    $.getScript('assets/custom/addon/plugins/pdfobject/pdfobject.min.js').done(function() {
        $.ajax({
            type: 'post',
            url: 'mdpreview/filePreview',
            data: { selectedRow: rowData },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(data) {
                element.find('.explorer_dv_preview').empty().append(data.html);
                Core.unblockUI();
            }
        });
    });
}

function explorerFilePreview(elem) {
    var _this = $(elem);
    var parent = _this.closest('.wfm-more-card');
    var mainParent = _this.closest('.explorer-table-row');
    var href = _this.attr('href').split('_');
    var dataViewId = href[2];
    var selectedRows = getDataViewSelectedRows(dataViewId);
    filePreview(selectedRows[0], parent);
}

function noActionFunction() {}

function bpTemplateToProcess(elem, processMetaDataId, dataViewId, selectedRow) {

    if (selectedRow.hasOwnProperty('metadataid')) {
        var dataGrid = $('#objectdatagrid_' + dataViewId);
        if (selectedRow.hasOwnProperty('itemid')) {
            _processParam['bpTemplateId'] = selectedRow.id;
            _processParam['addonJsonParam'] = JSON.stringify({
                "templateId": selectedRow.id,
                "itemId": (typeof selectedRow.itemid !== 'undefined') ? selectedRow.itemid : '',
            });
        } else {
            if (selectedRow.hasOwnProperty('id')) {
                _processParam['bpTemplateId'] = selectedRow.id;
                _processParam['addonJsonParam'] = JSON.stringify({
                    "templateId": selectedRow.id
                });
            }
        }
        runBusinessProcessWithDataView(dataGrid, dataViewId, selectedRow.metadataid, true, '', elem, '', '', '');
    }
}

function explorerItemActive(elem) {
    var _this = $(elem);
    _this.closest('ul').find('li.selected-row').removeClass('selected-row');
    _this.closest('li').addClass('selected-row');
}

function bpIDCardFill(_parent, _process, partCode, RegisterNum, Surname, GivenName, SexCode, Forename, Birthday, AimagCity, SoumDistrict, BagKhoroo, AddressDetail, ImageSrc) {

    _parent.find('.idcard-registernumber').text(RegisterNum);
    _parent.find('.idcard-lastname').text(Surname);
    _parent.find('.idcard-firstname').text(GivenName);
    _parent.find('.idcard-gender').text(SexCode);
    _parent.find('.idcard-forename').text(Forename);
    _parent.find('.idcard-birthday').text(Birthday);
    _parent.find('.idcard-city').text(AimagCity);
    _parent.find('.idcard-district').text(SoumDistrict);
    _parent.find('.idcard-bagkhoroo').text(BagKhoroo);
    _parent.find('.idcard-street').text(AddressDetail);
    _parent.find('img.idcard-photo').attr('src', ImageSrc);

    if (partCode.toLowerCase() == 'a') {
        _process.find("input[data-path*='searchTrusteeRegister']").val(RegisterNum);
        _process.find("input[data-path*='trusteeLastname']").val(Surname);
        _process.find("input[data-path*='trusteeFirstname']").val(GivenName);
        _process.find("input[data-path*='TRUSTEE_FAMILY_NAME']").val(Forename);
        _process.find("input[data-path*='TRUSTEE_GENDER']").val(SexCode);
        _process.find("input[data-path*='trusteeAddress']").val(AddressDetail);
        _process.find("input[data-path*='trusteeCityName']").val(AimagCity);
        _process.find("input[data-path*='trusteeDistrictName']").val(SoumDistrict);
        _process.find("input[data-path*='trusteeStreetName']").val(BagKhoroo);
        _process.find("input[data-path='fullName']").val(Surname.charAt(0) + '.' + GivenName);
        _process.find("input[data-path='fullname']").val(Surname.charAt(0) + '.' + GivenName);
    }

    if (partCode.toLowerCase() == 'b') {
        _process.find("input[data-path*='searchSettlerRegister']").val(RegisterNum);
        _process.find("input[data-path*='settlerLastname']").val(Surname);
        _process.find("input[data-path*='settlerFirstname']").val(GivenName);
        _process.find("input[data-path*='SETTLER_FAMILY_NAME']").val(Forename);
        _process.find("input[data-path*='SETTLER_GENDER']").val(SexCode);
        _process.find("input[data-path*='settlerAddress']").val(AddressDetail);
        _process.find("input[data-path*='settlerCityName']").val(AimagCity);
        _process.find("input[data-path*='settlerDistricrName']").val(SoumDistrict);
        _process.find("input[data-path*='settlerStreetName']").val(BagKhoroo);
        _process.find("input[data-path='userFullName']").val(Surname.charAt(0) + '.' + GivenName);
    }
}

function bpChangeCustomerInformation(elem, widgetExpression, grouPath) {

    var registerNum = '',
        lastName = '',
        firstName = '',
        sexCode = '',
        familyName = '',
        birthday = '',
        aimagCity = '',
        sumDistrict = '',
        companyName = '',
        bagKhoroo = '',
        addressDetail = '',
        imageSrc = 'assets/core/global/img/images.jpg';


    var _this = $(elem);
    var _parent = _this.closest('.card');
    var _process = _this.closest('form');
    var mainWidgetExpression = widgetExpression;
    var widgetExpression = JSON.parse(decodeURIComponent(widgetExpression));

    var gPath = $(elem).closest('.detail-template-body').attr('data-dtl-template-path'),
        cindex = $(elem).closest('.detail-template-body-rows').index(),
        wCode = $(elem).closest('.detail-template-body').attr('data-dtl-template-widget');

    var dataUindex = cindex;

    var __subRowsSelection = _this.closest('.detail-template-body-sub-rows');
    var _subKeyRowsSelection = _this.closest('.detail-template-body-subkey-rows');

    if (__subRowsSelection.length) {
        if (_subKeyRowsSelection.length) {
            dataUindex = _subKeyRowsSelection.attr('data-parent-index') + _subKeyRowsSelection.attr('data-index') + _subKeyRowsSelection.attr('data-key-index');
            _subKeyRowsSelection.find('img.imageSrc').attr('src', imageSrc);
        } else {
            dataUindex = __subRowsSelection.attr('data-parent-index') + __subRowsSelection.attr('data-index');
            __subRowsSelection.find('img.imageSrc').attr('src', imageSrc);
        }
    } else {
        $(elem).closest('.detail-template-body-rows').find('img.imageSrc:first').attr('src', imageSrc);
    }

    if (_process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').find('span[data-uindex="' + dataUindex + '"]').length) {
        _process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').find('span[data-uindex="' + dataUindex + '"]').remove()
    }

    var wid = widgetExpression[wCode];
    if (typeof wid !== 'undefined' && wid.length > 0) {
        for (var i = 0; i < wid.length; i++) {
            var s = _process.find('span[data-dtl-template-widget="' + wCode + '"]');
    
            if (s.length) {
                s.each(function(k, v) {
                    var $mainSelector = $(this).children().eq(cindex),
                        ss = '';
                    if (__subRowsSelection.length && typeof editMode === 'undefined') {
                        var subIndex = __subRowsSelection.attr('data-index');
                        ss = $mainSelector.find('.detail-template-body-sub-rows:eq(' + subIndex + ')').find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
                        if (_subKeyRowsSelection.length) {
                            var subKeyIndex = _subKeyRowsSelection.attr('data-key-index');
                            ss = $mainSelector.find('.detail-template-body-sub-rows:eq(' + subIndex + ')').find('.detail-template-body-subkey-rows:eq(' + subKeyIndex + ')').find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
                        }
                    } else {
                        if (typeof editMode !== 'undefined') {
                            if (k > 0) {
                                if (__subRowsSelection.length) {
                                    var dtlSubRows = $mainSelector.find('.detail-template-body-sub-rows');
    
                                    if (typeof dtlSubRows !== 'undefined' && dtlSubRows.length) {
                                        dtlSubRows.each(function(kk, vv) {
                                            if (kk == editMode) {
                                                var ss = $(this).find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
    
                                                if (typeof ss !== 'undefined' && ss.length) {
                                                    wid[i].EXPRESSION = wid[i].EXPRESSION.replace(/&quot;/g, "'");
                                                    ss.val(eval(wid[i].EXPRESSION)).trigger('change');
                                                }
                                            }
                                        });
                                    }
    
                                } else {
                                    ss = $mainSelector.find("input[name='" + wid[i].PATH + "." + wid[i].FIELD + "']");
                                }
                            }
                        } else {
                            ss = $mainSelector.find("input[name='" + wid[i].PATH + "." + wid[i].FIELD + "']");
                        }
                    }
    
                    if (typeof ss !== 'undefined' && ss.length) {
                        wid[i].EXPRESSION = wid[i].EXPRESSION.replace(/&quot;/g, "'");
                        switch (wid[i].EXPRESSION) {
                            case 'familyName':
                                familyName = ss.val();
                                break;
                            case 'firstName':
                                firstName = ss.val();
                                break;
                            case 'lastName':
                                lastName = ss.val();
                                break;
                            case 'registerNum':
                                registerNum = ss.val();
                                break;
                            case 'aimagCity':
                                aimagCity = ss.val();
                                break;
                            case 'sumDistrict':
                                sumDistrict = ss.val();
                                break;
                            case 'bagKhoroo':
                                bagKhoroo = ss.val();
                                break;
                            case 'addressDetail':
                                addressDetail = ss.val();
                                break;
                            case 'company':
                                companyName = ss.val();
                                break;
                        }
    
                    }
                });
    
                if (typeof imageSrc !== 'undefined') {
                    var _splitGroupPath = grouPath.split('.');
                    var $trgSelection = $('table[data-table-path="' + wid[i].PATH + '"] > tbody > tr:eq(' + cindex + ')').find('input[data-path="' + wid[i].PATH + '.picture"]');
                    if (_subKeyRowsSelection.length) {
                        var $subIndex = __subRowsSelection.attr('data-index');
                        var $trgSelector = $('table[data-table-path="' + wid[i].PATH + '"] > tbody > tr:eq(' + cindex + ')').find('table[data-table-path="' + wid[i].PATH + '.' + _splitGroupPath[0] + '"] > tbody > tr:eq(' + $subIndex + ')');
                        if (_subKeyRowsSelection.length) {
                            var $subKeyIndex = _subKeyRowsSelection.attr('data-key-index');
                            $trgSelection = $trgSelector.find('table[data-table-path="' + wid[i].PATH + '.' + grouPath + '"] > tbody > tr:eq(' + $subKeyIndex + ')').find('input[data-path="' + wid[i].PATH + '.' + grouPath + '.picture"]');
                        } else {
                            $trgSelection = $trgSelector.find('input[data-path="' + wid[i].PATH + '.' + grouPath + '.picture"]');
                        }
                    }
    
                    $trgSelection.val(imageSrc).val(imageSrc);
                }
            }
        }
    }

    bpIDCardFillWtemplate(elem, _parent, _process, mainWidgetExpression, registerNum, lastName, firstName, sexCode, familyName, birthday, aimagCity, sumDistrict, bagKhoroo, addressDetail, imageSrc, grouPath, undefined, undefined, companyName);
}

function bpIDCardFillWtemplate(elem, _parent, _process, widgetExpression, registerNum, lastName, firstName, sexCode, familyName, birthday, aimagCity, sumDistrict, bagKhoroo, addressDetail, imageSrc, grouPath, editMode, cardObjImage, companyName) {
    var widgetExpression = JSON.parse(decodeURIComponent(widgetExpression));
    var gPath = $(elem).closest('.detail-template-body').attr('data-dtl-template-path'),
        cindex = $(elem).closest('.detail-template-body-rows').index(),
        wCode = $(elem).closest('.detail-template-body').attr('data-dtl-template-widget');

    var dataUindex = cindex;
    var __subRowsSelection = $(elem).closest('.detail-template-body-sub-rows');
    var _subKeyRowsSelection = $(elem).closest('.detail-template-body-subkey-rows');

    if (__subRowsSelection.length) {
        if (_subKeyRowsSelection.length) {
            dataUindex = _subKeyRowsSelection.attr('data-parent-index') + _subKeyRowsSelection.attr('data-index') + _subKeyRowsSelection.attr('data-key-index');
            _subKeyRowsSelection.find('img.imageSrc').attr('src', imageSrc);
        } else {
            dataUindex = __subRowsSelection.attr('data-parent-index') + __subRowsSelection.attr('data-index');
            __subRowsSelection.find('img.imageSrc').attr('src', imageSrc);
        }
    } else {
        $(elem).closest('.detail-template-body-rows').find('img.imageSrc:first').attr('src', imageSrc);
    }

    if (_process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').find('span[data-uindex="' + dataUindex + '"]').length) {
        _process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').find('span[data-uindex="' + dataUindex + '"]').remove()
    }

    if (typeof companyName !== 'undefined' && companyName !== '') {

        _process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').append(
            '<span style="display:inline-block" data-uindex="' + dataUindex + '">' +
            '<img src="' + imageSrc + '" class="img-fluid rounded-circle idcard-photo" style="height: 70px;">' +
            '<div class="widget-last-first-name">' + companyName + '</div>' +
            '</span>'
        );

    } else {
        _process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').append(
            '<span style="display:inline-block" data-uindex="' + dataUindex + '">' +
            '<img src="' + imageSrc + '" class="img-fluid rounded-circle idcard-photo" style="height: 70px;">' +
            '<div class="widget-last-first-name">' + lastName.charAt(0) + '.' + firstName + '</div>' +
            '</span>'
        );
    }

    _process.find('div[data-path-code="' + gPath + '"]').find('span.party-title-counter').text('(' + (_process.find('div[data-path-code="' + gPath + '"]').find('.widget-party-container').children('span').length) + ')');

    var wid = widgetExpression[wCode];

    if (typeof wid !== 'undefined' && wid.length > 0) {
        for (var i = 0; i < wid.length; i++) {
            var s = _process.find('span[data-dtl-template-widget="' + wCode + '"]');
            if (s.length) {
                s.each(function(k, v) {

                    var $mainSelector = $(this).children().eq(cindex),
                        ss = '';

                    if (__subRowsSelection.length && typeof editMode === 'undefined') {
                        var subIndex = __subRowsSelection.attr('data-index');
                        var $detailTemplateSelector = $mainSelector.find('.detail-template-body-sub-rows:eq(' + subIndex + ')');
                        ss = (wid[i].EXPRESSION === 'company') ? $detailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + ".company']") : $detailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");

                        if (_subKeyRowsSelection.length) {
                            var subKeyIndex = _subKeyRowsSelection.attr('data-key-index');
                            var $subDetailTemplateSelector = $mainSelector.find('.detail-template-body-subkey-rows:eq(' + subKeyIndex + ')');

                            ss = (wid[i].EXPRESSION === 'company') ? $subDetailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + ".company']") : $subDetailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
                        }
                    } else if (typeof editMode !== 'undefined') {
                        if (k > 0) {
                            if (__subRowsSelection.length) {
                                var dtlSubRows = $mainSelector.find('.detail-template-body-sub-rows');

                                if (typeof dtlSubRows !== 'undefined' && dtlSubRows.length) {
                                    dtlSubRows.each(function(kk, vv) {
                                        if (kk == editMode) {
                                            ss = (wid[i].EXPRESSION === 'company') ? $(this).find("input[name='" + wid[i].PATH + "." + grouPath + ".company']") : $(this).find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
                                            if (typeof ss !== 'undefined' && ss.length) {
                                                wid[i].EXPRESSION = wid[i].EXPRESSION.replace(/&quot;/g, "'");
                                                ss.val(eval(wid[i].EXPRESSION)).trigger('change');
                                            }
                                        }
                                    });
                                }

                            } else {
                                ss = (wid[i].EXPRESSION === 'company') ? $mainSelector.find("input[name='" + wid[i].PATH + ".company']") : $mainSelector.find("input[name='" + wid[i].PATH + "." + wid[i].FIELD + "']");
                            }
                        }
                    } else {
                        ss = (wid[i].EXPRESSION === 'company') ? $mainSelector.find("input[name='" + wid[i].PATH + ".company']") : $mainSelector.find("input[name='" + wid[i].PATH + "." + wid[i].FIELD + "']");
                    }

                    if (typeof ss !== 'undefined' && ss.length) {
                        wid[i].EXPRESSION = wid[i].EXPRESSION.replace(/&quot;/g, "'");

                        var $evalue = (wid[i].EXPRESSION === 'company') ? eval('companyName') : eval(wid[i].EXPRESSION);
                        ss.val($evalue).trigger('change');
                    }
                });

                if (typeof cardObjImage !== 'undefined') {
                    var _splitGroupPath = grouPath.split('.');
                    var $trgSelection = $('table[data-table-path="' + wid[i].PATH + '"] > tbody > tr:eq(' + cindex + ')').find('input[data-path="' + wid[i].PATH + '.picture"]');

                    if (_subKeyRowsSelection.length) {

                        var $subIndex = __subRowsSelection.attr('data-index');
                        var $trgSelector = $('table[data-table-path="' + wid[i].PATH + '"] > tbody > tr:eq(' + cindex + ')').find('table[data-table-path="' + wid[i].PATH + '.' + _splitGroupPath[0] + '"] > tbody > tr:eq(' + $subIndex + ')');

                        if (_subKeyRowsSelection.length) {
                            var $subKeyIndex = _subKeyRowsSelection.attr('data-key-index');
                            $trgSelection = $trgSelector.find('table[data-table-path="' + wid[i].PATH + '.' + grouPath + '"] > tbody > tr:eq(' + $subKeyIndex + ')').find('input[data-path="' + wid[i].PATH + '.' + grouPath + '.picture"]');
                        } else {
                            $trgSelection = $trgSelector.find('input[data-path="' + wid[i].PATH + '.' + grouPath + '.picture"]');
                        }

                    }

                    $trgSelection.val(cardObjImage).val(cardObjImage);
                }
            }
        }
    }
}

function bpIDCardFillWtemplateHeader(dataProcessId, _parent, _process, widgetExpression, registerNum, lastName, firstName, sexCode, familyName, birthday, aimagCity, sumDistrict, bagKhoroo, addressDetail, imageSrc, grouPath, editMode, cardObjImage) {
    var widgetExpression = JSON.parse(decodeURIComponent(widgetExpression));
    var wid = widgetExpression['mainWidget'];

    if (typeof wid !== 'undefined') {
        for (var i = 0; i < wid.length; i++) {

            var $mainSelector = $('.mainWidget', '#bp-window-' + dataProcessId),
                ss = $mainSelector.find("input[data-path='" + wid[i].FIELD + "']");

            if (typeof ss !== 'undefined' && ss.length) {
                wid[i].EXPRESSION = wid[i].EXPRESSION.replace(/&quot;/g, "'");
                ss.val(eval(wid[i].EXPRESSION)).trigger('change');
            }
        }

        $('.bp-tmp-idcard-header-part', '#bp-window-' + dataProcessId).find('.widget-party-container').append(
            '<span style="display:inline-block" data-uindex="1">' +
            '<img src="' + imageSrc + '" class="img-fluid rounded-circle idcard-photo" style="height: 70px;">' +
            '<div class="widget-last-first-name">' + lastName.charAt(0) + '.' + firstName + '</div>' +
            '</span>'
        );
    }
}

function bpIDCardReadWtemplate(elem, widgetExpression, grouPath, callbackFunction, methodId, mainUniqId) {
    Core.blockUI({boxed: true, message: 'Loading...'});

    if ("WebSocket" in window) {
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            ws.send('{"command":"card_info", "dateTime":"' + currentDateTime + '", details: [{"key": "get_image", "value": "1"}]}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            PNotify.removeAll();

            if (jsonData.status == 'success' && 'details' in Object(jsonData)) {

                var cardObj = convertDataElementToArray(jsonData.details);
                
                if (typeof callbackFunction !== 'undefined' && typeof methodId !== 'undefined' && typeof mainUniqId !== 'undefined') {
                    window['idCardReadWtemplate_' + mainUniqId](elem, methodId, mainUniqId, cardObj);
                } else {
                    var RegisterNum = cardObj.RegisterNum.toUpperCase();
                    var Surname = ucfirst(cardObj.Surname);
                    var GivenName = ucfirst(cardObj.GivenName);
                    var SexCode = ucfirst(cardObj.SexCode);
                    var Forename = ucfirst(cardObj.Forename);
                    var Birthday = cardObj.Birthday;
                    var AimagCity = ucfirst(cardObj.AimagCity);
                    var SoumDistrict = ucfirst(cardObj.SoumDistrict);
                    var BagKhoroo = ucfirst(cardObj.BagKhoroo);
                    var ImageSrc = ('Image' in Object(cardObj)) ? 'data:image/jpeg;base64,' + cardObj.Image : 'assets/core/global/img/images.jpg';
                    var AddressDetail = ucfirst(cardObj.AddressDetail);
                    AddressDetail = AddressDetail.replace('хороо, лол', 'хороолол');
                    AimagCity = AimagCity.replace('УБ', 'Улаанбаатар');

                    var _this = $(elem);
                    var _parent = _this.closest('.card');
                    var _process = _this.closest('form');
                    
                    Core.unblockUI();
                    bpIDCardFillWtemplate(elem, _parent, _process, widgetExpression,
                        RegisterNum, Surname, GivenName, SexCode,
                        Forename, Birthday, AimagCity, SoumDistrict,
                        BagKhoroo, AddressDetail, ImageSrc, grouPath, undefined, cardObj.Image);
                    
                    var $dialogConfirm = 'dialog-confirm-addressinfo-' + getUniqueId(1);
                    if (!$("#" + $dialogConfirm).length) {
                        $('<div id="' + $dialogConfirm + '"></div>').appendTo('body');
                    }

                    var $dialogC = $("#" + $dialogConfirm);
                    var $html = '';

                    $html += '<div class="row">' + AimagCity + '</div>';
                    $html += '<div class="row">' + SoumDistrict + '</div>';
                    $html += '<div class="row">' + BagKhoroo + '</div>';
                    $html += '<div class="row">' + AddressDetail + '</div>';

                    $dialogC.empty().append($html);
                    $dialogC.dialog({
                        cache: false,
                        resizable: false,
                        bgiframe: true,
                        autoOpen: false,
                        title: 'Иргэний хаягийн мэдээлэл баталгаажуулалт',
                        width: 400,
                        height: "auto",
                        modal: true,
                        close: function () {
                            $dialogC.empty().dialog('destroy').remove();
                        },
                        buttons: [
                            {text: plang.get('yes_btn'), class: 'btn green-meadow btn-sm', click: function () {
                                bpIDCardFillWtemplate(elem, _parent, _process, widgetExpression,
                                        RegisterNum, Surname, GivenName, SexCode,
                                        Forename, Birthday, AimagCity, SoumDistrict,
                                        BagKhoroo, AddressDetail, ImageSrc, grouPath, undefined, cardObj.Image);
                                $dialogC.dialog('close');
                            }},
                            {text: plang.get('no_btn') + ' (Иргэний хаягийн мэдээлэл дуудах)', class: 'btn blue-madison btn-sm', click: function () {

                                var $dialogName123 = 'dialog-confirm-' + getUniqueId(1);
                                if (!$("#" + $dialogName123).length) {
                                    $('<div id="' + $dialogName123 + '"></div>').appendTo('body');
                                }

                                var $uniqId = getUniqueId(1);
                                $("#" + $dialogName123).empty().append(
                                        '<div class="input-group input-group-criteria" id="bp-window-'+ $uniqId +'" style="float: left;">' + 
                                            '<input type="text" name="temp-stateRegNumber" class="form-control form-control-sm stringInit" readonly="readonly" data-path="temp-stateRegNumber" data-field-name="stateRegNumber" value="'+ RegisterNum +'" data-isclear="0" placeholder="Регистрийн дугаар" data-regex="^[ФЦУЖЭНГШҮЗКЪЙЫБӨАХРОЛДПЯЧЁСМИТЬВЮЕЩфцужэнгшүзкъйыбөахролдпячёсмитьвюещ]{2}[0-9]{8}$" data-regex-message="" data-inputmask-regex="^[ФЦУЖЭНГШҮЗКЪЙЫБӨАХРОЛДПЯЧЁСМИТЬВЮЕЩфцужэнгшүзкъйыбөахролдпячёсмитьвюещ]{2}[0-9]{8}$">' + 
                                            '<input type="hidden" name="temp-fingerPrint" class="form-control form-control-sm" data-path="temp-fingerPrint" value="">' + 
                                            '<span class="input-group-btn ">' +
                                                '<button type="button" class="btn btn-sm dropdown-toggle criteria-condition-btn  dropdown-none-arrow" data-toggle="dropdown" aria-expanded="true" tabindex="-1" onclick="bpFingerImageData(this, \'temp-fingerPrint\', \''+ $uniqId +'\')" style="padding: 0px 5px 0px 5px;border-bottom-left-radius: 0; border-top-left-radius: 0; font-size: 13.5px;">Хурууны хээ уншуулах</button>' +
                                            '</span> ' +
                                        '</div>');
                                $("#" + $dialogName123).dialog({
                                    cache: false,
                                    resizable: false,
                                    bgiframe: true,
                                    autoOpen: false,
                                    title: 'Иргэний хаягийн мэдээлэл дуудах',
                                    width: 450,
                                    height: "auto",
                                    modal: true,
                                    close: function() {
                                        $("#" + $dialogName123).empty().dialog('destroy').remove();
                                    },
                                    buttons: [{
                                            text: 'Дараах (Ажилтан хурууны хээ уншуулах)',
                                            class: 'btn green-meadow btn-sm',
                                            click: function() {
                                                var $stateRegNumber = $("#" + $dialogName123).find('input[data-path="temp-stateRegNumber"]').val();
                                                var $fingerPrint = $("#" + $dialogName123).find('input[data-path="temp-fingerPrint"]').val();

                                                if (!$stateRegNumber && !$fingerPrint) {
                                                    new PNotify({
                                                        title: 'Warning',
                                                        text: 'Иргэний мэдээллийг гүйцэт оруулна уу?',
                                                        type: 'warning',
                                                        sticker: false
                                                    });
                                                    return;
                                                }

                                                if ("WebSocket" in window) {
                                                    console.log("WebSocket is supported by your Browser!");
                                                    // Let us open a web socket
                                                    var ws = new WebSocket("ws://localhost:58324/socket");

                                                    ws.onopen = function() {
                                                        var currentDateTime = GetCurrentDateTime();
                                                        ws.send('{"command":"finger_image", "dateTime":"' + currentDateTime + '", details: []}');
                                                    };

                                                    ws.onmessage = function(evt) {
                                                        var received_msg = evt.data;
                                                        var jsonData = JSON.parse(received_msg);
                                                        if (jsonData.status == 'success') {

                                                            var $fingerBase = jsonData.details[0].value;
                                                            _this.closest('div.template-action-buttons').attr('check-reg', $stateRegNumber);
                                                            _this.closest('div.template-action-buttons').attr('check-citizen-finger', $stateRegNumber);

                                                            $.ajax({
                                                                type: 'post',
                                                                url: 'mddoc/saveFingerDataTemp',
                                                                data: { 
                                                                    operatorFinger: $fingerBase, 
                                                                    finger: $fingerPrint, 
                                                                    registerNumber: $stateRegNumber,
                                                                    isaddress: 1
                                                                },
                                                                dataType: 'json',
                                                                beforeSend: function() {
                                                                    Core.blockUI({message: 'Loading...', boxed: true});
                                                                },
                                                                success: function(response) {
                                                                    var addressData = response.data;
                                                                    if (response.status === 'success') {

                                                                        var $regNumber = RegisterNum.toUpperCase();
                                                                        var $splitAddress = addressData.fulladdress.split(',');
                                                                        var $passwordAddress = '';
                                                                        $.each($splitAddress, function(index, row) {
                                                                            if (index !== 0) {
                                                                                $passwordAddress += ' ' + row;
                                                                            }
                                                                        });

                                                                        bpIDCardFillWtemplate(elem, _parent, _process, widgetExpression,
                                                                                RegisterNum, Surname, GivenName, SexCode,
                                                                                Forename, Birthday, addressData.aimagcityname, addressData.soumdistrictname, addressData.bagkhorooname, $passwordAddress, ImageSrc, grouPath, undefined, cardObj.Image);
                                                                        $dialogC.dialog('close');
                                                                        $("#" + $dialogName123).empty().dialog('close');
                                                                    } else {
                                                                        new PNotify({
                                                                            title: response.status,
                                                                            text: response.message,
                                                                            type: response.status,
                                                                            sticker: false
                                                                        });
                                                                    }
                                                                    Core.unblockUI();
                                                                },
                                                                error: function(jqXHR, exception) {
                                                                    var msg = '';
                                                                    if (jqXHR.status === 0) {
                                                                        msg = 'Not connect.\n Verify Network.';
                                                                    } else if (jqXHR.status == 404) {
                                                                        msg = 'Requested page not found. [404]';
                                                                    } else if (jqXHR.status == 500) {
                                                                        msg = 'Internal Server Error [500].';
                                                                    } else if (exception === 'parsererror') {
                                                                        msg = 'Requested JSON parse failed.';
                                                                    } else if (exception === 'timeout') {
                                                                        msg = 'Time out error.';
                                                                    } else if (exception === 'abort') {
                                                                        msg = 'Ajax request aborted.';
                                                                    } else {
                                                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                                                    }

                                                                    PNotify.removeAll();
                                                                    new PNotify({
                                                                        title: 'Error',
                                                                        text: msg,
                                                                        type: 'error',
                                                                        sticker: false
                                                                    });
                                                                    Core.unblockUI();
                                                                }
                                                            });

                                                        } else {
                                                            console.log(jsonData);
                                                            var resultJson = {
                                                                Status: 'Error',
                                                                Error: jsonData.message
                                                            }

                                                            new PNotify({
                                                                title: jsonData.status,
                                                                text: (jsonData.description !== 'undefined') ? jsonData.description : 'Амжилтгүй боллоо',
                                                                type: jsonData.status,
                                                                sticker: false
                                                            });
                                                            console.log(JSON.stringify(resultJson));
                                                        }
                                                    };

                                                    ws.onerror = function(event) {
                                                        var resultJson = {
                                                            Status: 'Error',
                                                            Error: 'Клент ажиллуулахад алдаа гарлаа.'
                                                        }
                                                        PNotify.removeAll();
                                                        new PNotify({
                                                            title: 'warning',
                                                            text: 'Клент ажиллуулахад алдаа гарлаа.',
                                                            type: 'warning',
                                                            sticker: false
                                                        });
                                                        console.log(JSON.stringify(resultJson));
                                                    };

                                                    ws.onclose = function() {
                                                        console.log("Connection is closed...");
                                                    };
                                                } else {
                                                    var resultJson = {
                                                        Status: 'Error',
                                                        Error: "WebSocket NOT supported by your Browser!"
                                                    }

                                                    console.log(JSON.stringify(resultJson));
                                                }

                                            }
                                        },
                                        {
                                            text: 'Хаах',
                                            class: 'btn blue-madison btn-sm',
                                            click: function() {
                                                $("#" + $dialogName).dialog('close');
                                            }
                                        }
                                    ]
                                });
                                $("#" + $dialogName123).dialog('open');
                                Core.initAjax($("#" + $dialogName123));

                            }}
                        ]
                    });
                    $dialogC.dialog('open');
                }
                

            } else {
                new PNotify({
                    title: 'Error',
                    text: jsonData.description,
                    type: 'error',
                    sticker: false
                });
            }

            Core.unblockUI();
        };

        ws.onerror = function(event) {
            
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });

            Core.unblockUI();
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
            Core.unblockUI();
        };

    } else {

        PNotify.removeAll();
        new PNotify({
            title: 'Error',
            text: 'WebSocket NOT supported by your Browser!',
            type: 'error',
            sticker: false
        });

        Core.unblockUI();
    }
}

function bpHeaderIDCardReadWtemplate(elem, widgetExpressionGlobalStr, methodId) {

    Core.blockUI({boxed: true, message: 'Loading...'});

    if ("WebSocket" in window) {
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            ws.send('{"command":"card_info", "dateTime":"' + currentDateTime + '", details: [{"key": "get_image", "value": "1"}]}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            PNotify.removeAll();

            if (jsonData.status == 'success' && 'details' in Object(jsonData)) {

                var cardObj = convertDataElementToArray(jsonData.details);

                var RegisterNum = cardObj.RegisterNum.toUpperCase();
                var Surname = ucfirst(cardObj.Surname);
                var GivenName = ucfirst(cardObj.GivenName);
                var SexCode = ucfirst(cardObj.SexCode);
                var Forename = ucfirst(cardObj.Forename);
                var Birthday = cardObj.Birthday;
                var AimagCity = ucfirst(cardObj.AimagCity);
                var SoumDistrict = ucfirst(cardObj.SoumDistrict);
                var BagKhoroo = ucfirst(cardObj.BagKhoroo);
                var ImageSrc = ('Image' in Object(cardObj)) ? 'data:image/jpeg;base64,' + cardObj.Image : 'assets/core/global/img/images.jpg';
                var AddressDetail = ucfirst(cardObj.AddressDetail);
                AddressDetail = AddressDetail.replace('хороо, лол', 'хороолол');
                AimagCity = AimagCity.replace('УБ', 'Улаанбаатар');

                var _this = $(elem);
                var _parent = _this.closest('.card');
                var _process = _this.closest('form');

                bpIDCardFillWtemplateHeader(methodId, _parent, _process, widgetExpressionGlobalStr,
                    RegisterNum, Surname, GivenName, SexCode,
                    Forename, Birthday, AimagCity, SoumDistrict,
                    BagKhoroo, AddressDetail, ImageSrc, 'mainWigdet', undefined, cardObj.Image);

            } else {
                new PNotify({
                    title: 'Error',
                    text: jsonData.description,
                    type: 'error',
                    sticker: false
                });
            }

            Core.unblockUI();
        };

        ws.onerror = function(event) {
            
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });
            Core.unblockUI();
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
            Core.unblockUI();
        };

    } else {

        PNotify.removeAll();
        new PNotify({
            title: 'Error',
            text: 'WebSocket NOT supported by your Browser!',
            type: 'error',
            sticker: false
        });

        Core.unblockUI();
    }
}

function bpIDCardRead(partCode, elem) {

    Core.blockUI({boxed: true, message: 'Loading...'});

    if ("WebSocket" in window) {
        console.log("WebSocket is supported by your Browser!");
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            ws.send('{"command":"card_info", "dateTime":"' + currentDateTime + '", details: [{"key": "get_image", "value": "1"}]}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            PNotify.removeAll();

            if (jsonData.status == 'success' && 'details' in Object(jsonData)) {

                var cardObj = convertDataElementToArray(jsonData.details);

                var RegisterNum = cardObj.RegisterNum.toUpperCase();
                var Surname = ucfirst(cardObj.Surname);
                var GivenName = ucfirst(cardObj.GivenName);
                var SexCode = ucfirst(cardObj.SexCode);
                var Forename = ucfirst(cardObj.Forename);
                var Birthday = cardObj.Birthday;
                var AimagCity = ucfirst(cardObj.AimagCity);
                var SoumDistrict = ucfirst(cardObj.SoumDistrict);
                var BagKhoroo = ucfirst(cardObj.BagKhoroo);
                var ImageSrc = ('Image' in Object(cardObj)) ? 'data:image/jpeg;base64,' + cardObj.Image : 'assets/core/global/img/images.jpg';
                var AddressDetail = ucfirst(cardObj.AddressDetail);
                AddressDetail = AddressDetail.replace('хороо, лол', 'хороолол');
                AimagCity = AimagCity.replace('УБ', 'Улаанбаатар');

                var _this = $(elem);
                var _parent = _this.closest('.card');
                var _process = _this.closest('form');

                bpIDCardFill(_parent, _process, partCode,
                    RegisterNum, Surname, GivenName, SexCode,
                    Forename, Birthday, AimagCity, SoumDistrict,
                    BagKhoroo, AddressDetail, ImageSrc);

            } else {
                new PNotify({
                    title: 'Error',
                    text: jsonData.description,
                    type: 'error',
                    sticker: false
                });
            }

            Core.unblockUI();
        };

        ws.onerror = function(event) {
            
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });
            Core.unblockUI();
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
            Core.unblockUI();
        };

    } else {

        PNotify.removeAll();
        new PNotify({
            title: 'Error',
            text: 'WebSocket NOT supported by your Browser!',
            type: 'error',
            sticker: false
        });

        Core.unblockUI();
    }
}

function bpIDCardFingerPrint(partCode, elem) {

    Core.blockUI({boxed: true, message: 'Loading...'});

    if ("WebSocket" in window) {
        console.log("WebSocket is supported by your Browser!");
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            ws.send('{"command":"finger_scan", "dateTime":"' + currentDateTime + '"}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            PNotify.removeAll();

            if (jsonData.status == 'success' && 'details' in Object(jsonData)) {

                var fingerPrintObj = convertDataElementToArray(jsonData.details);

                if (fingerPrintObj.userId != '-1') {

                    $.ajax({
                        type: 'post',
                        url: 'mdcommon/getPersonByIdKitUserId',
                        data: { userId: fingerPrintObj.userId },
                        dataType: 'json',
                        async: false,
                        success: function(data) {

                            if (data.status == 'success') {

                                var _this = $(elem);
                                var _parent = _this.closest('.card');
                                var _process = _this.closest('form');
                                var response = data.data;

                                var imageSrc = 'assets/core/global/img/images.jpg';

                                if (response.photo != null) {
                                    imageSrc = response.photo;
                                }

                                bpIDCardFill(_parent, _process, partCode, response.registerNumber,
                                    response.lastName, response.firstName, response.gender, response.familyName,
                                    response.birthDate, response.city, response.district, response.street,
                                    response.addressDetail, imageSrc);

                            } else {
                                new PNotify({
                                    title: 'Error',
                                    text: 'Бүртгэл үүсээгүй байна.',
                                    type: 'error',
                                    sticker: false
                                });
                            }
                        }
                    });

                } else {
                    new PNotify({
                        title: 'Error',
                        text: 'Бүртгэл үүсээгүй байна.',
                        type: 'error',
                        sticker: false
                    });
                }

            } else {
                if (jsonData.description != null) {
                    new PNotify({
                        title: 'Error',
                        text: jsonData.description,
                        type: 'error',
                        sticker: false
                    });
                }
            }

            Core.unblockUI();
        };

        ws.onerror = function(event) {
            
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });
            Core.unblockUI();
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
            Core.unblockUI();
        };

    } else {

        PNotify.removeAll();
        new PNotify({
            title: 'Error',
            text: 'WebSocket NOT supported by your Browser!',
            type: 'error',
            sticker: false
        });

        Core.unblockUI();
    }
}

function bpIDCardRegister(partCode, elem, taxonamyObj) {
    var $dialogName = 'dialog-idcard-register';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }

    $.ajax({
        type: 'post',
        url: 'mdcommon/personRegister',
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $("#" + $dialogName).empty().append(data.html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 650,
                height: "auto",
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: data.save_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {

                            $("#add-person-form").validate({ errorPlacement: function() {} });

                            if ($("#add-person-form").valid()) {

                                $('#add-person-form').ajaxSubmit({
                                    type: 'post',
                                    url: 'mdcommon/savePersonRegister',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: plang.get('msg_saving_block'), boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();

                                        if (data.status === 'success') {
                                            new PNotify({
                                                title: 'Success',
                                                text: data.message,
                                                type: 'success',
                                                sticker: false
                                            });

                                            var _this = $(elem);
                                            var _parent = _this.closest('.card');
                                            var _process = _this.closest('form');
                                            var response = data.data;
                                            var imageSrc = 'assets/core/global/img/images.jpg';

                                            if (response.photo != null) {
                                                imageSrc = response.photo;
                                            }

                                            if (typeof taxonamyObj === 'undefined') {
                                                bpIDCardFill(_parent, _process, partCode, response.registerNumber,
                                                    response.lastName, response.firstName, response.gender, response.familyName,
                                                    response.birthDate, response.city, response.district, response.street,
                                                    response.addressDetail, imageSrc);
                                            } else {
                                                bpIDCardFillWtemplate(elem, _parent, _process, response.registerNumber,
                                                    response.lastName, response.firstName, response.gender, response.familyName,
                                                    response.birthDate, response.city, response.district, response.street,
                                                    response.addressDetail, imageSrc);
                                            }

                                            $("#" + $dialogName).dialog('close');
                                        } else {
                                            new PNotify({
                                                title: 'Error',
                                                text: data.message,
                                                type: 'error',
                                                sticker: false
                                            });
                                        }
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $("#" + $dialogName).dialog('close');
                        }
                    }
                ]
            });
            $("#" + $dialogName).dialog('open');

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($("#" + $dialogName));
    });
}

function renderIDCardPartHtml(partCode) {
    var partTitle = '';
    if (partCode == 'a') {
        partTitle = 'А';
    } else if (partCode == 'b') {
        partTitle = 'Б';
    }
    return '<div class="card light bp-tmp-idcard-part" data-part-code="' + partCode + '">' +
        '<div class="card-header card-header-no-padding header-elements-inline">' +
        '<div class="card-title"><i class="fa fa-credit-card mr-1"></i><span class="caption-subject font-weight-bold uppercase">' + partTitle + ' тал</span></div>' +
        '<div class="header-elements"><div class="list-icons"><a class="list-icons-item" data-action="collapse"></a></div></div>' +
        '</div>' +
        '<div class="card-body">' +
        '<div class="row">' +
        '<div class="col-md-4 pr10">' +
        '<img src="assets/core/global/img/images.jpg" class="img-fluid rounded-circle idcard-photo">' +
        '<button type="button" class="btn btn-circle btn-block blue btn-sm mt10" onclick="bpIDCardRead(\'' + partCode + '\', this);">И/үнэмлэх</button>' +
        '<button type="button" class="btn btn-circle btn-block blue btn-sm mt5" onclick="bpIDCardFingerPrint(\'' + partCode + '\', this);">Хурууны хээ</button>' +
        '<button type="button" class="btn btn-circle btn-block blue btn-sm mt5" onclick="bpIDCardRegister(\'' + partCode + '\', this);">Бүртгэл</button>' +
        '</div><div class="col-md-7"><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Регистр №:</label><div class="col-md-7 pr0 pl5 idcard-registernumber"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Овог:</label><div class="col-md-7 pr0 pl5 idcard-lastname"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Нэр:</label><div class="col-md-7 pr0 pl5 idcard-firstname"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Хүйс:</label><div class="col-md-7 pr0 pl5 idcard-gender"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Ургийн овог:</label><div class="col-md-7 pr0 pl5 idcard-forename"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Төрсөн огноо:</label><div class="col-md-7 pr0 pl5 idcard-birthday"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Аймаг/Хот:</label><div class="col-md-7 pr0 pl5 idcard-city"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Сум/Дүүрэг:</label><div class="col-md-7 pr0 pl5 idcard-district"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Баг/Хороо:</label><div class="col-md-7 pr0 pl5 idcard-bagkhoroo"></div><div class="clearfix w-100"></div></div></div><div class="row"><div class="form-group row fom-row"><label class="col-form-label col-md-5 pr0 pl0">Гудамж/Байр:</label><div class="col-md-7 pr0 pl5 idcard-street"></div><div class="clearfix w-100"></div></div></div></div></div></div></div>';
}

function appendWidgetProcessTemplate(uniqId, taxonamyObj, widgetExpression, widget) {
    var partTitle = '',
        taxonamyObjParse = JSON.parse(taxonamyObj);

    return '<div class="card light bp-tmp-idcard-part" data-template-index="0" data-path-code="' + taxonamyObjParse[0]['PATH'] + '">' +
        '<div class="card-header card-header-no-padding header-elements-inline">' +
        '<div class="card-title"><i class="fa fa-credit-card mr-1"></i><span class="caption-subject font-weight-bold uppercase">' + widget.text.toUpperCase() + '</span> <span class="party-title-counter">(0)</span></div>' +
        '<div class="header-elements"><div class="list-icons"><a class="list-icons-item" data-action="collapse"></a></div></div>' +
        '</div>' +
        '<div class="card-body" style="min-height: 85px;">' +
        '<div class="row">' +
        '<div class="col-md-12 pr10 widget-party-container">' +
        '</div></div>' +
        '</div></div>';
}

function renderIDCardPanel(uniqId) {
    var uniqElement = $('body').find('div#' + uniqId);
    var processElement = uniqElement.closest('form');
    var idCardHtml = '';

    if (processElement.find("input[data-path*='searchTrusteeRegister']").length > 0) {
        idCardHtml += renderIDCardPartHtml('a');
    }

    if (processElement.find("input[data-path*='searchSettlerRegister']").length > 0) {
        idCardHtml += renderIDCardPartHtml('b');
    }

    uniqElement.html(idCardHtml);
}

function bpSignatureWrite(elem) {
    var $this = $(elem),
        $parent = $this.closest('.bp-signature');

    Core.blockUI({boxed: true, message: 'Loading...'});

    if ("WebSocket" in window) {
        console.log("WebSocket is supported by your Browser!");
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            ws.send('{"command":"get_signature_wacom", "dateTime":"' + currentDateTime + '"}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            PNotify.removeAll();

            if (jsonData.status == 'success' && 'details' in Object(jsonData)) {

                var signatureObj = convertDataElementToArray(jsonData.details);

                if ('sigImg' in Object(signatureObj)) {
                    $parent.find('.bp-signature-image').css('background-image', 'url(data:image/jpeg;base64,' + signatureObj.sigImg + ')');
                    $parent.find("input[type='hidden']").val(signatureObj.sigImg).trigger('change');
                } else {
                    $parent.find('.bp-signature-image').css('background-image', 'none');
                    $parent.find("input[type='hidden']").val('').trigger('change');
                }

            } else {
                if (jsonData.description != null) {
                    new PNotify({
                        title: 'Error',
                        text: jsonData.description,
                        type: 'error',
                        sticker: false
                    });
                }
            }

            Core.unblockUI();
        };

        ws.onerror = function(event) {
            
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });
            Core.unblockUI();
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
            Core.unblockUI();
        };

    } else {

        PNotify.removeAll();
        new PNotify({
            title: 'Error',
            text: 'WebSocket NOT supported by your Browser!',
            type: 'error',
            sticker: false
        });

        Core.unblockUI();
    }
}

function bpSignatureRemove(elem) {
    var $this = $(elem),
        $parent = $this.closest('.bp-signature'),
        $signImgElem = $parent.find("input[type='hidden']");

    if ($signImgElem.val() != '') {
        var $dialogName = 'dialog-sign-confirm';
        if (!$("#" + $dialogName).length) {
            $('<div id="' + $dialogName + '"></div>').appendTo('body');
        }
        var $dialog = $('#' + $dialogName);

        $dialog.empty().append('Та гарын үсгийг устгахдаа итгэлтэй байна уу?');
        $dialog.dialog({
            cache: false,
            resizable: false,
            bgiframe: true,
            autoOpen: false,
            title: 'Confirm',
            width: 400,
            height: 'auto',
            modal: true,
            close: function() {
                $dialog.empty().dialog('destroy').remove();
            },
            buttons: [{
                    text: plang.get('yes_btn'),
                    class: 'btn green-meadow btn-sm',
                    click: function() {
                        $parent.find('.bp-signature-image').css('background-image', 'none');
                        $signImgElem.val('').trigger('change');
                        $dialog.dialog('close');
                    }
                },
                {
                    text: plang.get('no_btn'),
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $dialog.dialog('close');
                    }
                }
            ]
        });

        $dialog.dialog('open');
    }
}

function bpBillPrint(elem) {
    var _parent = $(elem).closest('.card');
    $.ajax({
        type: 'post',
        url: 'mdwebservice/billPrint',
        data: {
            bookNumber: _parent.find('.bp-bill-booknumber').val(),
            billNumber: _parent.find('.bp-billnumber').val(),
            billPrice: _parent.find('.bp-bill-price').autoNumeric('get'),
            billPaid: _parent.find('.bp-bill-paid').autoNumeric('get'),
            billChange: _parent.find('.bp-bill-change').autoNumeric('get')
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {

            var $dialogName = 'dialog-bp-bill';
            if (!$("#" + $dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo('body');
            }

            $("#" + $dialogName).empty().append(data.html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 600,
                height: 'auto',
                modal: true,
                position: { my: 'top', at: 'top+50' },
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn btn-sm blue-hoki',
                    click: function() {
                        $("#" + $dialogName).dialog('close');
                    }
                }]
            });
            $("#" + $dialogName).dialog('open');

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function bpTmpAttach(input) {
    if ($(input).hasExtension(['png', 'gif', 'jpeg', 'pjpeg', 'jpg', 'x-png', 'bmp'])) {
        $(input).closest("form").ajaxSubmit({
            type: 'post',
            url: 'mdprocess/addBpTmpUploadPhoto',
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {

                PNotify.removeAll();

                if (data.status === 'success') {

                    var _parent = $(input).closest('table');
                    var imageData = data.imageData;
                    var img = '';

                    img += '<a href="data:' + imageData.mimeType + ';base64,' + imageData.origBase64Data + '" class="fancybox-button main" data-rel="fancybox-button">';
                    img += '<img src="data:' + imageData.mimeType + ';base64,' + imageData.thumbBase64Data + '"/>';
                    img += '</a>';

                    _parent.find('.tmp-attach-thumb-wrap').html(img);

                    _parent.find("input[name*='bp_attach_photo[']").val(imageData.origBase64Data);
                    _parent.find("input[name*='bp_attach_photo_thumb[']").val(imageData.thumbBase64Data);
                    _parent.find("input[name*='bp_attach_photo_extension[']").val(imageData.extension);
                    _parent.find("input[name*='bp_attach[']").val('');
                    _parent.find("input[name*='bp_attach_url[']").val('');

                    Core.initFancybox(_parent.find('.tmp-attach-thumb-wrap'));

                } else {
                    new PNotify({
                        title: data.status,
                        text: data.message,
                        type: data.status,
                        sticker: false
                    });
                }
                Core.unblockUI();
            }
        });

    } else {

        var ext = $(input).val().toLowerCase().split('.').pop();
        var _parent = $(input).closest('table');
        var _parentWrap = $(input).closest('table').find('.tmp-attach-thumb-wrap');

        _parentWrap.html('<i class="fa fa-file"></i>');

        if (ext == 'doc' || ext == 'docx') {
            _parent.find('i').attr('class', 'fa fa-file-word-o');
        } else if (ext == 'xls' || ext == 'xlsx') {
            _parent.find('i').attr('class', 'fa fa-file-excel-o');
        } else if (ext == 'pdf') {
            _parent.find('i').attr('class', 'fa fa-file-pdf-o');
        } else {
            _parent.find('i').attr('class', 'fa fa-file');
        }

        _parent.find("input[name*='bp_attach_photo[']").val('');
        _parent.find("input[name*='bp_attach_photo_thumb[']").val('');
        _parent.find("input[name*='bp_attach_photo_extension[']").val('');
        _parent.find("input[name*='bp_attach_url[']").val('');
    }
}

function bpTmpScanner(elem) {

    Core.blockUI({boxed: true, message: 'Loading...'});

    if ("WebSocket" in window) {
        console.log("WebSocket is supported by your Browser!");
        var ws = new WebSocket("ws://localhost:58324/socket");
        var uniqueId = getUniqueId();

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            ws.send('{"command":"get_scan_image", "dateTime":"' + currentDateTime + '", details: [{"key": "filename", "value": "' + uniqueId + '"}, {"key": "server", "value": "' + URL_APP + 'mddoceditor/vrClientScannerUpload' + '"}]}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            PNotify.removeAll();

            if (jsonData.status == 'success') {

                var _parent = $(elem).closest('table');
                var savedImg = 'storage/uploads/metavalue/photo_temp/original/' + uniqueId + '.jpeg';
                var img = '';

                img += '<a href="' + savedImg + '" class="fancybox-button main" data-rel="fancybox-button">';
                img += '<img src="' + savedImg + '"/>';
                img += '</a>';

                _parent.find('.tmp-attach-thumb-wrap').html(img);

                _parent.find("input[name*='bp_attach[']").val('');
                _parent.find("input[name*='bp_attach_photo[']").val('');
                _parent.find("input[name*='bp_attach_photo_thumb[']").val('');
                _parent.find("input[name*='bp_attach_photo_extension[']").val('jpeg');
                _parent.find("input[name*='bp_attach_url[']").val(savedImg);

                Core.initFancybox(_parent.find('.tmp-attach-thumb-wrap'));

            } else {
                if (jsonData.description != null) {
                    new PNotify({
                        title: 'Error',
                        text: jsonData.description,
                        type: 'error',
                        sticker: false
                    });
                }
            }

            Core.unblockUI();
        };

        ws.onerror = function(event) {
            
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });
            Core.unblockUI();
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
            Core.unblockUI();
        };

    } else {

        PNotify.removeAll();
        new PNotify({
            title: 'Error',
            text: 'WebSocket NOT supported by your Browser!',
            type: 'error',
            sticker: false
        });

        Core.unblockUI();
    }
}

function bpTmpWebCamera(elem) {

    $.getScript(URL_APP + "assets/custom/addon/plugins/swfobject/swfobject.js").done(function() {
        $.getScript(URL_APP + 'assets/custom/addon/plugins/webcam/scriptcam/scriptcam.js').done(function() {

            var dialogName = '#dialog-bp-photo-webcam';
            if (!$(dialogName).length) {
                $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
            }

            $.ajax({
                type: 'post',
                url: 'mdprocess/bpTmpAddPhotoFromWebcam',
                dataType: 'json',
                beforeSend: function() {
                    Core.blockUI({animate: true});
                },
                success: function(data) {
                    $(dialogName).empty().append(data.html);
                    $(dialogName).dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.title,
                        width: 800,
                        height: 550,
                        modal: true,
                        close: function() {
                            $(dialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: data.save_btn,
                                class: 'btn green-meadow btn-sm',
                                click: function() {

                                    var _parent = $(elem).closest('table');
                                    var savedImg = $('form#bpWebcam-form').find("input[name='base64Photo']").val();
                                    var img = '';

                                    img += '<a href="data:image/png;base64,' + savedImg + '" class="fancybox-button main" data-rel="fancybox-button">';
                                    img += '<img src="data:image/png;base64,' + savedImg + '"/>';
                                    img += '</a>';

                                    _parent.find("input[name*='bp_attach_photo[']").val(savedImg);
                                    _parent.find("input[name*='bp_attach_photo_thumb[']").val(savedImg);
                                    _parent.find("input[name*='bp_attach_photo_extension[']").val('png');
                                    _parent.find("input[name*='bp_attach[']").val('');
                                    _parent.find("input[name*='bp_attach_url[']").val('');

                                    _parent.find('.tmp-attach-thumb-wrap').html(img).promise().done(function() {
                                        Core.initFancybox(_parent.find('.tmp-attach-thumb-wrap'));
                                    });

                                    $(dialogName).dialog('close');
                                }
                            },
                            {
                                text: data.close_btn,
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $(dialogName).dialog('close');
                                }
                            }
                        ]
                    });
                    $(dialogName).dialog('open');

                    Core.unblockUI();
                },
                error: function() {
                    alert('Error');
                }
            });
        });
    });
}
function pfWfmTransition(elem, processMetaDataId, dataViewId, selectedRow, paramObject) {
    if (paramObject.hasOwnProperty('refstructureid') && paramObject.refstructureid && paramObject.hasOwnProperty('metadataname') && paramObject.metadataname) {
        var startTransitionIds = (paramObject.hasOwnProperty('starttransitionids') && paramObject.starttransitionids && paramObject.starttransitionids != 'null') ? paramObject.starttransitionids : '';
        drillDownWfmTransition(paramObject.refstructureid, dataViewId, paramObject.metadataname, plang.get('save_btn'), plang.get('close_btn'), startTransitionIds, paramObject);
    }
}
function drillDownWfmTransition(dataViewId, metaDataId, Title, saveBtn, closeBtn, transitionId, paramObject) {
    var transId = typeof transitionId === 'undefined' ? '' : transitionId;
    var dialogId = '#dialog-drilldown-dataview-' + dataViewId;
    if (!$(dialogId).length) {
        $("<div id='" + dialogId.replace('#', '') + "'></div>").appendTo('body');
    }
    var $dialog = $(dialogId), isShowOnly = 0;
    
    if (typeof paramObject !== 'undefined' && paramObject.hasOwnProperty('isshowonly') && paramObject.isshowonly == '1') {
        isShowOnly = 1;
    }
            
    $.ajax({
        type: 'post',
        url: 'mdprocessflow/controlProcess/' + dataViewId,
        data: {transId: transId, isShowOnly: isShowOnly},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {
            
            var buttons = [{
                    text: saveBtn,
                    class: 'btn green-meadow btn-sm save-main-wfm-button',
                    click: function() {
                        saveVisualMetaStatusData($dialog);
                    }
                },
                {
                    text: closeBtn,
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $dialog.dialog('close');
                    }
                }
            ];

            if (isShowOnly) {
                buttons.splice(0, 1);
            }
            
            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: Title,
                height: 900,
                width: 1000,
                modal: false,
                close: function() {
                    $dialog.empty().dialog('destroy').remove();
                },
                buttons: buttons 
            }).dialogExtend({
                'closable': true,
                'maximizable': true,
                'minimizable': true,
                'collapsable': true,
                'dblclick': 'maximize',
                'minimizeLocation': 'left',
                'icons': {
                    'close': 'ui-icon-circle-close',
                    'maximize': 'ui-icon-extlink',
                    'minimize': 'ui-icon-minus',
                    'collapse': 'ui-icon-triangle-1-s',
                    'restore': 'ui-icon-newwin'
                }
            });
            $dialog.dialog('open');
            $dialog.dialogExtend('maximize');
            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    });
}

function drillDownInteractiveWfmTransition(dataViewId, metaDataId, Title, saveBtn, closeBtn, transitionId) {
    var transId = typeof transitionId === 'undefined' ? '' : transitionId;
    return;

    $.ajax({
        type: 'post',
        url: 'mdprocessflow/controlProcessInteractive/' + dataViewId,
        data: { selectedRow: {'wfmstatusid': '1582167452814825'} },
        dataType: "json",
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {
            var dialogId = '#dialog-drilldown-dataview-' + dataViewId;

            if (!$(dialogId).length) {
                $("<div id='" + dialogId.replace('#', '') + "'></div>").appendTo('body');
            }

            $(dialogId).empty().append(data.Html);
            $(dialogId).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: Title,
                height: 900,
                width: 1000,
                modal: false,
                close: function() {
                    $(dialogId).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: closeBtn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogId).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                'closable': true,
                'maximizable': true,
                'minimizable': true,
                'collapsable': true,
                'dblclick': 'maximize',
                'minimizeLocation': 'left',
                'icons': {
                    'close': 'ui-icon-circle-close',
                    'maximize': 'ui-icon-extlink',
                    'minimize': 'ui-icon-minus',
                    'collapse': 'ui-icon-triangle-1-s',
                    'restore': 'ui-icon-newwin'
                }
            });
            $(dialogId).dialog('open');
            $(dialogId).dialogExtend("maximize");

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function drillDownWfmTransitionPack(dataViewId, metaDataId, Title, saveBtn, closeBtn, transitionId) {
    var transId = typeof transitionId === 'undefined' ? '' : transitionId;

    $.ajax({
        type: 'post',
        url: 'mdprocessflow/controlProcessPack/' + dataViewId,
        data: { transId: transId },
        dataType: "json",
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {
            var dialogId = '#dialog-drilldown-dataview-' + dataViewId;

            if (!$(dialogId).length) {
                $("<div id='" + dialogId.replace('#', '') + "'></div>").appendTo('body');
            }

            $(dialogId).empty().append(data.Html);
            $(dialogId).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: Title,
                height: 900,
                width: 1000,
                modal: false,
                close: function() {
                    $(dialogId).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: saveBtn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            saveVisualMetaStatusData($(dialogId));
                        }
                    },
                    {
                        text: closeBtn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $(dialogId).dialog('close');
                        }
                    }
                ]
            }).dialogExtend({
                'closable': true,
                'maximizable': true,
                'minimizable': true,
                'collapsable': true,
                'dblclick': 'maximize',
                'minimizeLocation': 'left',
                'icons': {
                    'close': 'ui-icon-circle-close',
                    'maximize': 'ui-icon-extlink',
                    'minimize': 'ui-icon-minus',
                    'collapse': 'ui-icon-triangle-1-s',
                    'restore': 'ui-icon-newwin'
                }
            });
            $(dialogId).dialog('open');
            $(dialogId).dialogExtend("maximize");

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function subgridSetParentHeight(target) {
    var $tr = $(target).closest('div.datagrid-row-detail').closest('tr').prev();
    if ($tr.length) {
        var index = parseInt($tr.attr('datagrid-row-index'));
        var $dg = $tr.closest('div.datagrid-view').children('table');
        subgridSetHeight($dg[0], index);
    }
}
function subgridSetHeight(target, index) {
    var $target = $(target);
    $target.datagrid('fixDetailRowHeight', index);
    $target.datagrid('fixRowHeight', index);

    var $tr = $target.closest('div.datagrid-row-detail').closest('tr').prev();

    if ($tr.length) {
        var index = parseInt($tr.attr('datagrid-row-index'));
        var $dg = $tr.closest('div.datagrid-view').children('table');
        subgridSetHeight($dg[0], index);
    }
}
function subgridGetSubGrid(rowDetail) {
    var $div = $(rowDetail).children('div.dv-subgrid');
    return $div;
}
function renderDataViewSubGrid(rowElement, srcDataViewId, childDataViewList, row, rowIndex, isExcelExport) {
    if (rowElement.children().length == 0 && typeof childDataViewList[0] !== 'undefined') {
        renderDataViewSubGridDraw(rowElement, srcDataViewId, row, rowIndex, 0, childDataViewList, isExcelExport);
    }
}
function renderDataViewSubGridDraw(rowElement, srcDataViewId, row, rowIndex, key, childDataViewList, isExcelExport) {
    if (typeof childDataViewList[key] === 'undefined') {
        return false;
    }

    var subGridParams = {};
    var params = childDataViewList[key].params.split('&');

    for (var i = 0; i < params.length; i++) {
        var paramRow = params[i].split('=');
        var trgParam = paramRow[0];
        var srcParam = paramRow[1];
        subGridParams[trgParam] = row[srcParam];
    }

    $.ajax({
        type: 'post',
        url: 'mdobject/dataValueViewer',
        data: {
            metaDataId: childDataViewList[key].id,
            srcDataViewId: srcDataViewId,
            rowIndex: rowIndex,
            uriParams: JSON.stringify(subGridParams)
        },
        success: function(html) {

            if (childDataViewList[key].name !== null && childDataViewList[key].name !== '') {
                rowElement.append($('<div class="card-title"><span class="caption-subject font-weight-bold">' + childDataViewList[key].name + '</span></div>'));
            }

            if (isExcelExport == 'true') {
                rowElement.append('<a class="btn btn-secondary btn-circle btn-sm default" title="'+plang.get('excel_btn')+'" onclick="subgridExcelExport(this);" href="javascript:;"><i class="far fa-file-excel"></i></a>');
            }

            rowElement.append(html);
            
            if ((childDataViewList.length - 1) !== key) {
                rowElement.append($("<br />"));
            }

            renderDataViewSubGridDraw(rowElement, srcDataViewId, row, rowIndex, ++key, childDataViewList);
        }
    });
}

function popupConnectAddWorkFlow(dataViewId) {
    var selectedRow = $('#objectdatagrid-' + dataViewId).datagrid('getSelected');
    if (selectedRow == null) {
        PNotify.removeAll();
        new PNotify({
            title: 'Warning',
            text: plang.get('msg_pls_list_select'),
            type: 'warning',
            sticker: false
        });
        return;
    }

    var $dialogName = 'dialog-addworkflow-' + selectedRow.metadataid;
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    $.ajax({
        type: 'post',
        url: 'mdprocessflow/addWorkFlowFirstStatusForm',
        dataType: 'json',
        data: { metaDataId: selectedRow.metadataid },
        beforeSend: function() {
            Core.blockUI({animate: true});
            if (!$().colorpicker) {
                $.cachedScript('assets/custom/addon/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.js').done(function() {      
                    $("head").append('<link rel="stylesheet" type="text/css" href="assets/custom/addon/plugins/bootstrap-colorpicker/css/colorpicker.css"/>');
                });
            }
        },
        success: function(dataHtml) {
            var $dialogName = 'dialog-addworkflowStatus-' + selectedRow.metadataid;
            if (!$("#" + $dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo('body');
            }
            $("#" + $dialogName).empty().append(dataHtml.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: dataHtml.Title,
                width: 450,
                height: "auto",
                modal: true,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: dataHtml.save_btn,
                        class: 'btn btn-sm green-meadow',
                        click: function() {
                            $("#createWfmStatus-from", "#" + $dialogName).validate({ errorPlacement: function() {} });
                            if ($("#createWfmTransition-from", "#" + $dialogName).valid()) {
                                var isNewStatusChecked = $('#isNewStatus').is(':checked');
                                if (!isNewStatusChecked) {
                                    var oldWfmStatusId = $('#wfmStatusId, #createWfmStatus-from').val();
                                    if (oldWfmStatusId.length === 0) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: 'Warning',
                                            text: 'Хуучин төлөвөөс сонгоно уу?',
                                            type: 'warning',
                                            sticker: false
                                        });
                                        return false;
                                    }
                                }
                                $('#createWfmTransition-from').ajaxSubmit({
                                    type: 'post',
                                    url: 'mdprocessflow/createWfmWorkFlow',
                                    dataType: 'json',
                                    beforeSend: function() {
                                        Core.blockUI({message: plang.get('msg_saving_block'), boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });
                                        if (data.status === 'success') {
                                            $("#" + $dialogName).empty().dialog('destroy').remove();
                                        }
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: dataHtml.close_btn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $("#" + $dialogName).empty().dialog('destroy').remove();
                        }
                    }
                ]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });
            $("#" + $dialogName).dialog('open');
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($("#" + $dialogName));
    });
}

function selectPrevNext(mainMetaDataId, processMetaDataId, elem, params, dialog, parentCaller, batchNumber, rowIncrease, pageIncrease, isIgnoreReloadGrid) {
    var dataGrid = $('#objectdatagrid_' + mainMetaDataId);
    if (dataGrid.length === 0) {
        dataGrid = window['objectdatagrid_' + mainMetaDataId];
    }
    var getSelected = dataGrid.datagrid('getSelected');
    var rowNum = dataGrid.datagrid('getRowIndex', getSelected) + rowIncrease;
    var rows = dataGrid.datagrid('getRows');
    var row = rows[rowNum];

    if (typeof row !== 'undefined') {
        dataGrid.datagrid('clearSelections');
        
        if (typeof isIgnoreReloadGrid != 'undefined' && isIgnoreReloadGrid) {
            
            dataGrid.datagrid('options').onLoadSuccess = function(data) {
                
                var dataRows = data.rows;
                
                if (dataRows.length) {
                    var rowNum = -1;
                    for (var r in dataRows) {
                        if (dataRows[r]['id'] == getSelected.id) {
                            rowNum = Number(r);
                            break;
                        }
                    }
                    
                    if (rowNum < 0) {
                        rowNum = $('#object-value-list-'+mainMetaDataId).find('#currentSelectedRowIndex').val();
                    } else {
                        rowNum = rowNum + rowIncrease;
                    }

                    dataGrid.datagrid('selectRow', rowNum);
                    $('#object-value-list-'+mainMetaDataId).find('#currentSelectedRowIndex').val(rowNum);
                    showPrevNextRow(mainMetaDataId, processMetaDataId, elem, params, dialog, parentCaller, batchNumber);
                }
                
                dataGrid.datagrid('options').onLoadSuccess = function(data) {};
            };
            
        } else {
            
            dataGrid.datagrid('selectRow', rowNum);
            $('#object-value-list-'+mainMetaDataId).find('#currentSelectedRowIndex').val(rowNum);
            showPrevNextRow(mainMetaDataId, processMetaDataId, elem, params, dialog, parentCaller, batchNumber);
        }
    } else {
        
        var opts = dataGrid.datagrid('options');
        var pageNumber = opts.pageNumber + pageIncrease;
        
        if (pageNumber === 0) {
            return;
        }
        
        var pagination = opts.pagination;
        
        if (pagination) {
            
            dataGrid.datagrid('clearSelections');
            dataGrid.datagrid('options').pageNumber = opts.pageNumber + pageIncrease;
            dataGrid.datagrid('getPager').pagination('refresh', { pageNumber: opts.pageNumber });

            dataGrid.datagrid('options').onLoadSuccess = function(data) {
                
                if (pageIncrease < 0) {
                    var rowIndex = data.rows.length - 1;
                    dataGrid.datagrid('selectRow', rowIndex);
                } else {
                    var rowIndex = 0;
                    dataGrid.datagrid('selectRow', rowIndex);
                }
                $('#object-value-list-'+mainMetaDataId).find('#currentSelectedRowIndex').val(rowIndex);

                selectPrevNext(mainMetaDataId, processMetaDataId, elem, params, dialog, parentCaller, batchNumber, 0, 0);
                dataGrid.datagrid('options').onLoadSuccess = function(data) {};
            };
            
            if (typeof isIgnoreReloadGrid == 'undefined' || (typeof isIgnoreReloadGrid != 'undefined' && !isIgnoreReloadGrid)) {
                dataGrid.datagrid('reload');
            }
        }
    }
}

function showPrevNextRow(mainMetaDataId, processMetaDataId, elem, params, dialog, parentCaller, batchNumber) {
    switch (parentCaller) {
        case 'transferProcessAction':
            transferProcessAction('', mainMetaDataId, processMetaDataId, '200101010000011', 'toolbar', elem, params);
            break;
        case 'transferProcessCriteria':
            transferProcessCriteria(mainMetaDataId, batchNumber, 'toolbar', elem);
            break;
        default:
            return;
    }
    if (dialog !== null) {
        dialog.attr('closeByNext', 'yes');
    }
}
function initBusinessProcessMaskEvent(_parentForm) {
    var isValidPattern = [];

    if (typeof _parentForm !== "undefined") {

        _parentForm.find('input[data-path][data-regex]:visible').each(function($key) {

            var $this = $(this);

            if (typeof $this.attr('required') !== 'undefined' || $this.val() !== '') {
                
                var regex = new RegExp($this.attr('data-regex'));
                
                if (!regex.exec($this.val())) {

                    $this.addClass('error');

                    if (typeof $this.attr('data-regex-message') !== 'undefined' && $this.attr('data-regex-message').length) {

                        var $parent = $this.parent();

                        if ($parent.find('div.form-text').length) {
                            $parent.find('div.form-text').remove();
                        }
                        $parent.append('<div class="form-text" style="color: #EF6260">' + $this.attr('data-regex-message') + '</div>');
                    }

                    isValidPattern.push($key);

                } else {

                    $this.removeClass('error');
                    var $parent = $this.parent();

                    if ($parent.find('div.form-text').length) {
                        $parent.find('div.form-text').remove();
                    }
                }
            }
        });

        if (isValidPattern.length !== 0) {
            return isValidPattern;
        }

        if (_parentForm.find('ul.bp-addon-tab').length) {

            var _addonMessage = '';

            _parentForm.find('ul.bp-addon-tab > li > a').each(function() {
                var $tabThis = $(this);
                var _addonType = $tabThis.attr('data-addon-type');
                var _addonOnlyRequired = typeof $tabThis.attr('data-only-required') === 'undefined' ? '1' : $tabThis.attr('data-only-required');
                var $tabContent = $($tabThis.attr('href'));

                if ($tabThis.attr('data-required') == '2') {

                    var items;

                    if (_addonType == 'photo') {
                        items = $tabContent.find('input[name*="bp_photo_name["]');

                        if (items.length == 0) {

                            var fileCount = Number($tabThis.find('[data-file-count]').attr('data-file-count'));
                            _addonMessage += 'Та Зураг сонгоно уу<br />';
                        }
                    } else if (_addonType == 'file' && _addonOnlyRequired == 1) {
                        items = $tabContent.find('input[name*="bp_file_name["]');

                        if (typeof $tabThis.attr('data-count-required') !== 'undefined' && Number($tabThis.attr('data-count-required')) > items.length) {
                            _addonMessage += 'Та ' + $tabThis.attr('data-count-required') + ' Файл сонгоно уу<br />';
                        } else if (items.length == 0) {
                            var $fileCountElem = $tabThis.find('[data-file-count]');

                            if ($fileCountElem.length) {
                                var fileCount = Number($fileCountElem.attr('data-file-count'));
                                if (fileCount == 0) {
                                    _addonMessage += 'Та Файл сонгоно уу<br />';
                                }
                            } else {
                                _addonMessage += 'Та Файл сонгоно уу<br />';
                            }
                        }

                    } else if (_addonType == 'comment') {
                        items = $tabContent.find('ul.chats > li');

                        if (items.length == 0) {
                            _addonMessage += 'Та Сэтгэгдэл бичнэ үү<br />';
                        }
                    } else if (_addonType == 'relation') {
                        items = $tabContent.find('ul.metas-div > li');

                        if (items.length == 0) {
                            _addonMessage += 'Та Хамаарал тохируулна уу<br />';
                        }
                    } else if (_addonType == 'mv_relation') {
                        items = $tabContent.find('input[name="mvDmRecordMaps[recordId][]"]');

                        if (items.length == 0) {
                            _addonMessage += 'Та холбоосоос утга сонгоно уу<br />';
                        }
                    }

                    if (items && items.length == 0) {
                        $tabThis.attr('data-required-check', 1);
                    } else {
                        $tabThis.attr('data-required-check', 0);
                    }
                }

                if (_addonType == 'relation') {
                    $tabContent.find('.object-div').each(function() {
                        var $thisObjectDiv = $(this),
                            $objectName = $thisObjectDiv.find('.object-name');

                        if ($thisObjectDiv.find('span.required').length !== 0 && $thisObjectDiv.find('ul.metas-div > li').length < $objectName.data('min-value')) {
                            _addonMessage += '<b>' + $objectName.data('object-name') + '</b>: Хамгийн багадаа ' + $objectName.data('min-value') + ' утга оруулна уу. <br />';
                        }
                    });
                }
            });

            if (_addonMessage !== '') {
                $(_parentForm.find('ul.bp-addon-tab > li > a[data-required-check=1]')[0]).trigger('click');
                PNotify.removeAll();

                new PNotify({
                    title: 'Info',
                    text: _addonMessage,
                    type: 'info',
                    sticker: false
                });

                return isValidPattern.push('1');
            }
        }
        
        var $requiredInputs = _parentForm.find('[required]:not(:radio)').filter(function() { 
            var $this = $(this);
            if ($this.hasClass('fileInit')) {
                if ($this.parent().find('input[type=hidden]').length && $this.parent().find('input[type=hidden]').val()) {
                    return false;
                } else {
                    return this.value == '';
                }
            } else {
                return this.value == '';
            } 
        });
        
        var $rangeSliderInputs = _parentForm.find('input.rangeSliderInit[required]');
        
        if ($rangeSliderInputs.length) {
            
            $rangeSliderInputs.parent().find('.irs-with-grid.error').removeClass('error');
            
            var $requiredRangeSliderInputs = $rangeSliderInputs.filter(function() { 
                return (this.value == '0' || this.value == '');
            });

            if ($requiredRangeSliderInputs.length) {
                $requiredRangeSliderInputs.parent().find('.irs-with-grid').addClass('error');
                $requiredInputs = $requiredInputs.add($requiredRangeSliderInputs);
            }
        }
        
        if ($requiredInputs.length) {
            
            if (_parentForm.find("div.tab-pane:hidden:has(.error)").length) {
                _parentForm.find("div.tab-pane:hidden:has(.error):eq(0)").each(function(index, tab) {
                    var tabId = $(tab).attr('id');
                    _parentForm.find('a[href="#' + tabId + '"]').tab('show');
                });
            }
            var FIN_01332 = plang.get('FIN_01332');
            
            bpResultConsole('info', FIN_01332);
            
            PNotify.removeAll();
            new PNotify({
                title: 'Info',
                text: FIN_01332,
                type: 'info',
                sticker: false, 
                addclass: pnotifyPosition
            });
            
            $requiredInputs.not(':hidden').eq(0).focus();
            
            console.log('Required paths =================== start');
            $requiredInputs.each(function() {
                var $this = $(this);
                if ($this.hasAttr('data-path')) {
                    console.log('Path: ' + $this.attr('data-path'));
                    if ($this.hasClass('bigdecimalInit')) {
                        $this.addClass('error');
                    }
                }
            });
            console.log('Required paths =================== end');
                
            return isValidPattern.push('1');
        }
    }

    return isValidPattern;
}
function sendMailReportTemplate(elem, dataViewId, emailTo, emailSubject, emailFileName, emailSentParams) {
    var $dialogName = 'dialog-email-' + getUniqueId(1);
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdtemplate/sendMailForm',
        data: { emailTo: emailTo, emailSubject: emailSubject, emailFileName: emailFileName },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            $dialog.empty().append(data.html);
            $dialog.dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.title,
                width: 950,
                height: "auto",
                modal: true,
                close: function() {
                    $dialog.empty().dialog('destroy').remove();
                },
                position: { my: 'top', at: 'top+55' },
                buttons: [{
                        text: data.send_btn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {

                            tinyMCE.triggerSave();

                            $("#report-mail-form").validate({ errorPlacement: function() {} });

                            if ($("#report-mail-form").valid()) {

                                var $parent = $(elem).closest(".report-preview");
                                $("div#contentRepeat", $parent).empty();
                                
                                if (copies >= 1) {
                                    $("page", $parent).each(function(j) {
                                        var $thisPage = $(this);
                                        if (pageType == '2col') {
                                            $("#contentRepeat", $parent).append($thisPage.find("#exContent").get(0).outerHTML+'<div style="page-break-after: always;"></div>');
                                        } else {
                                            for (var i = 0; i < copies; i++) {
                                                if (isNewPage == '1') {
                                                    if (pageOrientation == 'landscape') {
                                                        $("#contentRepeat", $parent).append($thisPage.find("#externalContent > table > tbody > tr > td").get(0).innerHTML+'<div style="page-break-after: always;"></div>');
                                                    } else {
                                                        $("#contentRepeat", $parent).append($thisPage.find("#externalContent > tbody > tr > td").get(0).innerHTML+'<div style="page-break-after: always;"></div>');
                                                    }
                                                } else {
                                                    if (pageType == '2col') {
                                                        $("#contentRepeat", $parent).append($thisPage.find("#exContent").html()+'<div style="page-break-after: always;"></div>');
                                                    } else {
                                                        $("#contentRepeat", $parent).append($thisPage.find("#externalContent").get(0).outerHTML+'<div style="page-break-after: always;"></div>');
                                                    }
                                                }
                                            }
                                        }
                                    });
                                    $("div#contentRepeat", $parent).find("#externalContent").last().removeAttr('style');
                                }
                                
                                $("div#contentRepeat", $parent).find('img').css('max-width', '100%');
                                
                                $('#report-mail-form', '#' + $dialogName).ajaxSubmit({
                                    type: 'post',
                                    url: 'mdtemplate/sendMail',
                                    data: data,
                                    dataType: 'json',
                                    beforeSubmit: function(formData, jqForm, options) {
                                        formData.push({ name: 'content', value: $("div#contentRepeat", _parent).html() }, { name: 'orientation', value: pageOrientation }, { name: 'emailSentParams', value: emailSentParams });

                                        if ($('input[name=isSendSelectedRows]', '#report-mail-form').is(':checked')) {
                                            var selectedRows = getDataViewSelectedRows(dataViewId);
                                            formData.push({ name: 'dataViewId', value: dataViewId }, { name: 'selectedRows', value: JSON.stringify(selectedRows) });
                                        }
                                    },
                                    beforeSend: function() {
                                        Core.blockUI({message: 'Loading...', boxed: true});
                                    },
                                    success: function(data) {
                                        PNotify.removeAll();
                                        new PNotify({
                                            title: data.status,
                                            text: data.message,
                                            type: data.status,
                                            sticker: false
                                        });
                                        if (data.status === 'success') {
                                            $dialog.dialog('close');
                                        }
                                        Core.unblockUI();
                                    }
                                });
                            }
                        }
                    },
                    {
                        text: data.close_btn,
                        class: 'btn blue-hoki btn-sm',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }
                ]
            });
            $dialog.dialog('open');

            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    }).done(function() {
        Core.initAjax($dialog);
    });
}

function fixDataGridMergedCell(dataViewId) {
    var $objectDataView = $("#objectDataView_" + dataViewId),
        $divObjectdatagrid = $objectDataView.find(".div-objectdatagrid-" + dataViewId);
    $objectDataView.find('.value-grid-merge-cell').removeClass("active").addClass("init-merge-cell");
    $divObjectdatagrid.find('.datagrid-td-merged-hidden').show();
    $divObjectdatagrid.find('.datagrid-td-merged').attr('rowspan', 1);
    return;
}

//<editor-fold defaultstate="collapsed" desc="Процессийн тусламж button дээр дарахад дуудагдана">
function getHelpContent(helpContentId, processMetaDataId, processName) {
    if (typeof helpContentId !== "undefined" && helpContentId !== null) {
        $.ajax({
            type: 'post',
            url: 'mdcontentui/contentHtmlRender/' + helpContentId,
            data: {
                processMetaDataId: processMetaDataId,
                processName: processName
            },
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            dataType: 'json',
            success: function(response) {
                showHelpContentDialog(response, processMetaDataId);
            }
        }).complete(function() {
            Core.unblockUI();
        });
    } else {
        showWarningContent();
    }
}

function showWarningContent() {
    new PNotify({
        title: 'Warning',
        text: 'Тусламж контент тохируулаагүй.',
        type: 'warning',
        sticker: false
    });
}

function showHelpContentDialog(response, processMetaDataId) {
    var dialogName = 'dialog-process-help-content';
    if (!$("#" + dialogName).length) {
        $('<div id="' + dialogName + '" class="display-none"></div>').appendTo('body');
    }

    var $helpContentDialogName = $("#" + dialogName);

    $helpContentDialogName.empty().append(response.html);

    $helpContentDialogName.dialog({
        cache: false,
        resizable: true,
        bgiframe: true,
        autoOpen: false,
        title: response.Title,
        width: 1200,
        minWidth: 1200,
        height: 600,
        modal: false,
        closeOnEscape: isCloseOnEscape,
        close: function() {
            $helpContentDialogName.empty().dialog('destroy').remove();
        },
        buttons: [{
                text: 'Санал нэмэх',
                class: 'btn green-meadow btn-sm float-left',
                click: function() {
                    var path = 'table[data-table-path="META_DM_RECORD_MAP_BP"]';
                    var appendHTml = '<tr class="added-bp-row currentTarget">' +
                        '<td class="text-center middle">' +
                        '<span>1</span>' +
                        '<input type="hidden" name="param[META_DM_RECORD_MAP_BP.mainRowCount][]">' +
                        '</td>' +
                        '<td data-cell-path="META_DM_RECORD_MAP_BP.srcRecordId" class="META_DM_RECORD_MAP_BPsrcRecordId stretchInput middle text-center META_DM_RECORD_MAP_BPsrcRecordId ">' +
                        '<input type="text" id="param[META_DM_RECORD_MAP_BP.srcRecordId][0][]" name="param[META_DM_RECORD_MAP_BP.srcRecordId][0][]" data-path="META_DM_RECORD_MAP_BP.srcRecordId" data-field-name="srcRecordId" data-isclear="0" value="' + processMetaDataId + '">' +
                        '</td>' +
                        '</tr>';

                    var callbackFunctionRender = 'callbackfunction_' + response.uniqid;
                    transferProcessAction('', '1479738893046', '1487297310833', '200101010000011', 'toolbar', this, undefined, undefined, undefined, undefined, undefined, undefined, path, appendHTml, callbackFunctionRender);

                }
            },
            {
                text: response.close_btn,
                class: 'btn btn-sm blue-hoki',
                click: function() {
                    $helpContentDialogName.dialog('close');
                }
            }
        ]
    }).dialogExtend({
        "closable": true,
        "maximizable": false,
        "minimizable": false,
        "collapsable": false,
        "dblclick": "maximize",
        "minimizeLocation": "left",
        "icons": {
            "close": "ui-icon-circle-close",
            "maximize": "ui-icon-extlink",
            "minimize": "ui-icon-minus",
            "collapse": "ui-icon-triangle-1-s",
            "restore": "ui-icon-newwin"
        }
    });

    if (processMetaDataId === '1471851163797') {
        $helpContentDialogName.dialog('option', 'dialogClass', 'background-white border-none');
    }

    $helpContentDialogName.dialog('open');
}
//</editor-fold>
//<editor-fold defaultstate="collapsed" desc="ecm content">
function getEcmContentModal(dataViewId, callback) {
    $.ajax({
        type: 'post',
        url: 'mdcontentui/getEcmContentModal',
        data: {
            dataViewId: dataViewId
        },
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        dataType: 'json',
        success: function(response) {
            if (typeof callback === 'function') {
                callback(response);
            } else {
                renderEcmContentModal(response);
            }
        }
    }).complete(function() {
        Core.unblockUI();
    });
}

function renderEcmContentModal(response) {
    var dialogName = 'dialog-ecm-content';

    if ($("#" + dialogName).length === 0) {
        $('<div id="' + dialogName + '"></div>').appendTo('body');
    }

    var $ecmContentDialog = $("#" + dialogName);

    $ecmContentDialog.empty().append(response.html);

    $ecmContentDialog.dialog({
        cache: false,
        resizable: true,
        bgiframe: true,
        autoOpen: false,
        title: response.Title,
        width: 788,
        height: 480,
        clickOutside: true,
        modal: true,
        close: function() {
            $ecmContentDialog.empty().dialog('destroy').remove();
        },
        buttons: [{
            html: response.select_file_btn,
            class: 'btn btn-sm btn-circle green',
            click: function() {
                $ecmContentDialog.find(".dz-clickable").trigger('click');
            }
        }, {
            html: response.close_btn,
            class: 'btn blue-madison btn-sm bp-close-btn',
            click: function() {
                $ecmContentDialog.dialog('close');
            }
        }]
    }).dialogExtend({
        "closable": true,
        "maximizable": true,
        "minimizable": true,
        "collapsable": true,
        "dblclick": "maximize",
        "minimizeLocation": "left",
        "icons": {
            "close": "ui-icon-circle-close",
            "maximize": "ui-icon-extlink",
            "minimize": "ui-icon-minus",
            "collapse": "ui-icon-triangle-1-s",
            "restore": "ui-icon-newwin"
        }
    });

    $ecmContentDialog.dialog('open');
}

function renderFolderAction(url, selectedRow, dataViewId, callback) {
    $.ajax({
        type: 'post',
        url: url,
        data: {
            selectedRow: selectedRow,
            dataViewId: dataViewId
        },
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        dataType: 'html',
        success: function(response) {
            $('#renderFolderActionDiv').remove();
            $('body').append('<div id="renderFolderActionDiv">' + response + '</div>');
        }
    }).complete(function() {
        Core.unblockUI();
    });
}
//</editor-fold>

function drillDownTransferProcessAction(functionName, clinkMetaDataId, criteria, passPath, mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, wfmStatusParams, drillDownType, mainRow, batchNumber) {

    setTimeout(function() {

        var dvSubGrid = $(elem).closest('div.data-path-uniqid').attr('data-path-uniqid');
        var selectedRow = [];

        if (typeof criteria !== 'undefined' && criteria != '' && parseInt(clinkMetaDataId) > 0) {
            
            criteria = criteria.replace('===', '==').replace('!==', '!=');

            var bpMetaDataId = null;
            var isSubGrid = (typeof dvSubGrid != 'undefined' && dvSubGrid.length > 0) ? true : false;
            var scriteria = (criteria.toLowerCase()).split(',');
            var slinkMetaDataId = processMetaDataId.split(',');
            var isCriteriaValidate = true;

            if (isSubGrid) {
                selectedRow = getDataViewSelectedRowsByElement($('#objectdatagrid-' + dvSubGrid), elem);
            } else {
                selectedRow = getDataViewSelectedRowsByElement($('#objectdatagrid-' + mainMetaDataId), elem);
            }

            if (typeof selectedRow[0] !== 'undefined') {
                selectedRow = row[0];
            }

            if (parseInt(clinkMetaDataId) > 1) {

                $.each(scriteria, function(cindex, evalcriteria) {

                    $.each(selectedRow, function(index, row) {
                        if (evalcriteria.indexOf(index) > -1) {
                            row = (row === null) ? '' : row;
                            var regex = new RegExp('\\b' + index + '\\b', 'g');
                            evalcriteria = evalcriteria.replace(regex, "'" + row.toString() + "'");
                        }
                    });

                    try {
                        if (eval(evalcriteria)) {
                            bpMetaDataId = slinkMetaDataId[cindex];
                            return false;
                        }
                    } catch (err) {
                        console.log(err);
                    }
                });

            } else {

                bpMetaDataId = processMetaDataId;

                $.each(selectedRow, function(index, row) {
                    if (criteria.indexOf(index) > -1) {
                        row = (row === null) ? '' : row;
                        var regex = new RegExp('\\b' + index + '\\b', 'g');
                        criteria = criteria.replace(regex, "'" + row.toString() + "'");
                    }
                });

                try {
                    if (!eval(criteria)) {
                        isCriteriaValidate = false;
                    }
                } catch (err) {
                    console.log(err);
                }
            }

            if (!isCriteriaValidate) {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: 'Тохирох утга олдсонгүй.',
                    type: 'warning',
                    sticker: false
                });
                return;
            }

            if (bpMetaDataId) {
                if (functionName === 'transferProcessCriteria' && typeof batchNumber !== 'undefined' && batchNumber !== '') {
                    transferProcessCriteria(mainMetaDataId, batchNumber, 'toolbar', elem, params);
                    return;
                }

                if (isSubGrid) {
                    window[functionName](passPath, mainMetaDataId, bpMetaDataId, metaTypeId, whereFrom, elem, params, wfmStatusParams, drillDownType, mainRow, dvSubGrid);
                    return;
                } else {
                    window[functionName](passPath, mainMetaDataId, bpMetaDataId, metaTypeId, whereFrom, elem, params, wfmStatusParams, drillDownType, mainRow);
                    return;
                }
            }

        } else {
            
            if (functionName === 'transferProcessCriteria' && typeof batchNumber !== 'undefined' && batchNumber !== '') {
                transferProcessCriteria(mainMetaDataId, batchNumber, 'toolbar', elem, params);
                return;
            }

            if (typeof dvSubGrid != 'undefined' && dvSubGrid > 0) {
                window[functionName](passPath, mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, wfmStatusParams, drillDownType, mainRow, dvSubGrid);
            } else {
                window[functionName](passPath, mainMetaDataId, processMetaDataId, metaTypeId, whereFrom, elem, params, wfmStatusParams, drillDownType, mainRow);
            }
        }
    }, 1);
}

function downloadFile(elem) {
    var _this = $(elem);
    var rowData = _this.attr('data-row-data');
    var jsonObj = JSON.parse(rowData);
    var physicalpath = jsonObj.physicalpath;

    if (physicalpath) {
        $.fileDownload(URL_APP + 'mdobject/downloadFile?file=' + physicalpath + '&fDownload=1', {
            httpMethod: "POST"
        });
    }
}

function selectRow(elem) {
    var $this = $(elem);
    if ($this.hasClass('dv-selection-item')) {
        $this.closest('.dv-selection-parent').find('.selected-row').removeClass('selected-row');
        $this.addClass('selected-row');
    } else {
        $this.closest('ul').find('li.selected-row').removeClass('selected-row');
        $this.closest('li').addClass('selected-row');
    }
}

function statementViewByWorkSpace(processMetaDataId, workSpaceId, elem) {
    var $this = $(elem);
    var $workSpaceContainer = $('#workspace-id-' + workSpaceId);
    var $menuId = $this.attr('data-menu-id');
    var $mainContainer = $('div.workspace-main-container', $workSpaceContainer);

    $this.closest('ul').children().removeClass('active');
    $this.parent().addClass('active');

    if ($mainContainer.find("div.workspace-part[data-menu-id='" + processMetaDataId + "']").length === 0) {
        var $menuLinkId = $this.attr('menu-data-link-id');
        var $selectedRowEncode = $this.attr('selectedrow-encode');
        var $parentMenuId = (typeof $this.attr('data-parent-menuid') !== 'undefined') ? $this.attr('data-parent-menuid') : '';

        $.ajax({
            type: 'post',
            dataType: 'json',
            url: 'mdworkspace/submenuRender',
            data: {
                workSpaceId: workSpaceId,
                menuLinkId: $menuLinkId,
                menuId: $menuId,
                parentMenuId: $parentMenuId,
                selectedRow: $selectedRowEncode
            },
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(data) {
                _menuAnchor = data.menuAnchor;

                $.ajax({
                    type: 'post',
                    dataType: 'json',
                    url: 'mdstatement/dialogIndex/' + processMetaDataId,
                    success: function(data) {

                        $mainContainer.find('div.workspace-part').css({ 'display': 'none' });
                        $mainContainer.append('<div class="workspace-part" data-menu-id="' + processMetaDataId + '">' + _menuAnchor + '<div class="col-md-12">' + data.Html + '</div></div>');

                        $('.workspace-main-container li').removeClass('activeMenu');
                        $('#ws-menu-id-' + $menuId, '.workspace-main-container').addClass('activeMenu');
                    }
                }).done(function() {
                    Core.unblockUI();

                    $('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').removeClass('active');
                    $('div[data-menu-id="' + processMetaDataId + '"]').find('.activeMenu').removeClass('activeMenu');

                    $('a[data-menu-id="' + $menuId + '"]').closest('figure').addClass('active');
                    $('a[data-menu-id="' + $menuId + '"]').closest('li').addClass('activeMenu');
                });
            },
            error: function() {
                alert('Error');
            }
        });

    } else {
        $mainContainer.find("div.workspace-part").css({ 'display': 'none' });
        $mainContainer.find("div[class=workspace-part][data-menu-id=" + processMetaDataId + "]").css({ 'display': '' });

        $('div[data-menu-id="' + processMetaDataId + '"]').find('figure.active').removeClass('active');
        $('div[data-menu-id="' + processMetaDataId + '"]').find('.activeMenu').removeClass('activeMenu');

        $('a[data-menu-id="' + $menuId + '"]').closest('figure').addClass('active');
        $('a[data-menu-id="' + $menuId + '"]').closest('li').addClass('activeMenu');
    }
}

function callModelByDataView(processMetaDataId, workSpaceId, element) {
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = processMetaDataId;
    var mainContainer = $("div.workspace-main-container", workSpaceContainer);
    var backTargetLink = $(element).attr('back-target-metadataid');

    mainContainer.find("div.workspace-part").hide();
    $.ajax({
        type: 'post',
        url: 'mdobject/dataview/' + processMetaDataId,
        data: {
            backTargetLink: backTargetLink,
        },
        beforeSend: function(xhr, settings) {
            Core.blockUI({animate: true});
            settings.data += '&moreinfo=MoreData';
        },
        success: function(data) {
            var _appendClass = '';
            mainContainer.empty().append(
                '<div class="card-title tabbable-line">' +
                '<div class="caption buttons">' +
                '<a href="javascript:;" onclick="backTargetLink_' + backTargetLink + '(this)" data-back-id="' + backTargetLink + '" class="btn btn-circle btn-secondary card-subject-btn-border mr10"><i class="icon-arrow-left7"></i></a>' +
                '</div>' +
                '</div>' +
                '<div class="workspace-part" data-menu-id="' + processMetaDataId + '">' + data + '</div>');

            if ($('.dropdown-clicked', '.vr-workspace-theme10').children().hasClass('sub-menu')) {
                $('.actived', '.vr-workspace-theme10').removeClass('actived');
                if ($('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().children().hasClass('sub-menu')) {
                    $('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().children().find('li:first').addClass('actived');
                } else {
                    if ($('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().parent().hasClass('sub-menu')) {
                        $('a[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').parent().addClass('actived');
                    }
                }
                $('div[data-menu-id="' + menuId + '"]', '.vr-workspace-theme10').addClass('mt35');
            }
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function dataViewSendMailBySelectionRowsInit(elem, processMetaDataId, dataViewId, postParams, getParams) {
    if (typeof isMailSelectionRowsAddonScript === 'undefined') {
        $.getScript('middleware/assets/js/dataview/mail/selectionRows.js').done(function() {
            dataViewSendMailBySelectionRows(elem, processMetaDataId, dataViewId, postParams, getParams);
        });
    } else {
        dataViewSendMailBySelectionRows(elem, processMetaDataId, dataViewId, postParams, getParams);
    }
}
function lifeCycleRender(selectedRow, callback) {
    var srcRecordId = selectedRow.srcrecordid;
    if (typeof srcRecordId !== 'undefined') {
        $.ajax({
            type: 'post',
            url: 'mdlifecycle/index',
            data: {
                srcRecordId: srcRecordId,
                selectedRow: selectedRow
            },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {
                PNotify.removeAll();

                if (typeof callback !== 'function') {
                    $.each($('li[data-type="lifecycle"]'), function() {
                        var $thisLi = $(this);
                        $("div.card-multi-tab > div.card-body > div.card-multi-tab-content").find("div" + $thisLi.find('a').attr('href')).empty().remove();
                        $thisLi.remove();
                    });
                    appMultiTabByContent({ metaDataId: srcRecordId, title: data.Title, type: 'lifecycle', content: data.Html });
                } else {
                    callback(data);
                }

                Core.unblockUI();
            },
            error: function() {
                new PNotify({
                    title: 'Error',
                    text: data.message,
                    type: 'error',
                    sticker: false
                });
            }
        });
    }
}

function lifeCycleRender_v1(selectedRow, dataViewId, callback) {
    var lifecycleid = selectedRow.lifecycleid;
    if (typeof lifecycleid !== 'undefined') {
        $.ajax({
            type: 'post',
            url: 'mdlifecycle/index_v1',
            data: {
                lifecycleid: lifecycleid,
                dataViewId: dataViewId,
                selectedRow: selectedRow
            },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({animate: true});
            },
            success: function(data) {
                PNotify.removeAll();

                if (typeof callback !== 'function') {
                    $.each($('li[data-type="lifecycle"]'), function() {
                        var $thisLi = $(this);
                        $("div.card-multi-tab > div.card-body > div.card-multi-tab-content").find("div" + $thisLi.find('a').attr('href')).empty().remove();
                        $thisLi.remove();
                    });
                    appMultiTabByContent({ metaDataId: lifecycleid, title: data.Title, type: 'lifecycle', content: data.Html });
                } else {
                    callback(data);
                }

                Core.unblockUI();
            },
            error: function() {
                new PNotify({
                    title: 'Error',
                    text: data.message,
                    type: 'error',
                    sticker: false
                });
            }
        });
    }
}

function callDataView(dataViewId, data, callback, tag) {
    $.ajax({
        type: 'post',
        url: 'mdobject/dataview/' + dataViewId,
        data: data,
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        dataType: 'html',
        success: function(response) {
            console.log(typeof callback);
            if (typeof callback === 'function') {
                callback(response, tag);
            }
        }
    }).complete(function() {
        Core.unblockUI();
    });
}

function runAutoEditBusinessProcess(elem, dataViewId, uniqId, isEditMode, runMode) {
    var dataGrid = window['objectdatagrid_' + dataViewId],
        processCode = $(elem).attr('data-processbtn-processcode');

    runBusinessProcess(elem, dataViewId, uniqId, isEditMode, runMode, function(r) {
        if (r.status === 'success') {
            if (r.resultData != '' || r.resultData != null) {
                var processCallFn = dataGrid.closest('.main-dataview-container').find('.dv-process-buttons').find('a[data-dvbtn-processcode="' + processCode + '"]').attr('onclick');
                processCallFn = processCallFn.replace(/\'/g, "").split(',');
                var funcArguments = [
                    '',
                    processCallFn[1].trim(),
                    processCallFn[2].trim(),
                    processCallFn[3].trim(),
                    processCallFn[4].trim(),
                    processCallFn[5].trim(),
                    false,
                    false,
                    false,
                    r.resultData
                ];
                window['transferProcessAction'].apply(null, funcArguments);

                var _thisActiveAppTab = $("div.card-multi-tab > div.card-body > div.card-multi-tab-content > div.active");
                if (typeof isAlwaysNewTab !== 'undefined' && isAlwaysNewTab) {
                    var _li = $("div.card-multi-tab > div.tabbable-line > ul.card-multi-tab-navtabs").find("a[href='#" + _thisActiveAppTab.attr('id') + "']").closest('li');
                    _thisActiveAppTab.remove();
                    _li.remove();
                }
            }
        }
    });
}

function qrGenerateProcessAfterSaveV1(r, elem, dataViewId) {
    dataViewId = (typeof $(elem).attr('data-confirmtype') !== 'undefined' && $(elem).attr('data-confirmtype') === '2') ? '1525387912939' : '1486525150061854';
    var $confirmType = (typeof $(elem).attr('data-confirmtype') !== 'undefined' && $(elem).attr('data-confirmtype') === '2') ? '2' : '1';
    if (r.status === 'success') {
        if (r.resultData != '' || r.resultData != null) {
            var $serviceBookId = r.resultData.id;
            var $parentSelector = $(elem).closest('div.xs-form');
            var $fullHtml = '';
            $fullHtml = '';
            $.ajax({
                type: 'post',
                url: 'mddoc/QRCodeSave',
                data: {
                    html: $fullHtml,
                    uniqId: $parentSelector.attr('data-bp-uniq-id'),
                    processId: $parentSelector.attr('data-process-id'),
                    id: $serviceBookId,
                    confirmType: $confirmType
                },
                beforeSend: function () {
                    $('#temp_'+$serviceBookId).remove();
                },
                success: function(data) {
                    if (data.status === 'error') {
                        new PNotify({
                            title: 'Error',
                            text: data.message,
                            type: 'error',
                            sticker: false
                        });
                    }
                    Core.unblockUI();
                    if ($parentSelector.find('input[data-path="ignoreConfirm"]').length > 0) {
                        return false;
                    }
                    var $cDialogName = '#dialog-ntrservice-confirm';
                    if (!$($cDialogName).length) {
                        $('<div id="' + $cDialogName.replace('#', '') + '"></div>').appendTo('body');
                    }
                    $($cDialogName).empty().append('Шууд баталгаажуулах уу?');

                    $($cDialogName).dialog({
                        cache: false,
                        resizable: false,
                        bgiframe: true,
                        autoOpen: false,
                        title: 'Санамж',
                        width: 450,
                        height: "auto",
                        modal: true,
                        close: function() {
                            $($cDialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: plang.get('yes_btn'),
                                class: 'btn green-meadow btn-sm',
                                click: function() {
                                    $.ajax({
                                        type: 'post',
                                        url: 'mddoc/confirmNtrServicePdf',
                                        data: {
                                            id: $serviceBookId,
                                            dataViewId: dataViewId,
                                            confirmType: $confirmType
                                        },
                                        dataType: 'json',
                                        beforeSend: function() {
                                            Core.blockUI({message: 'Loading...', boxed: true});
                                        },
                                        success: function(data) {
                                            if (data.status === 'success') {
                                                if (data.filepath != '' || data.filepath != null) {
                                                    
                                                    var selectedRow = {'physicalpath': data.filepath, 'id': data.recordId, qrcode: data.qrcode};
                                                    docToPdfUpload(elem, $parentSelector.attr('data-process-id'), dataViewId, selectedRow, {}, $confirmType, 'mddoc/docToPdfUploadConfirm', function() { Core.unblockUI(); $($cDialogName).empty().dialog('destroy').remove(); return true; });
                                                    
                                                }
                                            } else {
                                                new PNotify({
                                                    title: data.status,
                                                    text: data.message,
                                                    type: data.status,
                                                    sticker: false
                                                });
                                                Core.unblockUI();
                                            }
                                        },
                                        error: function() {
                                            alert('Error');
                                        }
                                    });
                                }
                            },
                            {
                                text: plang.get('no_btn'),
                                class: 'btn blue-madison btn-sm',
                                click: function() {
                                    $($cDialogName).empty().dialog('destroy').remove();
                                }
                            }
                        ]
                    });
                    $($cDialogName).dialog('open');
                },
                error: function() {
                    alert('Error');
                }
            });
        }
    }
}

function qrGenerateProcessAfterSave(r, elem, dataViewId, parentId, pprocessId) {
    var $elementy = elem;
    dataViewId = (typeof $(elem).attr('data-confirmtype') !== 'undefined' && $(elem).attr('data-confirmtype') === '2') ? '1525387912939' : '1486525150061854';
    var $confirmType = (typeof $(elem).attr('data-confirmtype') !== 'undefined' && $(elem).attr('data-confirmtype') === '2') ? '2' : '1';
    
    if (r.status === 'success') {
        if (r.resultData != '' || r.resultData != null) {
            
            if (getConfigValue('isBpTemplateNormalMode') == '1') {
                backFirstContent(elem);
                return false;
            }
            
            var $serviceBookId = r.resultData.id;
            var $parentSelector = $(elem).closest('div.xs-form');
            var $fullHtml = '';
            $fullHtml = $('#temp_'+$serviceBookId).html();
            $.ajax({
                type: 'post',
                url: 'mddoc/QRCodeSave',
                data: {
                    html: $fullHtml,
                    uniqId: $parentSelector.attr('data-bp-uniq-id'),
                    processId: $parentSelector.attr('data-process-id'),
                    id: $serviceBookId,
                    confirmType: $confirmType
                },
                beforeSend: function () {
                    $('#temp_'+$serviceBookId).remove();
                },
                success: function(data) {
                    if (data.status === 'error') {
                        new PNotify({
                            title: 'Error',
                            text: data.message,
                            type: 'error',
                            sticker: false
                        });
                    }
                    Core.unblockUI();
                    if ($parentSelector.find('input[data-path="ignoreConfirm"]').length > 0) {
                        backFirstContent(elem);
                        return false;
                    }
                    var $cDialogName = '#dialog-ntrservice-confirm';
                    if (!$($cDialogName).length) {
                        $('<div id="' + $cDialogName.replace('#', '') + '"></div>').appendTo('body');
                    }
                    $($cDialogName).empty().append('Шууд баталгаажуулах уу?');

                    $($cDialogName).dialog({
                        cache: false,
                        resizable: false,
                        bgiframe: true,
                        autoOpen: false,
                        title: 'Санамж',
                        width: 450,
                        height: "auto",
                        modal: true,
                        close: function() {
                            $($cDialogName).empty().dialog('destroy').remove();
                        },
                        buttons: [{
                                text: plang.get('yes_btn'),
                                class: 'btn green-meadow btn-sm',
                                click: function() {
                                    if (typeof isGovAddonScript === 'undefined') {
                                        $.getScript(URL_APP + 'assets/custom/gov/script.js').done(function() {
                                            if (typeof parentId !== 'undefined' && typeof pprocessId !== 'undefined') {
                                                var $parentMethods = {elementy: $elementy, parentId: parentId, dataViewId: dataViewId, confirmType: $confirmType, parentSelector: $parentSelector, undefined: undefined, pprocessId: pprocessId};
                                                docToPdfConfirm($elementy, $serviceBookId, dataViewId, $confirmType, $parentSelector, $cDialogName, $parentMethods);
                                                
                                            } else {
                                                docToPdfConfirm($elementy, $serviceBookId, dataViewId, $confirmType, $parentSelector, $cDialogName);
                                            }
                                        });
                                    } else {
                                        if (typeof parentId !== 'undefined' && typeof pprocessId !== 'undefined') {
                                            var $parentMethods = {elementy: $elementy, parentId: parentId, dataViewId: dataViewId, confirmType: $confirmType, parentSelector: $parentSelector, undefined: undefined, pprocessId: pprocessId};
                                            docToPdfConfirm($elementy, $serviceBookId, dataViewId, $confirmType, $parentSelector, $cDialogName, $parentMethods);
                                            
                                        } else {
                                            docToPdfConfirm($elementy, $serviceBookId, dataViewId, $confirmType, $parentSelector, $cDialogName);
                                        }
                                    }
                                }
                            },
                            {
                                text: plang.get('no_btn'),
                                class: 'btn blue-madison btn-sm',
                                click: function() {

                                    backFirstContent(elem);
                                    $($cDialogName).empty().dialog('destroy').remove();
                                }
                            }
                        ]
                    });
                    $($cDialogName).dialog('open');
                },
                error: function() {
                    alert('Error');
                }
            });
        }
    }
}

function transferProcessNotaryAction() {
    var ars = [];
    for (var i = 0; i < arguments.length; i++) {
        ars.push(arguments[i]);
    }

    var rows = getDataViewSelectedRows(ars[1]);
    var row = rows[0];

    PNotify.removeAll();
    if (typeof row.metadataid === 'undefined') {
        new PNotify({
            title: 'Warning',
            text: '[metadataid] тодорхойлж өгөөгүй байна!',
            type: 'warning',
            sticker: false
        });
        return;
    }
    if (row.metadataid === '' || row.metadataid === '0' || row.metadataid == null) {
        new PNotify({
            title: 'Warning',
            text: 'Процессоо сонгоно уу!',
            type: 'warning',
            sticker: false
        });
        return;
    }

    window['transferProcessAction'].apply(null, ars);
}

function dataViewBase64DownloadLink(v, r, i, dataViewId, refStructureId) {
    if (typeof v !== 'undefined' && v !== '' && v !== 'null' && v !== null) {
        return '<a href="javascript:;" onclick="dataViewBase64Download(this, \'' + v + '\');"><i class="fa fa-download"></i> Файл татах</a>';
    }
    return '';
}

function dataViewBase64Download(elem, v) {
    var vArr = v.split('|');
    var vId = vArr[0];
    var vTable = vArr[1];
    
    $.fileDownload(URL_APP + 'mddatamodel/base64Download', {
        httpMethod: 'post',
        data: {
            vId: vId,
            vTable: vTable.toLowerCase()
        }, 
        successCallback: function (url) {
            PNotify.removeAll();
            Core.unblockUI();
        },
        prepareCallback: function (url) {
            PNotify.removeAll();
            Core.unblockUI();
        },
        failCallback: function (responseHtml, url) {
            PNotify.removeAll();
            new PNotify({
                title: 'Error',
                text: responseHtml, 
                type: 'error',
                sticker: false, 
                addclass: pnotifyPosition
            });
            Core.unblockUI();
        }
    });   
}

function callTemplate(row, metadataId, print_options) {
    if ($("#dialog-printOption").hasClass('ui-dialog-content')) {
        $("#dialog-printOption").dialog('destroy').remove();
    }
    
    var postParams = {
        dataRow: row, 
        metaDataId: metadataId, 
        print_options: print_options
    };
    
    if (print_options.hasOwnProperty('exportMode') && (print_options.exportMode == 'pdf' || print_options.exportMode == 'word')) {
        
        Core.blockUI({message: 'Exporting...', boxed: true});
        
        $.fileDownload(URL_APP + 'mdtemplate/printOption', {
            httpMethod: 'POST',
            data: postParams 
        }).done(function() {
            Core.unblockUI();
        }).fail(function(response) {
            PNotify.removeAll();
            new PNotify({
                title: 'Error',
                text: response,
                type: 'error',
                addclass: pnotifyPosition,
                sticker: false
            });
            Core.unblockUI();
        });
    
        return;
    }
        
    var $dialogName = 'dialog-printOption';
    if (!$($dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdtemplate/printOption',
        data: postParams,
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {

            var dialogWidth = 1200;
            if (print_options['pageOrientation'] == 'landscape') {
                dialogWidth = 1380;
            }

            if (typeof data.isExternalTool !== 'undefined') {
                $dialog.empty().append(data.Html);
                $dialog.dialog({
                    cache: false,
                    resizable: true,
                    bgiframe: true,
                    autoOpen: false,
                    title: data.Title,
                    width: dialogWidth,
                    minWidth: dialogWidth,
                    height: $(window).height() - 2,
                    dialogClass: 'no-padding-dialog',
                    modal: false,
                    close: function() {
                        $dialog.empty().dialog('destroy').remove();
                    },
                    buttons: [{
                        text: data.close_btn,
                        class: 'btn btn-sm blue-hoki',
                        click: function() {
                            $dialog.dialog('close');
                        }
                    }]
                }).dialogExtend({
                    "closable": true,
                    "maximizable": true,
                    "minimizable": true,
                    "collapsable": true,
                    "dblclick": "maximize",
                    "minimizeLocation": "left",
                    "icons": {
                        "close": "ui-icon-circle-close",
                        "maximize": "ui-icon-extlink",
                        "minimize": "ui-icon-minus",
                        "collapse": "ui-icon-triangle-1-s",
                        "restore": "ui-icon-newwin"
                    }
                });
                $dialog.dialog('open');                

            } else {

                if (print_options.isShowPreview == '1') {
                    $dialog.empty().append(data.Html);
                    $dialog.dialog({
                        cache: false,
                        resizable: true,
                        bgiframe: true,
                        autoOpen: false,
                        title: data.Title,
                        width: dialogWidth,
                        minWidth: dialogWidth,
                        height: $(window).height() - 2,
                        dialogClass: 'no-padding-dialog',
                        modal: false,
                        close: function() {
                            $dialog.empty().dialog('destroy').remove();
                        },
                        buttons: [{
                            text: data.close_btn,
                            class: 'btn btn-sm blue-hoki',
                            click: function() {
                                $dialog.dialog('close');
                            }
                        }]
                    }).dialogExtend({
                        "closable": true,
                        "maximizable": true,
                        "minimizable": true,
                        "collapsable": true,
                        "dblclick": "maximize",
                        "minimizeLocation": "left",
                        "icons": {
                            "close": "ui-icon-circle-close",
                            "maximize": "ui-icon-extlink",
                            "minimize": "ui-icon-minus",
                            "collapse": "ui-icon-triangle-1-s",
                            "restore": "ui-icon-newwin"
                        }
                    });
                    $dialog.dialog('open');

                } else {

                    var copies = print_options.numberOfCopies
                    var isNewPage = print_options.isPrintNewPage;
                    var pageOrientation = print_options.paperInput;

                    $.each(data.Html, function(key, value) {
                        $("body").append('<page size="A4" class="hide"><div id="externalContent">' + value + '</div></page>');
                    });
                    $("body").append('<div id="contentRepeat" class="hide"></div>');

                    if (copies >= 1) {
                        $("page").each(function(j) {
                            for (var i = 0; i < copies; i++) {
                                if (isNewPage == '1') {
                                    $("#contentRepeat").append($(this).find("#externalContent").get(0).outerHTML);
                                    $("#contentRepeat").find("#externalContent").attr('style', 'page-break-after: always;');
                                } else {
                                    $("#contentRepeat").append($(this).find("#externalContent").get(0).outerHTML);
                                }
                            }
                            $("#contentRepeat").find("#externalContent").last().attr('style', 'page-break-after: always;');
                        });
                        $("div#contentRepeat").find("#externalContent").last().removeAttr('style');
                        var css = URL_APP + "assets/custom/css/print/reportPrint.css";
                        if (pageOrientation == 'landscape') {
                            css = URL_APP + "assets/custom/css/print/print.css";
                        }
                        
                        if (typeof print_options.marginConfig !== 'undefined' && print_options.marginConfig === '1') {
                            $.ajax({
                                type: 'post',
                                url: 'mdtemplate/printCss',
                                data: {
                                    orientation: print_options.pageOrientation,
                                    isPrintNewPage: print_options.isPrintNewPage,
                                    size: print_options.pageSize,
                                    top: typeof print_options.top !== 'undefined' ? print_options.top : '0',
                                    left: typeof print_options.left !== 'undefined' ? print_options.left : '0',
                                    bottom: typeof print_options.bottom !== 'undefined' ? print_options.bottom : '0',
                                    right: typeof print_options.right !== 'undefined' ? print_options.right : '0',
                                },
                                beforeSend: function () {
                                    Core.blockUI({ boxed: true, message: 'Printing...' });
                                },
                                success: function (dataReportCss) {
                                    $("div#contentRepeat").promise().done(function () {
                                        $("#contentRepeat").printThis({
                                            debug: false,
                                            importCSS: false,
                                            printContainer: false,
                                            loadCSS: [],
                                            dataCSS: dataReportCss,
                                            removeInline: false
                                        });
                                    });

                                    if ($("body").find("#contentRepeat").length > 0) {
                                        $("body").find("#contentRepeat").remove();
                                        $("body").find("page").remove();
                                    }
                                },
                                error: function () { alert('Error'); }

                            }).done(function () {
                                Core.unblockUI();
                            });
                        } else {
                            $("div#contentRepeat").promise().done(function () {
                                $("#contentRepeat").printThis({
                                    debug: false,
                                    importCSS: (typeof data['print_options'] !== 'undefined' && typeof data['print_options']['importCss'] !== 'undefined' && print_options['importCss'] === '1') ? true : false,
                                    printContainer: false,
                                    loadCSS: css,
                                    removeInline: false
                                });
                            });
                        }
                    }
                    if (typeof print_options.marginConfig !== 'undefined' && print_options.marginConfig === '1') { }
                    else {
                        if ($("body").find("#contentRepeat").length > 0) {
                            $("body").find("#contentRepeat").remove();
                            $("body").find("page").remove();
                        }
                    }
                }
            }

            Core.unblockUI();
        },
        error: function() { alert('Error'); }
    }).done(function() {
        Core.initDVAjax($dialog);
    });
}

function ntrFingerprintRegister(selectedRow) {
    if (typeof selectedRow.fingerid !== 'undefined' && (selectedRow.fingerid != null && selectedRow.fingerid != '')) {
        new PNotify({
            title: 'Warning',
            text: 'Хурууны хээ бүртгэлтэй байна.',
            type: 'warning',
            sticker: false
        });
        return;
    }


    if ("WebSocket" in window) {
        console.log("WebSocket is supported by your Browser!");
        // Let us open a web socket
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            // ws.send('{"command":"fingerprint_register", "dateTime":"' + currentDateTime + '"}');
            ws.send('{"command":"finger_image", "dateTime":"' + currentDateTime + '", details: []}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            if (jsonData.status == 'success') {

                $.ajax({
                    type: 'post',
                    url: 'mdcommon/saveNtrFingerDataCtrl',
                    data: { fingerImg: jsonData.details[0].value, userId: selectedRow.id },
                    dataType: 'json',
                    beforeSend: function() {
                        Core.blockUI({message: 'Loading...', boxed: true});
                    },
                    success: function(data) {
                        new PNotify({
                            title: data.status,
                            text: data.message,
                            type: data.status,
                            sticker: false
                        });
                        Core.unblockUI();
                    },
                    error: function() {
                        alert('Error');
                    }
                });

            } else {
                console.log(jsonData);
                var resultJson = {
                    Status: 'Error',
                    Error: jsonData.message
                }

                new PNotify({
                    title: jsonData.status,
                    text: (jsonData.description !== 'undefined') ? jsonData.description : 'Амжилтгүй боллоо',
                    type: jsonData.status,
                    sticker: false
                });
                console.log(JSON.stringify(resultJson));
            }
        };

        ws.onerror = function(event) {
            var resultJson = {
                Status: 'Error',
                Error: 'Клент ажиллуулахад алдаа гарлаа.'
            }
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });

            console.log(JSON.stringify(resultJson));
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
        };
    } else {
        var resultJson = {
            Status: 'Error',
            Error: "WebSocket NOT supported by your Browser!"
        }

        console.log(JSON.stringify(resultJson));
    }
}

function ntrFingerRegisterUser() {

    if ("WebSocket" in window) {
        console.log("WebSocket is supported by your Browser!");
        // Let us open a web socket
        var ws = new WebSocket("ws://localhost:58324/socket");

        ws.onopen = function() {
            var currentDateTime = GetCurrentDateTime();
            // ws.send('{"command":"fingerprint_register", "dateTime":"' + currentDateTime + '"}');
            ws.send('{"command":"finger_image", "dateTime":"' + currentDateTime + '", details: []}');
        };

        ws.onmessage = function(evt) {
            var received_msg = evt.data;
            var jsonData = JSON.parse(received_msg);

            if (jsonData.status == 'success') {

                $.ajax({
                    type: 'post',
                    url: 'mdcommon/saveNtrUserFingerCtrl',
                    data: { fingerImg: jsonData.details[0].value },
                    dataType: 'json',
                    beforeSend: function() {
                        Core.blockUI({message: 'Loading...', boxed: true});
                    },
                    success: function(data) {
                        new PNotify({
                            title: data.status,
                            text: data.message,
                            type: data.status,
                            sticker: false
                        });
                        Core.unblockUI();
                    },
                    error: function() {
                        alert('Error');
                    }
                });

            } else {
                console.log(jsonData);
                var resultJson = {
                    Status: 'Error',
                    Error: jsonData.message
                }

                new PNotify({
                    title: jsonData.status,
                    text: (jsonData.description !== 'undefined') ? jsonData.description : 'Амжилтгүй боллоо',
                    type: jsonData.status,
                    sticker: false
                });
                console.log(JSON.stringify(resultJson));
            }
        };

        ws.onerror = function(event) {
            var resultJson = {
                Status: 'Error',
                Error: 'Клент ажиллуулахад алдаа гарлаа.'
            }
            PNotify.removeAll();
            new PNotify({
                title: 'warning',
                text: 'Клент ажиллуулахад алдаа гарлаа.',
                type: 'warning',
                sticker: false
            });

            console.log(JSON.stringify(resultJson));
        };

        ws.onclose = function() {
            console.log("Connection is closed...");
        };
    } else {
        var resultJson = {
            Status: 'Error',
            Error: "WebSocket NOT supported by your Browser!"
        }

        console.log(JSON.stringify(resultJson));
    }
    
}

function ntrFingerprintCheck(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    
    $.ajax({
        type: 'post',
        url: 'mddoc/viewWordTemplatePdf',
        data: {
            selectedRow: selectedRow,
            dataViewId: dataViewId,
            webLinkId: processMetaDataId
        },
        dataType: 'json',
        beforeSend: function(){
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'success') {
                selectedRow['physicalpath'] = data.filepath;
                if (typeof selectedRow['notstamp'] !== 'undefined' && selectedRow['notstamp'] === '1') {selectedRow['qrcode'] = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==';} else {
                    if ((selectedRow['qrcode'] == '' || !selectedRow['qrcode']) && typeof data['qrCodeString'] !== 'undefined' && data['qrCodeString'] !== '') {
                        selectedRow['qrcode'] = data['qrCodeString'];
                    }
                }
                
                docToPdfUpload(elem, processMetaDataId, dataViewId, selectedRow, paramData, undefined, undefined, 
                    function() { $.each(data.childRows, function (i, r) {
                        if (typeof r['physicalpath'] !== 'undefined' && typeof r['wordpath'] !== 'undefined' && r['wordpath']) {
                            r['physicalpath'] = r['wordpath'];
                        }
                        ntrFingerprintCheck(elem, processMetaDataId, dataViewId, r, paramData);
                    }) 
                });
            } else {
                new PNotify({
                    title: data.status,
                    text: data.message,
                    type: data.status,
                    sticker: false
                });
            }
            Core.unblockUI();
            dataViewReload(dataViewId);
        }, 
        error: function () {
            alert('Error');
        }
    });

    return; /*Tur awaw*/ /*2s demotoi geed neew*/
}

function runBpTemplateMap(elem, dataViewId, uniqId, isEditMode, runMode, callback) {
    var runMode = (typeof runMode !== 'undefined') ? runMode : '';
    var $tabs = $('a[data-bptemplate-tab="' + uniqId + '"]');
    var $ticketAjaxSubmit = $ticketValidation = $ticketTab = false;
    $.each($tabs, function(index, $element_) {
        var $getElement = $($element_);

        if ($getElement.attr('bptab-status') === 'open' && typeof $getElement.attr('main-bptemplate-tab') === 'undefined') {
            $ticketTab = true;
        }
    });

    if ($ticketTab) {
        var $cDialogName = '#dialog-ntr-confirm';
        if (!$($cDialogName).length) {
            $('<div id="' + $cDialogName.replace('#', '') + '"></div>').appendTo('body');
        }
        $($cDialogName).empty().append('Хавсралт баримт бичгийг хамт хадгалах уу?');

        $($cDialogName).dialog({
            cache: false,
            resizable: false,
            bgiframe: true,
            autoOpen: false,
            title: 'Санамж',
            width: 450,
            height: "auto",
            modal: true,
            close: function() {
                $($cDialogName).empty().dialog('destroy').remove();
            },
            buttons: [{
                    text: plang.get('yes_btn'),
                    class: 'btn green-meadow btn-sm',
                    click: function() {
                        $ticketValidation = true;
                        $($cDialogName).empty().dialog('destroy').remove();
                        ajaxSubmitBpTemplateMap(elem, dataViewId, uniqId, isEditMode, runMode, callback, $ticketValidation);
                    }
                },
                {
                    text: plang.get('no_btn'),
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $ticketValidation = false;
                        ajaxSubmitBpTemplateMap(elem, dataViewId, uniqId, isEditMode, runMode, callback, $ticketValidation);
                        $($cDialogName).empty().dialog('destroy').remove();
                    }
                }
            ]
        });

        $($cDialogName).dialog('open');
    } else {
        
        $ticketValidation = false;
        var _mainSelector = $('#bp_main_tab_' + uniqId + ' .xs-form');

        if (_mainSelector.find('input[data-path="warningDescription"]').length > 0) { 
            var _yesBtn = typeof _mainSelector.find('input[data-path="yesBtn"]') !== 'undefined' ? _mainSelector.find('input[data-path="yesBtn"]').val() : plang.get('yes_btn');
            var _noBtn = typeof _mainSelector.find('input[data-path="noBtn"]') !== 'undefined' ? _mainSelector.find('input[data-path="noBtn"]').val() : plang.get('no_btn');

            var $cDialogName = '#dialog-ntr-confirm';
            if (!$($cDialogName).length) {
                $('<div id="' + $cDialogName.replace('#', '') + '"></div>').appendTo('body');
            }
            $($cDialogName).empty().append(_mainSelector.find('input[data-path="warningDescription"]').val());
    
            $($cDialogName).dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: 'Санамж',
                width: 450,
                height: "auto",
                modal: true,
                close: function() {
                    $($cDialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                        text: _yesBtn,
                        class: 'btn green-meadow btn-sm',
                        click: function() {
                            ajaxSubmitBpTemplateMap(elem, dataViewId, uniqId, isEditMode, runMode, callback, $ticketValidation);
                            $($cDialogName).empty().dialog('destroy').remove();
                        }
                    },
                    {
                        text: _noBtn,
                        class: 'btn blue-madison btn-sm',
                        click: function() {
                            $($cDialogName).empty().dialog('destroy').remove();
                        }
                    }
                ]
            });

            $($cDialogName).dialog('open');
        } else {
            ajaxSubmitBpTemplateMap(elem, dataViewId, uniqId, isEditMode, runMode, callback, $ticketValidation);
        }
    }
}

function ajaxSubmitBpTemplateMap(elem, dataViewId, uniqId, isEditMode, runMode, callback, $ticketValidation) {
    var $btnElement = elem;
    var runMode = (typeof runMode !== 'undefined') ? runMode : '';
    var $tag = ($ticketValidation) ? 'data-bptemplate-tab="' + uniqId + '"' : 'main-bptemplate-tab="' + dataViewId + '"';
    var $tabs = $('a[' + $tag + ']');
    var mainUniqId = uniqId;
    $.each($tabs, function(index, $element_) {
        var $getElement = $($element_);

        if ($getElement.attr('bptab-status') === 'open') {
            $ticketAjaxSubmit = false;
            var _parentForm = $($getElement.attr('href') + ' .xs-form');
            if (window['processBeforeSave_' + uniqId](elem)) {
                _parentForm.find('select:visible').each(function() {
                    var _this = $(this);
                    if (_this.parent().find("div:first").hasClass("select2-container-disabled")) {
                        _this.parent().find("div:first").attr("data-readonly", "");
                    }
                    if (typeof _this.parent().find("div:first").attr("data-readonly") !== 'undefined') {
                        _this.prop("readonly", true);
                    }
                });

                $("#wsForm", _parentForm).validate({
                    ignore: "",
                    highlight: function(element) {
                        $(element).addClass('error');
                        $(element).parent().addClass('error');
                        if ($("#wsForm", _parentForm).find("div.tab-pane:hidden:has(.error)").length) {
                            $("#wsForm", _parentForm).find("div.tab-pane:hidden:has(.error)").each(function(index, tab) {
                                var tabId = $(tab).attr("id");
                                $("#wsForm", _parentForm).find('a[href="#' + tabId + '"]').tab('show');
                            });
                        } else {
                            $('a[href="' + $getElement.attr('href') + '"]').tab('show');
                        }
                    },
                    unhighlight: function(element) {
                        $(element).removeClass('error');
                    },
                    errorPlacement: function() {}
                });

                var validForm = $("#wsForm", _parentForm).valid();
                var validGlCriteria = true;

                if ($("#glTemplateSectionProcess", _parentForm).length > 0) {
                    var validGl = validateGlBook($("#glTemplateSectionProcess", _parentForm));
                    validGlCriteria = (validGl.status == 'success') ? true : false;
                }

                if (validGlCriteria) {

                    var isValidPattern = initBusinessProcessMaskEvent(_parentForm);

                    if (validForm && isValidPattern.length === 0) {

                        var _jsonResponse = false;
                        var _workSpaceMode = '0';
                        var _workSpace = $(elem).closest(".ws-area");
                        if (_workSpace.length > 0) {
                            _jsonResponse = true;
                            _workSpaceMode = _workSpace.find('input[name="workSpaceMode"]').val();
                        }

                        $ticketAjaxSubmit = true;
                    }

                } else {

                    bpIgnoreGroupRemove(_parentForm);
                    $ticketAjaxSubmit = false;

                    $('a[href="' + $getElement.attr('href') + '"]').tab('show');
                }

            } else {
                bpIgnoreGroupRemove(_parentForm);
                $ticketAjaxSubmit = false;

                $('a[href="' + $getElement.attr('href') + '"]').tab('show');
            }
        }
    });

    var _parentForm = $('#bp_main_tab_' + uniqId + ' .xs-form');
    var $beforeBpId = 0;

    if ($ticketAjaxSubmit) {
        $("#wsForm", _parentForm).ajaxSubmit({
            type: 'post',
            url: 'mdwebservice/runProcess',
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(responseData) {
                qrGenerateProcessAfterSave(responseData, $btnElement, dataViewId);
                if (responseData.status === 'success') {
                    if ($tabs.length > 0 && $ticketValidation) {
                        var $exited = false;
                        $.each($tabs, function(index, $element_) {
                            var $getElement = $($element_);

                            if ($getElement.attr('bptab-status') === 'open' && $getElement.attr('href') !== '#bp_main_tab_' + mainUniqId && !$exited) {
                                var uniqId = $($getElement.attr('href') + ' .xs-form').attr('data-bp-uniq-id');
                                var _parentForm = $($getElement.attr('href') + ' .xs-form');
                                $beforeBpId = responseData.rowId;
                                var $parentProcessId = $("#wsForm", _parentForm).closest('.xs-form').attr('data-process-id');
                                $("#wsForm", _parentForm).find('input[name="param[parentId]"]').val($beforeBpId);
                                if (window['processBeforeSave_' + uniqId](elem)) {
                                    $("#wsForm", _parentForm).ajaxSubmit({
                                        type: 'post',
                                        url: 'mdwebservice/runProcess',
                                        dataType: 'json',
                                        beforeSend: function() {
                                            Core.blockUI({message: 'Loading...', boxed: true});
                                        },
                                        success: function(responseData) {
                                            $exited = true;
                                            if (responseData.isSystemResponse === 'false' || _jsonResponse || typeof callback !== 'undefined') {

                                                PNotify.removeAll();

                                                if (responseData.status === 'error') {
                                                    new PNotify({
                                                        title: 'Error',
                                                        text: responseData.message,
                                                        type: responseData.status,
                                                        sticker: false,
                                                        hide: true,
                                                        addclass: pnotifyPosition,
                                                        delay: 1000000000
                                                    });

                                                    Core.unblockUI();

                                                    if (typeof callback !== 'undefined') {
                                                        callback(responseData, elem);
                                                        return;
                                                    }
                                                } else {
                                                    $exited = false;
                                                    new PNotify({
                                                        title: 'Success',
                                                        text: responseData.message,
                                                        type: responseData.status,
                                                        addclass: pnotifyPosition,
                                                        sticker: false
                                                    });
                                                    qrGenerateProcessAfterSave(responseData, $btnElement, dataViewId, $beforeBpId, $parentProcessId);
                                                }
                                            } else {
                                                $("#responseMethod", _parentForm).empty().append(responseData.responseMethod);
                                                $('html,body').animate({
                                                    scrollTop: $("#responseMethod", _parentForm).offset().top
                                                }, 'slow');
                                                if (responseData.rowId !== '') {
                                                    if ($(".meta-toolbar").find("#printReportProcess").length > 0) {
                                                        var method = $(".meta-toolbar").find("button#printReportProcess").attr('onclick');
                                                        var params = method.replace("processPrintPreview(", "").replace(")", "");
                                                        var arr = params.split(',');
                                                        var newMethod = "processPrintPreview(this, " + arr[0] + ", '" + responseData.rowId + "', " + arr[2] + ", " + JSON.stringify(responseData.resultData) + ")";
                                                        $(".meta-toolbar").find("#printReportProcess").attr('onclick', newMethod);
                                                        if ($(".meta-toolbar").find("#printReportProcess").hasClass("disabled")) {
                                                            $(".meta-toolbar").find("#printReportProcess").removeClass("disabled");
                                                        }
                                                    }
                                                }
                                            }

                                            bpIgnoreGroupRemove(_parentForm);

                                            Core.unblockUI();
                                        },
                                        error: function() {
                                            $exited = true;
                                            alert('Error');
                                        }
                                    });
                                }
                            }
                        });
                    } else {
                        var appMetaDataId = $("#wsForm", _parentForm).find('input[name="methodId"]').val();
                        multiTabCloseConfirm($tabMainContainer.find("a[href='#app_tab_" + appMetaDataId + "']"), '1');
                    }
                }

                if (responseData.isSystemResponse === 'false' || _jsonResponse || typeof callback !== 'undefined') {

                    PNotify.removeAll();

                    if (responseData.status === 'error') {
                        new PNotify({
                            title: 'Error',
                            text: responseData.message,
                            type: responseData.status,
                            sticker: false,
                            hide: true,
                            addclass: pnotifyPosition,
                            delay: 1000000000
                        });

                        Core.unblockUI();

                        if (typeof callback !== 'undefined') {
                            callback(responseData, elem);
                            return;
                        }
                    } else {
                        new PNotify({
                            title: 'Success',
                            text: responseData.message,
                            type: responseData.status,
                            sticker: false
                        });

                        if (typeof callback !== 'undefined') {
                            callback(responseData);
                            return;
                        }

                        if (typeof dataViewId !== 'undefined' && dataViewId !== '') {
                            var dataGrid = window['objectdatagrid_' + dataViewId];
                            dataViewReloadByElement(dataGrid);
                        }
                    }

                } else {

                    $("#responseMethod", _parentForm).empty().append(responseData.responseMethod);
                    $('html,body').animate({
                        scrollTop: $("#responseMethod", _parentForm).offset().top
                    }, 'slow');
                    if (responseData.rowId !== '') {
                        if ($(".meta-toolbar").find("#printReportProcess").length > 0) {
                            var method = $(".meta-toolbar").find("button#printReportProcess").attr('onclick');
                            var params = method.replace("processPrintPreview(", "").replace(")", "");
                            var arr = params.split(',');
                            var newMethod = "processPrintPreview(this, " + arr[0] + ", '" + responseData.rowId + "', " + arr[2] + ", " + JSON.stringify(responseData.resultData) + ")";
                            $(".meta-toolbar").find("#printReportProcess").attr('onclick', newMethod);
                            if ($(".meta-toolbar").find("#printReportProcess").hasClass("disabled")) {
                                $(".meta-toolbar").find("#printReportProcess").removeClass("disabled");
                            }
                        }
                    }
                }

                bpIgnoreGroupRemove(_parentForm);

                Core.unblockUI();
            },
            error: function() {
                alert('Error');
            }
        });
    } else {
        if ($beforeBpId) {
            // 'NTR_SERVICE_BOOK_DV2_005';
            console.log($beforeBpId);
        }
    }
}

function deleteBpTemplateMapData(recordId, dataViewId, uniqId) {
    console.log(recordId, dataViewId, uniqId);
}

function renderStaticMenuByWorkSpace(workSpaceId, elem) {
    var workSpaceContainer = $("#workspace-id-" + workSpaceId);
    var menuId = $(elem).attr("data-menu-id");
    var mainContainer = $("div.workspace-main-container", workSpaceContainer);
    var _this = $(elem);

    mainContainer.find("div.workspace-part").hide();
    _this.closest("ul").children().removeClass("active");
    _this.parent().addClass("active");

    mainContainer.find("div[class=workspace-part][data-menu-id=" + menuId + "]").show();
}

function posTalonNotLotteryPrintInit(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof isPosAddonScript === 'undefined') {
        $.getScript(URL_APP + 'middleware/assets/js/pos/addon.js').done(function() {
            posTalonNotLotteryPrint(elem, processMetaDataId, dataViewId, selectedRow, paramData);
        });
    } else {
        posTalonNotLotteryPrint(elem, processMetaDataId, dataViewId, selectedRow, paramData);
    }
}

function bpmDiagramToolInit(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof isBpmEditorUiInit === 'undefined') {
        $.getScript(URL_APP + 'middleware/assets/js/bpm/addon.js').done(function() {
            bpmDiagramTool(elem, processMetaDataId, dataViewId, selectedRow, paramData);
        });
    } else {
        bpmDiagramTool(elem, processMetaDataId, dataViewId, selectedRow, paramData);
    }
}

function bpCitizenData(elem, widgetExpression, grouPath, callbackFunction, $methodId, mainUniqId) {
    
    if (typeof isGovNotaryAddonScript === 'undefined') {
        $.getScript(URL_APP + 'projects/assets/custom/projects/notary.js').done(function() {
            getCitizenDataXyp(elem, widgetExpression, grouPath, callbackFunction, $methodId, mainUniqId);
        });
    } else {
        getCitizenDataXyp(elem, widgetExpression, grouPath, callbackFunction, $methodId, mainUniqId);
    }
    
}

function bpPropertyData(elem, propertyNumber, processId, callbackFunction) {
    
    if (typeof isGovNotaryAddonScript === 'undefined') {
        $.getScript(URL_APP + 'projects/assets/custom/projects/notary.js').done(function() {
            getPropertyDataXyp(elem, propertyNumber, processId, callbackFunction);
        });
    } else {
        getPropertyDataXyp(elem, propertyNumber, processId, callbackFunction);
    }

}

function bpPropertyDataGazar(elem, propertyNumber, processId, callbackFunction) {
    
    if (typeof isGovNotaryAddonScript === 'undefined') {
        $.getScript(URL_APP + 'projects/assets/custom/projects/notary.js').done(function() {
            getPropertyDataGazar(elem, propertyNumber, processId, callbackFunction);
        });
    } else {
        getPropertyDataGazar(elem, propertyNumber, processId, callbackFunction);
    }

}

function bpDeceaseInfoData(elem, stateRegNumber, processId, callbackFunction) {
    
    if (typeof isGovNotaryAddonScript === 'undefined') {
        $.getScript(URL_APP + 'projects/assets/custom/projects/notary.js').done(function() {
            getDeceaseInfoData(elem, stateRegNumber, processId, callbackFunction);
        });
    } else {
        getDeceaseInfoData(elem, stateRegNumber, processId, callbackFunction);
    }

}

function bpCallServiceBookData(element, target, uniqId) {
    
    var $this = $(element),
        $parent = $this.closest('.servicebook_prevdata');
    
    PNotify.removeAll();
    if (!$parent.find('input[data-path="'+ target +'"]').val()) {
        new PNotify({
            title: 'Warning',
            text: plang.get('pls_fill_filterpath'),
            type: 'warning',
            sticker: false
        });
        return false;
    }

    $.ajax({
        type: 'post',
        url: 'mddoc/getDataByQrcode',
        data: { filterPath: $parent.find('input[data-path="'+ target +'"]').val() },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: plang.get('Loading...'), boxed: true});
        },
        success: function(response) {
            $parent.find('.cp_content').empty().append(response.Html);
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function bpCopyPrevData(elem, taxonamyObj, isother, widgetExpression, grouPath) {
    var $this = $(elem),
        _mainBpContainer = $this.closest('.bp-banner-container'),
        _relateduniqid = (_mainBpContainer.data('relateduniqid')) ? _mainBpContainer.data('relateduniqid') : '123456789',
        _isCopyTabService = _mainBpContainer.parent().attr('is-bp-trg-meta'),
        $prevProcess = $("div[data-bp-uniq-id='" + _relateduniqid + "']");
    var $dialogName = 'dialog-confirm-copyprevdata-notary';

    var mainWidgetExpression = widgetExpression;
    var widgetExpression = JSON.parse(decodeURIComponent(widgetExpression));

    var gPath = $(elem).closest('.detail-template-body').attr('data-dtl-template-path'),
        cindex = $(elem).closest('.detail-template-body-rows').index(),
        wCode = $(elem).closest('.detail-template-body').attr('data-dtl-template-widget');

    var dataUindex = cindex;

    var __subRowsSelection = $this.closest('.detail-template-body-sub-rows');
    var _subKeyRowsSelection = $this.closest('.detail-template-body-subkey-rows');
    var wid = widgetExpression[wCode];
    
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    
    var $detailsRow;
    var listHtml = '';

    if (_isCopyTabService) {
        if (typeof isother !== 'undefined' && 1 == 0) {
            var taxonamyObjParse = JSON.parse(decodeURIComponent(taxonamyObj));
            
            if (typeof taxonamyObjParse['0'] !== 'undefined' && typeof taxonamyObjParse['0']['PATH'] !== 'undefined') {
                listHtml += '<div class="list-group">';
                var $srcSelector = $prevProcess.find('[data-dtl-template-path="'+ taxonamyObjParse['0']['PATH'] +'"]');
                
                $srcSelector.find('.detail-template-body-rows').each(function (keyIndex, bodyRows) {
                    var $bodyRows = $(bodyRows);
                    listHtml += '<a href="javascript:;" data-key="' + keyIndex + '" class="list-group-item list-group-item-action">';
                    $bodyRows.find('input[data-path]').each(function (i, row) {  
                        if (i < 3) {      
                            var $row = $(row);
                            var $dataPath = $row.attr('data-path');
                            listHtml += $row.val() + ' ';
                        }
                    });
                    listHtml += '</a>';
                });
    
                listHtml += "</div>";
            }
    
        } else {
            listHtml += '<div class="list-group">';
            $prevProcess.find('.detail-template-body-rows').each(function(keyIndex, row) {
                $detailsRow = $(this);
                
                if ($detailsRow.find('input[name="NTR_CUSTOMER_A_DV.firstName"]').length) {
                    listHtml += '<a href="javascript:;" data-key="' + keyIndex + '" class="list-group-item list-group-item-action">' + $detailsRow.find('input[name="NTR_CUSTOMER_A_DV.lastName"]').val() + ' ' + $detailsRow.find('input[name="NTR_CUSTOMER_A_DV.firstName"]').val() + '</a>';
                } else if ($detailsRow.find('input[name="NTR_CUSTOMER_A_DV.companyName"]').length) {
                    listHtml += '<a href="javascript:;" data-key="' + keyIndex + '" class="list-group-item list-group-item-action">' + $detailsRow.find('input[name="NTR_CUSTOMER_A_DV.companyRegisterNumber"]').val() + ' ' + $detailsRow.find('input[name="NTR_CUSTOMER_A_DV.companyName"]').val() + '</a>';
                } else if ($detailsRow.find('input[name="NTR_CUSTOMER_B_DV.firstName"]').length) {
                    listHtml += '<a href="javascript:;" data-key="' + keyIndex + '" class="list-group-item list-group-item-action">' + $detailsRow.find('input[name="NTR_CUSTOMER_B_DV.lastName"]').val() + ' ' + $detailsRow.find('input[name="NTR_CUSTOMER_B_DV.firstName"]').val() + '</a>';
                } else if ($detailsRow.find('input[name="NTR_CUSTOMER_B_DV.companyName"]').length) {
                    listHtml += '<a href="javascript:;" data-key="' + keyIndex + '" class="list-group-item list-group-item-action">' + $detailsRow.find('input[name="NTR_CUSTOMER_B_DV.companyRegisterNumber"]').val() + ' ' + $detailsRow.find('input[name="NTR_CUSTOMER_B_DV.companyName"]').val() + '</a>';
                }
            });
            listHtml += "</div>";
        }
    } else {
        listHtml += '<div class="servicebook_prevdata">';
            listHtml += '<div class="input-group input-group-criteria mb-1" id="bp-window-'+ _relateduniqid +'" style="float: left;">' + 
                            '<input type="text" name="temp-qrcode" class="form-control form-control-sm stringInit" data-path="temp-qrcode" data-field-name="qrcode" value="" data-isclear="0" placeholder="'+ plang.get('qrnumber_txt') +'">' + 
                            '<span class="input-group-btn">' +
                                '<button type="button" class="btn btn-sm " onclick="bpCallServiceBookData(this, \'temp-qrcode\', \''+ _relateduniqid +'\')" style="padding: 0px 5px 0px 5px;border-bottom-left-radius: 0;border-top-left-radius: 0;font-size: 13.5px;background: #2196f3;color: #FFF;">'+ plang.get('callservicebookdata_txt') +'</button>' +
                            '</span> ' +
                        '</div>';
            listHtml += '<div class="cp_content">'+ plang.get('msg_no_record_found') +'</div>';
        listHtml += '</div>';
    }
    
    $("#" + $dialogName).empty().append(listHtml);
    $("#" + $dialogName).dialog({
        cache: false,
        resizable: false,
        bgiframe: true,
        autoOpen: false,
        title: 'Мэдээлэл хуулах',
        width: 450,
        height: "auto",
        modal: true,
        close: function() {
            $("#" + $dialogName).empty().dialog('close');
        },
        buttons: [{
                text: plang.get('copy_data_btn'),
                class: 'btn green-meadow btn-sm',
                click: function() {

                    var $thisBodyRows = $this.closest('.detail-template-body-rows'),
                        getGroup = $thisBodyRows.find('input.form-control:first').attr('name').split('.'),
                        $t;

                    if (_isCopyTabService) {
                        if (typeof isother !== 'undefined'  && 1 == 0) {
                            var selectedIndex = $("#" + $dialogName).find('.list-group-item-action.active').data('key');               
                                
                            if (typeof taxonamyObjParse['0'] !== 'undefined' && typeof taxonamyObjParse['0']['PATH'] !== 'undefined') {
                                var $inputs = $prevProcess.find('[data-dtl-template-path="'+ taxonamyObjParse['0']['PATH'] +'"]').find('.detail-template-body-rows:eq('+ selectedIndex +')').find('input');
                            }
                        } else {
                            var selectedIndex = $("#" + $dialogName).find('.list-group-item-action.active').data('key');
                            var $inputs = $prevProcess.find('.detail-template-body-rows:eq(' + selectedIndex + ')').find('input, select:not([data-field-name="dim1"])');
                        }
                        
                        $inputs.each(function() {
                            $t = $(this);
                            if (typeof $t.attr('name') !== 'undefined') {
                                $t.attr('data-filled', '1');
                                var _name = ($t.attr('name').replace(/^[a-zA-Z|_]+/, getGroup[0]));
                                var _selectorTag = $thisBodyRows.find($t[0].tagName.toLowerCase() + '[name="' + _name + '"]');
                                
                                _selectorTag.attr('data-filled', '1');
                                _selectorTag.val($t.val());
                                _selectorTag.attr('value', $t.val());
                                _selectorTag.trigger('change');
                            } else {
                                if (typeof $t.attr('inputmode') !== 'undefined' && $t.attr('inputmode') === 'numeric') {
                                    
                                    
                                    var _name = ($t.attr('data-path').replace(/^[a-zA-Z|_]+/, getGroup[0]));
                                    var _selectorTag = $thisBodyRows.find($t[0].tagName.toLowerCase() + '[data-path="' + _name + '"]');
                                    _selectorTag.attr('data-filled', '1');
                                    _selectorTag.val($t.val());
                                    _selectorTag.attr('value', $t.val());
                                    _selectorTag.trigger('change');
                                }
                            }
                        });

                        $this.closest('.template-action-buttons').find('a:eq(1)').trigger('click');
                    } else {
                        var _mainSelectorCpData = $('#' + $dialogName).find('.servicebook_prevdata').find('.list-group-item-action.active').attr('data-rowdata');
                        if (_mainSelectorCpData) {
                            var cpRowData = JSON.parse(_mainSelectorCpData);
                            if (typeof wid !== 'undefined' && wid.length > 0) {
                                for (var i = 0; i < wid.length; i++) {
                                    $.each(cpRowData, function (ck, cr) {
                                        if ((wid[i]['FIELD']).toLowerCase() == ck) {
                                            ss = '';

                                            if (__subRowsSelection.length && typeof editMode === 'undefined') {
                                                var subIndex = __subRowsSelection.attr('data-index');
                                                var $detailTemplateSelector = $thisBodyRows.find('.detail-template-body-sub-rows:eq(' + subIndex + ')');
                                                ss = (wid[i].EXPRESSION === 'company') ? $detailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + ".company']") : $detailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");

                                                if (_subKeyRowsSelection.length) {
                                                    var subKeyIndex = _subKeyRowsSelection.attr('data-key-index');
                                                    var $subDetailTemplateSelector = $thisBodyRows.find('.detail-template-body-subkey-rows:eq(' + subKeyIndex + ')');

                                                    ss = (wid[i].EXPRESSION === 'company') ? $subDetailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + ".company']") : $subDetailTemplateSelector.find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
                                                }
                                            } else if (typeof editMode !== 'undefined') {
                                                if (k > 0) {
                                                    if (__subRowsSelection.length) {
                                                        var dtlSubRows = $thisBodyRows.find('.detail-template-body-sub-rows');

                                                        if (typeof dtlSubRows !== 'undefined' && dtlSubRows.length) {
                                                            dtlSubRows.each(function(kk, vv) {
                                                                if (kk == editMode) {
                                                                    ss = (wid[i].EXPRESSION === 'company') ? $(this).find("input[name='" + wid[i].PATH + "." + grouPath + ".company']") : $(this).find("input[name='" + wid[i].PATH + "." + grouPath + "." + wid[i].FIELD + "']");
                                                                    if (typeof ss !== 'undefined' && ss.length) {
                                                                        wid[i].EXPRESSION = wid[i].EXPRESSION.replace(/&quot;/g, "'");
                                                                        ss.val(eval(wid[i].EXPRESSION)).trigger('change');
                                                                    }
                                                                }
                                                            });
                                                        }

                                                    } else {
                                                        ss = (wid[i].EXPRESSION === 'company') ? $thisBodyRows.find("input[name='" + wid[i].PATH + ".company']") : $thisBodyRows.find("input[name='" + wid[i].PATH + "." + wid[i].FIELD + "']");
                                                    }
                                                }
                                            } else {
                                                ss = (wid[i].EXPRESSION === 'company') ? $thisBodyRows.find("input[name='" + wid[i].PATH + ".company']") : $thisBodyRows.find("input[name='" + wid[i].PATH + "." + wid[i].FIELD + "']");
                                            }
                                            
                                            ss.val(cr).trigger('change');
                                        }
                                    });
                                }
                            }
                        } else {
                            PNotify.removeAll();
                            new PNotify({
                                title: 'Warning',
                                text: plang.get('pls_choose_cpdata'),
                                type: 'warning',
                                sticker: false
                            });
                            return false;
                        }
                    }
                    $("#" + $dialogName).dialog('close');
                }
            },
            {
                text: plang.get('close_btn'),
                class: 'btn blue-madison btn-sm',
                click: function() {
                    $("#" + $dialogName).dialog('close');
                }
            }
        ]
    });
    $("#" + $dialogName).dialog('open');
    $("#" + $dialogName).on('click', '.list-group-item-action', function() {
        $("#" + $dialogName).find('.list-group-item-action').removeClass('active');
        $(this).addClass('active');
    });
}

function bpCitizenAddressData(elem, widgetExpression, grouPath) {
    var _this = $(elem);
    var _parent = _this.closest('.card');
    var _process = _this.closest('form');
    var mainWidgetExpression = widgetExpression;

    var $fingerBase = _this.closest('div.template-action-buttons').attr('check-reg');
    var $stateRegNumber = _this.closest('div.template-action-buttons').attr('check-citizen-finger');

    $.ajax({
        type: 'post',
        url: 'mddoc/saveFingerDataTemp',
        data: { finger: $fingerBase, registerNumber: $stateRegNumber },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: plang.get('Loading...'), boxed: true});
        },
        success: function(response) {
            var data = response.data;
            if (response.status === 'success') {
                $("#" + $dialogName).empty().dialog('close');
                if (typeof data.regnum !== 'undefined' && typeof data.lastname !== 'undefined' && data.lastname !== '' && data.regnum !== '') {
                    var $passAddress = data.passportAddress.split('@');
                    var $passwordAddress = '';
                    $.each($passAddress, function(index, row) {
                        if (index !== 0) {
                            $passwordAddress += ' ' + row;
                        }
                    });

                    /* var $passwordAddress = data.aimagCityName + ', ' + data.addressApartmentName + ', ' + data.addressRegionName + ' тоот'; */
                    /*data.passportAddress; */
                    bpIDCardFillWtemplate(elem, _parent, _process, mainWidgetExpression, data.regnum, data.lastname, data.firstname, data.gender, data.surname, data.birthDateAsText, data.aimagCityName, data.soumDistrictName, data.bagKhorooName, $passwordAddress, data.image, grouPath, undefined, undefined, '');
                } else {
                    new PNotify({
                        title: 'Warning',
                        text: 'Мэдээлэл солилцоход шаардлагатай мэдээллийг авч чадсангүй.',
                        type: 'warning',
                        sticker: false
                    });
                }
            } else {
                new PNotify({
                    title: response.status,
                    text: response.message,
                    type: response.status,
                    sticker: false
                });
            }
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}

function kpiLinkListener(elem) {
    var _this = $(elem);
    var physicalpath = _this.parent().find('input[type="hidden"]').val();

    if (physicalpath) {
        _this.parent().find('input[type="hidden"]').trigger('change');
        var fileExt = physicalpath.split('.').pop().toLowerCase();
        dataViewFileViewer(elem, '', fileExt, '', URL_APP + physicalpath);
    }
}

function renderEquipmentInstallationMobi(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof IS_LOAD_ASSET_MOBI_SCRIPT === 'undefined') {
        $.getScript(URL_APP + "middleware/assets/js/mobi/assets.js").done(function() {
            connectionAssets.renderEquipmentInstallationMobiInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
        });
    } else {
        connectionAssets.renderEquipmentInstallationMobiInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
    }
}

function renderEquipmentConnectionMobi(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof IS_LOAD_ASSET_MOBI_SCRIPT === 'undefined') {
        $.getScript(URL_APP + "middleware/assets/js/mobi/assets.js").done(function() {
            connectionAssets.renderEquipmentConnectionMobiInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
        });
    } else {
        connectionAssets.renderEquipmentConnectionMobiInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
    }
}

function renderWebServiceByMeta(metaDataId, htmlTag, runDefaultGet, runDefaultGetParam, isDialog, callback, valuePackageId, isSystemMeta, params, isRefresh, wfmStatusParams, callbackAfterSave, selectedRowData, dmMetaDataId, addonJsonParam) {
    callWebServiceByMeta(metaDataId, isDialog, valuePackageId, isSystemMeta, params, isRefresh, wfmStatusParams, callback, callbackAfterSave, selectedRowData, dmMetaDataId, addonJsonParam, runDefaultGet, runDefaultGetParam, htmlTag);
}

function googleMapMarkerMoreLink(mid, row) {
    var row = JSON.parse(decodeURIComponent(row));

    var strData = {
        "listMetaDataId": mid,
        "rowId": row.id,
        "actionMetaDataId": row.actionmetadataid,
        "actionMetaTypeId": row.actionmetatypeid,
        "metaGoogleMapLinkId": true
    };

    /**
     * callTransferActionGoogleMap(strData);
     * Шууд DV-ээс дуудлаа тохиргоонууд нь ажиллахгүй байсан тул
     */
    if (strData.actionMetaTypeId == '200101010000016') {
        callDataViewByGoogleMap(strData.actionMetaDataId, null);
    } else if (strData.actionMetaTypeId == '200101010000032') {
        callDiagramByMeta(strData.actionMetaDataId, 'gmap', row.id);
    } else if (strData.actionMetaTypeId == '200101010000034') {
        runWorkSpaceWithDataView(row, mid, strData.actionMetaDataId, true, row, false, true);
    } else if (strData.actionMetaTypeId == '200101010000036') {
        callLayoutByGoogleMap({ 'metaDataId': row.actionMetaDataId, 'rowId': row.id });
    } else if (strData.actionMetaTypeId == '200101010000011') {
        renderWebServiceByMeta(strData.actionMetaDataId, '', '1', 'id=' + row.id, true);
    }
}
function ecmContentHtmlEditor(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof isEcmContentScript === 'undefined') {
        $.getScript(URL_APP + "middleware/assets/js/ecmcontent/ecmcontent.js").done(function() {
            ecmContentHtmlEditorInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
        });
    } else {
        ecmContentHtmlEditorInit(elem, processMetaDataId, dataViewId, selectedRow, paramData);
    }
}
function secondsToHms(d) {
    d = Number(d);
    var h = Math.floor(d / 3600);
    var m = Math.floor(d % 3600 / 60);
    var s = Math.floor(d % 3600 % 60);

    var hDisplay = h > 0 ? h + " цаг " : "";
    var mDisplay = m > 0 ? m + " мин " : "";
    var sDisplay = s > 0 ? s + " сек" : "";

    return hDisplay + mDisplay + sDisplay;
}
function customerFilterDataView(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    $.ajax({
        type: 'post',
        url: 'mdlog/customerFilterDataView',
        dataType: 'json',
        data: { selectedRow: selectedRow, paramData: paramData },
        beforeSend: function() {
            Core.blockUI({animate: true});
        },
        success: function(data) {
            var $dialogName = 'dialog-customerFilter-view-' + data.uniqId;
            if (!$("#" + $dialogName).length) {
                $('<div id="' + $dialogName + '"></div>').appendTo('body');
            }

            $("#" + $dialogName).empty().append(data.Html);
            $("#" + $dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                minHeight: data.Height,
                width: data.Width,
                modal: false,
                close: function() {
                    $("#" + $dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $("#" + $dialogName).empty().dialog('destroy').remove();
                    }
                }]
            }).dialogExtend({
                'closable': true,
                'maximizable': true,
                'minimizable': true,
                'collapsable': true,
                'dblclick': 'maximize',
                'minimizeLocation': 'left',
                'icons': {
                    'close': 'ui-icon-circle-close',
                    'maximize': 'ui-icon-extlink',
                    'minimize': 'ui-icon-minus',
                    'collapse': 'ui-icon-triangle-1-s',
                    'restore': 'ui-icon-newwin'
                }
            });
            $("#" + $dialogName).dialog('open');
            /* $("#" + $dialogName).dialogExtend("maximize"); */
            Core.initAjax($("#" + $dialogName));
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
            Core.unblockUI();
        }
    });
}
function initSalaryLog(url, paramData) {
    $.ajax({
        type: 'post',
        url: url,
        data: paramData,
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            if (data.status === 'error') {
                PNotify.removeAll();
                new PNotify({
                    title: 'Warning',
                    text: data.message,
                    type: data.status,
                    addclass: pnotifyPosition,
                    sticker: false
                });
                Core.unblockUI();
                return;
            }

            var dialogName = '#dialog-prl-salary-loadlog';
            if (!$(dialogName).length) {
                $('<div id="' + dialogName.replace('#', '') + '"></div>').appendTo('body');
            }

            $(dialogName).empty().append(data.Html);

            if (data.status !== 'raw') {
                var dgId = "#salaryDatagrid_" + data.uniqId,
                    calcInfoWindow = "#calcInfoWindow_" + data.uniqId,
                    fields = data.response.column,
                    ffields = data.response.frozenColumn;

                for (var i = 0; i < ffields.length; i++) {
                    delete ffields[i].styler;
                    ffields[i].styler = function() {
                        return "background-color: #ffddd3;padding-left:6px;";
                    };
                }

                for (var i = 0; i < fields.length; i++) {
                    delete fields[i].styler;
                    if (fields[i].columndatatype === 'number') {
                        fields[i].formatter = window['sheetNumberFormatter_' + data.uniqId];
                        fields[i].align = 'right';
                    }
                    if (fields[i].field === 'delete') {
                        delete fields[i];
                    }
                }

                var dynamicHeight = $(window).height() - 100;
                $(dgId).attr('height', dynamicHeight);

                $(dgId).datagrid({
                    view: scrollview,
                    data: data.response.dataset,
                    fit: false,
                    fitColumns: false,
                    rownumbers: true,
                    singleSelect: true,
                    showFooter: true,
                    ctrlSelect: false,
                    pagination: true,
                    remoteFilter: false,
                    loadMsg: 'Лог мэдээлэл ачааллаж байна, Түр хүлээнэ үү',
                    pageSize: 50,
                    remoteSort: false,
                    frozenColumns: [ffields],
                    columns: [fields],
                    sortName: 'firstname',
                    sortOrder: 'asc',
                    onLoadSuccess: function(data) {
                        $('.datagrid-footer table tbody tr', calcInfoWindow).find('td:last-child').find('a').remove();
                    },
                    onLoadError: function() {
                        alert('Ажилтны мэдээлэл ачааллахад алдаа гарлаа!');
                    }
                });
                $(dgId).datagrid('enableFilter');
            }

            $(dialogName).dialog({
                cache: false,
                resizable: true,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1200,
                height: 'auto',
                modal: true,
                close: function() {
                    $(dialogName).empty().dialog('destroy').remove();
                },
                buttons: [{
                    text: data.close_btn,
                    class: 'btn blue-madison btn-sm',
                    click: function() {
                        $(dialogName).dialog('close');
                    }
                }]
            }).dialogExtend({
                "closable": true,
                "maximizable": true,
                "minimizable": true,
                "collapsable": true,
                "dblclick": "maximize",
                "minimizeLocation": "left",
                "icons": {
                    "close": "ui-icon-circle-close",
                    "maximize": "ui-icon-extlink",
                    "minimize": "ui-icon-minus",
                    "collapse": "ui-icon-triangle-1-s",
                    "restore": "ui-icon-newwin"
                }
            });

            $(dialogName).dialog('open');
            $(dialogName).dialogExtend("maximize");
            Core.unblockUI();
        },
        error: function() {
            alert('Error');
        }
    });
}
function layoutFullScreen(elem) {
    var $this = $(elem),
        $parent = $this.parent().parent();

    if (!$this.hasAttr('data-fullscreen')) {
        $this.attr({ 'data-fullscreen': '1' }).find('i').removeClass('fa-expand').addClass('fa-compress');
        $parent.addClass('layout-fullscreen');

    } else {
        $this.attr('title', 'Fullscreen').removeAttr('data-fullscreen').find('i').removeClass('fa-compress').addClass('fa-expand');
        $parent.removeClass('layout-fullscreen');
    }

    return;
}
function documentviewer_old(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var currIndex = $(elem).closest('tr').attr('datagrid-row-index');
    var $dialogName = 'dialog-documentviewer-' + getUniqueId(1);
    var windowHeight = $(window).height(),
        fileList = '';
    var rows = getRowsDataView(dataViewId);
    selectedRow = rows[currIndex];

    $.ajax({
        type: 'post',
        url: 'mddoc/documentEcmMapList',
        data: {
            refStructureId: $("input#refStructureId", "#object-value-list-" + dataViewId).val(),
            rowId: selectedRow.id
        },
        dataType: 'json',
        async: false,
        success: function(data) {
            if (data.length) {
                for (var i = 0; i < data.length; i++) {
                    fileList += '<div class="popuphavsralt"><a href="javascript:void(0);" onclick="documentSingleViewer(this, \'' + $dialogName + '\' ,\'' + dataViewId + '\' ,\'' + encodeURIComponent(JSON.stringify(selectedRow)) + '\', \'' + data[i].PHYSICAL_PATH + '\')"><img src="storage/uploads/process/file_1545391700200271_15452821957441.png"><h5>' + data[i].FILE_NAME + '</h5></a></div>';
                }
            } else {
                fileList = '';
            }
        }
    }).done(function() {

        if (fileList === '') {
            PNotify.removeAll();
            new PNotify({
                title: 'Сануулга',
                text: 'Хавсралт файл олдсонгүй.',
                type: 'info',
                sticker: false
            });
            return;
        }

        $('<div class="modal pl0 fade modal-after-save-close" id="' + $dialogName + '" tabindex="-1" role="dialog" aria-hidden="true">' + '<div class="modal_class1"></div>' +
            '<div class="modal-dialog" style="width:900px;margin-top:50px;">' +
            '<div class="modal-content">' +
            '<div class="modal-header" style="display:none;height:35px;padding-top: 6px;">' +
            '<button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>' +
            '<h4 class="modal-title">Document Viewer</h4>' +
            '</div>' +
            '<div style="padding: 0;" class="modal-body"></div>' +
            '<div class="modal-footer">' +
            '<button type="button" data-dismiss="modal" class="btn blue-hoki btn-sm">' + plang.get('close_btn') + '</button>' +
            '</div></div><div class="popuprightsidebar">' + fileList + '</div>').appendTo('body');

        var $dialog = $('#' + $dialogName);

        $dialog.modal();
        $dialog.on('shown.bs.modal', function() {
            $dialog.find(' > .modal-dialog > .popuprightsidebar > .popuphavsralt > a:first').click();
            disableScrolling();
        });
        $dialog.on('hidden.bs.modal', function() {
            $dialog.remove();
            enableScrolling();
        });
    });
}
function documentviewer(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var $documentName = selectedRow.documentname;
        $documentName = $documentName.replace("/", " ");
    var customTitle = $documentName; //decodeURIComponent(selectedRow.documentname);
    customTitle = (customTitle.length > 20) ? customTitle.substr(0,20) + '...' : customTitle;
    appMultiTab({ weburl: 'mddoc/documentEcmMapListNew', metaDataId: 'documentEcmMapList_' + dataViewId + '_' + selectedRow.id, title: selectedRow.doccode + ' - ' + customTitle, type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow }, this);
}
function documentviewerclean(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var $documentName = selectedRow.documentname;
        $documentName = $documentName.replace("/", " ");
    var customTitle = $documentName; //decodeURIComponent(selectedRow.documentname);
    customTitle = (customTitle.length > 20) ? customTitle.substr(0,20) + '...' : customTitle;
    appMultiTab({ weburl: 'mddoc/documentEcmMapListClean', metaDataId: 'documentEcmMapList_' + dataViewId, title: customTitle, type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow, tabReload: true}, this);
}
function documentarchiveviewer(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var $documentName = selectedRow.documentname;
        $documentName = $documentName.replace("/", " ");
    var customTitle = $documentName; //decodeURIComponent(selectedRow.documentname);
    customTitle = (customTitle.length > 20) ? customTitle.substr(0,20) + '...' : customTitle;
    appMultiTab({ weburl: 'mddoc/documentEcmMapListArchive', metaDataId: 'documentEcmMapList_' + dataViewId, title: customTitle, type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow }, this);
}
function laweditpage(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var $documentName = selectedRow.documentname;
        $documentName = $documentName.replace("/", " ");
    var customTitle = $documentName; //decodeURIComponent(selectedRow.documentname);
    customTitle = (customTitle.length > 20) ? customTitle.substr(0,20) + '...' : customTitle;
    appMultiTab({ weburl: 'government/laweditpage', metaDataId: 'laweditpage' + dataViewId, title: customTitle, type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow }, this);
}
function documentSingleViewer(elem, $dialogName, dataViewId, selectedRow, path) {
    var $selectorModalBody = $('#' + $dialogName).find('.modal-body');
    $('#' + $dialogName).find(' > .modal-dialog > .popuprightsidebar > .popuphavsralt').removeClass('active');
    $(elem).parent().addClass('active');

    $.ajax({
        type: 'post',
        url: 'mdpreview/fileViewerForWebLink',
        data: {
            rowId: 1,
            fileExtension: 'pdf',
            fullPath: path,
            contentId: '',
            dvId: dataViewId,
            refStructureId: $("input#refStructureId", "#object-value-list-" + dataViewId).val(),
            selectedRow: (selectedRow != '' ? JSON.parse(decodeURIComponent(selectedRow)) : '')
        },
        dataType: 'json',
        success: function(data) {
            $selectorModalBody.html(data.html);

            if (!$('#' + $dialogName).find('.modal_class1').html().length) {
                var processBtn = $('#objectDataView_' + dataViewId).find('.rightsidebar > .btn-group').html();
                $('#' + $dialogName).find('.modal_class1').append('<div class="wfm-buttons-preview pb10">' + data.wfmHtml + ' ' + processBtn + '</div>');
            }
        }
    });
}
function documentCommentFile(typeId, rowId, titl, isblank) {
    $.ajax({
        type: 'post',
        url: 'mddoc/documentComment',
        data: { typeId: typeId, rowId: rowId, isblank: isblank },
        dataType: 'html',
        success: function(data) {
            appMultiTabByContent({ weburl: 'mddoc/documentcomment', metaDataId: 'documentEcmMapList_1472715413889_', title: decodeURIComponent(titl), type: 'newprocess', content: data });
        }
    });
}
function documentCommentEdited(rowId, parentId, titl) {
    console.log(rowId, parentId, titl);
    $.ajax({
        type: 'post',
        url: 'mddoc/documentCommentEdited',
        data: { rowId: rowId, parentId: parentId },
        dataType: 'html',
        success: function(data) {
            appMultiTabByContent({ weburl: 'mddoc/documentCommentEdited', metaDataId: 'documentEcmMapList_1472715413889_', title: decodeURIComponent(titl), type: 'newprocess', content: data });
        }
    });
}
function documentEditComment(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var newParamData = paramDataToObject(paramData);

    if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
        $.ajax({
            type: 'post',
            url: 'mddoc/documentEditComment',
            data: { selectedRow: selectedRow, paramData: newParamData },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(data) {

                var $dialogName = 'dialog-doc-editomment-' + data.uniqId;

                $('<div class="modal pl0 fade modal-after-save-close" id="' + $dialogName + '" tabindex="-1" role="dialog" aria-hidden="true">' +
                    '<div class="modal-dialog modal-lg">' +
                    '<div class="modal-content">' +
                    '<div class="modal-header">' +
                    '<button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>' +
                    '<h4 class="modal-title">' + data.title + '</h4>' +
                    '</div>' +
                    '<div class="modal-body">' +
                    data.html +
                    '</div>' +
                    '<div class="modal-footer">' +
                    '<button type="button" data-dismiss="modal" class="btn blue-hoki btn-sm">' + plang.get('close_btn') + '</button>' +
                    '</div></div></div></div>').appendTo('body');

                var $dialog = $('#' + $dialogName);
                $dialog.find('.modal-body').css('height', $(window).height() - 130);

                $dialog.modal();

                $dialog.on('shown.bs.modal', function() {
                    Core.unblockUI();
                    Core.initSelect2($dialog);
                    disableScrolling();
                });

                $dialog.on('hidden.bs.modal', function(e) {
                    $dialog.remove();
                    enableScrolling();
                });
            }
        });
    } else {
        alert(plang.get('msg_pls_list_select'));
    }
}
function documentassign(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var newParamData = paramDataToObject(paramData);

    if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
        $.ajax({
            type: 'post',
            url: 'mddoc/documentassign',
            data: { selectedRow: selectedRow, paramData: newParamData },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(data) {

                var $dialogName = 'dialog-doc-assign-' + data.uniqId;

                $('<div class="modal pl0 fade modal-after-save-close" id="' + $dialogName + '" tabindex="-1" role="dialog" aria-hidden="true">' +
                    '<div class="modal-dialog modal-medium">' +
                    '<div class="modal-content">' +
                    '<div class="modal-header">' +
                    '<h4 class="modal-title">' + data.title + '</h4>' +
                    '<button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>' +
                    '</div>' +
                    '<div class="modal-body">' +
                    data.html +
                    '</div>' +
                    '<div class="modal-footer">' +
                    '<button type="button" data-dismiss="modal" class="btn blue-hoki btn-sm">' + plang.get('close_btn') + '</button>' +
                    '</div></div></div></div>').appendTo('body');

                var $dialog = $('#' + $dialogName);
                $dialog.find('.modal-body').css('height', $(window).height() - 130);

                $dialog.modal();

                $dialog.on('shown.bs.modal', function() {
                    Core.unblockUI();
                    Core.initSelect2($dialog);
                    disableScrolling();
                });

                $dialog.on('hidden.bs.modal', function(e) {
                    $dialog.remove();
                    enableScrolling();
                });

                $dialog.on('click', '.continue', function() {

                    $.ajax({
                        type: 'post',
                        url: 'mddoc/savedocumentassign',
                        data: $('#' + $dialogName).find('form').serialize(),
                        dataType: 'json',
                        beforeSend: function() {
                            Core.blockUI({message: 'Loading...', boxed: true});
                        },
                        success: function(dataSub) {
                            PNotify.removeAll();
                            new PNotify({
                                title: dataSub.status,
                                text: dataSub.message,
                                type: dataSub.status,
                                sticker: false
                            });

                            if (dataSub.status === 'success') {
                                $('#' + $dialogName).remove();
                            }
                            Core.unblockUI();
                        }
                    });

                });
            }
        });
    } else {
        alert(plang.get('msg_pls_list_select'));
    }
}
function adddocument(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    var newParamData = paramDataToObject(paramData);

    if (typeof selectedRow !== 'undefined' && selectedRow.length != 0) {
        $.ajax({
            type: 'post',
            url: 'mddoc/adddocument',
            data: { selectedRow: selectedRow, paramData: newParamData },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(data) {

                var $dialogName = 'dialog-doc-assign-' + data.uniqId;

                $('<div class="modal pl0 fade modal-after-save-close" id="' + $dialogName + '" tabindex="-1" role="dialog" aria-hidden="true">' +
                    '<div class="modal-dialog modal-medium">' +
                    '<div class="modal-content">' +
                    '<div class="modal-header">' +
                    '<h4 class="modal-title">' + data.title + '</h4>' +
                    '<button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>' +
                    '</div>' +
                    '<div class="modal-body">' +
                    data.html +
                    '</div>' +
                    '<div class="modal-footer">' +
                    '<button type="button" data-dismiss="modal" class="btn blue-hoki btn-sm">' + plang.get('close_btn') + '</button>' +
                    '</div></div></div></div>').appendTo('body');

                var $dialog = $('#' + $dialogName);
                $dialog.find('.modal-body').css('height', $(window).height() - 130);

                $dialog.modal();

                $dialog.on('shown.bs.modal', function() {
                    Core.unblockUI();
                    Core.initSelect2($dialog);
                    disableScrolling();
                });

                $dialog.on('hidden.bs.modal', function(e) {
                    $dialog.remove();
                    enableScrolling();
                });
            }
        });
    } else {
        alert(plang.get('msg_pls_list_select'));
    }
}
function saveDocParagraph(elem, uniqid) {
    var $dialog = $('#windowid-doccomment-' + uniqid);
    var content = tinymce.activeEditor.getContent();

    if (content.length === 61) {
        PNotify.removeAll();
        new PNotify({
            title: 'Info',
            text: 'Хоосон байна!',
            type: 'info',
            sticker: false
        });
        return;
    }

    $dialog.find('form').ajaxSubmit({
        type: 'post',
        url: 'mddoc/docParagraphCreate',
        data: {
            docParagraph: encodeURIComponent(content)
        },
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(data) {
            PNotify.removeAll();
            new PNotify({
                title: data.status,
                text: data.message,
                type: data.status,
                sticker: false
            });
            if (data.status === 'success') {
                //multiTabCloseConfirm($(elem));
            }
            Core.unblockUI();
        }
    });
}
function glMultiConnectInfoDialog(resultList) {
    var $dialogName = 'dialog-glmulticonnect-info';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $('#' + $dialogName);
    var html = '<table class="table table-hover mb0">' +
        '<thead>' +
        '<tr>' +
        '<th class="font-weight-bold" style="width:30px">№</th>' +
        '<th class="font-weight-bold" style="width:200px">Баримтын дугаар</th>' +
        '<th class="font-weight-bold">Шалгуурын мэдээлэл</th>' +
        '</tr>' +
        '</thead>' +
        '<tbody>';

    var i = 1;

    for (var key in resultList) {

        html += '<tr>';
        html += '<td>' + i + '.</td>';
        html += '<td>' + key + '</td>';
        html += '<td>' + resultList[key] + '</td>';
        html += '</tr>';

        i++;
    }

    html += '</tbody>';
    html += '</table>';

    $dialog.empty().append(html);
    $dialog.dialog({
        cache: false,
        resizable: false,
        bgiframe: true,
        autoOpen: false,
        title: 'Шалгуурын мэдээлэл',
        width: 800,
        height: 'auto',
        maxHeight: $(window).height() - 50,
        modal: true,
        close: function() {
            $dialog.empty().dialog('destroy').remove();
        },
        buttons: [{
            text: plang.get('close_btn'),
            class: 'btn blue-madison btn-sm',
            click: function() {
                $dialog.dialog('close');
            }
        }]
    }).dialogExtend({
        "closable": true,
        "maximizable": true,
        "minimizable": true,
        "collapsable": true,
        "dblclick": "maximize",
        "minimizeLocation": "left",
        "icons": {
            "close": "ui-icon-circle-close",
            "maximize": "ui-icon-extlink",
            "minimize": "ui-icon-minus",
            "collapse": "ui-icon-triangle-1-s",
            "restore": "ui-icon-newwin"
        }
    });
    $dialog.dialog('open');
}
function ecommerceReloadFilter(dvid) {

    if (typeof dvid === 'undefined') {
        return;
    }
    var $mainDvContainer = $('div#object-value-list-' + dvid), $this;

    $mainDvContainer.find('.bp-icon-selection').each(function() {
        $this = $(this);
        
        if (typeof $this.data('metagroupid') !== 'undefined') {
            $this.find('li').remove();
            $.ajax({
                type: 'post',
                async: false,
                url: 'mdwebservice/renderIconReloadControl/' + $this.data('metagroupid'),
                data: {processMetaDataId: dvid}, 
                dataType: 'html',
                success: function(data) {
                    $this.prepend(data);
                }
            });
        }
    });
    if ($('.tab-lookupcriteria-' + dvid).length) {
        $('.tab-lookupcriteria-' + dvid).first().click();
    }
    /**
     * Selected reload WFMs
     */
    /*try {
        window['dvRowSelector_' + dvid](undefined, undefined, true);
    } catch (err) {} */          
}
function attendance(elem, processMetaDataId, dataViewId, selectedRow, paramData, urlLower) {

    var currIndex = $(elem).closest('tr').attr('datagrid-row-index');
    var rows = getRowsDataView(dataViewId);

    selectedRow = rows[currIndex];

    var win = window.open(urlLower + '/' + selectedRow.id, '_blank');

    win.focus();
}
function callParliament(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof selectedRow === 'undefined') {
        var dataGrid = window['objectdatagrid_' + dataViewId];
        var rows = getDataViewSelectedRowsByElement(dataGrid);
        selectedRow = rows[0];
    }
    
    $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/css/government/style.v2.css"/>');
    appMultiTab({weburl: 'government/government', metaDataId: 'government/government', dataViewId: dataViewId, title: 'Асуудлын дэлгэрэнгүй', type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow, tabReload: true});
}
function callLawTree(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    // if (typeof selectedRow === 'undefined') {
    //     var dataGrid = window['objectdatagrid_' + dataViewId];
    //     var rows = getDataViewSelectedRowsByElement(dataGrid);
    //     selectedRow = rows[0];
    // }
    
    $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/css/government/style.v2.css"/>');
    appMultiTab({weburl: 'government/lawtree', metaDataId: 'government/lawtree', dataViewId: dataViewId, title: 'Lawtree', type: 'selfurl', selectedRow: selectedRow, tabReload: true});
}
function insertFingerZk(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof selectedRow === 'undefined') {
        var dataGrid = window['objectdatagrid_' + dataViewId];
        var rows = getDataViewSelectedRowsByElement(dataGrid);
        selectedRow = rows[0];
    }
    
    if (typeof selectedRow.customerid === 'undefined') {
        alert('Not found Customer ID');
        return;
    }

    if (typeof isCommonAddonScript === 'undefined') {
        $.getScript(URL_APP + 'middleware/assets/js/addon/common.js').done(function() {
            customerFingerRegisterZk(selectedRow.customerid);
        });
    } else {
        customerFingerRegisterZk(selectedRow.customerid);
    }         
}
function callParliamentV2(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof selectedRow === 'undefined') {
        var dataGrid = window['objectdatagrid_' + dataViewId];
        var rows = getDataViewSelectedRowsByElement(dataGrid);
        selectedRow = rows[0];
    }
    appMultiTab({ weburl: 'conference/conferencedetail', metaDataId: 'conferencedetail_' + dataViewId, title: 'Хуралдааны дэлгэрэнгүй', type: 'selfurl', deta: selectedRow.id, selectedRow: selectedRow, tabReload: true}, this, function(elem) {});
}
function callEaObject(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof selectedRow === 'undefined') {
        var dataGrid = window['objectdatagrid_' + dataViewId];
        var rows = getDataViewSelectedRowsByElement(dataGrid);
        selectedRow = rows[0];
    }
    appMultiTab({ weburl: 'mdasset/eaobject', metaDataId: 'mdposLocker_' + dataViewId + '_' + selectedRow.id, title: 'Хуралдааны дэлгэрэнгүй', type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow, tabReload: true}, this, function(elem) {});
}
function callEaService(elem, processMetaDataId, dataViewId, selectedRow, paramData) {
    if (typeof selectedRow === 'undefined') {
        var dataGrid = window['objectdatagrid_' + dataViewId];
        var rows = getDataViewSelectedRowsByElement(dataGrid);
        selectedRow = rows[0];
    }
    appMultiTab({ weburl: 'mdasset/easervice', metaDataId: 'mdposLocker_' + dataViewId + '_' + selectedRow.id, title: 'Хуралдааны дэлгэрэнгүй', type: 'selfurl', recordId: selectedRow.id, selectedRow: selectedRow }, this, function(elem) {});
}
function treeLayoutContentRender(paramData, id) {
    var jsonArr = JSON.parse(paramData['selectedRow']);
    var chartType = (typeof jsonArr['charttype'] !== 'undefined' ? jsonArr['charttype'] : null);
    var id = (typeof id === 'undefined' ? '' : id);

    if (chartType == 'list') {

        $.ajax({
            type: 'post',
            url: 'mdobject/dataview/' + jsonArr['listmetadataid'] + '/0/json',
            data: { metaDataId: jsonArr['listmetadataid'] },
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(dataHtml) {
                appMultiTabByContent({ metaDataId: dataHtml.metaDataId, title: dataHtml.Title, type: 'dataview', content: dataHtml.Html });
                Core.unblockUI();
            }
        });
        return;
    }

    $.ajax({
        type: 'post',
        url: 'mdlayout/treeLayout',
        data: paramData,
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {
            if (data.Type === 'streelayout') {
                if (typeof IS_LOAD_D3_V2_SCRIPT === 'undefined') {
                    $.cachedScript(URL_APP + 'assets/core/js/plugins/visualization/d3/d3.min.js').done(function() { 
                        appMultiTabByContent({ weburl: 'mdlayout/treelayout', metaDataId: '1000009988000000' + id, title: data.Title, type: 'selfurl', content: data.Html });
                    });
                } else {
                    appMultiTabByContent({ weburl: 'mdlayout/treelayout', metaDataId: '1000009988000000' + id, title: data.Title, type: 'selfurl', content: data.Html });
                }
            } else {
                if (data.Type === 'treelayout') {
                    if (typeof IS_LOAD_D3_SCRIPT === 'undefined') {
                        $.cachedScript(URL_APP + 'assets/core/js/plugins/visualization/d3/d3.v2.min.js').done(function() { 
                            appMultiTabByContent({ weburl: 'mdlayout/treelayout', metaDataId: '1000009988000000' + id, title: data.Title, type: 'selfurl', content: data.Html });
                        });
                    } else {
                        appMultiTabByContent({ weburl: 'mdlayout/treelayout', metaDataId: '1000009988000000' + id, title: data.Title, type: 'selfurl', content: data.Html });
                    }
                } else {
                    appMultiTabByContent({ weburl: 'mdlayout/treelayout', metaDataId: '1000009988000000' + id, title: data.Title, type: 'selfurl', content: data.Html });
                }
            }

            Core.unblockUI();
        }
    });
}
function previewErsFile(paramData, selectedRow) {
    appMultiTab({ weburl: 'mddoc/previewErsFile', metaDataId: 'mddoc_previewErsFile', title: plang.get('SHOW_PREVIEW_TEMPLATE'), type: 'selfurl', recordId: '', selectedRow: selectedRow, tabReload: true }, this, function(elem) {});
    return;
}
function previewIntranet13(url) {
    $.ajax({
        type: 'post',
        dataType: 'json',
        url: url,
        beforeSend: function() {
            
            $("head").append('<link rel="stylesheet" type="text/css" href="middleware/assets/css/intranet/style.v'+ getUniqueId(1) +'.css"/>');
            
            $.cachedScript("assets/core/js/plugins/visualization/echarts/echarts.min.js");
            $.cachedScript("assets/core/js/plugins/charts/echarts/pies_donuts.js");
            $.cachedScript("assets/core/js/plugins/charts/echarts/columns_waterfalls.js");
            $.cachedScript("assets/core/js/plugins/charts/echarts/areas.js");
            
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {
            if (typeof data.status !== 'undefined') {
                new PNotify({
                    title: data.status,
                    text: data.text,
                    type: data.status,
                    sticker: false
                });  
            } else {
                appMultiTabByContent({ weburl: 'mdasset/intranet1', metaDataId: getUniqueId(1), title: data.Title, type: 'selfurl', content: data.Html }, function () {
                    $("head").append('<link rel="stylesheet" type="text/css" href="'+ URL_APP +'middleware/assets/css/intranet/style.v'+ getUniqueId(1) +'.css"/>');
                });
            }
            Core.unblockUI();
        }
    });
}
function editGovernmentAttendance(selectedRow) {
    $.ajax({
        type: 'post',
        dataType: 'json',
        data: {selectedRow: selectedRow},
        url: 'government/editAttendance',
        beforeSend: function() {
            Core.blockUI({boxed: true, message: 'Loading...'});
        },
        success: function(data) {
            if (typeof data.status !== 'undefined') {
                new PNotify({
                    title: data.status,
                    text: data.text,
                    type: data.status,
                    sticker: false
                });  
            } else {
                appMultiTabByContent({ weburl: 'government/editattendance', metaDataId: 'government_editattendance', title: data.Title, type: 'selfurl', content: data.Html, tabReload: true }, function () {});
            }
            Core.unblockUI();
        }
    });    
}
function readMagCardProcess($elem, path) {
    if (typeof isPosAddonScript === 'undefined') {
        $.getScript(URL_APP + 'middleware/assets/js/pos/addon.js').done(function() {
            readMagCard($elem, path);
        });
    } else {
        readMagCard($elem, path);
    }        
}
function omsMeetingCalendar(){
    appMultiTab({ weburl: 'government/omsMeeting', metaDataId: '', title: 'Хурлын календар', type: 'selfurl', recordId: '', selectedRow: '' }, this, function(elem) {});
}
function bpFormValidate($form) {
    
    PNotify.removeAll();
    
    if (typeof tinymce !== 'undefined' && tinymce.editors.length) {
        tinymce.triggerSave();
    }
    
    if (typeof CKEDITOR !== 'undefined') {
        for (instance in CKEDITOR.instances) {
            CKEDITOR.instances[instance].updateElement();
        }
    }
                                
    $form.find('.fileInit:visible').each(function() {
        if ($(this).parent().find('input[type=hidden]').length && $(this).parent().find('input[type=hidden]').val()) {
            $(this).prop('required', false);
        }
    });
    
    $form.validate({
        ignore: '',
        highlight: function(element) {
            var $vel = $(element), $firstVisibleTab = $form.find('div.tab-pane.active:visible:has(.error):eq(0)');
        
            if ($vel.is(':radio')) {
                $vel.closest('.radio-list').addClass('error');
            } else {
                $vel.addClass('error');
                $vel.parent().addClass('error');
            }
            
            if ($firstVisibleTab.length == 0) {
                var $firstHiddenTab = $form.find('div.tab-pane:hidden:has(.error):eq(0)');
                
                if ($firstHiddenTab.length) {
                    var tabId = $firstHiddenTab.attr('id');
                    $form.find('a[href="#' + tabId + '"]').tab('show');
                }
            }
            
            if ($form.find("textarea.text_editorInit.error").length) {
                $form.find("textarea.text_editorInit.error").each(function(index, tab) {
                    $(tab).parent().find('> .mce-tinymce').addClass('error');
                });
            }
        },
        unhighlight: function(element) {
            var $vel = $(element);
            if ($vel.is(':radio')) {
                $vel.closest('.radio-list').removeClass('error');
            } else {
                $vel.removeClass('error');
                $vel.parent().removeClass('error');
            }
            if ($form.find("textarea.text_editorInit").length) {
                $form.find("textarea.text_editorInit").each(function(index, tab) {
                    if (!$(tab).hasClass('error')) {
                        $(tab).parent().find('> .mce-tinymce').removeClass('error');
                    }
                });
            }
        },
        errorPlacement: function() {}
    });
    
    var $glSection = $form.find('#glTemplateSectionProcess');
    
    if ($glSection.length) {
        var validGl = validateGlBook($glSection);
        if (validGl.status != 'success') {
            bpResultConsole('error', validGl.text);
            new PNotify({
                title: 'Error',
                text: validGl.text,
                type: 'error',
                sticker: false
            });
            return false;
        }
    }
    
    var isValidPattern = initBusinessProcessMaskEvent($form);
    
    if ($form.valid() && isValidPattern.length === 0) {
        return true;
    } else {
        return false;
    }
}
function packageReload(elem) {
    var $this = $(elem), $parentPackageMeta = $this.closest('.package-meta'), $parentWsPart = $();
    
    if ($parentPackageMeta.length) {
        $parentWsPart = $parentPackageMeta.parent('.workspace-part');
    } else {
        $parentWsPart = $this.closest('.workspace-part');
    }
    
    if ($parentWsPart.length) {
        var menuId = $parentWsPart.attr('data-menu-id'), $wsArea = $parentWsPart.closest('.ws-area'), 
            $wsMenu = $wsArea.find('.ws-menu');

        $parentWsPart.remove();
        $wsMenu.find('[data-menu-id="'+menuId+'"]').click();
    }
    
    return;
}
function packagePrint(elem) {
    var $parentPackageMeta = $(elem).closest('.package-meta'), $packageDivs = $parentPackageMeta.find('.package-div'), 
        packageDivsCount = $packageDivs.length;
    
    if (packageDivsCount) {
        
        Core.blockUI({message: 'Loading...', boxed: true}); 

        setTimeout(function() {

            $.when(
                $.cachedScript('assets/custom/addon/plugins/html2canvas/dom-to-image.js')
            ).then(function () {
                
                var $printHtml = $('<div />'), $title = $parentPackageMeta.closest('.intranet').find('#dv-twocol-view-title'), 
                    packageTitle = '';
                
                if ($title.length) {
                    packageTitle = $title.text();
                }
                
                if (packageTitle) {
                    $printHtml.html('<div style="font-family: Arial, Helvetica, sans-serif; font-size: 12px; text-align: center; font-weight: bold">'+packageTitle+'</div>');
                }
                
                packagePrintPromise(packageDivsCount, $packageDivs, 0, $printHtml);

            }, function () {
                console.log('an error occurred somewhere');
                Core.unblockUI();
            }); 
        }, 100);
    }
    
    return;
}
function packagePrintPromise(count, el, index, printEl) {
    
    var $this = el.eq(index), title = $this.find('.package-tab-name').text(),
        $packageContent = $this.find('.package-tab'), 
        $dv = $packageContent.find('[class*="div-objectdatagrid-"]'), 
        isOverflow = false;

    if ($dv.length && $dv.hasClass('not-datagrid')) {
        if ($dv.find('.dv-task-board').length) {
            node = $dv.find('.dv-task-board')[0];
            node.style.width = '100%';
            node.style.overflow = 'unset';
            isOverflow = true;
        } else {
            node = $dv[0];
        }
    } else {
        node = $packageContent[0];
    }

    domtoimage.toPng(node, {filter: htmlToImageTagFilter}).then(function(dataUrl) {  

        if (isOverflow) {
            $dv.find('.dv-task-board').css('overflow', 'auto');
        }

        printEl.append('<div style="page-break-before: auto !important; page-break-after: auto !important; page-break-inside: avoid !important;">'+
            '<h3 style="font-family: Arial, Helvetica, sans-serif; font-size: 10px;">' + title + '</h3>'+
            '<img src="' + dataUrl + '" style="width:100%;"/>'+
        '</div>');

        if (index === (count - 1)) {

            printEl.printThis({
                debug: false,
                importCSS: false,
                printContainer: false,
                removeInline: false
            });

            printEl.remove();
            Core.unblockUI();
            
        } else {
            packagePrintPromise(count, el, index + 1, printEl);
        }

    }).catch(function (error) {
        console.error('oops, something went wrong!', error);
    });
}

var signCloundMonpass;
// var cloudSignCheckInterval;
function cloudSignChangeWfmStatusId(elem, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName) {

    var rows = getDataViewSelectedRows(metaDataId);
    var row = rows[0];

    signCloundMonpass = function signCloundMonpass(frameData){

        $.ajax({
            type: 'post',
            url: 'mdpki/cloudSign',
            data: frameData,
            dataType: 'json',
            beforeSend: function() {
                Core.blockUI({message: 'Loading...', boxed: true});
            },
            success: function(responseData) {
                PNotify.removeAll();
    
                if (responseData.status === 'success') {
                    var funcArguments = [elem, wfmStatusId, metaDataId, refStructureId, newWfmStatusColor, newWfmStatusName];
                    var pushParam = {monpassUid: '', plainText: responseData.ciphertext, cyphertext: responseData.signedData}; 
                    funcArguments.push(pushParam); 
                    window['changeWfmStatusId'].apply(elem, funcArguments);
                    $('#callIframeCloudSignMonpass').empty().dialog('destroy').remove();
                } else {
                    new PNotify({
                        title: 'Error',
                        text: responseData.message,
                        type: 'error',
                        sticker: false
                    });
                }
                Core.unblockUI();
            }
        });
    };    

    $.ajax({
        type: 'post',
        url: 'mdpki/cloudSignPrepare',
        data: {param: row},
        dataType: 'json',
        beforeSend: function() {
            Core.blockUI({message: 'Loading...', boxed: true});
        },
        success: function(responseData) {
            PNotify.removeAll();

            if (responseData.status === 'success') { 
                iframe = '<iframe id="cloudsigniframe" src="https://sso.monpass.mn/sign?client_id=e229e0f5e591565516ca56a49d556953e2dc67&code='+responseData.code+'" height="100%" width="100%" frameBorder="0"></iframe>';
                if (!$('#callIframeCloudSignMonpass').length) {
                    var div = document.createElement("div");
                    div.id = 'callIframeCloudSignMonpass';
                    div.style = 'display: none';
                    document.body.appendChild(div);
                }
            
                var $clouddialog = $('#callIframeCloudSignMonpass');
                $clouddialog.empty();
                $clouddialog.append(iframe);
            
                $clouddialog.dialog({
                    cache: false,
                    resizable: false,
                    bgiframe: true,
                    autoOpen: false,
                    title: 'Cloud Sign',
                    width: 650,
                    height: 600,
                    modal: true,
                    open: function (event, ui) {
                        $clouddialog.css('overflow', 'hidden');                 
                        // cloudSignCheckInterval = setInterval(function(){ 
                        //     var iframeEl = document.getElementById('cloudsigniframe');
                        //     console.log(iframeEl.contentWindow.document.body.innerHTML);                               
                        // }, 3000);             
                        // var iframeWindow = document.getElementById("cloudsigniframe").contentWindow;

                        // iframeWindow.addEventListener("load", function() {
                        //     var doc = iframe.contentDocument || iframe.contentWindow.document;
                        //     console.log(doc);
                        // });                   
                    },
                    close: function () {
                        $clouddialog.empty().dialog('destroy').remove();
                        //clearInterval(cloudSignCheckInterval);
                    },
                    buttons: [{
                        text: plang.get('close_btn'), class: 'btn blue-madison btn-sm', click: function () {
                            $clouddialog.empty().dialog('destroy').remove();
                        }}
                    ]
                });
                $clouddialog.dialog('open');                
            } else {
                new PNotify({
                    title: 'Error',
                    text: responseData.message,
                    type: 'error',
                    sticker: false
                });
            }
            Core.unblockUI();
        }
    });
}
function commonSelectableGrid(metaCode, chooseType, elem, params, funcName) {
    var funcName = typeof funcName === 'undefined' ? 'selectableCommonDataGrid' : funcName;
    var $dialogName = 'dialog-commonselectable';
    if (!$("#" + $dialogName).length) {
        $('<div id="' + $dialogName + '"></div>').appendTo('body');
    }
    var $dialog = $("#" + $dialogName);

    $.ajax({
        type: 'post',
        url: 'mdmetadata/commonSelectableGrid',
        data: {metaCode: metaCode, chooseType: chooseType, params: params},
        dataType: "json",
        beforeSend: function () {
            Core.blockUI({animate: true});
        },
        success: function (data) {
            $dialog.empty().append(data.Html);
            $dialog.dialog({
                cache: false,
                resizable: false,
                bgiframe: true,
                autoOpen: false,
                title: data.Title,
                width: 1100,
                height: "auto",
                modal: true,
                position: {my: 'top', at: 'top+50'},
                close: function () {
                    $dialog.empty().dialog('close');
                },
                buttons: [
                    {text: data.addbasket_btn, class: 'btn green-meadow btn-sm pull-left', click: function () {
                        basketCommonSelectableDataGrid();
                    }},
                    {text: data.choose_btn, class: 'btn blue btn-sm', click: function () {
                        if (typeof (window[funcName]) === 'function') {
                            window[funcName](metaCode, chooseType, elem, params);
                        } else {
                            alert('Function undefined error: ' + funcName);
                        }
                        var countBasketList = $('#commonSelectableBasketDataGrid').datagrid('getData').total;
                        if (countBasketList > 0) {
                            $dialog.dialog('close');
                        }
                    }},
                    {text: data.close_btn, class: 'btn blue-hoki btn-sm', click: function () {
                        $dialog.dialog('close');
                    }}
                ]
            });
            $dialog.dialog('open');
            Core.unblockUI();
        },
        error: function () {
            alert("Error");
        }
    }).done(function () {
        Core.initAjax($dialog);
    });
}
function removeHtmlEditorByElement($element) {
    if ($element.find('textarea.text_editorInit').length) {
        $element.find('textarea.text_editorInit').each(function(){
            tinymce.get($(this).attr('id')).remove();
        });
    }
    return;
}
function renderAtom(row, path, positionConfig) {
    if (positionConfig.hasOwnProperty(path)) {
        var path = positionConfig[path]["row"]["fieldpath"].toLowerCase();

        if (empty(row)) {
            return path;
        }                   

        return row.hasOwnProperty(path) ? row[path] : '';
    } else {
        return '';
    }
}
function microFlowUpdateObject($obj, $id) {
    $obj.recordId = id;
    $.ajax({
         type: 'post',
         url: 'mdform/microUpdateClientObject',
         data: $obj,
         beforeSend: function() {
         },
         success: function(data) {
         },
         error: function() {
             alert('Error');
         }
     })    
}